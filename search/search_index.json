{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Clikt (pronounced \u201cclicked\u201d) is a multiplatform Kotlin library that makes writing command line interfaces simple and intuitive. It\u2019s the \u201cCommand Line Interface for Kotlin\u201d. It is designed to make the process of writing command line tools effortless while supporting a wide variety of use cases and allowing advanced customization when needed. Clikt has: arbitrary nesting of commands composable, type safe parameter values support for a wide variety of command line interface styles multiplatform packages for JVM, NodeJS, and native Linux, Windows and MacOS What does it look like? Here\u2019s a complete example of a simple Clikt program: class Hello : CliktCommand () { val count : Int by option ( help = \"Number of greetings\" ). int (). default ( 1 ) val name : String by option ( help = \"The person to greet\" ). prompt ( \"Your name\" ) override fun run () { repeat ( count ) { echo ( \"Hello $name!\" ) } } } fun main ( args : Array < String >) = Hello (). main ( args ) And here\u2019s what it looks like when run: $ ./hello --count=3 Your name: John Hello John! Hello John! Hello John! The help page is generated for you: $ ./hello --help Usage: hello [OPTIONS] Options: --count INT Number of greetings --name TEXT The person to greet -h, --help Show this message and exit Errors are also taken care of: $ ./hello --whoops Usage: hello [OPTIONS] Error: no such option: \"--whoops\". Installation \u00b6 Clikt is distributed through Maven Central . dependencies { implementation ( \"com.github.ajalt.clikt:clikt:3.0.0\" ) } In version 3.0, the maven coordinates changed. Make sure you\u2019re using the new coordinates if you\u2019re updating from an older version. \u00b6 Multiplatform \u00b6 Clikt supports the following targets: jvm , mingwX64 , linuxX64 , macosX64 , and js (for both NodeJS and Browsers). See the docs for more information about functionality supported on each target. You\u2019ll need to use Gradle 6 or newer. Snapshots \u00b6 Snapshot builds are also available You'll need to add the Sonatype snapshots repository: repositories { maven { url = uri ( \"https://oss.sonatype.org/content/repositories/snapshots/\" ) } } API Reference \u00b6 Commands and Exceptions Options Arguments Parameter Type Conversions Output Formatting","title":"Home"},{"location":"#installation","text":"Clikt is distributed through Maven Central . dependencies { implementation ( \"com.github.ajalt.clikt:clikt:3.0.0\" ) }","title":"Installation"},{"location":"#in-version-30-the-maven-coordinates-changed-make-sure-youre-using-the-new-coordinates-if-youre-updating-from-an-older-version","text":"","title":"In version 3.0, the maven coordinates changed. Make sure you're using the new coordinates if you're updating from an older version."},{"location":"#multiplatform","text":"Clikt supports the following targets: jvm , mingwX64 , linuxX64 , macosX64 , and js (for both NodeJS and Browsers). See the docs for more information about functionality supported on each target. You\u2019ll need to use Gradle 6 or newer.","title":"Multiplatform"},{"location":"#snapshots","text":"Snapshot builds are also available You'll need to add the Sonatype snapshots repository: repositories { maven { url = uri ( \"https://oss.sonatype.org/content/repositories/snapshots/\" ) } }","title":"Snapshots"},{"location":"#api-reference","text":"Commands and Exceptions Options Arguments Parameter Type Conversions Output Formatting","title":"API Reference"},{"location":"advanced/","text":"Advanced Patterns \u00b6 Clikt has reasonable behavior by default, but is also very customizable for advanced use cases. Command Aliases \u00b6 Clikt allows commands to alias command names to sequences of tokens. This allows you to implement common patterns like allowing the user to invoke a command by typing a prefix of its name, or user-defined aliases like the way you can configure git to accept git ci as an alias for git commit . To implement command aliases, override CliktCommand.aliases in your command. This function is called once at the start of parsing, and returns a map of aliases to the tokens that they alias to. To implement git-style aliases: Example class Repo : NoOpCliktCommand () { // You could load the aliases from a config file etc. override fun aliases (): Map < String , List < String >> = mapOf ( \"ci\" to listOf ( \"commit\" ), \"cm\" to listOf ( \"commit\" , \"-m\" ) ) } class Commit : CliktCommand () { val message by option ( \"-m\" ). default ( \"\" ) override fun run () { echo ( \"Committing with message: $message\" ) } } fun main ( args : Array < String >) = Repo (). subcommands ( Commit ()). main ( args ) Usage 1 $ ./repo ci -m 'my message' Committing with message: my message Usage 2 $ ./repo cm 'my message' Committing with message: my message Note that aliases are not expanded recursively: none of the tokens that an alias expands to will be expanded again, even if they match another alias. You also use this functionality to implement command prefixes: Example class Tool : NoOpCliktCommand () { override fun aliases (): Map < String , List < String >> { val prefixCounts = mutableMapOf < String , Int >(). withDefault { 0 } val prefixes = mutableMapOf < String , List < String >>() for ( name in registeredSubcommandNames ()) { if ( name . length < 3 ) continue for ( i in 1. . name . lastIndex ) { val prefix = name . substring ( 0. . i ) prefixCounts [ prefix ] = prefixCounts . getValue ( prefix ) + 1 prefixes [ prefix ] = listOf ( name ) } } return prefixes . filterKeys { prefixCounts . getValue ( it ) == 1 } } } class Foo : CliktCommand () { override fun run () { echo ( \"Running Foo\" ) } } class Bar : CliktCommand () { override fun run () { echo ( \"Running Bar\" ) } } fun main ( args : Array < String >) = Tool (). subcommands ( Foo (), Bar ()). main ( args ) Usage $ ./tool ba Running Bar Token Normalization \u00b6 To prevent ambiguities in parsing, aliases are only supported for command names. However, there\u2019s another way to modify user input that works on more types of tokens. You can set a tokenTransformer on the command\u2019s context that will be called for each option and command name that is input. This can be used to implement case-insensitive parsing, for example: Example class Hello : CliktCommand () { init { context { tokenTransformer = { it . toLowerCase () } } } val name by option () override fun run () = echo ( \"Hello $name!\" ) } Usage $ ./hello --NAME=Foo Hello Foo! Replacing stdin and stdout \u00b6 By default, functions like CliktCommand.main and option().prompt() read from System.in and write to System.out . If you want to use clikt in an environment where the standard streams aren\u2019t available, you can set your own implementation of CliktConsole when customizing the command context . object MyConsole : CliktConsole { override fun promptForLine ( prompt : String , hideInput : Boolean ): String ? { MyOutputStream . write ( prompt ) return if ( hideInput ) MyInputStream . readPassword () else MyInputStream . readLine () } override fun print ( text : String , error : Boolean ) { if ( error ) MyOutputStream . writeError ( prompt ) else MyOutputStream . write ( prompt ) } override val lineSeparator : String get () = \"\\n\" } class CustomCLI : NoOpCliktCommand () { init { context { console = MyConsole } } } If you are using TermUI directly, you can also pass your custom console as an argument. Command Line Argument Files (\u201c@-files\u201d) \u00b6 Similar to javac , Clikt supports loading command line parameters from a file using the \u201c@-file\u201d syntax. You can pass any file path to a command prefixed with @ , and the file will be expanded into the command line parameters. This can be useful on operating systems like Windows that have command line length limits. If you create a file named cliargs with content like this: --number 1 --name='jane doe' --age=30 ./file.txt You can call your command with the contents of the file like this: $ ./tool @cliargs Which is equivalent to calling it like this: $ ./tool --number 1 --name='jane doe' --age=30 ./file.txt You can use any file path after the @ , and can specify multiple @-files: $ ./tool @../config/args @C:\\\\Program\\ Files\\\\Tool\\\\argfile If you have any options with names that start with @ , you can still use @-files , but values on the command line that match an option will be parsed as that option, rather than an @-file , so you\u2019ll have to give your files a different name. Preventing @-file expansion \u00b6 If you want to use a value starting with @ as an argument without expanding it, you have three options: Pass it after a -- , which disables expansion for everything that occurs after it . Escape it with @@ . The first @ will be removed and the rest used as the argument value. For example, @@file will parse as the string @file Disable @-file expansion entirely by setting Context.expandArgumentFiles = false File format \u00b6 In argument files, normal shell quoting and escaping rules apply. Line breaks are treated as word separators, and can be used where you would normally use a space to separate parameters. Line breaks cannot occur within quotes. @-files can contain other @-file arguments, which will be expanded recursively. An unescaped # character outside of quotes is treated as a line comment: it and the rest of the line are skipped. You can pass a literal # by escaping it with \\# or quoting it with '#' . Testing your Clikt CLI \u00b6 CliktCommand.main calls exitProcess when invalid values are provided on the command line. In unit tests, you should instead call CliktCommand.parse , which throws exceptions with error details rather than printing the details and exiting the process. See the documentation on exceptions for more information. Custom exit status codes \u00b6 Clikt will normally exit your program with a status code of 0 for a normal execution, or 1 if there\u2019s an error. If you want to use a different value, you can throw ProgramResult(statusCode) . If you use CliktCommand.main , that exception will be caught and exitProcess will be called with the value of statusCode . You could also call exitProcess yourself, but the ProgramResult has a couple of advantages: ProgramResult is easier to test. Exiting the process makes unit tests difficult to run. ProgramResult works on all platforms. exitProcess is only available on the JVM. Multiplatform Support \u00b6 Clikt supports the following platforms in addition to JVM: Desktop native (Linux, Windows, and MacOS) \u00b6 All functionality is supported, except the env parameter of editText and editFile , and the hideInput parameter of prompt are ignored. NodeJS \u00b6 All functionality is supported, except the hideInput parameter of prompt is ignored. Browser JavaScript \u00b6 The default CliktConsole only outputs to the browser\u2019s developer console, which is probably not what you want. You can define your own CliktConsole , or you can call parse instead of main and handle output yourself. editText and editFile are not supported. prompt is only supported if you define your own CliktConsole.","title":"Advanced Patterns"},{"location":"advanced/#advanced-patterns","text":"Clikt has reasonable behavior by default, but is also very customizable for advanced use cases.","title":"Advanced Patterns"},{"location":"advanced/#command-aliases","text":"Clikt allows commands to alias command names to sequences of tokens. This allows you to implement common patterns like allowing the user to invoke a command by typing a prefix of its name, or user-defined aliases like the way you can configure git to accept git ci as an alias for git commit . To implement command aliases, override CliktCommand.aliases in your command. This function is called once at the start of parsing, and returns a map of aliases to the tokens that they alias to. To implement git-style aliases: Example class Repo : NoOpCliktCommand () { // You could load the aliases from a config file etc. override fun aliases (): Map < String , List < String >> = mapOf ( \"ci\" to listOf ( \"commit\" ), \"cm\" to listOf ( \"commit\" , \"-m\" ) ) } class Commit : CliktCommand () { val message by option ( \"-m\" ). default ( \"\" ) override fun run () { echo ( \"Committing with message: $message\" ) } } fun main ( args : Array < String >) = Repo (). subcommands ( Commit ()). main ( args ) Usage 1 $ ./repo ci -m 'my message' Committing with message: my message Usage 2 $ ./repo cm 'my message' Committing with message: my message Note that aliases are not expanded recursively: none of the tokens that an alias expands to will be expanded again, even if they match another alias. You also use this functionality to implement command prefixes: Example class Tool : NoOpCliktCommand () { override fun aliases (): Map < String , List < String >> { val prefixCounts = mutableMapOf < String , Int >(). withDefault { 0 } val prefixes = mutableMapOf < String , List < String >>() for ( name in registeredSubcommandNames ()) { if ( name . length < 3 ) continue for ( i in 1. . name . lastIndex ) { val prefix = name . substring ( 0. . i ) prefixCounts [ prefix ] = prefixCounts . getValue ( prefix ) + 1 prefixes [ prefix ] = listOf ( name ) } } return prefixes . filterKeys { prefixCounts . getValue ( it ) == 1 } } } class Foo : CliktCommand () { override fun run () { echo ( \"Running Foo\" ) } } class Bar : CliktCommand () { override fun run () { echo ( \"Running Bar\" ) } } fun main ( args : Array < String >) = Tool (). subcommands ( Foo (), Bar ()). main ( args ) Usage $ ./tool ba Running Bar","title":"Command Aliases"},{"location":"advanced/#token-normalization","text":"To prevent ambiguities in parsing, aliases are only supported for command names. However, there\u2019s another way to modify user input that works on more types of tokens. You can set a tokenTransformer on the command\u2019s context that will be called for each option and command name that is input. This can be used to implement case-insensitive parsing, for example: Example class Hello : CliktCommand () { init { context { tokenTransformer = { it . toLowerCase () } } } val name by option () override fun run () = echo ( \"Hello $name!\" ) } Usage $ ./hello --NAME=Foo Hello Foo!","title":"Token Normalization"},{"location":"advanced/#replacing-stdin-and-stdout","text":"By default, functions like CliktCommand.main and option().prompt() read from System.in and write to System.out . If you want to use clikt in an environment where the standard streams aren\u2019t available, you can set your own implementation of CliktConsole when customizing the command context . object MyConsole : CliktConsole { override fun promptForLine ( prompt : String , hideInput : Boolean ): String ? { MyOutputStream . write ( prompt ) return if ( hideInput ) MyInputStream . readPassword () else MyInputStream . readLine () } override fun print ( text : String , error : Boolean ) { if ( error ) MyOutputStream . writeError ( prompt ) else MyOutputStream . write ( prompt ) } override val lineSeparator : String get () = \"\\n\" } class CustomCLI : NoOpCliktCommand () { init { context { console = MyConsole } } } If you are using TermUI directly, you can also pass your custom console as an argument.","title":"Replacing stdin and stdout"},{"location":"advanced/#command-line-argument-files-files","text":"Similar to javac , Clikt supports loading command line parameters from a file using the \u201c@-file\u201d syntax. You can pass any file path to a command prefixed with @ , and the file will be expanded into the command line parameters. This can be useful on operating systems like Windows that have command line length limits. If you create a file named cliargs with content like this: --number 1 --name='jane doe' --age=30 ./file.txt You can call your command with the contents of the file like this: $ ./tool @cliargs Which is equivalent to calling it like this: $ ./tool --number 1 --name='jane doe' --age=30 ./file.txt You can use any file path after the @ , and can specify multiple @-files: $ ./tool @../config/args @C:\\\\Program\\ Files\\\\Tool\\\\argfile If you have any options with names that start with @ , you can still use @-files , but values on the command line that match an option will be parsed as that option, rather than an @-file , so you\u2019ll have to give your files a different name.","title":"Command Line Argument Files (\"@-files\")"},{"location":"advanced/#preventing-file-expansion","text":"If you want to use a value starting with @ as an argument without expanding it, you have three options: Pass it after a -- , which disables expansion for everything that occurs after it . Escape it with @@ . The first @ will be removed and the rest used as the argument value. For example, @@file will parse as the string @file Disable @-file expansion entirely by setting Context.expandArgumentFiles = false","title":"Preventing @-file expansion"},{"location":"advanced/#file-format","text":"In argument files, normal shell quoting and escaping rules apply. Line breaks are treated as word separators, and can be used where you would normally use a space to separate parameters. Line breaks cannot occur within quotes. @-files can contain other @-file arguments, which will be expanded recursively. An unescaped # character outside of quotes is treated as a line comment: it and the rest of the line are skipped. You can pass a literal # by escaping it with \\# or quoting it with '#' .","title":"File format"},{"location":"advanced/#testing-your-clikt-cli","text":"CliktCommand.main calls exitProcess when invalid values are provided on the command line. In unit tests, you should instead call CliktCommand.parse , which throws exceptions with error details rather than printing the details and exiting the process. See the documentation on exceptions for more information.","title":"Testing your Clikt CLI"},{"location":"advanced/#custom-exit-status-codes","text":"Clikt will normally exit your program with a status code of 0 for a normal execution, or 1 if there\u2019s an error. If you want to use a different value, you can throw ProgramResult(statusCode) . If you use CliktCommand.main , that exception will be caught and exitProcess will be called with the value of statusCode . You could also call exitProcess yourself, but the ProgramResult has a couple of advantages: ProgramResult is easier to test. Exiting the process makes unit tests difficult to run. ProgramResult works on all platforms. exitProcess is only available on the JVM.","title":"Custom exit status codes"},{"location":"advanced/#multiplatform-support","text":"Clikt supports the following platforms in addition to JVM:","title":"Multiplatform Support"},{"location":"advanced/#desktop-native-linux-windows-and-macos","text":"All functionality is supported, except the env parameter of editText and editFile , and the hideInput parameter of prompt are ignored.","title":"Desktop native (Linux, Windows, and MacOS)"},{"location":"advanced/#nodejs","text":"All functionality is supported, except the hideInput parameter of prompt is ignored.","title":"NodeJS"},{"location":"advanced/#browser-javascript","text":"The default CliktConsole only outputs to the browser\u2019s developer console, which is probably not what you want. You can define your own CliktConsole , or you can call parse instead of main and handle output yourself. editText and editFile are not supported. prompt is only supported if you define your own CliktConsole.","title":"Browser JavaScript"},{"location":"arguments/","text":"Arguments \u00b6 Arguments are declared and customized similarly to options , but are provided on the command line positionally instead of by name. Arguments are declared with argument() , and the order that they are declared defines the order that they must be provided on the command line. Basic Arguments \u00b6 By default, argument takes a single String value which is required to be provided on the command line. Example class Hello : CliktCommand () { val name by argument () override fun run () { echo ( \"Hello $name!\" ) } } Usage $ ./hello Foo Hello Foo! Arguments appear in the usage string, but normally aren\u2019t listed in the help page. It\u2019s usually more clear to document arguments in the command help. Example class Cp : CliktCommand ( help = \"Copy SOURCE to DEST, or multiple SOURCE(s) to directory DEST.\" ) { private val source by argument (). file ( mustExist = true ). multiple () private val dest by argument (). file () override fun run () { // ... } } Help Output Usage: cp [OPTIONS] [SOURCE]... DEST Copy SOURCE to DEST, or multiple SOURCE(s) to directory DEST. Options: -h, --help Show this message and exit Variadic Arguments \u00b6 Like options , arguments can take any fixed number of values, which you can change with functions like pair and triple . Unlike options, arguments can also take a variable (or unlimited) number of values. This is common with file path arguments, since they are frequently expanded with a glob pattern on the command line. Variadic arguments are declared with multiple . You can declare any number of arguments with fixed numbers of values, but only one variadic argument in a command. Example class Copy : CliktCommand () { val source : List < Path > by argument (). path ( mustExist = true ). multiple () val dest : Path by argument (). path ( canBeFile = false ) override fun run () { echo ( \"Copying files $source to $dest\" ) } } Usage $ ./copy file.* out/ Copying files [file.txt, file.md] to out/ You can also use unique to discard duplicates: val source : Set < Path > by argument (). path ( mustExist = true ). multiple (). unique () Option-Like Arguments (Using -- ) \u00b6 Clikt normally parses any value that starts with punctuation as an option, which allows users to intermix options and arguments. However, sometimes you need to pass a value that starts with punctuation to an argument. For example, you might have a file named -file.txt that you want to use as an argument. Clikt supports the POSIX convention of using -- to force all following values to be treated as arguments. Any values before the -- will be parsed normally. Example class Touch : CliktCommand () { val verbose by option (). flag () val files by argument (). multiple () override fun run () { if ( verbose ) echo ( files . joinToString ( \"\\n\" )) } } Usage 1 $ ./touch --foo.txt Usage: touch [OPTIONS] [FILES]... Error: no such option: \"--foo.txt\". Usage 2 $ ./touch --verbose -- --foo.txt bar.txt --foo.txt bar.txt","title":"Arguments"},{"location":"arguments/#arguments","text":"Arguments are declared and customized similarly to options , but are provided on the command line positionally instead of by name. Arguments are declared with argument() , and the order that they are declared defines the order that they must be provided on the command line.","title":"Arguments"},{"location":"arguments/#basic-arguments","text":"By default, argument takes a single String value which is required to be provided on the command line. Example class Hello : CliktCommand () { val name by argument () override fun run () { echo ( \"Hello $name!\" ) } } Usage $ ./hello Foo Hello Foo! Arguments appear in the usage string, but normally aren\u2019t listed in the help page. It\u2019s usually more clear to document arguments in the command help. Example class Cp : CliktCommand ( help = \"Copy SOURCE to DEST, or multiple SOURCE(s) to directory DEST.\" ) { private val source by argument (). file ( mustExist = true ). multiple () private val dest by argument (). file () override fun run () { // ... } } Help Output Usage: cp [OPTIONS] [SOURCE]... DEST Copy SOURCE to DEST, or multiple SOURCE(s) to directory DEST. Options: -h, --help Show this message and exit","title":"Basic Arguments"},{"location":"arguments/#variadic-arguments","text":"Like options , arguments can take any fixed number of values, which you can change with functions like pair and triple . Unlike options, arguments can also take a variable (or unlimited) number of values. This is common with file path arguments, since they are frequently expanded with a glob pattern on the command line. Variadic arguments are declared with multiple . You can declare any number of arguments with fixed numbers of values, but only one variadic argument in a command. Example class Copy : CliktCommand () { val source : List < Path > by argument (). path ( mustExist = true ). multiple () val dest : Path by argument (). path ( canBeFile = false ) override fun run () { echo ( \"Copying files $source to $dest\" ) } } Usage $ ./copy file.* out/ Copying files [file.txt, file.md] to out/ You can also use unique to discard duplicates: val source : Set < Path > by argument (). path ( mustExist = true ). multiple (). unique ()","title":"Variadic Arguments"},{"location":"arguments/#option-like-arguments-using-","text":"Clikt normally parses any value that starts with punctuation as an option, which allows users to intermix options and arguments. However, sometimes you need to pass a value that starts with punctuation to an argument. For example, you might have a file named -file.txt that you want to use as an argument. Clikt supports the POSIX convention of using -- to force all following values to be treated as arguments. Any values before the -- will be parsed normally. Example class Touch : CliktCommand () { val verbose by option (). flag () val files by argument (). multiple () override fun run () { if ( verbose ) echo ( files . joinToString ( \"\\n\" )) } } Usage 1 $ ./touch --foo.txt Usage: touch [OPTIONS] [FILES]... Error: no such option: \"--foo.txt\". Usage 2 $ ./touch --verbose -- --foo.txt bar.txt --foo.txt bar.txt","title":"Option-Like Arguments (Using --)"},{"location":"autocomplete/","text":"Bash Autocomplete \u00b6 Clikt includes built-in support for generating autocomplete scripts for bash and zsh. Supported Functionality \u00b6 Currently subcommand, option, and command alias names can be completed, as well as values for options and arguments. choice parameters are completed with their possible values. Other parameter types are completed as file or directory names. Context.allowInterspersedArgs is supported. Example $ ./repo <TAB><TAB> commit clone pull $ ./repo -<TAB> --config -h --help --repo-home --verbose $./repo --repo-home ./g<TAB> ./git ./got ./good Enabling Completion \u00b6 Clikt handles autocomplete by generating a shell script that defines the completion. You generate the script once each time your CLI changes, and load it each time your start your shell. To generate the shell script, you need to invoke your program with a special environment variable. You can set the variable name manually with the autoCompleteEnvvar parameter in the CliktCommand constructor . By default it\u2019s your command\u2019s name capitalized, with - replaced with _ , and prefixed with another _ . So if your command name is my-command , the variable would be _MY_COMMAND_COMPLETE=bash or _MY_COMMAND_COMPLETE=zsh , depending on your current shell. For example to activate bash autocomplete for this command: class MyProgram : CliktCommand () { // ... } You can generate the completion script and save it to a file like this: $ _MY_PROGRAM_COMPLETE = bash ./my-program > ~/my-program-completion.sh Finally, source the file to activate completion: $ source ~/my-program-completion.sh You can add that source command to your .bashrc so that completion is always available: $ echo source ~/my-program-completion.sh >> ~/.bashrc You\u2019ll need to regenerate the completion script any time your command structure changes. Customizing Completions \u00b6 There is built-in completion for values for choice parameters, and for parameters converted with file and path . You can add completion for other parameters with the completionCandidates parameter to option() and argument() . The value can be one of the following: None : The default. The parameter\u2019s values will not be completed. Path : Completions will be filesystem paths. Hostname : Completions will be read from the system\u2019s hosts file. Username : Completions will be taken from the system\u2019s users. Fixed : Completions are given as a fixed set of strings. Custom : Completions are generated from a custom script. Custom completion candidates \u00b6 The Custom type takes a block that returns code to add to the script which generates completions for the given parameter. If you just want to call another script or binary that prints all possible completion words to stdout, you can use fromStdout . Both Bash and ZSH scripts use Bash\u2019s Programmable Completion system (ZSH via a comparability layer). The string returned from [generator] should be the body of a function that will be passed to compgen -F . Specifically, you should set the variable COMPREPLY to the completion(s) for the current word being typed. The word being typed can be retrieved from the COMP_WORDS array at index COMP_CWORD . Example with fromStdout class Hello : CliktCommand () { // This example uses `echo`, but you would use your own binary // or script that prints the completions. val name by option ( completionCandidates = CompletionCandidates . Custom . fromStdout ( \"echo completion1 completion2\" ) ) override fun run () { echo ( \"Hello, $name!\" ) } } Example with full script class Hello : CliktCommand () { // This is identical to the previous example val name by option ( completionCandidates = CompletionCandidates . Custom { \"\"\" WORDS=${'$'}(echo completion1 completion2) COMPREPLY=(${'$'}(compgen -W \"${'$'}WORDS\" -- \"${'$'}{COMP_WORDS[${'$'}COMP_CWORD]}\")) \"\"\" . trimIndent () }) override fun run () { echo ( \"Hello, $name!\" ) } } Limitations \u00b6 Token Normalization is not supported. If you have arguments that occur after a multiple argument, those arguments won\u2019t be autocompleted. Partial command lines are ambiguous in those situations, and Clikt assumes that you\u2019re trying to complete the multiple argument rather than the later ones. Bash must be at least version 3, or Zsh must be at least version 4.1.","title":"Bash Autocomplete"},{"location":"autocomplete/#bash-autocomplete","text":"Clikt includes built-in support for generating autocomplete scripts for bash and zsh.","title":"Bash Autocomplete"},{"location":"autocomplete/#supported-functionality","text":"Currently subcommand, option, and command alias names can be completed, as well as values for options and arguments. choice parameters are completed with their possible values. Other parameter types are completed as file or directory names. Context.allowInterspersedArgs is supported. Example $ ./repo <TAB><TAB> commit clone pull $ ./repo -<TAB> --config -h --help --repo-home --verbose $./repo --repo-home ./g<TAB> ./git ./got ./good","title":"Supported Functionality"},{"location":"autocomplete/#enabling-completion","text":"Clikt handles autocomplete by generating a shell script that defines the completion. You generate the script once each time your CLI changes, and load it each time your start your shell. To generate the shell script, you need to invoke your program with a special environment variable. You can set the variable name manually with the autoCompleteEnvvar parameter in the CliktCommand constructor . By default it\u2019s your command\u2019s name capitalized, with - replaced with _ , and prefixed with another _ . So if your command name is my-command , the variable would be _MY_COMMAND_COMPLETE=bash or _MY_COMMAND_COMPLETE=zsh , depending on your current shell. For example to activate bash autocomplete for this command: class MyProgram : CliktCommand () { // ... } You can generate the completion script and save it to a file like this: $ _MY_PROGRAM_COMPLETE = bash ./my-program > ~/my-program-completion.sh Finally, source the file to activate completion: $ source ~/my-program-completion.sh You can add that source command to your .bashrc so that completion is always available: $ echo source ~/my-program-completion.sh >> ~/.bashrc You\u2019ll need to regenerate the completion script any time your command structure changes.","title":"Enabling Completion"},{"location":"autocomplete/#customizing-completions","text":"There is built-in completion for values for choice parameters, and for parameters converted with file and path . You can add completion for other parameters with the completionCandidates parameter to option() and argument() . The value can be one of the following: None : The default. The parameter\u2019s values will not be completed. Path : Completions will be filesystem paths. Hostname : Completions will be read from the system\u2019s hosts file. Username : Completions will be taken from the system\u2019s users. Fixed : Completions are given as a fixed set of strings. Custom : Completions are generated from a custom script.","title":"Customizing Completions"},{"location":"autocomplete/#custom-completion-candidates","text":"The Custom type takes a block that returns code to add to the script which generates completions for the given parameter. If you just want to call another script or binary that prints all possible completion words to stdout, you can use fromStdout . Both Bash and ZSH scripts use Bash\u2019s Programmable Completion system (ZSH via a comparability layer). The string returned from [generator] should be the body of a function that will be passed to compgen -F . Specifically, you should set the variable COMPREPLY to the completion(s) for the current word being typed. The word being typed can be retrieved from the COMP_WORDS array at index COMP_CWORD . Example with fromStdout class Hello : CliktCommand () { // This example uses `echo`, but you would use your own binary // or script that prints the completions. val name by option ( completionCandidates = CompletionCandidates . Custom . fromStdout ( \"echo completion1 completion2\" ) ) override fun run () { echo ( \"Hello, $name!\" ) } } Example with full script class Hello : CliktCommand () { // This is identical to the previous example val name by option ( completionCandidates = CompletionCandidates . Custom { \"\"\" WORDS=${'$'}(echo completion1 completion2) COMPREPLY=(${'$'}(compgen -W \"${'$'}WORDS\" -- \"${'$'}{COMP_WORDS[${'$'}COMP_CWORD]}\")) \"\"\" . trimIndent () }) override fun run () { echo ( \"Hello, $name!\" ) } }","title":"Custom completion candidates"},{"location":"autocomplete/#limitations","text":"Token Normalization is not supported. If you have arguments that occur after a multiple argument, those arguments won\u2019t be autocompleted. Partial command lines are ambiguous in those situations, and Clikt assumes that you\u2019re trying to complete the multiple argument rather than the later ones. Bash must be at least version 3, or Zsh must be at least version 4.1.","title":"Limitations"},{"location":"changelog/","text":"3.0.0 \u00b6 2020-09-02 Added \u00b6 Clikt\u2019s JS target now supports both NodeJS and Browsers. ( #198 ) Default values for switch options are now shown in the help. Help text can be customized using the defaultForHelp argument, similar to normal options. ( #205 ) Added FlagOption.convert ( #208 ) Added ability to use unicode NEL character ( \\u0085 ) to manually break lines in help output ( #214 ) Added help(\"\") extension to options and arguments as an alternative to passing the help as an argument ( #207 ) Added valueSourceKey parameter to option Added check() extensions to options and arguments as an alternative to validate() Added prompt and confirm functions to CliktCommand that call the TermUi equivalents with the current console. Added echo() overload with no parameters to CliktCommand that prints a newline by itself. Added localization support. You can set an implementation of the Localization interface on your context with your translations. ( #227 ) Fixed \u00b6 Hidden options will no longer be suggested as possible typo corrections. ( #202 ) Options and Arguments with multiple(required=true) will now show as required in help output. ( #212 ) Multiple short lines in a help text paragraph no longer appear dedented ( #215 ) Changed \u00b6 Updated Kotlin to 1.4.0 Argument.help and Option.help properties have been renamed to argumentHelp and optionHelp , respectively. The help parameter names to option() and argument() are unchanged. commandHelp and commandHelpEpilog properties on CliktCommand are now open , so you can choose to override them instead of passing help and epilog to the constructor. Replaced MapValueSource.defaultKey with ValueSource.getKey() , which is more customizable. Option.metavar , Option.parameterHelp , OptionGroup.parameterHelp and Argument.parameterHelp properties are now functions. Changed constructor parameters of CliktHelpFormatter . Added localization and removed usageTitle , optionsTitle , argumentsTitle , commandsTitle , optionsMetavar , and commandMetavar . Those strings are now defined on equivalently named functions on Localization . Removed \u00b6 Removed envvarSplit parameter from option() and convert() . Option values from environment variables are no longer split automatically. ( #177 ) Removed public constructors from the following classes: ProcessedArgument , OptionWithValues , FlagOption , CoOccurringOptionGroup , ChoiceGroup , MutuallyExclusiveOptions . MissingParameter exception replaced with MissingOption and MissingArgument Removed Context.helpOptionMessage . Override Localization.helpOptionMessage and set it on your context instead. Deprecated \u00b6 @ExperimentalCompletionCandidates and @ExperimentalValueSourceApi annotations. These APIs no longer require an opt-in. 2.8.0 \u00b6 2020-06-19 Added \u00b6 Added error parameter to PrintMessage and PrintHelpMessage . When true , CliktCommand.main will exit with status code 1. ( #187 ) Changed \u00b6 When printHelpOnEmptyArgs is true and no arguments are present, or when invokeWithoutSubcommand is false and no subcommand is present, CliktCommand.main will now exit with status code 1 rather than 0. restrictTo now works with any Comparable value, not just Number . CliktCommand.main now accepts Array<out String> , not just Array<String> . ( #196 ) Fixed \u00b6 Fixed option values being reset when calling multiple subcommands with allowMultipleSubcommands=true ( #190 ) 2.7.1 \u00b6 2020-05-19 Fixed \u00b6 Fixed NPE thrown in some cases when using defaultByName ( #179 ) 2.7.0 \u00b6 2020-05-13 Added \u00b6 Ability to use custom program exit status codes via ProgramResult . inputStream and outputStream conversions for options and arguments. ( #157 and #159 ) splitPair , toMap , and associate extensions on option . ( #166 ) treatUnknownOptionsAsArgs parameter to CliktCommand . ( #152 ) defaultByName function for groupChoice and groupSwitch options. ( #171 ) Changed \u00b6 Update Kotlin to 1.3.71 Improved command name inference. Now, a class like MyAppCommand will infer its commandName as my-app rather than myappcommand . You can still specify the name manually as before. ([#168][ https://github.com/ajalt/clikt/pull/168 ]) Fixed \u00b6 Correctly parse short options with attached values that contain = 2.6.0 \u00b6 2020-03-15 Added \u00b6 registeredSubcommands , registeredOptions , registeredArguments , and registeredParameterGroups methods on CliktCommand . Ability to read default option values from configuration files and other sources. Support for Java property files is built in on JVM, see the json sample for an example of reading from other formats. allowMultipleSubcommands parameter to CliktCommand that allows you to pass multiple subcommands in the same call. ( docs ) Errors from typos in subcommand names will now include suggested corrections. Corrections for options and subcommands are now based on a Jaro-Winkler similarity metric, and can be customized with Context.correctionSuggestor Changed \u00b6 Update Kotlin to 1.3.70 convert can be called more than once on the same option or argument, including after calls to conversion functions like int and file . CliktCommand.toString now includes the class name Reverted automatic ~ expansion in file() and path() introduced in 2.5.0. If you need this behavior, you can implement it with code like convert { /* expand tidle */ }.file() Deprecated \u00b6 wrapValue is now deprecated, since convert can be used in its place instead. 2.5.0 \u00b6 2020-02-22 Added \u00b6 Clikt is now available as a Kotlin Multiplatform Project, supporting JVM, NodeJS, and native Windows, Linux, and macOS. eagerOption {} function to more easily register eager options. Eager options can now be added to option groups in help out by passing a value for groupName when creating them. canBeSymlink parameter to file() and path() conversions that can be used to disallow symlinks CliktCommand.eagerOption to simplify creating custom eager options Changed \u00b6 The parameter names of file() and path() conversions have changed. The existing names are deprecated, and can be converted to the new usages with an IntelliJ inspection. Note that if you are calling these functions with unnamed arguments (e.g. file(true, false) ), you\u2019ll need to add argument names in order to remove the deprecation warning. Deprecated \u00b6 The CliktCommand.context property has been deprecated in favor of the new name, currentContext , to avoid confusion with the CliktCommand.context{} method. NoRunCliktCommand was renamed to NoOpCliktCommand . The existing class is deprecated. ( #130 ) Fixed \u00b6 file() and path() conversions will now properly expand leading ~ in paths to the home directory for mustExist , canBeFile , and canBeDir checks. The property value is unchanged, and can still begin with a ~ . ( #131 ) 2.4.0 \u00b6 2020-01-25 Added \u00b6 CompletionCandidates.Fixed now has a secondary convenience constructor that take a vararg of String s CompletionCadidates.Custom , which allows you to call other binaries or write a script to generate completions. This class is currently experimental. ( #79 ) Option.wrapValue and Argument.wrapValue to make it easier to reuse existing conversion functions. ignoreCase parameter to choice() and enum() conversion functions. Changed \u00b6 option() and argument() now take optional completionCandidates parameters to override how completion is generated. The constructor and copy functions of OptionsWithValues and ProcessedArgument have changed to support default values. The overloads of findObject ( 1 2 ) that take a default value have been renamed findOrSetObject . The existing names are marked with @Deprecated , and IntelliJ can convert your callsites automatically. ( #110 ) enum() parameters now accept case-insensitive values by default. You change this behavior by passing ignoreCase = false to enum() ( #115 ) Fixed \u00b6 groupChoice help output now includes the choices in the help output metavar TermUi.edit* functions could freeze on certain editors ( #99 , thanks @iampravikant and @sebokopter) Shell completion can now handle command names with dashes. ( #104 ) Arguments with = in them could be incorrectly interpreted as options ( #106 ) 2.3.0 \u00b6 2019-11-07 Added \u00b6 option().groupSwitch() , which works like groupChoice() , but uses a switch() option rather than a choice() option. UsageError now has a statusCode parameter (which defaults to 1). If you\u2019re using ClicktCommand.main , the value of statusCode will be passed to exitProcess . Changed \u00b6 Shell completion code is now printed by throwing a PrintCompletionMessage (a subclass of PrintMessage ) rather than calling echo directly. 2.2.0 \u00b6 2019-09-25 Added \u00b6 Added enum() conversion for options and arguments. ( #84 ) Changed \u00b6 There are now several ways of preventing @-file expansion Fixed \u00b6 Help output missing items when no help text is specified. ( #85 ) Help output not grouping options in groups passed to groupChoice . ( #88 ) 2.1.0 \u00b6 2019-05-23 Added \u00b6 Ability to prevent rewrapping individual paragraphs in help output. Added parameter required to Option.multiple() to require at least one instance of the option on the command line. Changed \u00b6 CliktCommand.toString() now includes the names and values of all parameters and subcommands. Fixed \u00b6 Create subcommand context when helpOptionNames is empty. ( #64 ) 2.0.0 \u00b6 2019-05-12 Added \u00b6 Bash autocomplete script generation . A property named completionCandidates has been added to Argument and Option interfaces, and corresponding parameters have been added to the various implementation constructors, as well as the convert functions. You can use this to control the values autocomplete that will be suggested. option().split() , and the corresponding OptionWithValues.valueSplit . Marking options as deprecated with option().deprecated() You can manually set the pattern to split envvars on by passing a pattern to the envvarSplit parameter of option() Option groups , mutually exclusive groups , co-occurring groups , and choice options with groups Support for Command line argument files a.k.a \u201c@-files\u201d Changed \u00b6 If multiple -- tokens are present on the command line, all subsequent occurrences after the first are now parsed as positional arguments. Previously, subsequent -- tokens were skipped. The PlaintextHelpFormatter has been replaced with CliktHelpFormatter , which is more customizable. See the docs for more info, or the new sample for an example of customizing help output to use ANSI colors. Some of the properties and constructor parameters for OptionWithValues and ProcessedArgument have changed. The OptionDelegate interface has changed, and GroupableOption and ParameterHolder interfaces have been added to work with option groups. Parameter validation now occurs after all parameter delegates have set their values, so the lambdas passed to validate may reference other parameters. 1.7.0 \u00b6 2019-03-23 Added \u00b6 printHelpOnEmptyArgs parameter to CliktCommand constructor. ( #41 ) Fixed \u00b6 Usage errors now correctly print subcommand names. ( #47 ) Arguments with multiple(required=true) now report an error if no argument is given on the command line. ( #36 ) 1.6.0 \u00b6 2018-12-02 Added \u00b6 .multiple().unique() modifier for options and arguments. Fixed \u00b6 Support multi-line input when redirecting stdin 1.5.0 \u00b6 2018-08-26 Added \u00b6 Ability to use alternate output streams rather than stdin and stdout by setting Context.console or by passing a console to TermUI functions. 1.4.0 \u00b6 2018-07-31 Added \u00b6 path() type for parameter values Changed \u00b6 Clikt now targets JVM 8 bytecode Responses to TermUi.confirm() are now case-insensitive 1.3.0 \u00b6 2018-06-23 Added \u00b6 defaultLazy extension for options and arguments Changed \u00b6 main now prints messages to stderr instead of stdout Fixed \u00b6 Parameter help messages are now wrapped more consistently 1.2.0 \u00b6 2018-05-07 Added \u00b6 Default parameter to option().default() Changed \u00b6 Treat tokens with unknown prefixes as arguments (this makes it easier to pass in file paths without using -- ). 1.1.0 \u00b6 2018-04-15 Added \u00b6 List<String> overloads to CliktCommand.parse and main err parameter to TermUi.echo error property to Abort","title":"Change Log"},{"location":"changelog/#300","text":"2020-09-02","title":"3.0.0"},{"location":"changelog/#added","text":"Clikt\u2019s JS target now supports both NodeJS and Browsers. ( #198 ) Default values for switch options are now shown in the help. Help text can be customized using the defaultForHelp argument, similar to normal options. ( #205 ) Added FlagOption.convert ( #208 ) Added ability to use unicode NEL character ( \\u0085 ) to manually break lines in help output ( #214 ) Added help(\"\") extension to options and arguments as an alternative to passing the help as an argument ( #207 ) Added valueSourceKey parameter to option Added check() extensions to options and arguments as an alternative to validate() Added prompt and confirm functions to CliktCommand that call the TermUi equivalents with the current console. Added echo() overload with no parameters to CliktCommand that prints a newline by itself. Added localization support. You can set an implementation of the Localization interface on your context with your translations. ( #227 )","title":"Added"},{"location":"changelog/#fixed","text":"Hidden options will no longer be suggested as possible typo corrections. ( #202 ) Options and Arguments with multiple(required=true) will now show as required in help output. ( #212 ) Multiple short lines in a help text paragraph no longer appear dedented ( #215 )","title":"Fixed"},{"location":"changelog/#changed","text":"Updated Kotlin to 1.4.0 Argument.help and Option.help properties have been renamed to argumentHelp and optionHelp , respectively. The help parameter names to option() and argument() are unchanged. commandHelp and commandHelpEpilog properties on CliktCommand are now open , so you can choose to override them instead of passing help and epilog to the constructor. Replaced MapValueSource.defaultKey with ValueSource.getKey() , which is more customizable. Option.metavar , Option.parameterHelp , OptionGroup.parameterHelp and Argument.parameterHelp properties are now functions. Changed constructor parameters of CliktHelpFormatter . Added localization and removed usageTitle , optionsTitle , argumentsTitle , commandsTitle , optionsMetavar , and commandMetavar . Those strings are now defined on equivalently named functions on Localization .","title":"Changed"},{"location":"changelog/#removed","text":"Removed envvarSplit parameter from option() and convert() . Option values from environment variables are no longer split automatically. ( #177 ) Removed public constructors from the following classes: ProcessedArgument , OptionWithValues , FlagOption , CoOccurringOptionGroup , ChoiceGroup , MutuallyExclusiveOptions . MissingParameter exception replaced with MissingOption and MissingArgument Removed Context.helpOptionMessage . Override Localization.helpOptionMessage and set it on your context instead.","title":"Removed"},{"location":"changelog/#deprecated","text":"@ExperimentalCompletionCandidates and @ExperimentalValueSourceApi annotations. These APIs no longer require an opt-in.","title":"Deprecated"},{"location":"changelog/#280","text":"2020-06-19","title":"2.8.0"},{"location":"changelog/#added_1","text":"Added error parameter to PrintMessage and PrintHelpMessage . When true , CliktCommand.main will exit with status code 1. ( #187 )","title":"Added"},{"location":"changelog/#changed_1","text":"When printHelpOnEmptyArgs is true and no arguments are present, or when invokeWithoutSubcommand is false and no subcommand is present, CliktCommand.main will now exit with status code 1 rather than 0. restrictTo now works with any Comparable value, not just Number . CliktCommand.main now accepts Array<out String> , not just Array<String> . ( #196 )","title":"Changed"},{"location":"changelog/#fixed_1","text":"Fixed option values being reset when calling multiple subcommands with allowMultipleSubcommands=true ( #190 )","title":"Fixed"},{"location":"changelog/#271","text":"2020-05-19","title":"2.7.1"},{"location":"changelog/#fixed_2","text":"Fixed NPE thrown in some cases when using defaultByName ( #179 )","title":"Fixed"},{"location":"changelog/#270","text":"2020-05-13","title":"2.7.0"},{"location":"changelog/#added_2","text":"Ability to use custom program exit status codes via ProgramResult . inputStream and outputStream conversions for options and arguments. ( #157 and #159 ) splitPair , toMap , and associate extensions on option . ( #166 ) treatUnknownOptionsAsArgs parameter to CliktCommand . ( #152 ) defaultByName function for groupChoice and groupSwitch options. ( #171 )","title":"Added"},{"location":"changelog/#changed_2","text":"Update Kotlin to 1.3.71 Improved command name inference. Now, a class like MyAppCommand will infer its commandName as my-app rather than myappcommand . You can still specify the name manually as before. ([#168][ https://github.com/ajalt/clikt/pull/168 ])","title":"Changed"},{"location":"changelog/#fixed_3","text":"Correctly parse short options with attached values that contain =","title":"Fixed"},{"location":"changelog/#260","text":"2020-03-15","title":"2.6.0"},{"location":"changelog/#added_3","text":"registeredSubcommands , registeredOptions , registeredArguments , and registeredParameterGroups methods on CliktCommand . Ability to read default option values from configuration files and other sources. Support for Java property files is built in on JVM, see the json sample for an example of reading from other formats. allowMultipleSubcommands parameter to CliktCommand that allows you to pass multiple subcommands in the same call. ( docs ) Errors from typos in subcommand names will now include suggested corrections. Corrections for options and subcommands are now based on a Jaro-Winkler similarity metric, and can be customized with Context.correctionSuggestor","title":"Added"},{"location":"changelog/#changed_3","text":"Update Kotlin to 1.3.70 convert can be called more than once on the same option or argument, including after calls to conversion functions like int and file . CliktCommand.toString now includes the class name Reverted automatic ~ expansion in file() and path() introduced in 2.5.0. If you need this behavior, you can implement it with code like convert { /* expand tidle */ }.file()","title":"Changed"},{"location":"changelog/#deprecated_1","text":"wrapValue is now deprecated, since convert can be used in its place instead.","title":"Deprecated"},{"location":"changelog/#250","text":"2020-02-22","title":"2.5.0"},{"location":"changelog/#added_4","text":"Clikt is now available as a Kotlin Multiplatform Project, supporting JVM, NodeJS, and native Windows, Linux, and macOS. eagerOption {} function to more easily register eager options. Eager options can now be added to option groups in help out by passing a value for groupName when creating them. canBeSymlink parameter to file() and path() conversions that can be used to disallow symlinks CliktCommand.eagerOption to simplify creating custom eager options","title":"Added"},{"location":"changelog/#changed_4","text":"The parameter names of file() and path() conversions have changed. The existing names are deprecated, and can be converted to the new usages with an IntelliJ inspection. Note that if you are calling these functions with unnamed arguments (e.g. file(true, false) ), you\u2019ll need to add argument names in order to remove the deprecation warning.","title":"Changed"},{"location":"changelog/#deprecated_2","text":"The CliktCommand.context property has been deprecated in favor of the new name, currentContext , to avoid confusion with the CliktCommand.context{} method. NoRunCliktCommand was renamed to NoOpCliktCommand . The existing class is deprecated. ( #130 )","title":"Deprecated"},{"location":"changelog/#fixed_4","text":"file() and path() conversions will now properly expand leading ~ in paths to the home directory for mustExist , canBeFile , and canBeDir checks. The property value is unchanged, and can still begin with a ~ . ( #131 )","title":"Fixed"},{"location":"changelog/#240","text":"2020-01-25","title":"2.4.0"},{"location":"changelog/#added_5","text":"CompletionCandidates.Fixed now has a secondary convenience constructor that take a vararg of String s CompletionCadidates.Custom , which allows you to call other binaries or write a script to generate completions. This class is currently experimental. ( #79 ) Option.wrapValue and Argument.wrapValue to make it easier to reuse existing conversion functions. ignoreCase parameter to choice() and enum() conversion functions.","title":"Added"},{"location":"changelog/#changed_5","text":"option() and argument() now take optional completionCandidates parameters to override how completion is generated. The constructor and copy functions of OptionsWithValues and ProcessedArgument have changed to support default values. The overloads of findObject ( 1 2 ) that take a default value have been renamed findOrSetObject . The existing names are marked with @Deprecated , and IntelliJ can convert your callsites automatically. ( #110 ) enum() parameters now accept case-insensitive values by default. You change this behavior by passing ignoreCase = false to enum() ( #115 )","title":"Changed"},{"location":"changelog/#fixed_5","text":"groupChoice help output now includes the choices in the help output metavar TermUi.edit* functions could freeze on certain editors ( #99 , thanks @iampravikant and @sebokopter) Shell completion can now handle command names with dashes. ( #104 ) Arguments with = in them could be incorrectly interpreted as options ( #106 )","title":"Fixed"},{"location":"changelog/#230","text":"2019-11-07","title":"2.3.0"},{"location":"changelog/#added_6","text":"option().groupSwitch() , which works like groupChoice() , but uses a switch() option rather than a choice() option. UsageError now has a statusCode parameter (which defaults to 1). If you\u2019re using ClicktCommand.main , the value of statusCode will be passed to exitProcess .","title":"Added"},{"location":"changelog/#changed_6","text":"Shell completion code is now printed by throwing a PrintCompletionMessage (a subclass of PrintMessage ) rather than calling echo directly.","title":"Changed"},{"location":"changelog/#220","text":"2019-09-25","title":"2.2.0"},{"location":"changelog/#added_7","text":"Added enum() conversion for options and arguments. ( #84 )","title":"Added"},{"location":"changelog/#changed_7","text":"There are now several ways of preventing @-file expansion","title":"Changed"},{"location":"changelog/#fixed_6","text":"Help output missing items when no help text is specified. ( #85 ) Help output not grouping options in groups passed to groupChoice . ( #88 )","title":"Fixed"},{"location":"changelog/#210","text":"2019-05-23","title":"2.1.0"},{"location":"changelog/#added_8","text":"Ability to prevent rewrapping individual paragraphs in help output. Added parameter required to Option.multiple() to require at least one instance of the option on the command line.","title":"Added"},{"location":"changelog/#changed_8","text":"CliktCommand.toString() now includes the names and values of all parameters and subcommands.","title":"Changed"},{"location":"changelog/#fixed_7","text":"Create subcommand context when helpOptionNames is empty. ( #64 )","title":"Fixed"},{"location":"changelog/#200","text":"2019-05-12","title":"2.0.0"},{"location":"changelog/#added_9","text":"Bash autocomplete script generation . A property named completionCandidates has been added to Argument and Option interfaces, and corresponding parameters have been added to the various implementation constructors, as well as the convert functions. You can use this to control the values autocomplete that will be suggested. option().split() , and the corresponding OptionWithValues.valueSplit . Marking options as deprecated with option().deprecated() You can manually set the pattern to split envvars on by passing a pattern to the envvarSplit parameter of option() Option groups , mutually exclusive groups , co-occurring groups , and choice options with groups Support for Command line argument files a.k.a \u201c@-files\u201d","title":"Added"},{"location":"changelog/#changed_9","text":"If multiple -- tokens are present on the command line, all subsequent occurrences after the first are now parsed as positional arguments. Previously, subsequent -- tokens were skipped. The PlaintextHelpFormatter has been replaced with CliktHelpFormatter , which is more customizable. See the docs for more info, or the new sample for an example of customizing help output to use ANSI colors. Some of the properties and constructor parameters for OptionWithValues and ProcessedArgument have changed. The OptionDelegate interface has changed, and GroupableOption and ParameterHolder interfaces have been added to work with option groups. Parameter validation now occurs after all parameter delegates have set their values, so the lambdas passed to validate may reference other parameters.","title":"Changed"},{"location":"changelog/#170","text":"2019-03-23","title":"1.7.0"},{"location":"changelog/#added_10","text":"printHelpOnEmptyArgs parameter to CliktCommand constructor. ( #41 )","title":"Added"},{"location":"changelog/#fixed_8","text":"Usage errors now correctly print subcommand names. ( #47 ) Arguments with multiple(required=true) now report an error if no argument is given on the command line. ( #36 )","title":"Fixed"},{"location":"changelog/#160","text":"2018-12-02","title":"1.6.0"},{"location":"changelog/#added_11","text":".multiple().unique() modifier for options and arguments.","title":"Added"},{"location":"changelog/#fixed_9","text":"Support multi-line input when redirecting stdin","title":"Fixed"},{"location":"changelog/#150","text":"2018-08-26","title":"1.5.0"},{"location":"changelog/#added_12","text":"Ability to use alternate output streams rather than stdin and stdout by setting Context.console or by passing a console to TermUI functions.","title":"Added"},{"location":"changelog/#140","text":"2018-07-31","title":"1.4.0"},{"location":"changelog/#added_13","text":"path() type for parameter values","title":"Added"},{"location":"changelog/#changed_10","text":"Clikt now targets JVM 8 bytecode Responses to TermUi.confirm() are now case-insensitive","title":"Changed"},{"location":"changelog/#130","text":"2018-06-23","title":"1.3.0"},{"location":"changelog/#added_14","text":"defaultLazy extension for options and arguments","title":"Added"},{"location":"changelog/#changed_11","text":"main now prints messages to stderr instead of stdout","title":"Changed"},{"location":"changelog/#fixed_10","text":"Parameter help messages are now wrapped more consistently","title":"Fixed"},{"location":"changelog/#120","text":"2018-05-07","title":"1.2.0"},{"location":"changelog/#added_15","text":"Default parameter to option().default()","title":"Added"},{"location":"changelog/#changed_12","text":"Treat tokens with unknown prefixes as arguments (this makes it easier to pass in file paths without using -- ).","title":"Changed"},{"location":"changelog/#110","text":"2018-04-15","title":"1.1.0"},{"location":"changelog/#added_16","text":"List<String> overloads to CliktCommand.parse and main err parameter to TermUi.echo error property to Abort","title":"Added"},{"location":"commands/","text":"Commands \u00b6 Clikt supports arbitrarily nested commands. You can add one command as a child of another with the subcommands function, which can be called either in an init block, or on an existing instance. Executing Nested Commands \u00b6 For commands with no children, run is called whenever the command line is parsed (unless parsing is aborted from an error or an option like --help ). If a command has children, this isn\u2019t the case. Instead, its run is called only if a child command is invoked, just before the subcommand\u2019s run . If a parent command is called without specifying a subcommand, the help page is printed and run is not called. Example class Tool : CliktCommand () { val verbose by option (). flag ( \"--no-verbose\" ) override fun run () { echo ( \"Verbose mode is ${if (verbose) \" on \" else \" off \"}\" ) } } class Execute : CliktCommand () { override fun run () { echo ( \"executing\" ) } } fun main ( args : Array < String >) = Tool (). subcommands ( Execute ()). main ( args ) Usage 1 $ ./tool Usage: tool [OPTIONS] COMMAND [ARGS]... Options: --verbose / --no-verbose -h, --help Show this message and exit Commands: execute Usage 2 $ ./tool --verbose execute Verbose mode is on executing Customizing Command Name \u00b6 The default name for subcommands is inferred as a lowercase name from the command class name. You can also set a name manually in the CliktCommand constructor. Example class Tool : CliktCommand () { override fun run ()= Unit } class Execute : CliktCommand ( name = \"RUN-ME\" ) { override fun run () { echo ( \"executing\" ) } } fun main ( args : Array < String >) = Tool (). subcommands ( Execute ()). main ( args ) Usage 1 $ ./tool RUN-ME executing Usage 2 $ ./tool -h Usage: tool [OPTIONS] COMMAND [ARGS]... Options: -h, --help Show this message and exit Commands: RUN-ME Passing Parameters \u00b6 When calling subcommands, the position of options and arguments on the command line affect which command will parse them. A parameter is parsed by a command if it occurs after the command name, but before any other command names. Example class Tool : CliktCommand ( help = \"A tool that runs\" ) { val verbose by option (). flag ( \"--no-verbose\" ) override fun run () = Unit } class Execute : CliktCommand ( help = \"Execute the command\" ) { val name by option () override fun run () = Unit } fun main ( args : Array < String >) = Tool (). subcommands ( Execute ()). main ( args ) Usage $ ./tool --help Usage: tool [OPTIONS] COMMAND [ARGS]... A tool that runs Options: --verbose / --no-verbose -h, --help Show this message and exit Commands: execute Execute the command If you instead execute --help after the subcommand, the subcommand\u2019s help is printed: $ ./tool execute --help Usage: execute [OPTIONS] Execute the command Options: --name TEXT -h, --help Show this message and exit But executing ./tool --help execute , with the option before the subcommand, will cause the parent\u2019s help option to be invoked, printing out Tool \u2018s help page as if you just typed ./tool --help . Nested Handling And Contexts \u00b6 Normally nested command are independent of each other: a child can\u2019t access its parent\u2019s parameters. This makes composing commands much easier, but what if you want to pass information to a child command? You can do so with the command\u2019s Context . Every time the command line is parsed, each command creates a new context object for itself that is linked to its parent\u2019s context. Context objects have a number of properties that can be used to customize command line parsing. Although each command creates its own context, the configuration is inherited from the parent context. Context objects also have an obj property that can hold any user defined data. You can use the obj to create interfaces like this: Example class Tool : CliktCommand () { val verbose by option (). flag ( \"--no-verbose\" ) val config by findOrSetObject { mutableMapOf < String , String >() } override fun run () { config [ \"VERBOSE\" ] = if ( verbose ) \"on\" else \"off\" } } class Execute : CliktCommand () { val config by requireObject < Map < String , String >>() override fun run () { echo ( \"Verbose mode is ${config[\" VERBOSE \"]}\" ) } } fun main ( args : Array < String >) = Tool (). subcommands ( Execute ()). main ( args ) Usage $ ./tool --verbose execute Verbose mode is on The findObject , findOrSetObject , and requireObject functions will walk up the context tree until they find an object with the given type. If no such object exists, they will either return null , throw an exception, or create an instance of the object and store it on the command\u2019s context, depending on which function you call. Note that findOrSetObject won\u2019t set the Context\u2019s object until it\u2019s property value is accessed. If you need to set an object for subcommands without accessing the property, you should use the [ Context.findOrSetObject ] instead. Running Parent Command Without Children \u00b6 Normally, if a command has children, run is not called unless a child command is invoked on the command line. Instead, --help is called on the parent. If you want to change this behavior to always call run() on the parent, you can do so by setting invokeWithoutSubcommand to true . The Context will then have information on the subcommand that is about to be invoked, if there is one. Example class Tool : CliktCommand ( invokeWithoutSubcommand = true ) { override fun run () { val subcommand = currentContext . invokedSubcommand if ( subcommand == null ) { echo ( \"invoked without a subcommand\" ) } else { echo ( \"about to run ${subcommand.commandName}\" ) } } } class Execute : CliktCommand () { override fun run () { echo ( \"running subcommand\" ) } } fun main ( args : Array < String >) = Tool (). subcommands ( Execute ()). main ( args ) Usage 1 $ ./tool invoked without a subcommand Usage 2 $./tool execute about to run execute running subcommand Customizing Contexts \u00b6 Contexts have a number of properties that can be customized, and which are inherited by child commands. You can change these properties with the context builder function, which can be called in an init block, or on a command instance. For example, you can change the name of help option. These definitions are equivalent: Version 1 class Cli : NoOpCliktCommand () { init { context { helpOptionNames = setOf ( \"/help\" ) } } } fun main ( args : Array < String >) = Cli () Version 2 class Cli : NoOpCliktCommand () fun main ( args : Array < String >) = Cli () . context { helpOptionNames = setOf ( \"/help\" ) } . main ( args ) Usage $ ./cli --help Usage: cli [OPTIONS] Options: -h, --help print the help Printing the Help Message When No Arguments Are Given \u00b6 Normally, if a command is called with no values on the command line, a usage error is printed if there are required parameters, or run is called if there aren\u2019t any. You can change this behavior by passing printHelpOnEmptyArgs = true to your command\u2019s constructor. This will cause a help message to be printed when no values are provided on the command line, regardless of the parameters in your command. Example class Cli : CliktCommand ( printHelpOnEmptyArgs = true ) { val arg by argument () override fun run () { echo ( \"Command ran\" ) } } Usage $ ./cli Usage: cli [OPTIONS] Options: -h, --help print the help Warnings and Other Messages \u00b6 When you want to show information to the user, you\u2019ll usually want to use the functions for printing to stdout directly. However, there\u2019s another mechanism that can be useful when writing reusable parameter code: command messages. These messages are buffered during parsing and printed all at once immediately before a command\u2019s run is called. They are not printed if there are any errors in parsing. This type of message is used by Clikt for deprecating options . You can issue a command message by calling CliktCommand.issueMessage or with the message function available in the context of parameter transformers. Example class Cli : CliktCommand () { // This will print the warning when the option is given, but not if there are errors val opt by option (). validate { if ( it . isEmpty ()) message ( \"Empty strings are not recommended\" ) } override fun run () { echo ( \"command run\" ) } } Usage 1 $ ./cli --opt='' Empty strings are not recommended command run Usage 2 $ ./cli --opt='' --oops Error: no such option: \"--oops\". You can disable automatic message printing on the command\u2019s context : Example class Cli : CliktCommand () { init { context { printExtraMessages = false } } val opt by option (). validate { if ( it . isEmpty ()) message ( \"Empty strings are not recommended\" ) } override fun run () { echo ( \"command run\" ) } } Usage $ ./cli --opt='' command run Chaining and Repeating Subcommands \u00b6 Some command line interfaces allow you to call more than one subcommand at a time. For example, you might do something like gradle clean build publish to run the clean task, then the build task, then the publish task, which are all subcommands of gradle . To do this with Clikt, pass allowMultipleSubcommands = true to your CliktCommand constructor. Example class Compiler : CliktCommand ( allowMultipleSubcommands = true ) { override fun run () { echo ( \"Running compiler\" ) } } class Clean : CliktCommand () { val force by option (). flag () override fun run () { echo ( \"Cleaning (force=$force)\" ) } } class Build : CliktCommand () { val file by argument (). file () override fun run () { echo ( \"Building $file\" ) } } fun main ( args : Array < String >) = Compiler (). subcommands ( Clean (), Build ()). main ( args ) Usage $ ./compiler clean --force build main.kt Running compiler Cleaning (force=true) Building main.kt The parent command will run once, and each subcommand will run once each time they\u2019re called. Parsing multiple subcommands \u00b6 Note that enabling allowMultipleSubcommands will disable allowInterspersedArgs on the command and all its subcommands. If both were allowed to be enabled at the same time, then not all command lines could be parsed unambiguously. When parsing in this mode, tokens are consumed greedily by a subcommand until it encounters an argument token it doesn\u2019t support, at which point the parent command resumes parsing where the subcommand left off. This means that if you have a subcommand with an argument().multiple() parameter, you won\u2019t be able to call any other subcommands after that one, since it will consume the rest of the command line. Subcommands of a command with allowMultipleSubcommands=true can themselves have subcommands, but cannot have allowMultipleSubcommands=true .","title":"Commands"},{"location":"commands/#commands","text":"Clikt supports arbitrarily nested commands. You can add one command as a child of another with the subcommands function, which can be called either in an init block, or on an existing instance.","title":"Commands"},{"location":"commands/#executing-nested-commands","text":"For commands with no children, run is called whenever the command line is parsed (unless parsing is aborted from an error or an option like --help ). If a command has children, this isn\u2019t the case. Instead, its run is called only if a child command is invoked, just before the subcommand\u2019s run . If a parent command is called without specifying a subcommand, the help page is printed and run is not called. Example class Tool : CliktCommand () { val verbose by option (). flag ( \"--no-verbose\" ) override fun run () { echo ( \"Verbose mode is ${if (verbose) \" on \" else \" off \"}\" ) } } class Execute : CliktCommand () { override fun run () { echo ( \"executing\" ) } } fun main ( args : Array < String >) = Tool (). subcommands ( Execute ()). main ( args ) Usage 1 $ ./tool Usage: tool [OPTIONS] COMMAND [ARGS]... Options: --verbose / --no-verbose -h, --help Show this message and exit Commands: execute Usage 2 $ ./tool --verbose execute Verbose mode is on executing","title":"Executing Nested Commands"},{"location":"commands/#customizing-command-name","text":"The default name for subcommands is inferred as a lowercase name from the command class name. You can also set a name manually in the CliktCommand constructor. Example class Tool : CliktCommand () { override fun run ()= Unit } class Execute : CliktCommand ( name = \"RUN-ME\" ) { override fun run () { echo ( \"executing\" ) } } fun main ( args : Array < String >) = Tool (). subcommands ( Execute ()). main ( args ) Usage 1 $ ./tool RUN-ME executing Usage 2 $ ./tool -h Usage: tool [OPTIONS] COMMAND [ARGS]... Options: -h, --help Show this message and exit Commands: RUN-ME","title":"Customizing Command Name"},{"location":"commands/#passing-parameters","text":"When calling subcommands, the position of options and arguments on the command line affect which command will parse them. A parameter is parsed by a command if it occurs after the command name, but before any other command names. Example class Tool : CliktCommand ( help = \"A tool that runs\" ) { val verbose by option (). flag ( \"--no-verbose\" ) override fun run () = Unit } class Execute : CliktCommand ( help = \"Execute the command\" ) { val name by option () override fun run () = Unit } fun main ( args : Array < String >) = Tool (). subcommands ( Execute ()). main ( args ) Usage $ ./tool --help Usage: tool [OPTIONS] COMMAND [ARGS]... A tool that runs Options: --verbose / --no-verbose -h, --help Show this message and exit Commands: execute Execute the command If you instead execute --help after the subcommand, the subcommand\u2019s help is printed: $ ./tool execute --help Usage: execute [OPTIONS] Execute the command Options: --name TEXT -h, --help Show this message and exit But executing ./tool --help execute , with the option before the subcommand, will cause the parent\u2019s help option to be invoked, printing out Tool \u2018s help page as if you just typed ./tool --help .","title":"Passing Parameters"},{"location":"commands/#nested-handling-and-contexts","text":"Normally nested command are independent of each other: a child can\u2019t access its parent\u2019s parameters. This makes composing commands much easier, but what if you want to pass information to a child command? You can do so with the command\u2019s Context . Every time the command line is parsed, each command creates a new context object for itself that is linked to its parent\u2019s context. Context objects have a number of properties that can be used to customize command line parsing. Although each command creates its own context, the configuration is inherited from the parent context. Context objects also have an obj property that can hold any user defined data. You can use the obj to create interfaces like this: Example class Tool : CliktCommand () { val verbose by option (). flag ( \"--no-verbose\" ) val config by findOrSetObject { mutableMapOf < String , String >() } override fun run () { config [ \"VERBOSE\" ] = if ( verbose ) \"on\" else \"off\" } } class Execute : CliktCommand () { val config by requireObject < Map < String , String >>() override fun run () { echo ( \"Verbose mode is ${config[\" VERBOSE \"]}\" ) } } fun main ( args : Array < String >) = Tool (). subcommands ( Execute ()). main ( args ) Usage $ ./tool --verbose execute Verbose mode is on The findObject , findOrSetObject , and requireObject functions will walk up the context tree until they find an object with the given type. If no such object exists, they will either return null , throw an exception, or create an instance of the object and store it on the command\u2019s context, depending on which function you call. Note that findOrSetObject won\u2019t set the Context\u2019s object until it\u2019s property value is accessed. If you need to set an object for subcommands without accessing the property, you should use the [ Context.findOrSetObject ] instead.","title":"Nested Handling And Contexts"},{"location":"commands/#running-parent-command-without-children","text":"Normally, if a command has children, run is not called unless a child command is invoked on the command line. Instead, --help is called on the parent. If you want to change this behavior to always call run() on the parent, you can do so by setting invokeWithoutSubcommand to true . The Context will then have information on the subcommand that is about to be invoked, if there is one. Example class Tool : CliktCommand ( invokeWithoutSubcommand = true ) { override fun run () { val subcommand = currentContext . invokedSubcommand if ( subcommand == null ) { echo ( \"invoked without a subcommand\" ) } else { echo ( \"about to run ${subcommand.commandName}\" ) } } } class Execute : CliktCommand () { override fun run () { echo ( \"running subcommand\" ) } } fun main ( args : Array < String >) = Tool (). subcommands ( Execute ()). main ( args ) Usage 1 $ ./tool invoked without a subcommand Usage 2 $./tool execute about to run execute running subcommand","title":"Running Parent Command Without Children"},{"location":"commands/#customizing-contexts","text":"Contexts have a number of properties that can be customized, and which are inherited by child commands. You can change these properties with the context builder function, which can be called in an init block, or on a command instance. For example, you can change the name of help option. These definitions are equivalent: Version 1 class Cli : NoOpCliktCommand () { init { context { helpOptionNames = setOf ( \"/help\" ) } } } fun main ( args : Array < String >) = Cli () Version 2 class Cli : NoOpCliktCommand () fun main ( args : Array < String >) = Cli () . context { helpOptionNames = setOf ( \"/help\" ) } . main ( args ) Usage $ ./cli --help Usage: cli [OPTIONS] Options: -h, --help print the help","title":"Customizing Contexts"},{"location":"commands/#printing-the-help-message-when-no-arguments-are-given","text":"Normally, if a command is called with no values on the command line, a usage error is printed if there are required parameters, or run is called if there aren\u2019t any. You can change this behavior by passing printHelpOnEmptyArgs = true to your command\u2019s constructor. This will cause a help message to be printed when no values are provided on the command line, regardless of the parameters in your command. Example class Cli : CliktCommand ( printHelpOnEmptyArgs = true ) { val arg by argument () override fun run () { echo ( \"Command ran\" ) } } Usage $ ./cli Usage: cli [OPTIONS] Options: -h, --help print the help","title":"Printing the Help Message When No Arguments Are Given"},{"location":"commands/#warnings-and-other-messages","text":"When you want to show information to the user, you\u2019ll usually want to use the functions for printing to stdout directly. However, there\u2019s another mechanism that can be useful when writing reusable parameter code: command messages. These messages are buffered during parsing and printed all at once immediately before a command\u2019s run is called. They are not printed if there are any errors in parsing. This type of message is used by Clikt for deprecating options . You can issue a command message by calling CliktCommand.issueMessage or with the message function available in the context of parameter transformers. Example class Cli : CliktCommand () { // This will print the warning when the option is given, but not if there are errors val opt by option (). validate { if ( it . isEmpty ()) message ( \"Empty strings are not recommended\" ) } override fun run () { echo ( \"command run\" ) } } Usage 1 $ ./cli --opt='' Empty strings are not recommended command run Usage 2 $ ./cli --opt='' --oops Error: no such option: \"--oops\". You can disable automatic message printing on the command\u2019s context : Example class Cli : CliktCommand () { init { context { printExtraMessages = false } } val opt by option (). validate { if ( it . isEmpty ()) message ( \"Empty strings are not recommended\" ) } override fun run () { echo ( \"command run\" ) } } Usage $ ./cli --opt='' command run","title":"Warnings and Other Messages"},{"location":"commands/#chaining-and-repeating-subcommands","text":"Some command line interfaces allow you to call more than one subcommand at a time. For example, you might do something like gradle clean build publish to run the clean task, then the build task, then the publish task, which are all subcommands of gradle . To do this with Clikt, pass allowMultipleSubcommands = true to your CliktCommand constructor. Example class Compiler : CliktCommand ( allowMultipleSubcommands = true ) { override fun run () { echo ( \"Running compiler\" ) } } class Clean : CliktCommand () { val force by option (). flag () override fun run () { echo ( \"Cleaning (force=$force)\" ) } } class Build : CliktCommand () { val file by argument (). file () override fun run () { echo ( \"Building $file\" ) } } fun main ( args : Array < String >) = Compiler (). subcommands ( Clean (), Build ()). main ( args ) Usage $ ./compiler clean --force build main.kt Running compiler Cleaning (force=true) Building main.kt The parent command will run once, and each subcommand will run once each time they\u2019re called.","title":"Chaining and Repeating Subcommands"},{"location":"commands/#parsing-multiple-subcommands","text":"Note that enabling allowMultipleSubcommands will disable allowInterspersedArgs on the command and all its subcommands. If both were allowed to be enabled at the same time, then not all command lines could be parsed unambiguously. When parsing in this mode, tokens are consumed greedily by a subcommand until it encounters an argument token it doesn\u2019t support, at which point the parent command resumes parsing where the subcommand left off. This means that if you have a subcommand with an argument().multiple() parameter, you won\u2019t be able to call any other subcommands after that one, since it will consume the rest of the command line. Subcommands of a command with allowMultipleSubcommands=true can themselves have subcommands, but cannot have allowMultipleSubcommands=true .","title":"Parsing multiple subcommands"},{"location":"documenting/","text":"Documenting Scripts \u00b6 Clikt takes care of creating formatted help messages for commands. There are a number of ways to customize the default behavior. You can also implement your own HelpFormatter and set it on the command\u2019s context . Help Texts \u00b6 Commands and parameters accept a help argument. Commands also accept an epilog argument, which is printed after the parameters and commands on the help page. All text is automatically trimmed of leading indentation and re-wrapped to the terminal width. As an alternative to passing your help strings as function arguments, you can also use the help() extensions for your options, and override commandHelp and commandHelpEpilog on your commands. Example class Hello : CliktCommand ( help = \"\"\" This script prints NAME COUNT times. COUNT must be a positive number, and defaults to 1. \"\"\" ) { val count by option ( \"-c\" , \"--count\" , metavar = \"COUNT\" , help = \"number of greetings\" ). int (). default ( 1 ) val name by argument () override fun run () = repeat ( count ) { echo ( \"Hello $name!\" ) } } Alternate style class Hello : CliktCommand () { override val commandHelp = \"\"\" This script prints NAME COUNT times. COUNT must be a positive number, and defaults to 1. \"\"\" val count by option ( \"-c\" , \"--count\" , metavar = \"COUNT\" ). int (). default ( 1 ) . help ( \"number of greetings\" ) val name by argument () override fun run () = repeat ( count ) { echo ( \"Hello $name!\" ) } } Help output $ ./hello --help Usage: hello [OPTIONS] NAME This script prints NAME COUNT times. COUNT must be a positive number, and defaults to 1. Options: -c, --count COUNT number of greetings -h, --help Show this message and exit Option names and metavars will appear in help output even if no help string is specified for them. On the other hand, arguments only appear in the usage string. It is possible to add a help string to arguments which will be added to the help page, but the Unix convention is to just describe arguments in the command help. Preformatting Paragraphs \u00b6 By default, Clikt will rewrap all paragraphs in your text to the terminal width. This can be undesirable if you have some preformatted text, such as source code or a bulleted list. You can preformat a paragraph by surrounding it with markdown-style triple backticks. The backticks will be removed from the output, and if the backticks are on a line by themselves, the line will be removed. All whitespace and newlines in the paragraph will be preserved, and will be be rewrapped. Example class Tool : NoOpCliktCommand ( help = \"\"\"This is my command. This paragraph will be wrapped, but the following list will not: ``` - This is a list - Its newlines will remain intact ``` This is a new paragraph that will be wrapped if it's wider than the teminal width. \"\"\" ) Help output Usage: tool This is my command. This paragraph will be wrapped, but the following list will not: - This is a list - It's newlines will remain intact This is a new paragraph that will be wrapped if it's wider than the terminal width. Options: -h, --help Show this message and exit Manual Line Breaks \u00b6 If you want to insert a line break manually without preformmating the entire paragraph, you can use the Unicode Next Line (NEL) character . You can type a NEL with the unicode literal \\u0085 . Clikt will treat NEL similarly to how <br> behaves in HTML: The NEL will be replaced with a line break in the output, and the paragraph will still be wrapped to the terminal width. Example class Tool : NoOpCliktCommand () { val option by option ( help = \"This help will be at least two lines.\\u0085(this will start a new line)\" ) } Help output Usage: tool Options: --option This help will be at least two lines. (this will start a new line) -h, --help Show this message and exit Subcommand Short Help \u00b6 Subcommands are listed in the help page based on their name . They have a short help string which is the first line of their help. Example class Tool : NoOpCliktCommand () class Execute : NoOpCliktCommand ( help = \"\"\" Execute the command. The command will be executed. \"\"\" ) class Abort : NoOpCliktCommand ( help = \"Kill any running commands.\" ) Usage $ ./tool --help Usage: tool [OPTIONS] COMMAND [ARGS]... Options: -h, --help Show this message and exit Commands: execute Execute the command. abort Kill any running commands. Help Option Customization \u00b6 Clikt handles the help option is specially. It is added automatically to every command. Any help option name that conflicts with another option is not used for the help option. If the help option has no unique names, it is not added. You can change the help option\u2019s name and help message on the command\u2019s context : Example class HelpLocalization : Localization { override fun helpOptionMessage (): String = \"show the help\" } class Tool : NoOpCliktCommand () { init { context { helpOptionNames = setOf ( \"/help\" ) localization = HelpLocalization () } } } Usage $ ./tool /help Usage: tool [OPTIONS] Options: /help show the help If you don\u2019t want a help option to be added, you can set helpOptionNames = emptySet() Default Values in Help \u00b6 You can configure the help formatter to show default values in the help output by passing showRequiredTag = true to the CliktHelpFormatter . By default, the string value of the default value will be shown. You can show a different value by passing the value you want to show to the defaultForHelp parameter of default . Example class Tool : NoOpCliktCommand () { init { context { helpFormatter = CliktHelpFormatter ( showDefaultValues = true ) } } val a by option ( help = \"this is optional\" ). default ( \"value\" ) val b by option ( help = \"this is also optional\" ). default ( \"value\" , defaultForHelp = \"chosen for you\" ) } Usage $ ./tool --help Usage: tool [OPTIONS] Options: --a TEXT this is optional (default: value) --b TEXT this is also optional (default: chosen for you) Required Options in Help \u00b6 By default, required options are displayed the same way as other options. The help formatter includes two different ways to show that an option is required. Required Option Marker \u00b6 You can pass a character to the requiredOptionMarker argument of the CliktHelpFormatter . Example class Tool : NoOpCliktCommand () { init { context { helpFormatter = CliktHelpFormatter ( requiredOptionMarker = \"*\" ) } } val option by option ( help = \"this is optional\" ) val required by option ( help = \"this is required\" ). required () } Usage $ ./tool --help Usage: tool [OPTIONS] Options: --option TEXT this is optional * --required TEXT this is required -h, --help Show this message and exit Required Option Tag \u00b6 You can also show a tag for required options by passing showRequiredTag = true to the CliktHelpFormatter . Example class Tool : CliktCommand () { init { context { helpFormatter = CliktHelpFormatter ( showRequiredTag = true ) } } val option by option ( help = \"this is optional\" ) val required by option ( help = \"this is required\" ). required () } Usage $ ./tool --help Usage: tool [OPTIONS] Options: --option TEXT this is optional --required TEXT this is required (required) -h, --help Show this message and exit Grouping Options in Help \u00b6 You can group options into separate help sections by using OptionGroup . The name of the group will be shown in the output. You can also add an extra help message to be shown with the group. Groups can\u2019t be nested. Example class UserOptions : OptionGroup ( name = \"User Options\" , help = \"Options controlling the user\" ) { val name by option ( help = \"user name\" ) val age by option ( help = \"user age\" ). int () } class Tool : NoOpCliktCommand () { val userOptions by UserOptions () } Usage $ ./tool --help Usage: cli [OPTIONS] User Options: Options controlling the user --name TEXT user name --age INT user age Options: -h, --help Show this message and exit Suggesting Corrections for Mistyped Parameters \u00b6 When an option or subcommand is mistyped, Clikt will suggest corrections that are similar to the typed value. Mistyped Option $ ./cli --sise=5 Error: no such option: \"--sise\". Did you mean \"--size\"? Mistyped Subcommand $ ./cli building Usage: cli [OPTIONS] COMMAND [ARGS]... Error: no such subcommand: \"building\". Did you mean \"build\"? By default, Clikt will suggest corrections of any similar option or subcommand name based on a similarity metric. You can customize the suggestions by setting a correctionSuggestor on your command\u2019s context. class Cli : NoOpCliktCommand () { init { context { // Only suggest corrections that start with the entered value correctionSuggestor = { enteredValue , possibleValues -> possibleValues . filter { it . startsWith ( enteredValue ) } } } } } Localization \u00b6 You can localize error messages by implementing Localization and setting the localization property on your context. Example class CursiveLocalization : Localization { override fun usageTitle () = \"\ud835\udcb0\ud835\udcc8\ud835\udcb6\ud835\udc54\ud835\udc52:\" override fun optionsTitle () = \"\ud835\udcaa\ud835\udcc5\ud835\udcc9\ud835\udcbe\ud835\udc5c\ud835\udcc3\ud835\udcc8:\" override fun optionsMetavar () = \"[\ud835\udcaa\ud835\udcab\ud835\udcaf\ud835\udc3c\ud835\udcaa\ud835\udca9\ud835\udcae]:\" override fun helpOptionMessage () = \"\ud835\udcae\ud835\udcbd\ud835\udc5c\ud835\udccc \ud835\udcc9\ud835\udcbd\ud835\udcbe\ud835\udcc8 \ud835\udcc2\ud835\udc52\ud835\udcc8\ud835\udcc8\ud835\udcb6\ud835\udc54\ud835\udc52 \ud835\udcb6\ud835\udcc3\ud835\udcb9 \ud835\udc52\ud835\udccd\ud835\udcbe\ud835\udcc9\" // ... override the rest of the strings here } class I18NTool : NoOpCliktCommand ( help = \"\ud835\udcaf\ud835\udcbd\ud835\udcbe\ud835\udcc8 \ud835\udcc9\ud835\udc5c\ud835\udc5c\ud835\udcc1 \ud835\udcbe\ud835\udcc8 \ud835\udcbe\ud835\udcc3 \ud835\udcb8\ud835\udcca\ud835\udcc7\ud835\udcc8\ud835\udcbe\ud835\udccb\ud835\udc52\" ) { init { context { localization = CursiveLocalization () } } } Usage $ ./i18ntool --help \ud835\udcb0\ud835\udcc8\ud835\udcb6\ud835\udc54\ud835\udc52: i18ntool [\ud835\udcaa\ud835\udcab\ud835\udcaf\ud835\udc3c\ud835\udcaa\ud835\udca9\ud835\udcae] \ud835\udcaf\ud835\udcbd\ud835\udcbe\ud835\udcc8 \ud835\udcc9\ud835\udc5c\ud835\udc5c\ud835\udcc1 \ud835\udcbe\ud835\udcc8 \ud835\udcbe\ud835\udcc3 \ud835\udcb8\ud835\udcca\ud835\udcc7\ud835\udcc8\ud835\udcbe\ud835\udccb\ud835\udc52 \ud835\udcaa\ud835\udcc5\ud835\udcc9\ud835\udcbe\ud835\udc5c\ud835\udcc3\ud835\udcc8: -h, --help \ud835\udcae\ud835\udcbd\ud835\udc5c\ud835\udccc \ud835\udcc9\ud835\udcbd\ud835\udcbe\ud835\udcc8 \ud835\udcc2\ud835\udc52\ud835\udcc8\ud835\udcc8\ud835\udcb6\ud835\udc54\ud835\udc52 \ud835\udcb6\ud835\udcc3\ud835\udcb9 \ud835\udc52\ud835\udccd\ud835\udcbe\ud835\udcc9","title":"Documenting Scripts"},{"location":"documenting/#documenting-scripts","text":"Clikt takes care of creating formatted help messages for commands. There are a number of ways to customize the default behavior. You can also implement your own HelpFormatter and set it on the command\u2019s context .","title":"Documenting Scripts"},{"location":"documenting/#help-texts","text":"Commands and parameters accept a help argument. Commands also accept an epilog argument, which is printed after the parameters and commands on the help page. All text is automatically trimmed of leading indentation and re-wrapped to the terminal width. As an alternative to passing your help strings as function arguments, you can also use the help() extensions for your options, and override commandHelp and commandHelpEpilog on your commands. Example class Hello : CliktCommand ( help = \"\"\" This script prints NAME COUNT times. COUNT must be a positive number, and defaults to 1. \"\"\" ) { val count by option ( \"-c\" , \"--count\" , metavar = \"COUNT\" , help = \"number of greetings\" ). int (). default ( 1 ) val name by argument () override fun run () = repeat ( count ) { echo ( \"Hello $name!\" ) } } Alternate style class Hello : CliktCommand () { override val commandHelp = \"\"\" This script prints NAME COUNT times. COUNT must be a positive number, and defaults to 1. \"\"\" val count by option ( \"-c\" , \"--count\" , metavar = \"COUNT\" ). int (). default ( 1 ) . help ( \"number of greetings\" ) val name by argument () override fun run () = repeat ( count ) { echo ( \"Hello $name!\" ) } } Help output $ ./hello --help Usage: hello [OPTIONS] NAME This script prints NAME COUNT times. COUNT must be a positive number, and defaults to 1. Options: -c, --count COUNT number of greetings -h, --help Show this message and exit Option names and metavars will appear in help output even if no help string is specified for them. On the other hand, arguments only appear in the usage string. It is possible to add a help string to arguments which will be added to the help page, but the Unix convention is to just describe arguments in the command help.","title":"Help Texts"},{"location":"documenting/#preformatting-paragraphs","text":"By default, Clikt will rewrap all paragraphs in your text to the terminal width. This can be undesirable if you have some preformatted text, such as source code or a bulleted list. You can preformat a paragraph by surrounding it with markdown-style triple backticks. The backticks will be removed from the output, and if the backticks are on a line by themselves, the line will be removed. All whitespace and newlines in the paragraph will be preserved, and will be be rewrapped. Example class Tool : NoOpCliktCommand ( help = \"\"\"This is my command. This paragraph will be wrapped, but the following list will not: ``` - This is a list - Its newlines will remain intact ``` This is a new paragraph that will be wrapped if it's wider than the teminal width. \"\"\" ) Help output Usage: tool This is my command. This paragraph will be wrapped, but the following list will not: - This is a list - It's newlines will remain intact This is a new paragraph that will be wrapped if it's wider than the terminal width. Options: -h, --help Show this message and exit","title":"Preformatting Paragraphs"},{"location":"documenting/#manual-line-breaks","text":"If you want to insert a line break manually without preformmating the entire paragraph, you can use the Unicode Next Line (NEL) character . You can type a NEL with the unicode literal \\u0085 . Clikt will treat NEL similarly to how <br> behaves in HTML: The NEL will be replaced with a line break in the output, and the paragraph will still be wrapped to the terminal width. Example class Tool : NoOpCliktCommand () { val option by option ( help = \"This help will be at least two lines.\\u0085(this will start a new line)\" ) } Help output Usage: tool Options: --option This help will be at least two lines. (this will start a new line) -h, --help Show this message and exit","title":"Manual Line Breaks"},{"location":"documenting/#subcommand-short-help","text":"Subcommands are listed in the help page based on their name . They have a short help string which is the first line of their help. Example class Tool : NoOpCliktCommand () class Execute : NoOpCliktCommand ( help = \"\"\" Execute the command. The command will be executed. \"\"\" ) class Abort : NoOpCliktCommand ( help = \"Kill any running commands.\" ) Usage $ ./tool --help Usage: tool [OPTIONS] COMMAND [ARGS]... Options: -h, --help Show this message and exit Commands: execute Execute the command. abort Kill any running commands.","title":"Subcommand Short Help"},{"location":"documenting/#help-option-customization","text":"Clikt handles the help option is specially. It is added automatically to every command. Any help option name that conflicts with another option is not used for the help option. If the help option has no unique names, it is not added. You can change the help option\u2019s name and help message on the command\u2019s context : Example class HelpLocalization : Localization { override fun helpOptionMessage (): String = \"show the help\" } class Tool : NoOpCliktCommand () { init { context { helpOptionNames = setOf ( \"/help\" ) localization = HelpLocalization () } } } Usage $ ./tool /help Usage: tool [OPTIONS] Options: /help show the help If you don\u2019t want a help option to be added, you can set helpOptionNames = emptySet()","title":"Help Option Customization"},{"location":"documenting/#default-values-in-help","text":"You can configure the help formatter to show default values in the help output by passing showRequiredTag = true to the CliktHelpFormatter . By default, the string value of the default value will be shown. You can show a different value by passing the value you want to show to the defaultForHelp parameter of default . Example class Tool : NoOpCliktCommand () { init { context { helpFormatter = CliktHelpFormatter ( showDefaultValues = true ) } } val a by option ( help = \"this is optional\" ). default ( \"value\" ) val b by option ( help = \"this is also optional\" ). default ( \"value\" , defaultForHelp = \"chosen for you\" ) } Usage $ ./tool --help Usage: tool [OPTIONS] Options: --a TEXT this is optional (default: value) --b TEXT this is also optional (default: chosen for you)","title":"Default Values in Help"},{"location":"documenting/#required-options-in-help","text":"By default, required options are displayed the same way as other options. The help formatter includes two different ways to show that an option is required.","title":"Required Options in Help"},{"location":"documenting/#required-option-marker","text":"You can pass a character to the requiredOptionMarker argument of the CliktHelpFormatter . Example class Tool : NoOpCliktCommand () { init { context { helpFormatter = CliktHelpFormatter ( requiredOptionMarker = \"*\" ) } } val option by option ( help = \"this is optional\" ) val required by option ( help = \"this is required\" ). required () } Usage $ ./tool --help Usage: tool [OPTIONS] Options: --option TEXT this is optional * --required TEXT this is required -h, --help Show this message and exit","title":"Required Option Marker"},{"location":"documenting/#required-option-tag","text":"You can also show a tag for required options by passing showRequiredTag = true to the CliktHelpFormatter . Example class Tool : CliktCommand () { init { context { helpFormatter = CliktHelpFormatter ( showRequiredTag = true ) } } val option by option ( help = \"this is optional\" ) val required by option ( help = \"this is required\" ). required () } Usage $ ./tool --help Usage: tool [OPTIONS] Options: --option TEXT this is optional --required TEXT this is required (required) -h, --help Show this message and exit","title":"Required Option Tag"},{"location":"documenting/#grouping-options-in-help","text":"You can group options into separate help sections by using OptionGroup . The name of the group will be shown in the output. You can also add an extra help message to be shown with the group. Groups can\u2019t be nested. Example class UserOptions : OptionGroup ( name = \"User Options\" , help = \"Options controlling the user\" ) { val name by option ( help = \"user name\" ) val age by option ( help = \"user age\" ). int () } class Tool : NoOpCliktCommand () { val userOptions by UserOptions () } Usage $ ./tool --help Usage: cli [OPTIONS] User Options: Options controlling the user --name TEXT user name --age INT user age Options: -h, --help Show this message and exit","title":"Grouping Options in Help"},{"location":"documenting/#suggesting-corrections-for-mistyped-parameters","text":"When an option or subcommand is mistyped, Clikt will suggest corrections that are similar to the typed value. Mistyped Option $ ./cli --sise=5 Error: no such option: \"--sise\". Did you mean \"--size\"? Mistyped Subcommand $ ./cli building Usage: cli [OPTIONS] COMMAND [ARGS]... Error: no such subcommand: \"building\". Did you mean \"build\"? By default, Clikt will suggest corrections of any similar option or subcommand name based on a similarity metric. You can customize the suggestions by setting a correctionSuggestor on your command\u2019s context. class Cli : NoOpCliktCommand () { init { context { // Only suggest corrections that start with the entered value correctionSuggestor = { enteredValue , possibleValues -> possibleValues . filter { it . startsWith ( enteredValue ) } } } } }","title":"Suggesting Corrections for Mistyped Parameters"},{"location":"documenting/#localization","text":"You can localize error messages by implementing Localization and setting the localization property on your context. Example class CursiveLocalization : Localization { override fun usageTitle () = \"\ud835\udcb0\ud835\udcc8\ud835\udcb6\ud835\udc54\ud835\udc52:\" override fun optionsTitle () = \"\ud835\udcaa\ud835\udcc5\ud835\udcc9\ud835\udcbe\ud835\udc5c\ud835\udcc3\ud835\udcc8:\" override fun optionsMetavar () = \"[\ud835\udcaa\ud835\udcab\ud835\udcaf\ud835\udc3c\ud835\udcaa\ud835\udca9\ud835\udcae]:\" override fun helpOptionMessage () = \"\ud835\udcae\ud835\udcbd\ud835\udc5c\ud835\udccc \ud835\udcc9\ud835\udcbd\ud835\udcbe\ud835\udcc8 \ud835\udcc2\ud835\udc52\ud835\udcc8\ud835\udcc8\ud835\udcb6\ud835\udc54\ud835\udc52 \ud835\udcb6\ud835\udcc3\ud835\udcb9 \ud835\udc52\ud835\udccd\ud835\udcbe\ud835\udcc9\" // ... override the rest of the strings here } class I18NTool : NoOpCliktCommand ( help = \"\ud835\udcaf\ud835\udcbd\ud835\udcbe\ud835\udcc8 \ud835\udcc9\ud835\udc5c\ud835\udc5c\ud835\udcc1 \ud835\udcbe\ud835\udcc8 \ud835\udcbe\ud835\udcc3 \ud835\udcb8\ud835\udcca\ud835\udcc7\ud835\udcc8\ud835\udcbe\ud835\udccb\ud835\udc52\" ) { init { context { localization = CursiveLocalization () } } } Usage $ ./i18ntool --help \ud835\udcb0\ud835\udcc8\ud835\udcb6\ud835\udc54\ud835\udc52: i18ntool [\ud835\udcaa\ud835\udcab\ud835\udcaf\ud835\udc3c\ud835\udcaa\ud835\udca9\ud835\udcae] \ud835\udcaf\ud835\udcbd\ud835\udcbe\ud835\udcc8 \ud835\udcc9\ud835\udc5c\ud835\udc5c\ud835\udcc1 \ud835\udcbe\ud835\udcc8 \ud835\udcbe\ud835\udcc3 \ud835\udcb8\ud835\udcca\ud835\udcc7\ud835\udcc8\ud835\udcbe\ud835\udccb\ud835\udc52 \ud835\udcaa\ud835\udcc5\ud835\udcc9\ud835\udcbe\ud835\udc5c\ud835\udcc3\ud835\udcc8: -h, --help \ud835\udcae\ud835\udcbd\ud835\udc5c\ud835\udccc \ud835\udcc9\ud835\udcbd\ud835\udcbe\ud835\udcc8 \ud835\udcc2\ud835\udc52\ud835\udcc8\ud835\udcc8\ud835\udcb6\ud835\udc54\ud835\udc52 \ud835\udcb6\ud835\udcc3\ud835\udcb9 \ud835\udc52\ud835\udccd\ud835\udcbe\ud835\udcc9","title":"Localization"},{"location":"exceptions/","text":"Exception Handling \u00b6 Clikt uses exceptions internally to signal that processing has ended early for any reason. This includes incorrect command line usage, or printing a help page. Where are Exceptions Handled? \u00b6 When you call CliktCommand.main , it will parse the command line and catch any CliktError and Abort exceptions. If it catches one, it will then print out the appropriate information and exit the process. If the caught exception is a PrintMessage or PrintHelpMessage , the process exit status will be 0 and the message will be printed to stdout. Otherwise it will exit with status 1 and print the message to stderr. Any other types of exceptions indicate a programming error, and are not caught by main . However, convert and the other parameter transformations will wrap exceptions thrown inside them in a UsageError , so if you define a custom transformation, you don\u2019t have to worry about an exception escaping to the user. Handling Exceptions Manually \u00b6 CliktCommand.main is just a try / catch block surrounding CliktCommand.parse , so if don\u2019t want exceptions to be caught, you can call parse wherever you would normally call main . fun main ( args : Array < String >) = Cli (). parse ( args ) Which Exceptions Exist? \u00b6 Clikt will throw Abort if it needs to halt execution immediately without a specific message. All other exceptions are subclasses of UsageError . The following subclasses exist: PrintMessage : The exception\u2019s message should be printed. PrintHelpMessage : The help page for the exception\u2019s command should be printed. PrintCompletionMessage : Shell completion code for the command should be printed. UsageError : The command line was incorrect in some way. All other exceptions subclass from this. These exceptions are automatically augmented with extra information about the current parameter, if possible. ProgramResult : The program should exit with the statusCode from this exception. BadParameterValue : A parameter was given the correct number of values, but of invalid format or type. MissingOption and MissingArgument : A required parameter was not provided. NoSuchOption : An option was provided that does not exist. NoSuchSubcommand : A subcommand was called that does not exist. IncorrectOptionValueCount : An option was supplied but the number of values supplied to the option was incorrect. IncorrectArgumentValueCount : An argument was supplied but the number of values supplied was incorrect. MutuallyExclusiveGroupException : Multiple options in a mutually exclusive group were supplied when the group is restricted to a single value. FileNotFound : A required configuration file or @-file was not found. InvalidFileFormat : A configuration file or @-file failed to parse correctly.","title":"Exception Handling"},{"location":"exceptions/#exception-handling","text":"Clikt uses exceptions internally to signal that processing has ended early for any reason. This includes incorrect command line usage, or printing a help page.","title":"Exception Handling"},{"location":"exceptions/#where-are-exceptions-handled","text":"When you call CliktCommand.main , it will parse the command line and catch any CliktError and Abort exceptions. If it catches one, it will then print out the appropriate information and exit the process. If the caught exception is a PrintMessage or PrintHelpMessage , the process exit status will be 0 and the message will be printed to stdout. Otherwise it will exit with status 1 and print the message to stderr. Any other types of exceptions indicate a programming error, and are not caught by main . However, convert and the other parameter transformations will wrap exceptions thrown inside them in a UsageError , so if you define a custom transformation, you don\u2019t have to worry about an exception escaping to the user.","title":"Where are Exceptions Handled?"},{"location":"exceptions/#handling-exceptions-manually","text":"CliktCommand.main is just a try / catch block surrounding CliktCommand.parse , so if don\u2019t want exceptions to be caught, you can call parse wherever you would normally call main . fun main ( args : Array < String >) = Cli (). parse ( args )","title":"Handling Exceptions Manually"},{"location":"exceptions/#which-exceptions-exist","text":"Clikt will throw Abort if it needs to halt execution immediately without a specific message. All other exceptions are subclasses of UsageError . The following subclasses exist: PrintMessage : The exception\u2019s message should be printed. PrintHelpMessage : The help page for the exception\u2019s command should be printed. PrintCompletionMessage : Shell completion code for the command should be printed. UsageError : The command line was incorrect in some way. All other exceptions subclass from this. These exceptions are automatically augmented with extra information about the current parameter, if possible. ProgramResult : The program should exit with the statusCode from this exception. BadParameterValue : A parameter was given the correct number of values, but of invalid format or type. MissingOption and MissingArgument : A required parameter was not provided. NoSuchOption : An option was provided that does not exist. NoSuchSubcommand : A subcommand was called that does not exist. IncorrectOptionValueCount : An option was supplied but the number of values supplied to the option was incorrect. IncorrectArgumentValueCount : An argument was supplied but the number of values supplied was incorrect. MutuallyExclusiveGroupException : Multiple options in a mutually exclusive group were supplied when the group is restricted to a single value. FileNotFound : A required configuration file or @-file was not found. InvalidFileFormat : A configuration file or @-file failed to parse correctly.","title":"Which Exceptions Exist?"},{"location":"migration/","text":"Upgrading to Newer Releases \u00b6 Upgrading to 3.0 \u00b6 Maven Coordinates \u00b6 Clikt\u2019s Maven groupId changed from com.github.ajalt to com.github.ajalt.clikt . So the full coordinate is now com.github.ajalt.clikt:clikt:3.0.0 . With the new Multiplatform plugin in Kotlin 1.4, there is no longer a separate clikt-multiplatform artifact. You can use com.github.ajalt.clikt:clikt:3.0.0 for both JVM-only and Multiplatform projects. Environment variable splitting \u00b6 There used to be an envvarSplit parameter to option() and its convert() that would split values coming from an environment variable. This parameter is removed, and values from environment variables are no longer split automatically. If you still want to split option values, you can do so explicitly with split() . Experimental APIs \u00b6 The Value Source API and Completion Generation APIs no longer require opt-in. You can use these APIs without needing the ExperimentalValueSourceApi or ExperimentalCompletionCandidates annotations. Localization \u00b6 By default, all strings are defined in the Localization object set on your [context][ Context.localization . This means that string parameters like usageTitle in the constructor for CliktHelpFormatter have been removed in favor of functions like Localization.usageTitle() . Context.helpOptionMessage has also been removed in favor of Localization.helpOptionMessage() . See Help Option Customization for an example.","title":"Upgrading to Newer Releases"},{"location":"migration/#upgrading-to-newer-releases","text":"","title":"Upgrading to Newer Releases"},{"location":"migration/#upgrading-to-30","text":"","title":"Upgrading to 3.0"},{"location":"migration/#maven-coordinates","text":"Clikt\u2019s Maven groupId changed from com.github.ajalt to com.github.ajalt.clikt . So the full coordinate is now com.github.ajalt.clikt:clikt:3.0.0 . With the new Multiplatform plugin in Kotlin 1.4, there is no longer a separate clikt-multiplatform artifact. You can use com.github.ajalt.clikt:clikt:3.0.0 for both JVM-only and Multiplatform projects.","title":"Maven Coordinates"},{"location":"migration/#environment-variable-splitting","text":"There used to be an envvarSplit parameter to option() and its convert() that would split values coming from an environment variable. This parameter is removed, and values from environment variables are no longer split automatically. If you still want to split option values, you can do so explicitly with split() .","title":"Environment variable splitting"},{"location":"migration/#experimental-apis","text":"The Value Source API and Completion Generation APIs no longer require opt-in. You can use these APIs without needing the ExperimentalValueSourceApi or ExperimentalCompletionCandidates annotations.","title":"Experimental APIs"},{"location":"migration/#localization","text":"By default, all strings are defined in the Localization object set on your [context][ Context.localization . This means that string parameters like usageTitle in the constructor for CliktHelpFormatter have been removed in favor of functions like Localization.usageTitle() . Context.helpOptionMessage has also been removed in favor of Localization.helpOptionMessage() . See Help Option Customization for an example.","title":"Localization"},{"location":"options/","text":"Options \u00b6 Options are added to commands by defining a property delegate with the option function. Basic Options \u00b6 The default option takes one value of type String . The property is nullable. If the option is not given on the command line, the property value will be null. If the option is given at least once, the property will return the value of the last occurrence of the option. Example class Hello : CliktCommand () { val name by option ( help = \"your name\" ) override fun run () { echo ( \"Hello, $name!\" ) } } Usage $ ./hello --name=Foo Hello, Foo! Option Names \u00b6 If you don\u2019t specify names for an option, a lowercase hyphen-separated name is automatically inferred from the property. For example, val myOpt by option() will create an option that can be called with --my-opt . You can also specify any number of names for an option manually: class Hello : CliktCommand () { val name by option ( \"-n\" , \"--name\" , help = \"your name\" ) override fun run () { echo ( \"Hello, $name!\" ) } } Option names that are two characters long (like -n ) are treated as POSIX-style short options. You call them with a value like this: Usage 1 $ ./hello -nfoo Hello, foo! Usage 2 $ ./hello -n foo Hello, foo! All other option names are considered long options, and can be called like this: Usage 1 $ ./hello --name=foo Hello, foo! Usage 2 $ ./hello --name foo Hello, foo! Customizing Options \u00b6 The option behavior and delegate type can be customized by calling extension functions on the option call. For example, here are some different option declarations: val a : String ? by option () val b : Int ? by option (). int () val c : Pair < Int , Int >? by option (). int (). pair () val d : Pair < Int , Int > by option (). int (). pair (). default ( 0 to 0 ) val e : Pair < Float , Float > by option (). float (). pair (). default ( 0f to 0f ) There are three main types of behavior that can be customized independently: The type of each value in the option. The value type is String by default, but can be customized with built-in functions like int or choice , or manually with convert . This is detailed in the parameters page. The number of values that the option requires. Options take one value by default, but this can be changed with built-in functions like pair and triple , or manually with transformValues . How to handle all calls to the option (i.e. if the option is not present, or is present more than once). By default, the option delegate value is the null if the option is not given on the command line, and will use the value of the last occurrence if the option is given more than once. You can change this behavior with functions like default and multiple . Since the three types of customizations are orthogonal, you can choose which ones you want to use, and if you implement a new customization, it can be used with all of the existing functions without any repeated code. Default Values \u00b6 By default, option delegates return null if the option wasn\u2019t provided on the command line. You can instead return a default value with default . Example class Pow : CliktCommand () { val exp by option ( \"-e\" , \"--exp\" ). double (). default ( 1.0 ) override fun run () { echo ( \"2 ^ $exp = ${(2.0).pow(exp)}\" ) } } Usage 1 $ ./pow -e 8 2 ^ 8.0 = 256.0 Usage 2 $ ./pow 2 ^ 1.0 = 2.0 If the default value is expensive to compute, you can use defaultLazy instead of default . It has the same effect, but you give it a lambda returning the default value, and the lambda will only be called if the default value is used. Multi Value Options \u00b6 Options can take any fixed number of values separated by whitespace, or a variable number of values separated by a non-whitespace delimiter you specify. If you want a variable number of values separated by whitespace, you need to use an argument instead. Options With Fixed Number of Values \u00b6 There are built in functions for options that take two values ( pair , which uses a Pair ), or three values ( triple , which uses a Triple ). You can change the type of each value as normal with functions like int . If you need more values, you can provide your own container with transformValues . You give that function the number of values you want, and a lambda that will transform a list of values into the output container. The list will always have a size equal to the number you specify. If the user provides a different number of values, Clikt will inform the user and your lambda won\u2019t be called. Example data class Quad < out T >( val a : T , val b : T , val c : T , val d : T ) fun < T > Quad < T >. toList (): List < T > = listOf ( a , b , c , d ) class Geometry : CliktCommand () { val square by option (). int (). pair () val cube by option (). int (). triple () val tesseract by option (). int (). transformValues ( 4 ) { Quad ( it [ 0 ], it [ 1 ], it [ 2 ], it [ 3 ]) } override fun run () { echo ( \"Square has dimensions ${square?.toList()?.joinToString(\" x \")}\" ) echo ( \"Cube has dimensions ${cube?.toList()?.joinToString(\" x \")}\" ) echo ( \"Tesseract has dimensions ${tesseract?.toList()?.joinToString(\" x \")}\" ) } } Usage $ ./geometry --square 1 2 --cube 3 4 5 --tesseract 6 7 8 9 Square has dimensions 1x2 Cube has dimensions 3x4x5 Tesseract has dimensions 6x7x8x9 Options With a Variable Number of Values \u00b6 You can use split to allow a variable number of values to a single option invocation by separating the values with non-whitespace delimiters. Example class C : CliktCommand () { val profiles by option ( \"-P\" ). split ( \",\" ) override fun run () { for ( profile in profiles ) { echo ( profile ) } } } Usage $ ./split -P profile-1,profile-2 profile-1 profile-2 Multiple Options \u00b6 Normally, when an option is provided on the command line more than once, only the values from the last occurrence are used. But sometimes you want to keep all values provided. For example, git commit -m foo -m bar would create a commit message with two lines: foo and bar . To get this behavior with Clikt, you can use multiple . This will cause the property delegate value to be a list, where each item in the list is the value of from one occurrence of the option. If the option is never given, the list will be empty (or you can specify a default to use). Example class Commit : CliktCommand () { val message : List < String > by option ( \"-m\" ). multiple () override fun run () { echo ( message . joinToString ( \"\\n\" )) } } Usage $ ./commit -m foo -m bar foo bar You can combine multiple with item type conversions and multiple values. val opt : List < Pair < Int , Int >> by option (). int (). pair (). multiple () Default values for option().multiple() \u00b6 You can also supply a default value to multiple or require at least one value be present on the command line. These are specified as arguments rather than with separate extension functions since they don\u2019t change the type of the delegate. Required val opt : List < String > by option (). multiple ( required = true ) Default val opt : List < String > by option (). multiple ( default = listOf ( \"default message\" )) Deduplicating option().multiple() into a unique set \u00b6 You can discard duplicate values from a multiple option with unique . Example class Build : CliktCommand () { val platforms : Set < String > by option ( \"-p\" ). multiple (). unique () override fun run () { echo ( \"Building for platforms: $platforms\" ) } } Usage $ ./build -p android -p ios -p android Building for platforms: [android, ios] Key-Value and Map Options \u00b6 You can split an option\u2019s value into a key-value pair with splitPair . By default, the delimiter = will be used to split. You can also use associate to allow the option to be specified multiple times, and have its values collected in a map. Example class Build : CliktCommand () { val systemProp : Map < String , String > by option ( \"-D\" , \"--system-prop\" ). associate () override fun run () { echo ( systemProp ) } } Usage $ ./build -Dplace=here --system-prop size=small {place=here, size=small} Boolean Flag Options \u00b6 Flags are options that don\u2019t take a value. Boolean flags can be enabled or disabled, depending on the name used to invoke the option. You can turn an option into a boolean flag with flag . That function takes an optional list of secondary names that will be added to any existing or inferred names for the option. If the option is invoked with one of the secondary names, the delegate will return false. It\u2019s a good idea to always set secondary names so that a user can disable the flag if it was enabled previously. Example class Cli : CliktCommand () { val flag by option ( \"--on\" , \"-o\" ). flag ( \"--off\" , \"-O\" , default = false ) override fun run () { echo ( flag ) } } Usage 1 $ ./cli -o true Usage 2 $ ./cli --on --off false Multiple short flag options can be combined when called on the command line: Example class Cli : CliktCommand () { val flagA by option ( \"-a\" ). flag () val flagB by option ( \"-b\" ). flag () val foo by option ( \"-f\" ) override fun run () { echo ( \"$flagA $flagB $foo\" ) } } Usage $ ./cli -abfFoo true true Foo Counted Flag Options \u00b6 You might want a flag option that counts the number of times it occurs on the command line. You can use counted for this. Example class Log : CliktCommand () { val verbosity by option ( \"-v\" ). counted () override fun run () { echo ( \"Verbosity level: $verbosity\" ) } } Usage $ ./log -vvv Verbosity level: 3 Feature Switch Flags \u00b6 Another way to use flags is to assign a value to each option name. You can do this with switch , which takes a map of option names to values. Note that the names in the map replace any previously specified or inferred names. Example class Size : CliktCommand () { val size by option (). switch ( \"--large\" to \"large\" , \"--small\" to \"small\" ). default ( \"unknown\" ) override fun run () { echo ( \"You picked size $size\" ) } } Usage $ ./size --small You picked size small Choice Options \u00b6 You can restrict the values that a regular option can take to a set of values using choice . You can also map the input values to new types. Example class Digest : CliktCommand () { val hash by option (). choice ( \"md5\" , \"sha1\" ) override fun run () { echo ( hash ) } } Usage 1 $ ./digest --hash=md5 md5 Usage 2 $ ./digest --hash=sha256 Usage: digest [OPTIONS] Error: Invalid value for \"--hash\": invalid choice: sha256. (choose from md5, sha1) Usage 3 $ ./digest --help Usage: digest [OPTIONS] Options: --hash [md5|sha1] -h, --help Show this message and exit Mutually Exclusive Option Groups \u00b6 If choice or switch options aren\u2019t flexible enough, you can use mutuallyExclusiveOptions to group any nullable options into a mutually exclusive group. If more than one of the options in the group is given on the command line, the last value is used. If you want different types for each option, you can wrap them in a sealed class. You can also use wrapValue if you have an existing conversion function like int or file you\u2019d like to use. Example sealed class Fruit { data class Oranges ( val size : String ): Fruit () data class Apples ( val count : Int ): Fruit () } class Order : CliktCommand () { val fruit : Fruit ? by mutuallyExclusiveOptions < Fruit >( option ( \"--oranges\" ). convert { Oranges ( it ) }, option ( \"--apples\" ). int (). wrapValue { Apples ( it ) } ) override fun run () = echo ( fruit ) } Usage 1 $ ./order --apples=10 Apples(count=10) Usage 2 $ ./order --oranges=small Oranges(size=small) Usage 3 $ ./order --apples=10 --oranges=large Oranges(size=large) You can enforce that only one of the options is given with single : Example val fruit : Fruit ? by mutuallyExclusiveOptions < Fruit >( option ( \"--apples\" ). convert { Apples ( it . toInt ()) }, option ( \"--oranges\" ). convert { Oranges ( it ) } ). single () Usage $ ./order --apples=10 --oranges=small Usage: order [OPTIONS] Error: option --apples cannot be used with --oranges Like regular options, you can make the entire group required , or give it a default value. Like other option groups , you can specify a name and help text for the group if you want to set the group apart in the help output. Co-Occurring Option Groups \u00b6 Sometimes you have a set of options that only make sense when specified together. To enforce this, you can make an option group cooccurring . Co-occurring groups must have at least one required option, and may also have non-required options. The required constraint is enforced if any of the options in the group are given on the command line. If none if the options are given, the value of the group is null. Example class UserOptions : OptionGroup () { val name by option (). required () val age by option (). int () } class Tool : CliktCommand () { val userOptions by UserOptions (). cooccurring () override fun run () { userOptions ?. let { echo ( it . name ) echo ( it . age ) } ?: echo ( \"No user options\" ) } } Usage 1 $ ./tool No user options Usage 2 $ ./tool --name=jane --age=30 jane 30 Usage 3 $ ./tool --age=30 Usage: tool [OPTIONS] Error: Missing option \"--name\". Like other option groups , you can specify a name and help text for the group if you want to set the group apart in the help output. Choice and Switch Options With Groups \u00b6 If you have different groups of options that only make sense when another option has a certain value, you can use groupChoice and groupSwitch . groupChoice options are similar to choice options , but instead of mapping a value to a single new type, they map a value to a co-occurring OptionGroup . Options for groups other than the selected one are ignored, and only the selected group\u2019s required constraints are enforced. In the same way, groupSwitch options are similar to switch options . Example sealed class LoadConfig ( name : String ): OptionGroup ( name ) class FromDisk : LoadConfig ( \"Options for loading from disk\" ) { val path by option (). file (). required () val followSymlinks by option (). flag () } class FromNetwork : LoadConfig ( \"Options for loading from network\" ) { val url by option (). required () val username by option (). prompt () val password by option (). prompt ( hideInput = true ) } class Tool : CliktCommand ( help = \"An example of a custom help formatter that uses ansi colors\" ) { val load by option (). groupChoice ( \"disk\" to FromDisk (), \"network\" to FromNetwork () ) override fun run () { when ( val it = load ) { is FromDisk -> echo ( \"Loading from disk: ${it.path}\" ) is FromNetwork -> echo ( \"Loading from network: ${it.url}\" ) null -> echo ( \"Not loading\" ) } } } Usage 1 $ ./tool --load=disk --path=./config --follow-symlinks Loading from disk: .\\config Usage 2 $ ./tool --load=network --url=www.example.com --username=admin Password: ******* Loading from network: www.example.com Usage 3 $ ./tool --load=disk Usage: cli [OPTIONS] Error: Missing option \"--path\". Usage 4 $ ./tool --load=whoops Usage: cli [OPTIONS] Error: Invalid value for \"--load\": invalid choice: whoops. (choose from disk, network) Prompting For Input \u00b6 In some cases, you might want to create an option that uses the value given on the command line if there is one, but prompt the user for input if one is not provided. Clikt can take care of this for you with the prompt function. Example class Hello : CliktCommand () { val name by option (). prompt () override fun run () { echo ( \"Hello $name\" ) } } Usage 1 ./hello --name=foo Hello foo Usage 2 ./hello Name: foo Hello foo The default prompt string is based on the option name, but prompt takes a number of parameters to customize the output. Password Prompts \u00b6 You can also create a option that uses a hidden prompt and asks for confirmation. This combination of behavior is commonly used for passwords. Example class Login : CliktCommand () { val password by option (). prompt ( requireConfirmation = true , hideInput = true ) override fun run () { echo ( \"Your hidden password: $password\" ) } } Usage $ ./login Password: Repeat for confirmation: Your hidden password: hunter2 Eager Options \u00b6 Sometimes you want an option to halt execution immediately and print a message. For example, the built-on --help option, or the --version option that many programs have. Neither of these options have any value associated with them, and they stop command line parsing as soon as they\u2019re encountered. The --help option is added automatically to commands, and --version can be added using versionOption . Since the option doesn\u2019t have a value, you can\u2019t define it using a property delegate. Instead, call the function on a command directly, either in an init block, or on a command instance. These definitions are equivalent: Version 1 class Cli : NoOpCliktCommand () { init { versionOption ( \"1.0\" ) } } fun main ( args : Array < String >) = Cli (). main ( args ) Version 2 class Cli : NoOpCliktCommand () fun main ( args : Array < String >) = Cli (). versionOption ( \"1.0\" ). main ( args ) Usage $ ./cli --version cli version 1.0 If you want to define your own option with a similar behavior, you can do so by calling eagerOption . This function takes an action that is called when the option is encountered on the command line. To print a message and halt execution normally from the callback, you can throw a PrintMessage exception, and CliktCommand.main will take care of printing the message. If you want to exit normally without printing a message, you can throw Abort(error=false) instead. You can define your own version option like this: class Cli : NoOpCliktCommand () { init { eagerOption ( \"--version\" ) { throw PrintMessage ( \"$commandName version 1.0\" ) } } } Deprecating Options \u00b6 You can communicate to users that an option is deprecated with option().deprecated() . By default, this function will add a tag to the option\u2019s help message, and print a warning to stderr if the option is used. You can customize or omit the warning message and help tags, or change the warning into an error. Example class Cli : CliktCommand () { val opt by option ( help = \"option 1\" ). deprecated () val opt2 by option ( help = \"option 2\" ). deprecated ( \"WARNING: --opt2 is deprecated, use --new-opt instead\" , tagName = null ) val opt3 by option ( help = \"option 3\" ). deprecated ( tagName = \"pending deprecation\" , tagValue = \"use --new-opt instead\" ) val opt4 by option ( help = \"option 4\" ). deprecated ( error = true ) override fun run () = echo ( \"command run\" ) } Usage 1 $ ./cli --opt=x WARNING: option --opt is deprecated command run Usage 2 $ ./cli --opt2=x WARNING: --op2 is deprecated, use --new-opt instead command run Usage 3 $ ./cli --opt3=x WARNING: option --opt3 is deprecated command run Usage 4 $ ./cli --opt4=x ERROR: option --opt4 is deprecated Help Output $ ./cli --help Usage: cli [OPTIONS] Options: --opt TEXT option 1 (deprecated) --opt2 TEXT option 2 --opt3 TEXT option 3 (pending deprecation: use --new-opt instead) --opt4 TEXT option 4 (deprecated) Unknown Options \u00b6 You may want to collect unknown options for manual processing. You can do this by passing treatUnknownOptionsAsArgs = true to your CliktCommand constructor . This will cause Clikt to treat unknown options as positional arguments rather than reporting an error when one is encountered. You\u2019ll need to define an argument().multiple() property to collect the options, otherwise an error will still be reported. Example class Wrapper : CliktCommand ( treatUnknownOptionsAsArgs = true ) { init { context { allowInterspersedArgs = false } } val command by option ( help = \"?\" ). required () val arguments by argument (). multiple () override fun run () { val cmd = ( listOf ( command ) + arguments ). joinToString ( \" \" ) val proc = Runtime . getRuntime (). exec ( cmd ) println ( proc . inputStream . bufferedReader (). readText ()) proc . waitFor () } } Usage $ ./wrapper --command=git tag --help | head -n4 GIT-TAG(1) Git Manual GIT-TAG(1) NAME git-tag - Create, list, delete or verify a tag object signed with GPG Note that flag options in a single token (e.g. using -abc to specify -a , -b , and -c in a single token) will still report an error if they are unknown. Each option should be specified separately in this mode. You\u2019ll often want to set allowInterspersedArgs = false on your Context when using treatUnknownOptionsAsArgs . You may also find that subcommands are a better fit than treatUnknownOptionsAsArgs for your use case. Values From Environment Variables \u00b6 Clikt supports reading option values from environment variables if they aren\u2019t given on the command line. This feature is helpful when automating tools. For example, when using git commit , you can set the author date with a command line parameter: git commit --date=10/21/2015 . But you can also set it with an environment variable: GIT_AUTHOR_DATE=10/21/2015 git commit . Clikt will read option values from environment variables as long as it has an envvar name for the option. There are two ways to set that name: you can set the name manually for an option, or you can enable automatic envvar name inference. To set the envvar name manually, pass the name to option : Example class Hello : CliktCommand () { val name by option ( envvar = \"MY_NAME\" ) override fun run () { echo ( \"Hello $name\" ) } } Usage 1 $ export MY_NAME=Foo $ ./hello Hello Foo Usage 2 $ export MY_NAME=Foo $ ./hello --name=Bar Hello Bar You can enable automatic envvar name inference by setting the autoEnvvarPrefix on a command\u2019s context . This will cause all options without an explicit envvar name to be given an uppercase underscore-separated envvar name. Since the prefix is set on the context , it is propagated to subcommands. If you have a a subcommand called foo with an option --bar , and your prefix is MY_TOOL , the option\u2019s envvar name will be MY_TOOL_FOO_BAR . Example class Hello : CliktCommand () { init { context { autoEnvvarPrefix = \"HELLO\" } } val name by option () override fun run () { echo ( \"Hello $name\" ) } } Usage $ export HELLO_NAME=Foo $ ./hello Hello Foo Multiple Values from Environment Variables \u00b6 You might need to allow users to specify multiple values for an option in a single environment variable. You can do this by creating an option with multiple . The environment variable\u2019s value will be split according a regex, which defaults to split on whitespace for most types. file will change the pattern to split according to the operating system\u2019s path splitting rules. On Windows, it will split on semicolons ( ; ). On other systems, it will split on colons ( : ). You can also specify a split pattern by passing it to the envvarSplit parameter of option . Example class Hello : CliktCommand () { val names by option ( envvar = \"NAMES\" ). multiple () override fun run () { for ( name in names ) echo ( \"Hello $name\" ) } } Usage $ export NAMES=Foo Bar $ ./hello Hello Foo Hello Bar Flag Option Values from Environment Variables \u00b6 For flag options, any of the following (case-insensitive) environment variable values will be interpreted as true : \"true\" , \"t\" , \"1\" , \"yes\" , \"y\" , \"on\" The following (case-insensitive) values wil be interpreted as false : \"false\" , \"f\" , \"0\" , \"no\" , \"n\" , \"off\" All other values are invalid. Values from Configuration Files \u00b6 Clikt also supports reading option values from one or more configuration files (or other sources) when they aren\u2019t present on the command line. For example, when using git commit , you can set the author email with a command line parameter: git commit --author='Clikt <clikt@example.com> . But you can also set it in your git configuration file: user.email=clikt@example.com . Clikt allows you to specify one or more sources of option values that will be read from with the Context.valueSource builder. Example class Hello : CliktCommand () { init { context { valueSource = PropertiesValueSource . from ( \"myconfig.properties\" ) } } val name by option () override fun run () { echo ( \"Hello $name\" ) } } Usage $ echo \"name=Foo\" > myconfig.properties $ ./hello Hello Foo You can also pass multiple sources to Context.valueSources , and each source will be searched for the value in order. Clikt includes support for reading values from a map , and (on JVM) from Java Properties files . For these two sources, you can customize the keys used to look up options by passing the result of ValueSource.getKey or ValueSource.envvarKey to the source\u2019s getKey constructor parameter. You can add any other file type by implementing ValueSource . See the JSON sample for an implementation that uses kotlinx.serialization to load values from JSON files. Configuration Files and Environment Variables \u00b6 Every option can read values from both environment variables and configuration files. By default, Clikt will use the value from an environment variable before the value from a configuration file, but you can change this by setting Context.readEnvvarBeforeValueSource to false . Windows and Java-Style Option Prefixes \u00b6 When specifying option names manually, you can use any prefix (as long as it\u2019s entirely punctuation). For example, you can make a Windows-style interface with slashes: Example class Hello : CliktCommand () { val name by option ( \"/name\" , help = \"your name\" ) override fun run () { echo ( \"Hello, $name!\" ) } } Usage $ ./hello /name Foo Hello, Foo! Or you can make a Java-style interface that uses single-dashes for long options: Example class Hello : CliktCommand () { val name by option ( \"-name\" , help = \"your name\" ) override fun run () { echo ( \"Hello, $name!\" ) } } Usage $ ./hello -name Foo Hello, Foo! Note that inferred names will always have a POSIX-style prefix like --name . If you want to use a different prefix, you should specify all option names manually. Option Transformation Order \u00b6 Clikt has a large number of extension functions that can modify options. When applying multiple functions to the same option, there\u2019s only one valid order for the functions to be applied. For example, option().default(3).int() will not compile, because default must be applied after the value type conversion. Similarly, you can only apply one transform of each type. So option().int().float() is invalid since int and float both change the value type, as is option().default(\"\").multiple() since default and multiple both transform the call list (if you need a custom default value for multiple , you can pass it one as an argument). Here\u2019s an integer option with one of each available transform in a valid order: val opt : Pair < Int , Int > by option ( \"-o\" , \"--opt\" ) . int () . restrictTo ( 1. . 100 ) . pair () . default ( 1 to 2 ) . validate { require ( it . second % 2 == 0 ) }","title":"Options"},{"location":"options/#options","text":"Options are added to commands by defining a property delegate with the option function.","title":"Options"},{"location":"options/#basic-options","text":"The default option takes one value of type String . The property is nullable. If the option is not given on the command line, the property value will be null. If the option is given at least once, the property will return the value of the last occurrence of the option. Example class Hello : CliktCommand () { val name by option ( help = \"your name\" ) override fun run () { echo ( \"Hello, $name!\" ) } } Usage $ ./hello --name=Foo Hello, Foo!","title":"Basic Options"},{"location":"options/#option-names","text":"If you don\u2019t specify names for an option, a lowercase hyphen-separated name is automatically inferred from the property. For example, val myOpt by option() will create an option that can be called with --my-opt . You can also specify any number of names for an option manually: class Hello : CliktCommand () { val name by option ( \"-n\" , \"--name\" , help = \"your name\" ) override fun run () { echo ( \"Hello, $name!\" ) } } Option names that are two characters long (like -n ) are treated as POSIX-style short options. You call them with a value like this: Usage 1 $ ./hello -nfoo Hello, foo! Usage 2 $ ./hello -n foo Hello, foo! All other option names are considered long options, and can be called like this: Usage 1 $ ./hello --name=foo Hello, foo! Usage 2 $ ./hello --name foo Hello, foo!","title":"Option Names"},{"location":"options/#customizing-options","text":"The option behavior and delegate type can be customized by calling extension functions on the option call. For example, here are some different option declarations: val a : String ? by option () val b : Int ? by option (). int () val c : Pair < Int , Int >? by option (). int (). pair () val d : Pair < Int , Int > by option (). int (). pair (). default ( 0 to 0 ) val e : Pair < Float , Float > by option (). float (). pair (). default ( 0f to 0f ) There are three main types of behavior that can be customized independently: The type of each value in the option. The value type is String by default, but can be customized with built-in functions like int or choice , or manually with convert . This is detailed in the parameters page. The number of values that the option requires. Options take one value by default, but this can be changed with built-in functions like pair and triple , or manually with transformValues . How to handle all calls to the option (i.e. if the option is not present, or is present more than once). By default, the option delegate value is the null if the option is not given on the command line, and will use the value of the last occurrence if the option is given more than once. You can change this behavior with functions like default and multiple . Since the three types of customizations are orthogonal, you can choose which ones you want to use, and if you implement a new customization, it can be used with all of the existing functions without any repeated code.","title":"Customizing Options"},{"location":"options/#default-values","text":"By default, option delegates return null if the option wasn\u2019t provided on the command line. You can instead return a default value with default . Example class Pow : CliktCommand () { val exp by option ( \"-e\" , \"--exp\" ). double (). default ( 1.0 ) override fun run () { echo ( \"2 ^ $exp = ${(2.0).pow(exp)}\" ) } } Usage 1 $ ./pow -e 8 2 ^ 8.0 = 256.0 Usage 2 $ ./pow 2 ^ 1.0 = 2.0 If the default value is expensive to compute, you can use defaultLazy instead of default . It has the same effect, but you give it a lambda returning the default value, and the lambda will only be called if the default value is used.","title":"Default Values"},{"location":"options/#multi-value-options","text":"Options can take any fixed number of values separated by whitespace, or a variable number of values separated by a non-whitespace delimiter you specify. If you want a variable number of values separated by whitespace, you need to use an argument instead.","title":"Multi Value Options"},{"location":"options/#options-with-fixed-number-of-values","text":"There are built in functions for options that take two values ( pair , which uses a Pair ), or three values ( triple , which uses a Triple ). You can change the type of each value as normal with functions like int . If you need more values, you can provide your own container with transformValues . You give that function the number of values you want, and a lambda that will transform a list of values into the output container. The list will always have a size equal to the number you specify. If the user provides a different number of values, Clikt will inform the user and your lambda won\u2019t be called. Example data class Quad < out T >( val a : T , val b : T , val c : T , val d : T ) fun < T > Quad < T >. toList (): List < T > = listOf ( a , b , c , d ) class Geometry : CliktCommand () { val square by option (). int (). pair () val cube by option (). int (). triple () val tesseract by option (). int (). transformValues ( 4 ) { Quad ( it [ 0 ], it [ 1 ], it [ 2 ], it [ 3 ]) } override fun run () { echo ( \"Square has dimensions ${square?.toList()?.joinToString(\" x \")}\" ) echo ( \"Cube has dimensions ${cube?.toList()?.joinToString(\" x \")}\" ) echo ( \"Tesseract has dimensions ${tesseract?.toList()?.joinToString(\" x \")}\" ) } } Usage $ ./geometry --square 1 2 --cube 3 4 5 --tesseract 6 7 8 9 Square has dimensions 1x2 Cube has dimensions 3x4x5 Tesseract has dimensions 6x7x8x9","title":"Options With Fixed Number of Values"},{"location":"options/#options-with-a-variable-number-of-values","text":"You can use split to allow a variable number of values to a single option invocation by separating the values with non-whitespace delimiters. Example class C : CliktCommand () { val profiles by option ( \"-P\" ). split ( \",\" ) override fun run () { for ( profile in profiles ) { echo ( profile ) } } } Usage $ ./split -P profile-1,profile-2 profile-1 profile-2","title":"Options With a Variable Number of Values"},{"location":"options/#multiple-options","text":"Normally, when an option is provided on the command line more than once, only the values from the last occurrence are used. But sometimes you want to keep all values provided. For example, git commit -m foo -m bar would create a commit message with two lines: foo and bar . To get this behavior with Clikt, you can use multiple . This will cause the property delegate value to be a list, where each item in the list is the value of from one occurrence of the option. If the option is never given, the list will be empty (or you can specify a default to use). Example class Commit : CliktCommand () { val message : List < String > by option ( \"-m\" ). multiple () override fun run () { echo ( message . joinToString ( \"\\n\" )) } } Usage $ ./commit -m foo -m bar foo bar You can combine multiple with item type conversions and multiple values. val opt : List < Pair < Int , Int >> by option (). int (). pair (). multiple ()","title":"Multiple Options"},{"location":"options/#default-values-for-optionmultiple","text":"You can also supply a default value to multiple or require at least one value be present on the command line. These are specified as arguments rather than with separate extension functions since they don\u2019t change the type of the delegate. Required val opt : List < String > by option (). multiple ( required = true ) Default val opt : List < String > by option (). multiple ( default = listOf ( \"default message\" ))","title":"Default values for option().multiple()"},{"location":"options/#deduplicating-optionmultiple-into-a-unique-set","text":"You can discard duplicate values from a multiple option with unique . Example class Build : CliktCommand () { val platforms : Set < String > by option ( \"-p\" ). multiple (). unique () override fun run () { echo ( \"Building for platforms: $platforms\" ) } } Usage $ ./build -p android -p ios -p android Building for platforms: [android, ios]","title":"Deduplicating option().multiple() into a unique set"},{"location":"options/#key-value-and-map-options","text":"You can split an option\u2019s value into a key-value pair with splitPair . By default, the delimiter = will be used to split. You can also use associate to allow the option to be specified multiple times, and have its values collected in a map. Example class Build : CliktCommand () { val systemProp : Map < String , String > by option ( \"-D\" , \"--system-prop\" ). associate () override fun run () { echo ( systemProp ) } } Usage $ ./build -Dplace=here --system-prop size=small {place=here, size=small}","title":"Key-Value and Map Options"},{"location":"options/#boolean-flag-options","text":"Flags are options that don\u2019t take a value. Boolean flags can be enabled or disabled, depending on the name used to invoke the option. You can turn an option into a boolean flag with flag . That function takes an optional list of secondary names that will be added to any existing or inferred names for the option. If the option is invoked with one of the secondary names, the delegate will return false. It\u2019s a good idea to always set secondary names so that a user can disable the flag if it was enabled previously. Example class Cli : CliktCommand () { val flag by option ( \"--on\" , \"-o\" ). flag ( \"--off\" , \"-O\" , default = false ) override fun run () { echo ( flag ) } } Usage 1 $ ./cli -o true Usage 2 $ ./cli --on --off false Multiple short flag options can be combined when called on the command line: Example class Cli : CliktCommand () { val flagA by option ( \"-a\" ). flag () val flagB by option ( \"-b\" ). flag () val foo by option ( \"-f\" ) override fun run () { echo ( \"$flagA $flagB $foo\" ) } } Usage $ ./cli -abfFoo true true Foo","title":"Boolean Flag Options"},{"location":"options/#counted-flag-options","text":"You might want a flag option that counts the number of times it occurs on the command line. You can use counted for this. Example class Log : CliktCommand () { val verbosity by option ( \"-v\" ). counted () override fun run () { echo ( \"Verbosity level: $verbosity\" ) } } Usage $ ./log -vvv Verbosity level: 3","title":"Counted Flag Options"},{"location":"options/#feature-switch-flags","text":"Another way to use flags is to assign a value to each option name. You can do this with switch , which takes a map of option names to values. Note that the names in the map replace any previously specified or inferred names. Example class Size : CliktCommand () { val size by option (). switch ( \"--large\" to \"large\" , \"--small\" to \"small\" ). default ( \"unknown\" ) override fun run () { echo ( \"You picked size $size\" ) } } Usage $ ./size --small You picked size small","title":"Feature Switch Flags"},{"location":"options/#choice-options","text":"You can restrict the values that a regular option can take to a set of values using choice . You can also map the input values to new types. Example class Digest : CliktCommand () { val hash by option (). choice ( \"md5\" , \"sha1\" ) override fun run () { echo ( hash ) } } Usage 1 $ ./digest --hash=md5 md5 Usage 2 $ ./digest --hash=sha256 Usage: digest [OPTIONS] Error: Invalid value for \"--hash\": invalid choice: sha256. (choose from md5, sha1) Usage 3 $ ./digest --help Usage: digest [OPTIONS] Options: --hash [md5|sha1] -h, --help Show this message and exit","title":"Choice Options"},{"location":"options/#mutually-exclusive-option-groups","text":"If choice or switch options aren\u2019t flexible enough, you can use mutuallyExclusiveOptions to group any nullable options into a mutually exclusive group. If more than one of the options in the group is given on the command line, the last value is used. If you want different types for each option, you can wrap them in a sealed class. You can also use wrapValue if you have an existing conversion function like int or file you\u2019d like to use. Example sealed class Fruit { data class Oranges ( val size : String ): Fruit () data class Apples ( val count : Int ): Fruit () } class Order : CliktCommand () { val fruit : Fruit ? by mutuallyExclusiveOptions < Fruit >( option ( \"--oranges\" ). convert { Oranges ( it ) }, option ( \"--apples\" ). int (). wrapValue { Apples ( it ) } ) override fun run () = echo ( fruit ) } Usage 1 $ ./order --apples=10 Apples(count=10) Usage 2 $ ./order --oranges=small Oranges(size=small) Usage 3 $ ./order --apples=10 --oranges=large Oranges(size=large) You can enforce that only one of the options is given with single : Example val fruit : Fruit ? by mutuallyExclusiveOptions < Fruit >( option ( \"--apples\" ). convert { Apples ( it . toInt ()) }, option ( \"--oranges\" ). convert { Oranges ( it ) } ). single () Usage $ ./order --apples=10 --oranges=small Usage: order [OPTIONS] Error: option --apples cannot be used with --oranges Like regular options, you can make the entire group required , or give it a default value. Like other option groups , you can specify a name and help text for the group if you want to set the group apart in the help output.","title":"Mutually Exclusive Option Groups"},{"location":"options/#co-occurring-option-groups","text":"Sometimes you have a set of options that only make sense when specified together. To enforce this, you can make an option group cooccurring . Co-occurring groups must have at least one required option, and may also have non-required options. The required constraint is enforced if any of the options in the group are given on the command line. If none if the options are given, the value of the group is null. Example class UserOptions : OptionGroup () { val name by option (). required () val age by option (). int () } class Tool : CliktCommand () { val userOptions by UserOptions (). cooccurring () override fun run () { userOptions ?. let { echo ( it . name ) echo ( it . age ) } ?: echo ( \"No user options\" ) } } Usage 1 $ ./tool No user options Usage 2 $ ./tool --name=jane --age=30 jane 30 Usage 3 $ ./tool --age=30 Usage: tool [OPTIONS] Error: Missing option \"--name\". Like other option groups , you can specify a name and help text for the group if you want to set the group apart in the help output.","title":"Co-Occurring Option Groups"},{"location":"options/#choice-and-switch-options-with-groups","text":"If you have different groups of options that only make sense when another option has a certain value, you can use groupChoice and groupSwitch . groupChoice options are similar to choice options , but instead of mapping a value to a single new type, they map a value to a co-occurring OptionGroup . Options for groups other than the selected one are ignored, and only the selected group\u2019s required constraints are enforced. In the same way, groupSwitch options are similar to switch options . Example sealed class LoadConfig ( name : String ): OptionGroup ( name ) class FromDisk : LoadConfig ( \"Options for loading from disk\" ) { val path by option (). file (). required () val followSymlinks by option (). flag () } class FromNetwork : LoadConfig ( \"Options for loading from network\" ) { val url by option (). required () val username by option (). prompt () val password by option (). prompt ( hideInput = true ) } class Tool : CliktCommand ( help = \"An example of a custom help formatter that uses ansi colors\" ) { val load by option (). groupChoice ( \"disk\" to FromDisk (), \"network\" to FromNetwork () ) override fun run () { when ( val it = load ) { is FromDisk -> echo ( \"Loading from disk: ${it.path}\" ) is FromNetwork -> echo ( \"Loading from network: ${it.url}\" ) null -> echo ( \"Not loading\" ) } } } Usage 1 $ ./tool --load=disk --path=./config --follow-symlinks Loading from disk: .\\config Usage 2 $ ./tool --load=network --url=www.example.com --username=admin Password: ******* Loading from network: www.example.com Usage 3 $ ./tool --load=disk Usage: cli [OPTIONS] Error: Missing option \"--path\". Usage 4 $ ./tool --load=whoops Usage: cli [OPTIONS] Error: Invalid value for \"--load\": invalid choice: whoops. (choose from disk, network)","title":"Choice and Switch Options With Groups"},{"location":"options/#prompting-for-input","text":"In some cases, you might want to create an option that uses the value given on the command line if there is one, but prompt the user for input if one is not provided. Clikt can take care of this for you with the prompt function. Example class Hello : CliktCommand () { val name by option (). prompt () override fun run () { echo ( \"Hello $name\" ) } } Usage 1 ./hello --name=foo Hello foo Usage 2 ./hello Name: foo Hello foo The default prompt string is based on the option name, but prompt takes a number of parameters to customize the output.","title":"Prompting For Input"},{"location":"options/#password-prompts","text":"You can also create a option that uses a hidden prompt and asks for confirmation. This combination of behavior is commonly used for passwords. Example class Login : CliktCommand () { val password by option (). prompt ( requireConfirmation = true , hideInput = true ) override fun run () { echo ( \"Your hidden password: $password\" ) } } Usage $ ./login Password: Repeat for confirmation: Your hidden password: hunter2","title":"Password Prompts"},{"location":"options/#eager-options","text":"Sometimes you want an option to halt execution immediately and print a message. For example, the built-on --help option, or the --version option that many programs have. Neither of these options have any value associated with them, and they stop command line parsing as soon as they\u2019re encountered. The --help option is added automatically to commands, and --version can be added using versionOption . Since the option doesn\u2019t have a value, you can\u2019t define it using a property delegate. Instead, call the function on a command directly, either in an init block, or on a command instance. These definitions are equivalent: Version 1 class Cli : NoOpCliktCommand () { init { versionOption ( \"1.0\" ) } } fun main ( args : Array < String >) = Cli (). main ( args ) Version 2 class Cli : NoOpCliktCommand () fun main ( args : Array < String >) = Cli (). versionOption ( \"1.0\" ). main ( args ) Usage $ ./cli --version cli version 1.0 If you want to define your own option with a similar behavior, you can do so by calling eagerOption . This function takes an action that is called when the option is encountered on the command line. To print a message and halt execution normally from the callback, you can throw a PrintMessage exception, and CliktCommand.main will take care of printing the message. If you want to exit normally without printing a message, you can throw Abort(error=false) instead. You can define your own version option like this: class Cli : NoOpCliktCommand () { init { eagerOption ( \"--version\" ) { throw PrintMessage ( \"$commandName version 1.0\" ) } } }","title":"Eager Options"},{"location":"options/#deprecating-options","text":"You can communicate to users that an option is deprecated with option().deprecated() . By default, this function will add a tag to the option\u2019s help message, and print a warning to stderr if the option is used. You can customize or omit the warning message and help tags, or change the warning into an error. Example class Cli : CliktCommand () { val opt by option ( help = \"option 1\" ). deprecated () val opt2 by option ( help = \"option 2\" ). deprecated ( \"WARNING: --opt2 is deprecated, use --new-opt instead\" , tagName = null ) val opt3 by option ( help = \"option 3\" ). deprecated ( tagName = \"pending deprecation\" , tagValue = \"use --new-opt instead\" ) val opt4 by option ( help = \"option 4\" ). deprecated ( error = true ) override fun run () = echo ( \"command run\" ) } Usage 1 $ ./cli --opt=x WARNING: option --opt is deprecated command run Usage 2 $ ./cli --opt2=x WARNING: --op2 is deprecated, use --new-opt instead command run Usage 3 $ ./cli --opt3=x WARNING: option --opt3 is deprecated command run Usage 4 $ ./cli --opt4=x ERROR: option --opt4 is deprecated Help Output $ ./cli --help Usage: cli [OPTIONS] Options: --opt TEXT option 1 (deprecated) --opt2 TEXT option 2 --opt3 TEXT option 3 (pending deprecation: use --new-opt instead) --opt4 TEXT option 4 (deprecated)","title":"Deprecating Options"},{"location":"options/#unknown-options","text":"You may want to collect unknown options for manual processing. You can do this by passing treatUnknownOptionsAsArgs = true to your CliktCommand constructor . This will cause Clikt to treat unknown options as positional arguments rather than reporting an error when one is encountered. You\u2019ll need to define an argument().multiple() property to collect the options, otherwise an error will still be reported. Example class Wrapper : CliktCommand ( treatUnknownOptionsAsArgs = true ) { init { context { allowInterspersedArgs = false } } val command by option ( help = \"?\" ). required () val arguments by argument (). multiple () override fun run () { val cmd = ( listOf ( command ) + arguments ). joinToString ( \" \" ) val proc = Runtime . getRuntime (). exec ( cmd ) println ( proc . inputStream . bufferedReader (). readText ()) proc . waitFor () } } Usage $ ./wrapper --command=git tag --help | head -n4 GIT-TAG(1) Git Manual GIT-TAG(1) NAME git-tag - Create, list, delete or verify a tag object signed with GPG Note that flag options in a single token (e.g. using -abc to specify -a , -b , and -c in a single token) will still report an error if they are unknown. Each option should be specified separately in this mode. You\u2019ll often want to set allowInterspersedArgs = false on your Context when using treatUnknownOptionsAsArgs . You may also find that subcommands are a better fit than treatUnknownOptionsAsArgs for your use case.","title":"Unknown Options"},{"location":"options/#values-from-environment-variables","text":"Clikt supports reading option values from environment variables if they aren\u2019t given on the command line. This feature is helpful when automating tools. For example, when using git commit , you can set the author date with a command line parameter: git commit --date=10/21/2015 . But you can also set it with an environment variable: GIT_AUTHOR_DATE=10/21/2015 git commit . Clikt will read option values from environment variables as long as it has an envvar name for the option. There are two ways to set that name: you can set the name manually for an option, or you can enable automatic envvar name inference. To set the envvar name manually, pass the name to option : Example class Hello : CliktCommand () { val name by option ( envvar = \"MY_NAME\" ) override fun run () { echo ( \"Hello $name\" ) } } Usage 1 $ export MY_NAME=Foo $ ./hello Hello Foo Usage 2 $ export MY_NAME=Foo $ ./hello --name=Bar Hello Bar You can enable automatic envvar name inference by setting the autoEnvvarPrefix on a command\u2019s context . This will cause all options without an explicit envvar name to be given an uppercase underscore-separated envvar name. Since the prefix is set on the context , it is propagated to subcommands. If you have a a subcommand called foo with an option --bar , and your prefix is MY_TOOL , the option\u2019s envvar name will be MY_TOOL_FOO_BAR . Example class Hello : CliktCommand () { init { context { autoEnvvarPrefix = \"HELLO\" } } val name by option () override fun run () { echo ( \"Hello $name\" ) } } Usage $ export HELLO_NAME=Foo $ ./hello Hello Foo","title":"Values From Environment Variables"},{"location":"options/#multiple-values-from-environment-variables","text":"You might need to allow users to specify multiple values for an option in a single environment variable. You can do this by creating an option with multiple . The environment variable\u2019s value will be split according a regex, which defaults to split on whitespace for most types. file will change the pattern to split according to the operating system\u2019s path splitting rules. On Windows, it will split on semicolons ( ; ). On other systems, it will split on colons ( : ). You can also specify a split pattern by passing it to the envvarSplit parameter of option . Example class Hello : CliktCommand () { val names by option ( envvar = \"NAMES\" ). multiple () override fun run () { for ( name in names ) echo ( \"Hello $name\" ) } } Usage $ export NAMES=Foo Bar $ ./hello Hello Foo Hello Bar","title":"Multiple Values from Environment Variables"},{"location":"options/#flag-option-values-from-environment-variables","text":"For flag options, any of the following (case-insensitive) environment variable values will be interpreted as true : \"true\" , \"t\" , \"1\" , \"yes\" , \"y\" , \"on\" The following (case-insensitive) values wil be interpreted as false : \"false\" , \"f\" , \"0\" , \"no\" , \"n\" , \"off\" All other values are invalid.","title":"Flag Option Values from Environment Variables"},{"location":"options/#values-from-configuration-files","text":"Clikt also supports reading option values from one or more configuration files (or other sources) when they aren\u2019t present on the command line. For example, when using git commit , you can set the author email with a command line parameter: git commit --author='Clikt <clikt@example.com> . But you can also set it in your git configuration file: user.email=clikt@example.com . Clikt allows you to specify one or more sources of option values that will be read from with the Context.valueSource builder. Example class Hello : CliktCommand () { init { context { valueSource = PropertiesValueSource . from ( \"myconfig.properties\" ) } } val name by option () override fun run () { echo ( \"Hello $name\" ) } } Usage $ echo \"name=Foo\" > myconfig.properties $ ./hello Hello Foo You can also pass multiple sources to Context.valueSources , and each source will be searched for the value in order. Clikt includes support for reading values from a map , and (on JVM) from Java Properties files . For these two sources, you can customize the keys used to look up options by passing the result of ValueSource.getKey or ValueSource.envvarKey to the source\u2019s getKey constructor parameter. You can add any other file type by implementing ValueSource . See the JSON sample for an implementation that uses kotlinx.serialization to load values from JSON files.","title":"Values from Configuration Files"},{"location":"options/#configuration-files-and-environment-variables","text":"Every option can read values from both environment variables and configuration files. By default, Clikt will use the value from an environment variable before the value from a configuration file, but you can change this by setting Context.readEnvvarBeforeValueSource to false .","title":"Configuration Files and Environment Variables"},{"location":"options/#windows-and-java-style-option-prefixes","text":"When specifying option names manually, you can use any prefix (as long as it\u2019s entirely punctuation). For example, you can make a Windows-style interface with slashes: Example class Hello : CliktCommand () { val name by option ( \"/name\" , help = \"your name\" ) override fun run () { echo ( \"Hello, $name!\" ) } } Usage $ ./hello /name Foo Hello, Foo! Or you can make a Java-style interface that uses single-dashes for long options: Example class Hello : CliktCommand () { val name by option ( \"-name\" , help = \"your name\" ) override fun run () { echo ( \"Hello, $name!\" ) } } Usage $ ./hello -name Foo Hello, Foo! Note that inferred names will always have a POSIX-style prefix like --name . If you want to use a different prefix, you should specify all option names manually.","title":"Windows and Java-Style Option Prefixes"},{"location":"options/#option-transformation-order","text":"Clikt has a large number of extension functions that can modify options. When applying multiple functions to the same option, there\u2019s only one valid order for the functions to be applied. For example, option().default(3).int() will not compile, because default must be applied after the value type conversion. Similarly, you can only apply one transform of each type. So option().int().float() is invalid since int and float both change the value type, as is option().default(\"\").multiple() since default and multiple both transform the call list (if you need a custom default value for multiple , you can pass it one as an argument). Here\u2019s an integer option with one of each available transform in a valid order: val opt : Pair < Int , Int > by option ( \"-o\" , \"--opt\" ) . int () . restrictTo ( 1. . 100 ) . pair () . default ( 1 to 2 ) . validate { require ( it . second % 2 == 0 ) }","title":"Option Transformation Order"},{"location":"parameters/","text":"Parameters \u00b6 Clikt supports two types of parameters: options and positional arguments. If you\u2019re following Unix conventions with your interface, you should use options for most parameters. Options are usually optional, and arguments are frequently required. Differences \u00b6 Arguments have the advantage of being able to accept a variable number of values, while Options are limited to a fixed number of values. Other than that restriction, options have more capabilities than arguments. Options can: Act as flags (options don\u2019t have to take values) Prompt for missing input Load values from environment variables In general, arguments are usually used for values like file paths or URLs, or for required values, and options are used for everything else. Parameter Names \u00b6 Both options and arguments can infer their names (or the metavar in the case of arguments) from the name of the property. You can also specify the names manually. Options can have any number of names, where arguments only have a single metavar. Example class Cli : CliktCommand () { val inferredOpt by option () val inferred by argument () val explicitOpt by option ( \"-e\" , \"--explicit\" ) val explicitArg by argument ( \"<explicit>\" ) override fun run () = Unit } Help Output Usage: cli [OPTIONS] INFERRED <explicit> Options: --inferred-opt TEXT -e, --explicit TEXT -h, --help Show this message and exit Parameter Types \u00b6 Both options and arguments can convert the String that the user inputs to other types. Types work by transforming the return value of the property delegate. By default parameters have a string type: val opt : String ? by option ( help = \"an option\" ) val arg : String by argument ( help = \"an argument\" ) To convert the input to an integer, for example, use the int() extension function: val opt : Int ? by option ( help = \"an option\" ). int () val arg : Int by argument ( help = \"an argument\" ). int () Built-In Types \u00b6 There are a number of built in types that can be applied to options and arguments. Int and Long \u00b6 option().int() and argument().int() option().long() and argument().long() By default, any value that fits in the integer type is accepted. You can restrict the values to a range with restrictTo() , which allows you to either clamp the input to the range, or fail with an error if the input is outside the range. Float and Double \u00b6 option().float() and argument().float() option().double() and argument().double() As with integers, you can restrict the input to a range with restrictTo() . Choice \u00b6 option().choice() and argument().choice() You can restrict the values to a set of values, and optionally map the input to a new value. For example, to create an option that only accepts the value \u201cA\u201d or \u201cB\u201d: val opt : String ? by option (). choice ( \"a\" , \"b\" ) You can also convert the restricted set of values to a new type: val color : Int ? by argument (). choice ( \"red\" to 1 , \"green\" to 2 ) Choice parameters accept values that are case-sensitive by default. This can be configured by passing ignoreCase = true . Enum \u00b6 option().enum() and argument().enum() Like choice , but uses the values of an enum type. enum class Color { RED , GREEN } val color : Color ? by option (). enum < Color >() Enum parameters accept case-insensitive values by default. This can be configured by passing ignoreCase = false . File paths \u00b6 option().file() and argument().file() option().path() and argument().path() These conversion functions take extra parameters that allow you to require that values are file paths that have certain attributes, such as that they are directories, or they are writable files. File path InputStream and OutputStream s \u00b6 option().inputStream() and argument().inputStream() option().outputStream() and argument().outputStream() Like file and path , these conversions take file path values, but expose them as open streams for reading or writing. They support the unix convention of passing - to specify stdin or stdout rather than a file on the filesystem. You\u2019ll need to close the streams yourself. You can also use stdin or stdout as their default values. Custom Types \u00b6 You can convert parameter values to a custom type by using argument().convert() and option().convert() . These functions take a lambda that converts the input String to any type. If the parameter takes multiple values, or an option appears multiple times in argv , the conversion lambda is called once for each value. Any errors that are thrown from the lambda are automatically caught and a usage message is printed to the user. If you need to trigger conversion failure, you can use fail(\"error message\") instead of raising an exception. For example, you can create an option of type BigDecimal like this: Example class Cli : CliktCommand () { val opt by option (). convert { it . toBigDecimal () } override fun run () = echo ( \"opt=$opt\" ) } Usage 1 $ ./cli --opt=1.5 opt=1.5 Usage 2 $ ./cli --opt=foo Usage: cli [OPTIONS] Error: Invalid value for \"--opt\": For input string: \"foo\" Metavars \u00b6 You can also pass option().convert() a metavar that will be printed in the help page instead of the default of VALUE . We can modify the above example to use a metavar and an explicit error message: Example class Cli : CliktCommand () { val opt by option ( help = \"a real number\" ). convert ( \"FLOAT\" ) { it . toBigDecimalOrNull () ?: fail ( \"A real number is required\" ) } override fun run () = echo ( \"opt=$opt\" ) } Usage 1 $ ./cli --opt=foo Usage: cli [OPTIONS] Error: Invalid value for \"--opt\": A real number is required Usage 2 $ ./cli --help Usage: cli [OPTIONS] Options: --opt FLOAT a real number -h, --help Show this message and exit Chaining \u00b6 You can call convert more than once on the same parameter. This allows you to reuse existing conversion functions. For example, you could automatically read the text of a file parameter. Example class FileReader : CliktCommand () { val file : String by argument () . file ( mustExist = true , canBeDir = false ) . convert { it . readText () } override fun run () { echo ( \"Your file contents: $file\" ) } } Usage $ echo 'some text' > myfile.txt $ ./filereader ./myfile.txt Your file contents: some text Parameter Validation \u00b6 After converting a value to a new type, you can perform additional validation on the converted value with check() and validate() (or the argument equivalents ). check() \u00b6 check() is similar the stdlib function of the same name : it takes lambda that returns a boolean to indicate if the parameter value is valid or not, and reports an error if it returns false. The lambda is only called if the parameter value is non-null. Example class Tool : CliktCommand () { val number by option ( help = \"An even number\" ). int () . check ( \"value must be even\" ) { it % 2 == 0 } override fun run () { echo ( \"number=$number\" ) } } Usage 1 $ ./tool --number=2 number=2 Usage 2 $ ./tool number=null Usage 3 $ ./tool --number=1 Usage: tool [OPTIONS] Error: invalid value for --number: value must be even validate() \u00b6 For more complex validation, you can use validate() . This function takes a lambda that returns nothing, but can call fail(\"error message\") if the value is invalid. You can also call require() , which will fail if the provided expression is false. Like check , the lambda is only called if the value is non-null. The lambdas you pass to validate are called after the values for all options and arguments have been set, so (unlike in transforms) you can reference other parameters: Example class Tool : CliktCommand () { val number by option (). int (). default ( 0 ) val biggerNumber by option (). int (). validate { require ( it > number ) { \"--bigger-number must be bigger than --number\" } } override fun run () { echo ( \"number=$number, biggerNumber=$biggerNumber\" ) } } Usage 1 $ ./tool --number=1 number=1, biggerNumber=null Usage 2 $ ./tool --number=1 --bigger-number=0 Usage: tool [OPTIONS] Error: --bigger-number must be bigger than --number","title":"Parameters"},{"location":"parameters/#parameters","text":"Clikt supports two types of parameters: options and positional arguments. If you\u2019re following Unix conventions with your interface, you should use options for most parameters. Options are usually optional, and arguments are frequently required.","title":"Parameters"},{"location":"parameters/#differences","text":"Arguments have the advantage of being able to accept a variable number of values, while Options are limited to a fixed number of values. Other than that restriction, options have more capabilities than arguments. Options can: Act as flags (options don\u2019t have to take values) Prompt for missing input Load values from environment variables In general, arguments are usually used for values like file paths or URLs, or for required values, and options are used for everything else.","title":"Differences"},{"location":"parameters/#parameter-names","text":"Both options and arguments can infer their names (or the metavar in the case of arguments) from the name of the property. You can also specify the names manually. Options can have any number of names, where arguments only have a single metavar. Example class Cli : CliktCommand () { val inferredOpt by option () val inferred by argument () val explicitOpt by option ( \"-e\" , \"--explicit\" ) val explicitArg by argument ( \"<explicit>\" ) override fun run () = Unit } Help Output Usage: cli [OPTIONS] INFERRED <explicit> Options: --inferred-opt TEXT -e, --explicit TEXT -h, --help Show this message and exit","title":"Parameter Names"},{"location":"parameters/#parameter-types","text":"Both options and arguments can convert the String that the user inputs to other types. Types work by transforming the return value of the property delegate. By default parameters have a string type: val opt : String ? by option ( help = \"an option\" ) val arg : String by argument ( help = \"an argument\" ) To convert the input to an integer, for example, use the int() extension function: val opt : Int ? by option ( help = \"an option\" ). int () val arg : Int by argument ( help = \"an argument\" ). int ()","title":"Parameter Types"},{"location":"parameters/#built-in-types","text":"There are a number of built in types that can be applied to options and arguments.","title":"Built-In Types"},{"location":"parameters/#int-and-long","text":"option().int() and argument().int() option().long() and argument().long() By default, any value that fits in the integer type is accepted. You can restrict the values to a range with restrictTo() , which allows you to either clamp the input to the range, or fail with an error if the input is outside the range.","title":"Int and Long"},{"location":"parameters/#float-and-double","text":"option().float() and argument().float() option().double() and argument().double() As with integers, you can restrict the input to a range with restrictTo() .","title":"Float and Double"},{"location":"parameters/#choice","text":"option().choice() and argument().choice() You can restrict the values to a set of values, and optionally map the input to a new value. For example, to create an option that only accepts the value \u201cA\u201d or \u201cB\u201d: val opt : String ? by option (). choice ( \"a\" , \"b\" ) You can also convert the restricted set of values to a new type: val color : Int ? by argument (). choice ( \"red\" to 1 , \"green\" to 2 ) Choice parameters accept values that are case-sensitive by default. This can be configured by passing ignoreCase = true .","title":"Choice"},{"location":"parameters/#enum","text":"option().enum() and argument().enum() Like choice , but uses the values of an enum type. enum class Color { RED , GREEN } val color : Color ? by option (). enum < Color >() Enum parameters accept case-insensitive values by default. This can be configured by passing ignoreCase = false .","title":"Enum"},{"location":"parameters/#file-paths","text":"option().file() and argument().file() option().path() and argument().path() These conversion functions take extra parameters that allow you to require that values are file paths that have certain attributes, such as that they are directories, or they are writable files.","title":"File paths"},{"location":"parameters/#file-path-inputstream-and-outputstreams","text":"option().inputStream() and argument().inputStream() option().outputStream() and argument().outputStream() Like file and path , these conversions take file path values, but expose them as open streams for reading or writing. They support the unix convention of passing - to specify stdin or stdout rather than a file on the filesystem. You\u2019ll need to close the streams yourself. You can also use stdin or stdout as their default values.","title":"File path InputStream and OutputStreams"},{"location":"parameters/#custom-types","text":"You can convert parameter values to a custom type by using argument().convert() and option().convert() . These functions take a lambda that converts the input String to any type. If the parameter takes multiple values, or an option appears multiple times in argv , the conversion lambda is called once for each value. Any errors that are thrown from the lambda are automatically caught and a usage message is printed to the user. If you need to trigger conversion failure, you can use fail(\"error message\") instead of raising an exception. For example, you can create an option of type BigDecimal like this: Example class Cli : CliktCommand () { val opt by option (). convert { it . toBigDecimal () } override fun run () = echo ( \"opt=$opt\" ) } Usage 1 $ ./cli --opt=1.5 opt=1.5 Usage 2 $ ./cli --opt=foo Usage: cli [OPTIONS] Error: Invalid value for \"--opt\": For input string: \"foo\"","title":"Custom Types"},{"location":"parameters/#metavars","text":"You can also pass option().convert() a metavar that will be printed in the help page instead of the default of VALUE . We can modify the above example to use a metavar and an explicit error message: Example class Cli : CliktCommand () { val opt by option ( help = \"a real number\" ). convert ( \"FLOAT\" ) { it . toBigDecimalOrNull () ?: fail ( \"A real number is required\" ) } override fun run () = echo ( \"opt=$opt\" ) } Usage 1 $ ./cli --opt=foo Usage: cli [OPTIONS] Error: Invalid value for \"--opt\": A real number is required Usage 2 $ ./cli --help Usage: cli [OPTIONS] Options: --opt FLOAT a real number -h, --help Show this message and exit","title":"Metavars"},{"location":"parameters/#chaining","text":"You can call convert more than once on the same parameter. This allows you to reuse existing conversion functions. For example, you could automatically read the text of a file parameter. Example class FileReader : CliktCommand () { val file : String by argument () . file ( mustExist = true , canBeDir = false ) . convert { it . readText () } override fun run () { echo ( \"Your file contents: $file\" ) } } Usage $ echo 'some text' > myfile.txt $ ./filereader ./myfile.txt Your file contents: some text","title":"Chaining"},{"location":"parameters/#parameter-validation","text":"After converting a value to a new type, you can perform additional validation on the converted value with check() and validate() (or the argument equivalents ).","title":"Parameter Validation"},{"location":"parameters/#check","text":"check() is similar the stdlib function of the same name : it takes lambda that returns a boolean to indicate if the parameter value is valid or not, and reports an error if it returns false. The lambda is only called if the parameter value is non-null. Example class Tool : CliktCommand () { val number by option ( help = \"An even number\" ). int () . check ( \"value must be even\" ) { it % 2 == 0 } override fun run () { echo ( \"number=$number\" ) } } Usage 1 $ ./tool --number=2 number=2 Usage 2 $ ./tool number=null Usage 3 $ ./tool --number=1 Usage: tool [OPTIONS] Error: invalid value for --number: value must be even","title":"check()"},{"location":"parameters/#validate","text":"For more complex validation, you can use validate() . This function takes a lambda that returns nothing, but can call fail(\"error message\") if the value is invalid. You can also call require() , which will fail if the provided expression is false. Like check , the lambda is only called if the value is non-null. The lambdas you pass to validate are called after the values for all options and arguments have been set, so (unlike in transforms) you can reference other parameters: Example class Tool : CliktCommand () { val number by option (). int (). default ( 0 ) val biggerNumber by option (). int (). validate { require ( it > number ) { \"--bigger-number must be bigger than --number\" } } override fun run () { echo ( \"number=$number, biggerNumber=$biggerNumber\" ) } } Usage 1 $ ./tool --number=1 number=1, biggerNumber=null Usage 2 $ ./tool --number=1 --bigger-number=0 Usage: tool [OPTIONS] Error: --bigger-number must be bigger than --number","title":"validate()"},{"location":"quickstart/","text":"Quick Start \u00b6 You can get the library using any maven-compatible build system. Installation instructions can be found in the README . Basic Concepts \u00b6 Clikt command line interfaces are created by using property delegates inside of a CliktCommmand . The normal way to use Clikt is to forward argv from your main function to CliktCommand.main . The simplest command with no parameters would look like this: class Hello : CliktCommand () { override fun run () { echo ( \"Hello World!\" ) } } fun main ( args : Array < String >) = Hello (). main ( args ) And what it looks like to use: $ ./hello Hello World! A help page is generated automatically: $ ./hello --help Usage: hello [OPTIONS] Options: -h, --help Show this message and exit Printing to Stdout and Stderr \u00b6 Why does this example use echo instead of println ? Although println works, it can cause problems with multi-platform support. echo automatically translates line breaks into the line separator for the current platform. So you don\u2019t have to worry that some of your users will see mangled output because you didn\u2019t test on Windows. You can also pass err=true to echo to print to stderr instead of stdout. Nesting Commands \u00b6 Instances of any command can be attached to other commands, allowing arbitrary nesting of commands. For example, you could write a script to manage a database: Example class Database : CliktCommand () { override fun run () = Unit } class Init : CliktCommand ( help = \"Initialize the database\" ) { override fun run () { echo ( \"Initialized the database.\" ) } } class Drop : CliktCommand ( help = \"Drop the database\" ) { override fun run () { echo ( \"Dropped the database.\" ) } } fun main ( args : Array < String >) = Database () . subcommands ( Init (), Drop ()) . main ( args ) Usage $ ./db init Initialized the database. Help Output $ ./db --help Usage: database [OPTIONS] COMMAND [ARGS]... Options: -h, --help Show this message and exit Commands: init Initialize the database drop Drop the database Adding Parameters \u00b6 To add parameters, use the option and argument property delegates: Example class Hello : CliktCommand () { val count by option ( help = \"Number of greetings\" ). int (). default ( 1 ) val name by argument () override fun run () { for ( i in 1. . count ) { echo ( \"Hello $name!\" ) } } } Help Output $ ./hello --help Usage: hello [OPTIONS] USERNAME Options: --count INT Number of greetings -h, --help Show this message and exit Developing Command Line Applications With Gradle \u00b6 When you write a command line application, you probably want to be able to run it without invoking java -jar ... every time. If you\u2019re using Gradle, the application plugin provides a gradle task that bundles your program jars and scripts to launch them. It makes it easy to build a zip or tarball that you can distribute to your users without them needing to perform any incantations like setting up a classpath. You can see this plugin in use the in Clikt samples . The application plugin also creates tasks that will build then run your main function directly from within gradle. Although it seems like these tasks would make development easier, they are not recommended for use with command line programs. Unfortunately, due to the way gradle is designed, command line arguments are not visible to the task. Although you can hack the task to split up a gradle property and pass it in to your argv, this approach is limited. Additionally, stdin, stdout, and environment variables are all captured by gradle. All these limitations make the run task mostly useless for command line applications. An easier way to do development is to used the installDist task provided by the plugin. This builds all the distribution scripts in your build folder, which you can then execute normally. See Clikt\u2019s runsample script for an example of this approach.","title":"Quick Start"},{"location":"quickstart/#quick-start","text":"You can get the library using any maven-compatible build system. Installation instructions can be found in the README .","title":"Quick Start"},{"location":"quickstart/#basic-concepts","text":"Clikt command line interfaces are created by using property delegates inside of a CliktCommmand . The normal way to use Clikt is to forward argv from your main function to CliktCommand.main . The simplest command with no parameters would look like this: class Hello : CliktCommand () { override fun run () { echo ( \"Hello World!\" ) } } fun main ( args : Array < String >) = Hello (). main ( args ) And what it looks like to use: $ ./hello Hello World! A help page is generated automatically: $ ./hello --help Usage: hello [OPTIONS] Options: -h, --help Show this message and exit","title":"Basic Concepts"},{"location":"quickstart/#printing-to-stdout-and-stderr","text":"Why does this example use echo instead of println ? Although println works, it can cause problems with multi-platform support. echo automatically translates line breaks into the line separator for the current platform. So you don\u2019t have to worry that some of your users will see mangled output because you didn\u2019t test on Windows. You can also pass err=true to echo to print to stderr instead of stdout.","title":"Printing to Stdout and Stderr"},{"location":"quickstart/#nesting-commands","text":"Instances of any command can be attached to other commands, allowing arbitrary nesting of commands. For example, you could write a script to manage a database: Example class Database : CliktCommand () { override fun run () = Unit } class Init : CliktCommand ( help = \"Initialize the database\" ) { override fun run () { echo ( \"Initialized the database.\" ) } } class Drop : CliktCommand ( help = \"Drop the database\" ) { override fun run () { echo ( \"Dropped the database.\" ) } } fun main ( args : Array < String >) = Database () . subcommands ( Init (), Drop ()) . main ( args ) Usage $ ./db init Initialized the database. Help Output $ ./db --help Usage: database [OPTIONS] COMMAND [ARGS]... Options: -h, --help Show this message and exit Commands: init Initialize the database drop Drop the database","title":"Nesting Commands"},{"location":"quickstart/#adding-parameters","text":"To add parameters, use the option and argument property delegates: Example class Hello : CliktCommand () { val count by option ( help = \"Number of greetings\" ). int (). default ( 1 ) val name by argument () override fun run () { for ( i in 1. . count ) { echo ( \"Hello $name!\" ) } } } Help Output $ ./hello --help Usage: hello [OPTIONS] USERNAME Options: --count INT Number of greetings -h, --help Show this message and exit","title":"Adding Parameters"},{"location":"quickstart/#developing-command-line-applications-with-gradle","text":"When you write a command line application, you probably want to be able to run it without invoking java -jar ... every time. If you\u2019re using Gradle, the application plugin provides a gradle task that bundles your program jars and scripts to launch them. It makes it easy to build a zip or tarball that you can distribute to your users without them needing to perform any incantations like setting up a classpath. You can see this plugin in use the in Clikt samples . The application plugin also creates tasks that will build then run your main function directly from within gradle. Although it seems like these tasks would make development easier, they are not recommended for use with command line programs. Unfortunately, due to the way gradle is designed, command line arguments are not visible to the task. Although you can hack the task to split up a gradle property and pass it in to your argv, this approach is limited. Additionally, stdin, stdout, and environment variables are all captured by gradle. All these limitations make the run task mostly useless for command line applications. An easier way to do development is to used the installDist task provided by the plugin. This builds all the distribution scripts in your build folder, which you can then execute normally. See Clikt\u2019s runsample script for an example of this approach.","title":"Developing Command Line Applications With Gradle"},{"location":"utilities/","text":"Utilities \u00b6 Writing command line interfaces often involves more than just parsing the command line. Clikt also provides functions to perform actions commonly used in command line programs. Launching Editors \u00b6 If you need to ask users for multi-line input, or need to have the user edit a file, you can do so through TermUi.editText and TermUi.editFile . These functions open the program defined in the VISUAL or EDITOR environment variables, or a sensible default if neither are defined. The functions return the edited text if the user saved their changes. Example fun getCommitMessage (): String ? { val message = \"\"\" # Enter your message. # Lines starting with # are ignored \"\"\" . trimIndent () return TermUi . editText ( message , requireSave = true ) ?. replace ( Regex ( \"#[^\\n]*\\n\" ), \"\" ) } Input Prompts \u00b6 Options can prompt for values automatically , but you can also do so manually with TermUi.prompt . By default, it accepts any input string, but you can also pass in a conversion function. If the conversion raises a UsageError , the prompt will ask the user to enter a different value. Example val input = TermUi . prompt ( \"Enter a number\" ) { it . toIntOrNull () ?: throw UsageError ( \"$it is not a valid integer\" ) } TermUi . echo ( \"Twice your number is ${input * 2}\" ) Interactive Session Enter a number: foo Error: foo is not a valid integer Enter a number: 11 Twice your number is 22 Confirmation Prompts \u00b6 You can also ask the user for a yes or no response with TermUi.confirm : if ( TermUi . confirm ( \"Continue?\" ) == true ) { TermUi . echo ( \"OK!\" ) } If you simply want to abort the program in the user gives a negative response, you can pass abort=true : TermUi . confirm ( \"Continue?\" , abort = true )","title":"Utilities"},{"location":"utilities/#utilities","text":"Writing command line interfaces often involves more than just parsing the command line. Clikt also provides functions to perform actions commonly used in command line programs.","title":"Utilities"},{"location":"utilities/#launching-editors","text":"If you need to ask users for multi-line input, or need to have the user edit a file, you can do so through TermUi.editText and TermUi.editFile . These functions open the program defined in the VISUAL or EDITOR environment variables, or a sensible default if neither are defined. The functions return the edited text if the user saved their changes. Example fun getCommitMessage (): String ? { val message = \"\"\" # Enter your message. # Lines starting with # are ignored \"\"\" . trimIndent () return TermUi . editText ( message , requireSave = true ) ?. replace ( Regex ( \"#[^\\n]*\\n\" ), \"\" ) }","title":"Launching Editors"},{"location":"utilities/#input-prompts","text":"Options can prompt for values automatically , but you can also do so manually with TermUi.prompt . By default, it accepts any input string, but you can also pass in a conversion function. If the conversion raises a UsageError , the prompt will ask the user to enter a different value. Example val input = TermUi . prompt ( \"Enter a number\" ) { it . toIntOrNull () ?: throw UsageError ( \"$it is not a valid integer\" ) } TermUi . echo ( \"Twice your number is ${input * 2}\" ) Interactive Session Enter a number: foo Error: foo is not a valid integer Enter a number: 11 Twice your number is 22","title":"Input Prompts"},{"location":"utilities/#confirmation-prompts","text":"You can also ask the user for a yes or no response with TermUi.confirm : if ( TermUi . confirm ( \"Continue?\" ) == true ) { TermUi . echo ( \"OK!\" ) } If you simply want to abort the program in the user gives a negative response, you can pass abort=true : TermUi . confirm ( \"Continue?\" , abort = true )","title":"Confirmation Prompts"},{"location":"whyclikt/","text":"Why Clikt? \u00b6 There are existing Kotlin libraries for creating command line interfaces, and many Java libraries work in Kotlin as well. However, none of them had all of the following features: Unrestricted composability of commands Fully static type safety for parameters Composable parameter customization that doesn\u2019t require registering converter objects. Full support for Unix command line conventions Capable of reading parameter values from environment variables out of the box Included support for common functionality (keyboard interactivity, line ending normalization, launching editors, etc.) Built-in support for multi-token command aliases Clikt is focused on making writing robust, posix-compliant command line interfaces as easy as possible. A good CLI does more than just parse argv . It allows users to specify values in environment variables, and in some cases prompts for additional input, or opens an editor. Clikt supports all of this out of the box. Some times you need to make a CLI that doesn\u2019t follow Unix conventions. You might be writing for windows, or you want to use the Java style of long options with a single dash. Maybe you need to use a bunch of required options instead of arguments, or you want the help page formatted differently. \u201cBest practices\u201d might not be the best for you, so Clikt tries to make implementing uncommon use-cases as easy as possible. Why not a Kotlin library like kotlin-argparser or kotlinx.cli? \u00b6 Clikt isn\u2019t the only Kotlin CLI library. kotlin-argparser and kotlinx.cli both predate Clikt\u2019s creation. Both, like Clikt, use property delegates to define parameters, but they\u2019re missing most of Clikt features and its extensible design. kotlinx.cli was written by JetBrains and mostly copied kotlin-argparser \u2018s design (and, later, some of Clikt\u2019s). kotlin-argparser works well for simple cases. It\u2019s missing a lot of features that Clikt has, but features could be added. Its real drawback is that it fundamentally does not support composition of commands or parameter values. The lack of subcommand support was already a non-starter, but there are other design decisions that make it unsuitable. In the simple cases, the two libraries are similar. Here\u2019s an example from its README: class MyArgs ( parser : ArgParser ) { val v : Boolean by parser . flagging ( help = \"enable verbose mode\" ) val username : String ? by parser . storing ( help = \"name of the user\" ) val count : Int ? by parser . storing ( help = \"number of the widgets\" ) { toInt () } val source : List < String > by parser . positionalList ( help = \"source filenames\" ) val destination : String by parser . positional ( help = \"destination\" ) } fun main ( args : Array < String >) = mainBody { ArgParser ( args ). parseInto ( :: MyArgs ). run { println ( \"Hello, $username!\" ) println ( \"Moving $count widgets from $source to $destination.\" ) } } Here\u2019s the same thing with Clikt: class Cli : CliktCommand () { val v : Boolean by option ( help = \"enable verbose mode\" ). flag () val username : String ? by option ( help = \"name of the user\" ) val count : Int ? by option ( help = \"number of the widgets\" ). int () val source : List < String > by argument ( help = \"source filenames\" ). multiple () val destination : String by argument ( help = \"destination\" ) override fun run () { println ( \"Hello, $name!\" ) println ( \"Moving $count widgets from $source to $destination.\" ) } } fun main ( args : Array < String >) = Cli (). main ( args ) Both work fine, although you may find Clikt more consistent and a bit less verbose. The differences become more pronounced once you try to do anything that isn\u2019t built in to kotlin-argparser . Maybe you need an option to take two values. Here\u2019s another example from the kotlin-argparser README showing how to do that: fun ArgParser . putting ( vararg names : String , help : String ) = option < MutableMap < String , String >>(* names , argNames = listOf ( \"KEY\" , \"VALUE\" ), help = help ) { value . orElse { mutableMapOf < String , String >() }. apply { put ( arguments . first (), arguments . last ()) } } fun ArgParser . putting ( help : String ) = ArgParser . DelegateProvider { identifier -> putting ( identifierToOptionName ( identifier ), help = help ) } class MyArgs ( parser : ArgParser ) { val v by parser . putting ( help = \"this takes two values\" ) } Clikt has that functionality built in as option().pair() , but you could implement it yourself like this: class Cli : CliktCommand () { val v by option ( help = \"this takes two values\" ). transformValues ( 2 ) { it [ 0 ] to it [ 1 ] } } The Clikt version is of course much simpler, but there are more fundamental issues with the kotlin-argparser version that drove the creation of Clikt: Its inheritance-based design means that if you wanted to change the type of each value, you would have to copy all of the code for each type. With Clikt, you could just do option().int().transformValues(2) { it[0] to it[1] } Its inheritance-based design means that supporting types, multiple values, and multiple option occurrences would require a combinatorial number of copies of the above code. With Clikt, these are all orthogonal. You have to do all error checking yourself. The argparser example silently discards extra values, or copies the single value, rather than inform the user of the mistake. You could write more code to do so, but Clikt takes care of it for you. Option name inference is not automatic, requiring you to wrap the delegate with yet another function. Each delegate function has a different name, with no indication of whether its creating an option or positional argument. With Clikt, all options are created with option() , and all arguments with argument() . Some of these problems can be solved by writing more code, and some can\u2019t. On the other hand, Clikt attempts to have a consistent, intuitive, composable design that does the right thing without forcing you to think about edge cases. Why not a Java library like JCommander or Picocli? \u00b6 There are a lot of command line libraries for Java. Most are verbose and not composable. Two popular Java libraries that are usable from Kotlin are JCommander and picocli . These libraries use annotations to define parameters, and reflection to set fields. This is functional for simple types, but defining your own types requires you to register a type adapter with the library. This means that type errors are not caught until runtime, and many types of customization are not possible. For example, in JCommander, options that take multiple values cannot be converted to other types. The JCommander docs explain : \u2026 only List is allowed for parameters that define an arity. You will have to convert these values yourself if the parameters you need are of type Integer or other (this limitation is due to Java\u2019s erasure). You also can\u2019t customize many aspects of parsing in JCommander. It can\u2019t infer parameter names. With JCommander, you can\u2019t have an option with multiple values and multiple occurrences at the same time. You can\u2019t have more than one argument, and it can only take one value or an unlimited number of values. You can\u2019t nest subcommands. JCommander and piocli are great libraries if you\u2019re writing code in Java, but we can do much better with Kotlin.","title":"Why Clikt?"},{"location":"whyclikt/#why-clikt","text":"There are existing Kotlin libraries for creating command line interfaces, and many Java libraries work in Kotlin as well. However, none of them had all of the following features: Unrestricted composability of commands Fully static type safety for parameters Composable parameter customization that doesn\u2019t require registering converter objects. Full support for Unix command line conventions Capable of reading parameter values from environment variables out of the box Included support for common functionality (keyboard interactivity, line ending normalization, launching editors, etc.) Built-in support for multi-token command aliases Clikt is focused on making writing robust, posix-compliant command line interfaces as easy as possible. A good CLI does more than just parse argv . It allows users to specify values in environment variables, and in some cases prompts for additional input, or opens an editor. Clikt supports all of this out of the box. Some times you need to make a CLI that doesn\u2019t follow Unix conventions. You might be writing for windows, or you want to use the Java style of long options with a single dash. Maybe you need to use a bunch of required options instead of arguments, or you want the help page formatted differently. \u201cBest practices\u201d might not be the best for you, so Clikt tries to make implementing uncommon use-cases as easy as possible.","title":"Why Clikt?"},{"location":"whyclikt/#why-not-a-kotlin-library-like-kotlin-argparser-or-kotlinxcli","text":"Clikt isn\u2019t the only Kotlin CLI library. kotlin-argparser and kotlinx.cli both predate Clikt\u2019s creation. Both, like Clikt, use property delegates to define parameters, but they\u2019re missing most of Clikt features and its extensible design. kotlinx.cli was written by JetBrains and mostly copied kotlin-argparser \u2018s design (and, later, some of Clikt\u2019s). kotlin-argparser works well for simple cases. It\u2019s missing a lot of features that Clikt has, but features could be added. Its real drawback is that it fundamentally does not support composition of commands or parameter values. The lack of subcommand support was already a non-starter, but there are other design decisions that make it unsuitable. In the simple cases, the two libraries are similar. Here\u2019s an example from its README: class MyArgs ( parser : ArgParser ) { val v : Boolean by parser . flagging ( help = \"enable verbose mode\" ) val username : String ? by parser . storing ( help = \"name of the user\" ) val count : Int ? by parser . storing ( help = \"number of the widgets\" ) { toInt () } val source : List < String > by parser . positionalList ( help = \"source filenames\" ) val destination : String by parser . positional ( help = \"destination\" ) } fun main ( args : Array < String >) = mainBody { ArgParser ( args ). parseInto ( :: MyArgs ). run { println ( \"Hello, $username!\" ) println ( \"Moving $count widgets from $source to $destination.\" ) } } Here\u2019s the same thing with Clikt: class Cli : CliktCommand () { val v : Boolean by option ( help = \"enable verbose mode\" ). flag () val username : String ? by option ( help = \"name of the user\" ) val count : Int ? by option ( help = \"number of the widgets\" ). int () val source : List < String > by argument ( help = \"source filenames\" ). multiple () val destination : String by argument ( help = \"destination\" ) override fun run () { println ( \"Hello, $name!\" ) println ( \"Moving $count widgets from $source to $destination.\" ) } } fun main ( args : Array < String >) = Cli (). main ( args ) Both work fine, although you may find Clikt more consistent and a bit less verbose. The differences become more pronounced once you try to do anything that isn\u2019t built in to kotlin-argparser . Maybe you need an option to take two values. Here\u2019s another example from the kotlin-argparser README showing how to do that: fun ArgParser . putting ( vararg names : String , help : String ) = option < MutableMap < String , String >>(* names , argNames = listOf ( \"KEY\" , \"VALUE\" ), help = help ) { value . orElse { mutableMapOf < String , String >() }. apply { put ( arguments . first (), arguments . last ()) } } fun ArgParser . putting ( help : String ) = ArgParser . DelegateProvider { identifier -> putting ( identifierToOptionName ( identifier ), help = help ) } class MyArgs ( parser : ArgParser ) { val v by parser . putting ( help = \"this takes two values\" ) } Clikt has that functionality built in as option().pair() , but you could implement it yourself like this: class Cli : CliktCommand () { val v by option ( help = \"this takes two values\" ). transformValues ( 2 ) { it [ 0 ] to it [ 1 ] } } The Clikt version is of course much simpler, but there are more fundamental issues with the kotlin-argparser version that drove the creation of Clikt: Its inheritance-based design means that if you wanted to change the type of each value, you would have to copy all of the code for each type. With Clikt, you could just do option().int().transformValues(2) { it[0] to it[1] } Its inheritance-based design means that supporting types, multiple values, and multiple option occurrences would require a combinatorial number of copies of the above code. With Clikt, these are all orthogonal. You have to do all error checking yourself. The argparser example silently discards extra values, or copies the single value, rather than inform the user of the mistake. You could write more code to do so, but Clikt takes care of it for you. Option name inference is not automatic, requiring you to wrap the delegate with yet another function. Each delegate function has a different name, with no indication of whether its creating an option or positional argument. With Clikt, all options are created with option() , and all arguments with argument() . Some of these problems can be solved by writing more code, and some can\u2019t. On the other hand, Clikt attempts to have a consistent, intuitive, composable design that does the right thing without forcing you to think about edge cases.","title":"Why not a Kotlin library like kotlin-argparser or kotlinx.cli?"},{"location":"whyclikt/#why-not-a-java-library-like-jcommander-or-picocli","text":"There are a lot of command line libraries for Java. Most are verbose and not composable. Two popular Java libraries that are usable from Kotlin are JCommander and picocli . These libraries use annotations to define parameters, and reflection to set fields. This is functional for simple types, but defining your own types requires you to register a type adapter with the library. This means that type errors are not caught until runtime, and many types of customization are not possible. For example, in JCommander, options that take multiple values cannot be converted to other types. The JCommander docs explain : \u2026 only List is allowed for parameters that define an arity. You will have to convert these values yourself if the parameters you need are of type Integer or other (this limitation is due to Java\u2019s erasure). You also can\u2019t customize many aspects of parsing in JCommander. It can\u2019t infer parameter names. With JCommander, you can\u2019t have an option with multiple values and multiple occurrences at the same time. You can\u2019t have more than one argument, and it can only take one value or an unlimited number of values. You can\u2019t nest subcommands. JCommander and piocli are great libraries if you\u2019re writing code in Java, but we can do much better with Kotlin.","title":"Why not a Java library like JCommander or Picocli?"},{"location":"api/clikt/","text":"clikt Packages \u00b6 Name Summary com.github.ajalt.clikt.completion com.github.ajalt.clikt.core com.github.ajalt.clikt.output com.github.ajalt.clikt.parameters.arguments com.github.ajalt.clikt.parameters.groups com.github.ajalt.clikt.parameters.options com.github.ajalt.clikt.parameters.types com.github.ajalt.clikt.parsers com.github.ajalt.clikt.sources Index \u00b6 All Types","title":"Index"},{"location":"api/clikt/#packages","text":"Name Summary com.github.ajalt.clikt.completion com.github.ajalt.clikt.core com.github.ajalt.clikt.output com.github.ajalt.clikt.parameters.arguments com.github.ajalt.clikt.parameters.groups com.github.ajalt.clikt.parameters.options com.github.ajalt.clikt.parameters.types com.github.ajalt.clikt.parsers com.github.ajalt.clikt.sources","title":"Packages"},{"location":"api/clikt/#index","text":"All Types","title":"Index"},{"location":"api/clikt/alltypes/","text":"All Types \u00b6 Name Summary com.github.ajalt.clikt.core.Abort \u00b6 An internal error that signals Clikt to abort. | com.github.ajalt.clikt.parameters.arguments.ArgCallsTransformer \u00b6 A callback that transforms all the values into the final argument type | com.github.ajalt.clikt.parameters.options.ArgsTransformer \u00b6 A callback that transforms all the values for a call to the call type. | com.github.ajalt.clikt.parameters.arguments.Argument \u00b6 A positional parameter to a command. | com.github.ajalt.clikt.parameters.arguments.ArgumentDelegate \u00b6 An argument that functions as a property delegate | com.github.ajalt.clikt.parameters.arguments.ArgumentTransformContext \u00b6 A receiver for argument transformers. | com.github.ajalt.clikt.parameters.arguments.ArgValidator \u00b6 A callback validates the final argument type | com.github.ajalt.clikt.parameters.arguments.ArgValueConverter \u00b6 A callback that transforms a single value from one type to another | com.github.ajalt.clikt.parameters.arguments.ArgValueTransformer \u00b6 A callback that transforms a single value from a string to the value type | com.github.ajalt.clikt.core.BadParameterValue \u00b6 A parameter was given the correct number of values, but of invalid format or type. | com.github.ajalt.clikt.parameters.options.CallsTransformer \u00b6 A callback that transforms all of the calls to the final option type. | com.github.ajalt.clikt.sources.ChainedValueSource \u00b6 A ValueSource that looks for values in multiple other sources. | com.github.ajalt.clikt.parameters.groups.ChoiceGroup \u00b6 | com.github.ajalt.clikt.core.CliktCommand \u00b6 The CliktCommand is the core of command line interfaces in Clikt. | com.github.ajalt.clikt.output.CliktConsole \u00b6 An object that is used by commands and parameters to show text to the user and read input. | com.github.ajalt.clikt.core.CliktError \u00b6 An exception during command line processing that should be shown to the user. | com.github.ajalt.clikt.output.CliktHelpFormatter \u00b6 | com.github.ajalt.clikt.completion.CompletionCandidates \u00b6 Configurations for generating shell autocomplete suggestions | com.github.ajalt.clikt.core.Context \u00b6 A object used to control command line parsing and pass data between commands. | com.github.ajalt.clikt.parameters.groups.CoOccurringOptionGroup \u00b6 | com.github.ajalt.clikt.parameters.groups.CoOccurringOptionGroupTransform \u00b6 | com.github.ajalt.clikt.parameters.options.EagerOption \u00b6 An Option with no values that is finalize d before other types of options. | com.github.ajalt.clikt.completion.ExperimentalCompletionCandidates \u00b6 | com.github.ajalt.clikt.sources.ExperimentalValueSourceApi \u00b6 | com.github.ajalt.clikt.core.FileNotFound \u00b6 A required configuration file was not found. | com.github.ajalt.clikt.parameters.options.FlagConverter \u00b6 A block that converts a flag value from one type to another | com.github.ajalt.clikt.parameters.options.FlagOption \u00b6 An Option that has no values. | com.github.ajalt.clikt.parsers.FlagOptionParser \u00b6 A parser for options that take no values. | com.github.ajalt.clikt.core.GroupableOption \u00b6 An option that can be added to a ParameterGroup | com.github.ajalt.clikt.output.HelpFormatter \u00b6 Creates help and usage strings for a command. | com.github.ajalt.clikt.core.IncorrectArgumentValueCount \u00b6 An argument was supplied but the number of values supplied was incorrect. | com.github.ajalt.clikt.core.IncorrectOptionValueCount \u00b6 An option was supplied but the number of values supplied to the option was incorrect. | com.github.ajalt.clikt.output.InteractiveCliktConsole \u00b6 | com.github.ajalt.clikt.core.InvalidFileFormat \u00b6 A configuration file failed to parse correctly | com.github.ajalt.clikt.output.Localization \u00b6 Strings to use for help output and error messages | com.github.ajalt.clikt.sources.MapValueSource \u00b6 A ValueSource that reads values from a map. | com.github.ajalt.clikt.core.MissingArgument \u00b6 A required argument was not provided | com.github.ajalt.clikt.core.MissingOption \u00b6 A required option was not provided | com.github.ajalt.clikt.core.MutuallyExclusiveGroupException \u00b6 | com.github.ajalt.clikt.parameters.groups.MutuallyExclusiveOptions \u00b6 | com.github.ajalt.clikt.parameters.groups.MutuallyExclusiveOptionsTransform \u00b6 | com.github.ajalt.clikt.parameters.groups.MutuallyExclusiveOptionTransformContext \u00b6 | com.github.ajalt.clikt.output.NonInteractiveCliktConsole \u00b6 | com.github.ajalt.clikt.core.NoOpCliktCommand \u00b6 A CliktCommand that has a default implementation of CliktCommand.run that is a no-op. | com.github.ajalt.clikt.core.NoSuchOption \u00b6 An option was provided that does not exist. | com.github.ajalt.clikt.core.NoSuchParameter \u00b6 A parameter was provided that does not exist. | com.github.ajalt.clikt.core.NoSuchSubcommand \u00b6 A subcommand was provided that does not exist. | com.github.ajalt.clikt.parameters.options.NullableOption \u00b6 | com.github.ajalt.clikt.parameters.options.Option \u00b6 An optional command line parameter that takes a fixed number of values. | com.github.ajalt.clikt.parameters.options.OptionCallTransformContext \u00b6 A receiver for options transformers. | com.github.ajalt.clikt.parameters.options.OptionDelegate \u00b6 An option that functions as a property delegate | com.github.ajalt.clikt.parameters.groups.OptionGroup \u00b6 A group of options that can be shown together in help output, or restricted to be cooccurring . | com.github.ajalt.clikt.parsers.OptionParser \u00b6 A parser for Option s. | com.github.ajalt.clikt.parameters.options.OptionTransformContext \u00b6 A receiver for options transformers. | com.github.ajalt.clikt.parameters.options.OptionValidator \u00b6 A callback validates the final option type | com.github.ajalt.clikt.parameters.options.OptionWithValues \u00b6 An Option that takes one or more values. | com.github.ajalt.clikt.parsers.OptionWithValuesParser \u00b6 An option that takes one more values | com.github.ajalt.clikt.parameters.groups.ParameterGroup \u00b6 | com.github.ajalt.clikt.parameters.groups.ParameterGroupDelegate \u00b6 | com.github.ajalt.clikt.core.ParameterHolder \u00b6 | com.github.ajalt.clikt.core.ParameterHolderDsl \u00b6 | com.github.ajalt.clikt.core.PrintCompletionMessage \u00b6 An exception that indicates that shell completion code should be printed. | com.github.ajalt.clikt.core.PrintHelpMessage \u00b6 An exception that indicates that the command\u2019s help should be printed. | com.github.ajalt.clikt.core.PrintMessage \u00b6 An exception that indicates that a message should be printed. | com.github.ajalt.clikt.parameters.arguments.ProcessedArgument \u00b6 An Argument delegate implementation that transforms its values . | com.github.ajalt.clikt.core.ProgramResult \u00b6 Indicate that that the program finished in a controlled manner, and should complete with the given statusCode | com.github.ajalt.clikt.sources.PropertiesValueSource \u00b6 A ValueSource that reads values from a Properties object. | com.github.ajalt.clikt.parameters.arguments.RawArgument \u00b6 | com.github.ajalt.clikt.parameters.options.RawOption \u00b6 | com.github.ajalt.clikt.core.StaticallyGroupedOption \u00b6 | com.github.ajalt.clikt.output.TermUi \u00b6 | com.github.ajalt.clikt.core.TypoSuggestor \u00b6 | com.github.ajalt.clikt.core.UsageError \u00b6 An internal exception that signals a usage error. | com.github.ajalt.clikt.parameters.options.ValueConverter \u00b6 A block that converts a single value from one type to another | com.github.ajalt.clikt.sources.ValueSource \u00b6 | com.github.ajalt.clikt.parameters.options.ValueTransformer \u00b6 A callback that transforms a single value from a string to the value type | com.github.ajalt.clikt.parameters.options.ValueWithDefault \u00b6 A container for a value that can have a default value and can be manually set","title":"Index"},{"location":"api/clikt/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"api/clikt/alltypes/#comgithubajaltcliktcoreabort","text":"An internal error that signals Clikt to abort. |","title":"com.github.ajalt.clikt.core.Abort"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersargumentsargcallstransformer","text":"A callback that transforms all the values into the final argument type |","title":"com.github.ajalt.clikt.parameters.arguments.ArgCallsTransformer"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersoptionsargstransformer","text":"A callback that transforms all the values for a call to the call type. |","title":"com.github.ajalt.clikt.parameters.options.ArgsTransformer"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersargumentsargument","text":"A positional parameter to a command. |","title":"com.github.ajalt.clikt.parameters.arguments.Argument"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersargumentsargumentdelegate","text":"An argument that functions as a property delegate |","title":"com.github.ajalt.clikt.parameters.arguments.ArgumentDelegate"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersargumentsargumenttransformcontext","text":"A receiver for argument transformers. |","title":"com.github.ajalt.clikt.parameters.arguments.ArgumentTransformContext"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersargumentsargvalidator","text":"A callback validates the final argument type |","title":"com.github.ajalt.clikt.parameters.arguments.ArgValidator"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersargumentsargvalueconverter","text":"A callback that transforms a single value from one type to another |","title":"com.github.ajalt.clikt.parameters.arguments.ArgValueConverter"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersargumentsargvaluetransformer","text":"A callback that transforms a single value from a string to the value type |","title":"com.github.ajalt.clikt.parameters.arguments.ArgValueTransformer"},{"location":"api/clikt/alltypes/#comgithubajaltcliktcorebadparametervalue","text":"A parameter was given the correct number of values, but of invalid format or type. |","title":"com.github.ajalt.clikt.core.BadParameterValue"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersoptionscallstransformer","text":"A callback that transforms all of the calls to the final option type. |","title":"com.github.ajalt.clikt.parameters.options.CallsTransformer"},{"location":"api/clikt/alltypes/#comgithubajaltcliktsourceschainedvaluesource","text":"A ValueSource that looks for values in multiple other sources. |","title":"com.github.ajalt.clikt.sources.ChainedValueSource"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersgroupschoicegroup","text":"|","title":"com.github.ajalt.clikt.parameters.groups.ChoiceGroup"},{"location":"api/clikt/alltypes/#comgithubajaltcliktcorecliktcommand","text":"The CliktCommand is the core of command line interfaces in Clikt. |","title":"com.github.ajalt.clikt.core.CliktCommand"},{"location":"api/clikt/alltypes/#comgithubajaltcliktoutputcliktconsole","text":"An object that is used by commands and parameters to show text to the user and read input. |","title":"com.github.ajalt.clikt.output.CliktConsole"},{"location":"api/clikt/alltypes/#comgithubajaltcliktcoreclikterror","text":"An exception during command line processing that should be shown to the user. |","title":"com.github.ajalt.clikt.core.CliktError"},{"location":"api/clikt/alltypes/#comgithubajaltcliktoutputclikthelpformatter","text":"|","title":"com.github.ajalt.clikt.output.CliktHelpFormatter"},{"location":"api/clikt/alltypes/#comgithubajaltcliktcompletioncompletioncandidates","text":"Configurations for generating shell autocomplete suggestions |","title":"com.github.ajalt.clikt.completion.CompletionCandidates"},{"location":"api/clikt/alltypes/#comgithubajaltcliktcorecontext","text":"A object used to control command line parsing and pass data between commands. |","title":"com.github.ajalt.clikt.core.Context"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersgroupscooccurringoptiongroup","text":"|","title":"com.github.ajalt.clikt.parameters.groups.CoOccurringOptionGroup"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersgroupscooccurringoptiongrouptransform","text":"|","title":"com.github.ajalt.clikt.parameters.groups.CoOccurringOptionGroupTransform"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersoptionseageroption","text":"An Option with no values that is finalize d before other types of options. |","title":"com.github.ajalt.clikt.parameters.options.EagerOption"},{"location":"api/clikt/alltypes/#comgithubajaltcliktcompletionexperimentalcompletioncandidates","text":"|","title":"com.github.ajalt.clikt.completion.ExperimentalCompletionCandidates"},{"location":"api/clikt/alltypes/#comgithubajaltcliktsourcesexperimentalvaluesourceapi","text":"|","title":"com.github.ajalt.clikt.sources.ExperimentalValueSourceApi"},{"location":"api/clikt/alltypes/#comgithubajaltcliktcorefilenotfound","text":"A required configuration file was not found. |","title":"com.github.ajalt.clikt.core.FileNotFound"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersoptionsflagconverter","text":"A block that converts a flag value from one type to another |","title":"com.github.ajalt.clikt.parameters.options.FlagConverter"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersoptionsflagoption","text":"An Option that has no values. |","title":"com.github.ajalt.clikt.parameters.options.FlagOption"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparsersflagoptionparser","text":"A parser for options that take no values. |","title":"com.github.ajalt.clikt.parsers.FlagOptionParser"},{"location":"api/clikt/alltypes/#comgithubajaltcliktcoregroupableoption","text":"An option that can be added to a ParameterGroup |","title":"com.github.ajalt.clikt.core.GroupableOption"},{"location":"api/clikt/alltypes/#comgithubajaltcliktoutputhelpformatter","text":"Creates help and usage strings for a command. |","title":"com.github.ajalt.clikt.output.HelpFormatter"},{"location":"api/clikt/alltypes/#comgithubajaltcliktcoreincorrectargumentvaluecount","text":"An argument was supplied but the number of values supplied was incorrect. |","title":"com.github.ajalt.clikt.core.IncorrectArgumentValueCount"},{"location":"api/clikt/alltypes/#comgithubajaltcliktcoreincorrectoptionvaluecount","text":"An option was supplied but the number of values supplied to the option was incorrect. |","title":"com.github.ajalt.clikt.core.IncorrectOptionValueCount"},{"location":"api/clikt/alltypes/#comgithubajaltcliktoutputinteractivecliktconsole","text":"|","title":"com.github.ajalt.clikt.output.InteractiveCliktConsole"},{"location":"api/clikt/alltypes/#comgithubajaltcliktcoreinvalidfileformat","text":"A configuration file failed to parse correctly |","title":"com.github.ajalt.clikt.core.InvalidFileFormat"},{"location":"api/clikt/alltypes/#comgithubajaltcliktoutputlocalization","text":"Strings to use for help output and error messages |","title":"com.github.ajalt.clikt.output.Localization"},{"location":"api/clikt/alltypes/#comgithubajaltcliktsourcesmapvaluesource","text":"A ValueSource that reads values from a map. |","title":"com.github.ajalt.clikt.sources.MapValueSource"},{"location":"api/clikt/alltypes/#comgithubajaltcliktcoremissingargument","text":"A required argument was not provided |","title":"com.github.ajalt.clikt.core.MissingArgument"},{"location":"api/clikt/alltypes/#comgithubajaltcliktcoremissingoption","text":"A required option was not provided |","title":"com.github.ajalt.clikt.core.MissingOption"},{"location":"api/clikt/alltypes/#comgithubajaltcliktcoremutuallyexclusivegroupexception","text":"|","title":"com.github.ajalt.clikt.core.MutuallyExclusiveGroupException"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersgroupsmutuallyexclusiveoptions","text":"|","title":"com.github.ajalt.clikt.parameters.groups.MutuallyExclusiveOptions"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersgroupsmutuallyexclusiveoptionstransform","text":"|","title":"com.github.ajalt.clikt.parameters.groups.MutuallyExclusiveOptionsTransform"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersgroupsmutuallyexclusiveoptiontransformcontext","text":"|","title":"com.github.ajalt.clikt.parameters.groups.MutuallyExclusiveOptionTransformContext"},{"location":"api/clikt/alltypes/#comgithubajaltcliktoutputnoninteractivecliktconsole","text":"|","title":"com.github.ajalt.clikt.output.NonInteractiveCliktConsole"},{"location":"api/clikt/alltypes/#comgithubajaltcliktcorenoopcliktcommand","text":"A CliktCommand that has a default implementation of CliktCommand.run that is a no-op. |","title":"com.github.ajalt.clikt.core.NoOpCliktCommand"},{"location":"api/clikt/alltypes/#comgithubajaltcliktcorenosuchoption","text":"An option was provided that does not exist. |","title":"com.github.ajalt.clikt.core.NoSuchOption"},{"location":"api/clikt/alltypes/#comgithubajaltcliktcorenosuchparameter","text":"A parameter was provided that does not exist. |","title":"com.github.ajalt.clikt.core.NoSuchParameter"},{"location":"api/clikt/alltypes/#comgithubajaltcliktcorenosuchsubcommand","text":"A subcommand was provided that does not exist. |","title":"com.github.ajalt.clikt.core.NoSuchSubcommand"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersoptionsnullableoption","text":"|","title":"com.github.ajalt.clikt.parameters.options.NullableOption"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersoptionsoption","text":"An optional command line parameter that takes a fixed number of values. |","title":"com.github.ajalt.clikt.parameters.options.Option"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersoptionsoptioncalltransformcontext","text":"A receiver for options transformers. |","title":"com.github.ajalt.clikt.parameters.options.OptionCallTransformContext"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersoptionsoptiondelegate","text":"An option that functions as a property delegate |","title":"com.github.ajalt.clikt.parameters.options.OptionDelegate"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersgroupsoptiongroup","text":"A group of options that can be shown together in help output, or restricted to be cooccurring . |","title":"com.github.ajalt.clikt.parameters.groups.OptionGroup"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparsersoptionparser","text":"A parser for Option s. |","title":"com.github.ajalt.clikt.parsers.OptionParser"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersoptionsoptiontransformcontext","text":"A receiver for options transformers. |","title":"com.github.ajalt.clikt.parameters.options.OptionTransformContext"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersoptionsoptionvalidator","text":"A callback validates the final option type |","title":"com.github.ajalt.clikt.parameters.options.OptionValidator"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersoptionsoptionwithvalues","text":"An Option that takes one or more values. |","title":"com.github.ajalt.clikt.parameters.options.OptionWithValues"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparsersoptionwithvaluesparser","text":"An option that takes one more values |","title":"com.github.ajalt.clikt.parsers.OptionWithValuesParser"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersgroupsparametergroup","text":"|","title":"com.github.ajalt.clikt.parameters.groups.ParameterGroup"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersgroupsparametergroupdelegate","text":"|","title":"com.github.ajalt.clikt.parameters.groups.ParameterGroupDelegate"},{"location":"api/clikt/alltypes/#comgithubajaltcliktcoreparameterholder","text":"|","title":"com.github.ajalt.clikt.core.ParameterHolder"},{"location":"api/clikt/alltypes/#comgithubajaltcliktcoreparameterholderdsl","text":"|","title":"com.github.ajalt.clikt.core.ParameterHolderDsl"},{"location":"api/clikt/alltypes/#comgithubajaltcliktcoreprintcompletionmessage","text":"An exception that indicates that shell completion code should be printed. |","title":"com.github.ajalt.clikt.core.PrintCompletionMessage"},{"location":"api/clikt/alltypes/#comgithubajaltcliktcoreprinthelpmessage","text":"An exception that indicates that the command\u2019s help should be printed. |","title":"com.github.ajalt.clikt.core.PrintHelpMessage"},{"location":"api/clikt/alltypes/#comgithubajaltcliktcoreprintmessage","text":"An exception that indicates that a message should be printed. |","title":"com.github.ajalt.clikt.core.PrintMessage"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersargumentsprocessedargument","text":"An Argument delegate implementation that transforms its values . |","title":"com.github.ajalt.clikt.parameters.arguments.ProcessedArgument"},{"location":"api/clikt/alltypes/#comgithubajaltcliktcoreprogramresult","text":"Indicate that that the program finished in a controlled manner, and should complete with the given statusCode |","title":"com.github.ajalt.clikt.core.ProgramResult"},{"location":"api/clikt/alltypes/#comgithubajaltcliktsourcespropertiesvaluesource","text":"A ValueSource that reads values from a Properties object. |","title":"com.github.ajalt.clikt.sources.PropertiesValueSource"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersargumentsrawargument","text":"|","title":"com.github.ajalt.clikt.parameters.arguments.RawArgument"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersoptionsrawoption","text":"|","title":"com.github.ajalt.clikt.parameters.options.RawOption"},{"location":"api/clikt/alltypes/#comgithubajaltcliktcorestaticallygroupedoption","text":"|","title":"com.github.ajalt.clikt.core.StaticallyGroupedOption"},{"location":"api/clikt/alltypes/#comgithubajaltcliktoutputtermui","text":"|","title":"com.github.ajalt.clikt.output.TermUi"},{"location":"api/clikt/alltypes/#comgithubajaltcliktcoretyposuggestor","text":"|","title":"com.github.ajalt.clikt.core.TypoSuggestor"},{"location":"api/clikt/alltypes/#comgithubajaltcliktcoreusageerror","text":"An internal exception that signals a usage error. |","title":"com.github.ajalt.clikt.core.UsageError"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersoptionsvalueconverter","text":"A block that converts a single value from one type to another |","title":"com.github.ajalt.clikt.parameters.options.ValueConverter"},{"location":"api/clikt/alltypes/#comgithubajaltcliktsourcesvaluesource","text":"|","title":"com.github.ajalt.clikt.sources.ValueSource"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersoptionsvaluetransformer","text":"A callback that transforms a single value from a string to the value type |","title":"com.github.ajalt.clikt.parameters.options.ValueTransformer"},{"location":"api/clikt/alltypes/#comgithubajaltcliktparametersoptionsvaluewithdefault","text":"A container for a value that can have a default value and can be manually set","title":"com.github.ajalt.clikt.parameters.options.ValueWithDefault"},{"location":"api/clikt/com.github.ajalt.clikt.completion/","text":"clikt / com.github.ajalt.clikt.completion Package com.github.ajalt.clikt.completion \u00b6 Types \u00b6 Name Summary CompletionCandidates Configurations for generating shell autocomplete suggestions sealed class CompletionCandidates Annotations \u00b6 Name Summary ExperimentalCompletionCandidates annotation class ~~ExperimentalCompletionCandidates~~","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.completion/#package-comgithubajaltcliktcompletion","text":"","title":"Package com.github.ajalt.clikt.completion"},{"location":"api/clikt/com.github.ajalt.clikt.completion/#types","text":"Name Summary CompletionCandidates Configurations for generating shell autocomplete suggestions sealed class CompletionCandidates","title":"Types"},{"location":"api/clikt/com.github.ajalt.clikt.completion/#annotations","text":"Name Summary ExperimentalCompletionCandidates annotation class ~~ExperimentalCompletionCandidates~~","title":"Annotations"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/","text":"clikt / com.github.ajalt.clikt.completion / CompletionCandidates CompletionCandidates \u00b6 sealed class CompletionCandidates Configurations for generating shell autocomplete suggestions Types \u00b6 Name Summary Custom Complete the parameter with words emitted from a custom script. data class Custom : CompletionCandidates Fixed Complete the parameter with a fixed set of strings data class Fixed : CompletionCandidates Hostname Complete with entries in the system\u2019s hostfile object Hostname : CompletionCandidates None Do not autocomplete this parameter object None : CompletionCandidates Path Complete with filesystem paths object Path : CompletionCandidates Username Complete with usernames from the current system object Username : CompletionCandidates","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/#completioncandidates","text":"sealed class CompletionCandidates Configurations for generating shell autocomplete suggestions","title":"CompletionCandidates"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/#types","text":"Name Summary Custom Complete the parameter with words emitted from a custom script. data class Custom : CompletionCandidates Fixed Complete the parameter with a fixed set of strings data class Fixed : CompletionCandidates Hostname Complete with entries in the system\u2019s hostfile object Hostname : CompletionCandidates None Do not autocomplete this parameter object None : CompletionCandidates Path Complete with filesystem paths object Path : CompletionCandidates Username Complete with usernames from the current system object Username : CompletionCandidates","title":"Types"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-hostname/","text":"clikt / com.github.ajalt.clikt.completion / CompletionCandidates / Hostname Hostname \u00b6 object Hostname : CompletionCandidates Complete with entries in the system\u2019s hostfile","title":" hostname"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-hostname/#hostname","text":"object Hostname : CompletionCandidates Complete with entries in the system\u2019s hostfile","title":"Hostname"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-none/","text":"clikt / com.github.ajalt.clikt.completion / CompletionCandidates / None None \u00b6 object None : CompletionCandidates Do not autocomplete this parameter","title":" none"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-none/#none","text":"object None : CompletionCandidates Do not autocomplete this parameter","title":"None"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-path/","text":"clikt / com.github.ajalt.clikt.completion / CompletionCandidates / Path Path \u00b6 object Path : CompletionCandidates Complete with filesystem paths","title":" path"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-path/#path","text":"object Path : CompletionCandidates Complete with filesystem paths","title":"Path"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-username/","text":"clikt / com.github.ajalt.clikt.completion / CompletionCandidates / Username Username \u00b6 object Username : CompletionCandidates Complete with usernames from the current system","title":" username"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-username/#username","text":"object Username : CompletionCandidates Complete with usernames from the current system","title":"Username"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-custom/","text":"clikt / com.github.ajalt.clikt.completion / CompletionCandidates / Custom Custom \u00b6 data class Custom : CompletionCandidates Complete the parameter with words emitted from a custom script. The generator takes the type of shell to generate a script for and returns code to add to the generated completion script. If you just want to call another script or binary that prints all possible completion words to stdout, you can use fromStdout . Bash/ZSH \u00b6 Both Bash and ZSH scripts use Bash\u2019s Programmable Completion system (ZSH via a comparability layer). The string returned from generator should be the body of a function that will be passed to compgen -F . Specifically, you should set the variable COMPREPLY to the completion(s) for the current word being typed. The word being typed can be retrieved from the COMP_WORDS array at index COMP_CWORD . Types \u00b6 Name Summary ShellType enum class ShellType Constructors \u00b6 Name Summary <init> Complete the parameter with words emitted from a custom script. Custom(generator: (ShellType) -> String ?) Properties \u00b6 Name Summary generator val generator: (ShellType) -> String ? Companion Object Functions \u00b6 Name Summary fromStdout fun fromStdout(command: String ): Custom","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-custom/#custom","text":"data class Custom : CompletionCandidates Complete the parameter with words emitted from a custom script. The generator takes the type of shell to generate a script for and returns code to add to the generated completion script. If you just want to call another script or binary that prints all possible completion words to stdout, you can use fromStdout .","title":"Custom"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-custom/#bashzsh","text":"Both Bash and ZSH scripts use Bash\u2019s Programmable Completion system (ZSH via a comparability layer). The string returned from generator should be the body of a function that will be passed to compgen -F . Specifically, you should set the variable COMPREPLY to the completion(s) for the current word being typed. The word being typed can be retrieved from the COMP_WORDS array at index COMP_CWORD .","title":"Bash/ZSH"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-custom/#types","text":"Name Summary ShellType enum class ShellType","title":"Types"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-custom/#constructors","text":"Name Summary <init> Complete the parameter with words emitted from a custom script. Custom(generator: (ShellType) -> String ?)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-custom/#properties","text":"Name Summary generator val generator: (ShellType) -> String ?","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-custom/#companion-object-functions","text":"Name Summary fromStdout fun fromStdout(command: String ): Custom","title":"Companion Object Functions"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-custom/-init-/","text":"clikt / com.github.ajalt.clikt.completion / CompletionCandidates / Custom / <init> <init> \u00b6 Custom(generator: (ShellType) -> String ?) Complete the parameter with words emitted from a custom script. The generator takes the type of shell to generate a script for and returns code to add to the generated completion script. If you just want to call another script or binary that prints all possible completion words to stdout, you can use fromStdout . Bash/ZSH \u00b6 Both Bash and ZSH scripts use Bash\u2019s Programmable Completion system (ZSH via a comparability layer). The string returned from generator should be the body of a function that will be passed to compgen -F . Specifically, you should set the variable COMPREPLY to the completion(s) for the current word being typed. The word being typed can be retrieved from the COMP_WORDS array at index COMP_CWORD .","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-custom/-init-/#init","text":"Custom(generator: (ShellType) -> String ?) Complete the parameter with words emitted from a custom script. The generator takes the type of shell to generate a script for and returns code to add to the generated completion script. If you just want to call another script or binary that prints all possible completion words to stdout, you can use fromStdout .","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-custom/-init-/#bashzsh","text":"Both Bash and ZSH scripts use Bash\u2019s Programmable Completion system (ZSH via a comparability layer). The string returned from generator should be the body of a function that will be passed to compgen -F . Specifically, you should set the variable COMPREPLY to the completion(s) for the current word being typed. The word being typed can be retrieved from the COMP_WORDS array at index COMP_CWORD .","title":"Bash/ZSH"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-custom/from-stdout/","text":"clikt / com.github.ajalt.clikt.completion / CompletionCandidates / Custom / fromStdout fromStdout \u00b6 fun fromStdout(command: String ): Custom","title":"From stdout"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-custom/from-stdout/#fromstdout","text":"fun fromStdout(command: String ): Custom","title":"fromStdout"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-custom/generator/","text":"clikt / com.github.ajalt.clikt.completion / CompletionCandidates / Custom / generator generator \u00b6 val generator: (ShellType) -> String ?","title":"Generator"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-custom/generator/#generator","text":"val generator: (ShellType) -> String ?","title":"generator"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-custom/-shell-type/","text":"clikt / com.github.ajalt.clikt.completion / CompletionCandidates / Custom / ShellType ShellType \u00b6 enum class ShellType Enum Values \u00b6 Name Summary BASH","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-custom/-shell-type/#shelltype","text":"enum class ShellType","title":"ShellType"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-custom/-shell-type/#enum-values","text":"Name Summary BASH","title":"Enum Values"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-custom/-shell-type/-b-a-s-h/","text":"clikt / com.github.ajalt.clikt.completion / CompletionCandidates / Custom / ShellType / BASH BASH \u00b6 BASH","title":" b a s h"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-custom/-shell-type/-b-a-s-h/#bash","text":"BASH","title":"BASH"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-fixed/","text":"clikt / com.github.ajalt.clikt.completion / CompletionCandidates / Fixed Fixed \u00b6 data class Fixed : CompletionCandidates Complete the parameter with a fixed set of strings Constructors \u00b6 Name Summary <init> Fixed(vararg candidates: String ) Complete the parameter with a fixed set of strings Fixed(candidates: Set < String >) Properties \u00b6 Name Summary candidates val candidates: Set < String >","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-fixed/#fixed","text":"data class Fixed : CompletionCandidates Complete the parameter with a fixed set of strings","title":"Fixed"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-fixed/#constructors","text":"Name Summary <init> Fixed(vararg candidates: String ) Complete the parameter with a fixed set of strings Fixed(candidates: Set < String >)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-fixed/#properties","text":"Name Summary candidates val candidates: Set < String >","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-fixed/-init-/","text":"clikt / com.github.ajalt.clikt.completion / CompletionCandidates / Fixed / <init> <init> \u00b6 Fixed(vararg candidates: String )Fixed(candidates: Set < String >) Complete the parameter with a fixed set of strings","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-fixed/-init-/#init","text":"Fixed(vararg candidates: String )Fixed(candidates: Set < String >) Complete the parameter with a fixed set of strings","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-fixed/candidates/","text":"clikt / com.github.ajalt.clikt.completion / CompletionCandidates / Fixed / candidates candidates \u00b6 val candidates: Set < String >","title":"Candidates"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-fixed/candidates/#candidates","text":"val candidates: Set < String >","title":"candidates"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-experimental-completion-candidates/","text":"clikt / com.github.ajalt.clikt.completion / ExperimentalCompletionCandidates ExperimentalCompletionCandidates \u00b6 @Target([AnnotationTarget.CLASS, AnnotationTarget.FUNCTION]) annotation class ~~ExperimentalCompletionCandidates~~ Deprecated: This opt-in requirement is not used anymore. Remove its usages from your code. Constructors \u00b6 Name Summary <init> ExperimentalCompletionCandidates()","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-experimental-completion-candidates/#experimentalcompletioncandidates","text":"@Target([AnnotationTarget.CLASS, AnnotationTarget.FUNCTION]) annotation class ~~ExperimentalCompletionCandidates~~ Deprecated: This opt-in requirement is not used anymore. Remove its usages from your code.","title":"ExperimentalCompletionCandidates"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-experimental-completion-candidates/#constructors","text":"Name Summary <init> ExperimentalCompletionCandidates()","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-experimental-completion-candidates/-init-/","text":"clikt / com.github.ajalt.clikt.completion / ExperimentalCompletionCandidates / <init> <init> \u00b6 ExperimentalCompletionCandidates()","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.completion/-experimental-completion-candidates/-init-/#init","text":"ExperimentalCompletionCandidates()","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/","text":"clikt / com.github.ajalt.clikt.core Package com.github.ajalt.clikt.core \u00b6 Types \u00b6 Name Summary CliktCommand The CliktCommand is the core of command line interfaces in Clikt. abstract class CliktCommand : ParameterHolder Context A object used to control command line parsing and pass data between commands. class Context GroupableOption An option that can be added to a ParameterGroup interface GroupableOption : StaticallyGroupedOption NoOpCliktCommand A CliktCommand that has a default implementation of CliktCommand.run that is a no-op. open class NoOpCliktCommand : CliktCommand ParameterHolder interface ParameterHolder StaticallyGroupedOption interface StaticallyGroupedOption : Option TypoSuggestor typealias TypoSuggestor = (enteredValue: String , possibleValues: List < String >) -> List < String > Annotations \u00b6 Name Summary ParameterHolderDsl annotation class ParameterHolderDsl Exceptions \u00b6 Name Summary Abort An internal error that signals Clikt to abort. class Abort : RuntimeException BadParameterValue A parameter was given the correct number of values, but of invalid format or type. class BadParameterValue : UsageError CliktError An exception during command line processing that should be shown to the user. open class CliktError : RuntimeException FileNotFound A required configuration file was not found. class FileNotFound : UsageError IncorrectArgumentValueCount An argument was supplied but the number of values supplied was incorrect. class IncorrectArgumentValueCount : UsageError IncorrectOptionValueCount An option was supplied but the number of values supplied to the option was incorrect. class IncorrectOptionValueCount : UsageError InvalidFileFormat A configuration file failed to parse correctly class InvalidFileFormat : UsageError MissingArgument A required argument was not provided class MissingArgument : UsageError MissingOption A required option was not provided class MissingOption : UsageError MutuallyExclusiveGroupException class MutuallyExclusiveGroupException : UsageError NoSuchOption An option was provided that does not exist. class NoSuchOption : NoSuchParameter NoSuchParameter A parameter was provided that does not exist. open class NoSuchParameter : UsageError NoSuchSubcommand A subcommand was provided that does not exist. class NoSuchSubcommand : NoSuchParameter PrintCompletionMessage An exception that indicates that shell completion code should be printed. class PrintCompletionMessage : PrintMessage PrintHelpMessage An exception that indicates that the command\u2019s help should be printed. class PrintHelpMessage : CliktError PrintMessage An exception that indicates that a message should be printed. open class PrintMessage : CliktError ProgramResult Indicate that that the program finished in a controlled manner, and should complete with the given statusCode class ProgramResult : CliktError UsageError An internal exception that signals a usage error. open class UsageError : CliktError Functions \u00b6 Name Summary context Configure this command\u2019s Context . fun <T : CliktCommand > T.context(block: Builder.() -> Unit ): T findObject Find the closest object of type T , or null fun <T : Any > CliktCommand .findObject(): ReadOnlyProperty < CliktCommand , T?> findOrSetObject Find the closest object of type T , setting context.obj if one is not found. fun <T : Any > CliktCommand .findOrSetObject(default: () -> T): ReadOnlyProperty < CliktCommand , T> requireObject Find the closest object of type T , or throw a NullPointerException fun <T : Any > CliktCommand .requireObject(): ReadOnlyProperty < CliktCommand , T> subcommands Add the given commands as a subcommand of this command. fun <T : CliktCommand > T.subcommands(commands: Iterable < CliktCommand >): T fun <T : CliktCommand > T.subcommands(vararg commands: CliktCommand ): T","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.core/#package-comgithubajaltcliktcore","text":"","title":"Package com.github.ajalt.clikt.core"},{"location":"api/clikt/com.github.ajalt.clikt.core/#types","text":"Name Summary CliktCommand The CliktCommand is the core of command line interfaces in Clikt. abstract class CliktCommand : ParameterHolder Context A object used to control command line parsing and pass data between commands. class Context GroupableOption An option that can be added to a ParameterGroup interface GroupableOption : StaticallyGroupedOption NoOpCliktCommand A CliktCommand that has a default implementation of CliktCommand.run that is a no-op. open class NoOpCliktCommand : CliktCommand ParameterHolder interface ParameterHolder StaticallyGroupedOption interface StaticallyGroupedOption : Option TypoSuggestor typealias TypoSuggestor = (enteredValue: String , possibleValues: List < String >) -> List < String >","title":"Types"},{"location":"api/clikt/com.github.ajalt.clikt.core/#annotations","text":"Name Summary ParameterHolderDsl annotation class ParameterHolderDsl","title":"Annotations"},{"location":"api/clikt/com.github.ajalt.clikt.core/#exceptions","text":"Name Summary Abort An internal error that signals Clikt to abort. class Abort : RuntimeException BadParameterValue A parameter was given the correct number of values, but of invalid format or type. class BadParameterValue : UsageError CliktError An exception during command line processing that should be shown to the user. open class CliktError : RuntimeException FileNotFound A required configuration file was not found. class FileNotFound : UsageError IncorrectArgumentValueCount An argument was supplied but the number of values supplied was incorrect. class IncorrectArgumentValueCount : UsageError IncorrectOptionValueCount An option was supplied but the number of values supplied to the option was incorrect. class IncorrectOptionValueCount : UsageError InvalidFileFormat A configuration file failed to parse correctly class InvalidFileFormat : UsageError MissingArgument A required argument was not provided class MissingArgument : UsageError MissingOption A required option was not provided class MissingOption : UsageError MutuallyExclusiveGroupException class MutuallyExclusiveGroupException : UsageError NoSuchOption An option was provided that does not exist. class NoSuchOption : NoSuchParameter NoSuchParameter A parameter was provided that does not exist. open class NoSuchParameter : UsageError NoSuchSubcommand A subcommand was provided that does not exist. class NoSuchSubcommand : NoSuchParameter PrintCompletionMessage An exception that indicates that shell completion code should be printed. class PrintCompletionMessage : PrintMessage PrintHelpMessage An exception that indicates that the command\u2019s help should be printed. class PrintHelpMessage : CliktError PrintMessage An exception that indicates that a message should be printed. open class PrintMessage : CliktError ProgramResult Indicate that that the program finished in a controlled manner, and should complete with the given statusCode class ProgramResult : CliktError UsageError An internal exception that signals a usage error. open class UsageError : CliktError","title":"Exceptions"},{"location":"api/clikt/com.github.ajalt.clikt.core/#functions","text":"Name Summary context Configure this command\u2019s Context . fun <T : CliktCommand > T.context(block: Builder.() -> Unit ): T findObject Find the closest object of type T , or null fun <T : Any > CliktCommand .findObject(): ReadOnlyProperty < CliktCommand , T?> findOrSetObject Find the closest object of type T , setting context.obj if one is not found. fun <T : Any > CliktCommand .findOrSetObject(default: () -> T): ReadOnlyProperty < CliktCommand , T> requireObject Find the closest object of type T , or throw a NullPointerException fun <T : Any > CliktCommand .requireObject(): ReadOnlyProperty < CliktCommand , T> subcommands Add the given commands as a subcommand of this command. fun <T : CliktCommand > T.subcommands(commands: Iterable < CliktCommand >): T fun <T : CliktCommand > T.subcommands(vararg commands: CliktCommand ): T","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-typo-suggestor/","text":"clikt / com.github.ajalt.clikt.core / TypoSuggestor TypoSuggestor \u00b6 typealias TypoSuggestor = (enteredValue: String , possibleValues: List < String >) -> List < String >","title":" typo suggestor"},{"location":"api/clikt/com.github.ajalt.clikt.core/-typo-suggestor/#typosuggestor","text":"typealias TypoSuggestor = (enteredValue: String , possibleValues: List < String >) -> List < String >","title":"TypoSuggestor"},{"location":"api/clikt/com.github.ajalt.clikt.core/context/","text":"clikt / com.github.ajalt.clikt.core / context context \u00b6 fun CliktCommand > T.context(block: Builder.() -> Unit ): T Configure this command\u2019s Context . Context property values are normally inherited from the parent context, but you can override any of them here.","title":"Context"},{"location":"api/clikt/com.github.ajalt.clikt.core/context/#context","text":"fun CliktCommand > T.context(block: Builder.() -> Unit ): T Configure this command\u2019s Context . Context property values are normally inherited from the parent context, but you can override any of them here.","title":"context"},{"location":"api/clikt/com.github.ajalt.clikt.core/find-object/","text":"clikt / com.github.ajalt.clikt.core / findObject findObject \u00b6 fun Any > CliktCommand .findObject(): ReadOnlyProperty < CliktCommand , T?> Find the closest object of type T , or null","title":"Find object"},{"location":"api/clikt/com.github.ajalt.clikt.core/find-object/#findobject","text":"fun Any > CliktCommand .findObject(): ReadOnlyProperty < CliktCommand , T?> Find the closest object of type T , or null","title":"findObject"},{"location":"api/clikt/com.github.ajalt.clikt.core/find-or-set-object/","text":"clikt / com.github.ajalt.clikt.core / findOrSetObject findOrSetObject \u00b6 inline fun Any > CliktCommand .findOrSetObject(crossinline default: () -> T): ReadOnlyProperty < CliktCommand , T> Find the closest object of type T , setting context.obj if one is not found. Note that this function returns a delegate, and so the object will not be set on the context until the delegated property\u2019s value is accessed. If you want to set a value for subcommands without accessing the property, call Context.findOrSetObject in your run function instead.","title":"Find or set object"},{"location":"api/clikt/com.github.ajalt.clikt.core/find-or-set-object/#findorsetobject","text":"inline fun Any > CliktCommand .findOrSetObject(crossinline default: () -> T): ReadOnlyProperty < CliktCommand , T> Find the closest object of type T , setting context.obj if one is not found. Note that this function returns a delegate, and so the object will not be set on the context until the delegated property\u2019s value is accessed. If you want to set a value for subcommands without accessing the property, call Context.findOrSetObject in your run function instead.","title":"findOrSetObject"},{"location":"api/clikt/com.github.ajalt.clikt.core/require-object/","text":"clikt / com.github.ajalt.clikt.core / requireObject requireObject \u00b6 fun Any > CliktCommand .requireObject(): ReadOnlyProperty < CliktCommand , T> Find the closest object of type T , or throw a NullPointerException","title":"Require object"},{"location":"api/clikt/com.github.ajalt.clikt.core/require-object/#requireobject","text":"fun Any > CliktCommand .requireObject(): ReadOnlyProperty < CliktCommand , T> Find the closest object of type T , or throw a NullPointerException","title":"requireObject"},{"location":"api/clikt/com.github.ajalt.clikt.core/subcommands/","text":"clikt / com.github.ajalt.clikt.core / subcommands subcommands \u00b6 fun CliktCommand > T.subcommands(commands: Iterable < CliktCommand >): T fun CliktCommand > T.subcommands(vararg commands: CliktCommand ): T Add the given commands as a subcommand of this command.","title":"Subcommands"},{"location":"api/clikt/com.github.ajalt.clikt.core/subcommands/#subcommands","text":"fun CliktCommand > T.subcommands(commands: Iterable < CliktCommand >): T fun CliktCommand > T.subcommands(vararg commands: CliktCommand ): T Add the given commands as a subcommand of this command.","title":"subcommands"},{"location":"api/clikt/com.github.ajalt.clikt.core/-abort/","text":"clikt / com.github.ajalt.clikt.core / Abort Abort \u00b6 class Abort : RuntimeException An internal error that signals Clikt to abort. Constructors \u00b6 Name Summary <init> An internal error that signals Clikt to abort. Abort(error: Boolean = true) Properties \u00b6 Name Summary error If true, print \u201cAborted\u201d and exit with an error code. Otherwise, exit with no error code. val error: Boolean","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.core/-abort/#abort","text":"class Abort : RuntimeException An internal error that signals Clikt to abort.","title":"Abort"},{"location":"api/clikt/com.github.ajalt.clikt.core/-abort/#constructors","text":"Name Summary <init> An internal error that signals Clikt to abort. Abort(error: Boolean = true)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-abort/#properties","text":"Name Summary error If true, print \u201cAborted\u201d and exit with an error code. Otherwise, exit with no error code. val error: Boolean","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.core/-abort/-init-/","text":"clikt / com.github.ajalt.clikt.core / Abort / <init> <init> \u00b6 Abort(error: Boolean = true) An internal error that signals Clikt to abort.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-abort/-init-/#init","text":"Abort(error: Boolean = true) An internal error that signals Clikt to abort.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-abort/error/","text":"clikt / com.github.ajalt.clikt.core / Abort / error error \u00b6 val error: Boolean If true, print \u201cAborted\u201d and exit with an error code. Otherwise, exit with no error code. Property \u00b6 error - If true, print \u201cAborted\u201d and exit with an error code. Otherwise, exit with no error code.","title":"Error"},{"location":"api/clikt/com.github.ajalt.clikt.core/-abort/error/#error","text":"val error: Boolean If true, print \u201cAborted\u201d and exit with an error code. Otherwise, exit with no error code.","title":"error"},{"location":"api/clikt/com.github.ajalt.clikt.core/-abort/error/#property","text":"error - If true, print \u201cAborted\u201d and exit with an error code. Otherwise, exit with no error code.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-bad-parameter-value/","text":"clikt / com.github.ajalt.clikt.core / BadParameterValue BadParameterValue \u00b6 class BadParameterValue : UsageError A parameter was given the correct number of values, but of invalid format or type. Constructors \u00b6 Name Summary <init> BadParameterValue(text: String , context: Context ? = null) BadParameterValue(text: String , paramName: String , context: Context ? = null) BadParameterValue(text: String , argument: Argument , context: Context ? = null) BadParameterValue(text: String , option: Option , context: Context ? = null) Functions \u00b6 Name Summary formatMessage fun formatMessage(): String","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.core/-bad-parameter-value/#badparametervalue","text":"class BadParameterValue : UsageError A parameter was given the correct number of values, but of invalid format or type.","title":"BadParameterValue"},{"location":"api/clikt/com.github.ajalt.clikt.core/-bad-parameter-value/#constructors","text":"Name Summary <init> BadParameterValue(text: String , context: Context ? = null) BadParameterValue(text: String , paramName: String , context: Context ? = null) BadParameterValue(text: String , argument: Argument , context: Context ? = null) BadParameterValue(text: String , option: Option , context: Context ? = null)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-bad-parameter-value/#functions","text":"Name Summary formatMessage fun formatMessage(): String","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-bad-parameter-value/-init-/","text":"clikt / com.github.ajalt.clikt.core / BadParameterValue / <init> <init> \u00b6 BadParameterValue(text: String , context: Context ? = null) BadParameterValue(text: String , paramName: String , context: Context ? = null) BadParameterValue(text: String , argument: Argument , context: Context ? = null) BadParameterValue(text: String , option: Option , context: Context ? = null)","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-bad-parameter-value/-init-/#init","text":"BadParameterValue(text: String , context: Context ? = null) BadParameterValue(text: String , paramName: String , context: Context ? = null) BadParameterValue(text: String , argument: Argument , context: Context ? = null) BadParameterValue(text: String , option: Option , context: Context ? = null)","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-bad-parameter-value/format-message/","text":"clikt / com.github.ajalt.clikt.core / BadParameterValue / formatMessage formatMessage \u00b6 protected fun formatMessage(): String","title":"Format message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-bad-parameter-value/format-message/#formatmessage","text":"protected fun formatMessage(): String","title":"formatMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand CliktCommand \u00b6 abstract class CliktCommand : ParameterHolder The CliktCommand is the core of command line interfaces in Clikt. Command line interfaces created by creating a subclass of CliktCommand with properties defined with option and argument . You can then parse argv by calling main , which will take care of printing errors and help to the user. If you want to handle output yourself, you can use parse instead. Once the command line has been parsed and all of the parameters are populated, run is called. Parameters \u00b6 help - The help for this command. The first line is used in the usage string, and the entire string is used in the help output. Paragraphs are automatically re-wrapped to the terminal width. epilog - Text to display at the end of the full help output. It is automatically re-wrapped to the terminal width. name - The name of the program to use in the help output. If not given, it is inferred from the class name. invokeWithoutSubcommand - Used when this command has subcommands, and this command is called without a subcommand. If true, run will be called. By default, a PrintHelpMessage is thrown instead. printHelpOnEmptyArgs - If this command is called with no values on the command line, print a help message (by throwing PrintHelpMessage ) if this is true, otherwise run normally. helpTags - Extra information about this option to pass to the help formatter. autoCompleteEnvvar - The envvar to use to enable shell autocomplete script generation. Set to null to disable generation. allowMultipleSubcommands - If true, allow multiple of this command\u2019s subcommands to be called sequentially. This will disable allowInterspersedArgs on the context of this command an its descendants. This functionality is experimental, and may change in a future release. treatUnknownOptionsAsArgs - If true, any options on the command line whose names aren\u2019t valid will be parsed as an argument rather than reporting an error. You\u2019ll need to define an argument().multiple() to collect these options, or an error will still be reported. Unknown short option flags grouped with other flags on the command line will always be reported as errors. Constructors \u00b6 Name Summary <init> The CliktCommand is the core of command line interfaces in Clikt. CliktCommand(help: String = \"\", epilog: String = \"\", name: String ? = null, invokeWithoutSubcommand: Boolean = false, printHelpOnEmptyArgs: Boolean = false, helpTags: Map < String , String > = emptyMap(), autoCompleteEnvvar: String ? = \"\", allowMultipleSubcommands: Boolean = false, treatUnknownOptionsAsArgs: Boolean = false) Properties \u00b6 Name Summary commandHelp The help text for this command. open val commandHelp: String commandHelpEpilog Help text to display at the end of the help output, after any parameters. open val commandHelpEpilog: String commandName The name of this command, used in help output. val commandName: String currentContext This command\u2019s context. val currentContext: Context helpTags Extra information about this option to pass to the help formatter. val helpTags: Map < String , String > invokeWithoutSubcommand Used when this command has subcommands, and this command is called without a subcommand. If true, run will be called. By default, a PrintHelpMessage is thrown instead. val invokeWithoutSubcommand: Boolean messages All messages issued during parsing. val messages: List < String > printHelpOnEmptyArgs If this command is called with no values on the command line, print a help message (by throwing PrintHelpMessage ) if this is true, otherwise run normally. val printHelpOnEmptyArgs: Boolean Functions \u00b6 Name Summary aliases A list of command aliases. open fun aliases(): Map < String , List < String >> confirm Prompt for user confirmation. fun confirm(text: String , default: Boolean = false, abort: Boolean = false, promptSuffix: String = \": \", showDefault: Boolean = true): Boolean ? echo Prints lineSeparator to stdout , or to stderr if err is true fun echo(err: Boolean = false, lineSeparator: String = currentContext.console.lineSeparator): Unit Print the message to the screen. fun echo(message: Any ?, trailingNewline: Boolean = true, err: Boolean = false, lineSeparator: String = currentContext.console.lineSeparator): Unit getFormattedHelp Return the full help string for this command. open fun getFormattedHelp(): String getFormattedUsage Return the usage string for this command. open fun getFormattedUsage(): String issueMessage Add a message to be printed after parsing fun issueMessage(message: String ): Unit main Parse the command line and print helpful output if any errors occur. fun main(argv: List < String >): Unit fun main(argv: Array <out String >): Unit parse Parse the command line and throw an exception if parsing fails. fun parse(argv: List < String >, parentContext: Context ? = null): Unit fun parse(argv: Array < String >, parentContext: Context ? = null): Unit prompt Prompt a user for text input. fun prompt(text: String , default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \"Repeat for confirmation: \", promptSuffix: String = \": \", showDefault: Boolean = true): String ? Prompt a user for text input and convert the result. fun <T> prompt(text: String , default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \"Repeat for confirmation: \", promptSuffix: String = \": \", showDefault: Boolean = true, convert: ( String ) -> T): T? registerArgument Register an argument with this command. fun registerArgument(argument: Argument ): Unit registeredArguments Get a read-only list of arguments registered in this command (e.g. via registerArgument or an argument delegate) fun registeredArguments(): List < Argument > registeredOptions Get a read-only list of options registered in this command (e.g. via registerOption or an option delegate) fun registeredOptions(): List < Option > registeredParameterGroups Get a read-only list of groups registered in this command (e.g. via registerOptionGroup or an OptionGroup delegate) fun registeredParameterGroups(): List < ParameterGroup > registeredSubcommandNames The names of all direct children of this command fun registeredSubcommandNames(): List < String > registeredSubcommands Get a read-only list of commands registered as subcommands of this command. fun registeredSubcommands(): List < CliktCommand > registerOption Register an option with this command. fun registerOption(option: Option ): Unit Register an option with this command or group. open fun registerOption(option: GroupableOption ): Unit registerOptionGroup Register a group with this command. fun registerOptionGroup(group: ParameterGroup ): Unit run Perform actions after parsing is complete and this command is invoked. abstract fun run(): Unit shortHelp The help displayed in the commands list when this command is used as a subcommand. fun shortHelp(): String toString open fun toString(): String Extension Functions \u00b6 Name Summary argument Create a property delegate argument. fun CliktCommand .argument(name: String = \"\", help: String = \"\", helpTags: Map < String , String > = emptyMap(), completionCandidates: CompletionCandidates ? = null): RawArgument context Configure this command\u2019s Context . fun <T : CliktCommand > T.context(block: Builder.() -> Unit ): T eagerOption Add an eager option to this command that, when invoked, runs action . fun <T : CliktCommand > T.eagerOption(name: String , vararg additionalNames: String , help: String = \"\", hidden: Boolean = false, helpTags: Map < String , String > = emptyMap(), groupName: String ? = null, action: OptionTransformContext .() -> Unit ): T fun <T : CliktCommand > T.eagerOption(names: Collection < String >, help: String = \"\", hidden: Boolean = false, helpTags: Map < String , String > = emptyMap(), groupName: String ? = null, action: OptionTransformContext .() -> Unit ): T findObject Find the closest object of type T , or null fun <T : Any > CliktCommand .findObject(): ReadOnlyProperty < CliktCommand , T?> findOrSetObject Find the closest object of type T , setting context.obj if one is not found. fun <T : Any > CliktCommand .findOrSetObject(default: () -> T): ReadOnlyProperty < CliktCommand , T> mutuallyExclusiveOptions Declare a set of two or more mutually exclusive options. fun <T : Any > ParameterHolder .mutuallyExclusiveOptions(option1: OptionDelegate <T?>, option2: OptionDelegate <T?>, vararg options: OptionDelegate <T?>, name: String ? = null, help: String ? = null): MutuallyExclusiveOptions <T, T?> option Create a property delegate option. fun ParameterHolder .option(vararg names: String , help: String = \"\", metavar: String ? = null, hidden: Boolean = false, envvar: String ? = null, helpTags: Map < String , String > = emptyMap(), completionCandidates: CompletionCandidates ? = null, valueSourceKey: String ? = null): RawOption requireObject Find the closest object of type T , or throw a NullPointerException fun <T : Any > CliktCommand .requireObject(): ReadOnlyProperty < CliktCommand , T> subcommands Add the given commands as a subcommand of this command. fun <T : CliktCommand > T.subcommands(commands: Iterable < CliktCommand >): T fun <T : CliktCommand > T.subcommands(vararg commands: CliktCommand ): T versionOption Add an eager option to this command that, when invoked, prints a version message and exits. fun <T : CliktCommand > T.versionOption(version: String , help: String = \"Show the version and exit\", names: Set < String > = setOf(\"--version\"), message: ( String ) -> String = { \"$commandName version $it\" }): T Inheritors \u00b6 Name Summary NoOpCliktCommand A CliktCommand that has a default implementation of CliktCommand.run that is a no-op. open class NoOpCliktCommand : CliktCommand","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/#cliktcommand","text":"abstract class CliktCommand : ParameterHolder The CliktCommand is the core of command line interfaces in Clikt. Command line interfaces created by creating a subclass of CliktCommand with properties defined with option and argument . You can then parse argv by calling main , which will take care of printing errors and help to the user. If you want to handle output yourself, you can use parse instead. Once the command line has been parsed and all of the parameters are populated, run is called.","title":"CliktCommand"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/#parameters","text":"help - The help for this command. The first line is used in the usage string, and the entire string is used in the help output. Paragraphs are automatically re-wrapped to the terminal width. epilog - Text to display at the end of the full help output. It is automatically re-wrapped to the terminal width. name - The name of the program to use in the help output. If not given, it is inferred from the class name. invokeWithoutSubcommand - Used when this command has subcommands, and this command is called without a subcommand. If true, run will be called. By default, a PrintHelpMessage is thrown instead. printHelpOnEmptyArgs - If this command is called with no values on the command line, print a help message (by throwing PrintHelpMessage ) if this is true, otherwise run normally. helpTags - Extra information about this option to pass to the help formatter. autoCompleteEnvvar - The envvar to use to enable shell autocomplete script generation. Set to null to disable generation. allowMultipleSubcommands - If true, allow multiple of this command\u2019s subcommands to be called sequentially. This will disable allowInterspersedArgs on the context of this command an its descendants. This functionality is experimental, and may change in a future release. treatUnknownOptionsAsArgs - If true, any options on the command line whose names aren\u2019t valid will be parsed as an argument rather than reporting an error. You\u2019ll need to define an argument().multiple() to collect these options, or an error will still be reported. Unknown short option flags grouped with other flags on the command line will always be reported as errors.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/#constructors","text":"Name Summary <init> The CliktCommand is the core of command line interfaces in Clikt. CliktCommand(help: String = \"\", epilog: String = \"\", name: String ? = null, invokeWithoutSubcommand: Boolean = false, printHelpOnEmptyArgs: Boolean = false, helpTags: Map < String , String > = emptyMap(), autoCompleteEnvvar: String ? = \"\", allowMultipleSubcommands: Boolean = false, treatUnknownOptionsAsArgs: Boolean = false)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/#properties","text":"Name Summary commandHelp The help text for this command. open val commandHelp: String commandHelpEpilog Help text to display at the end of the help output, after any parameters. open val commandHelpEpilog: String commandName The name of this command, used in help output. val commandName: String currentContext This command\u2019s context. val currentContext: Context helpTags Extra information about this option to pass to the help formatter. val helpTags: Map < String , String > invokeWithoutSubcommand Used when this command has subcommands, and this command is called without a subcommand. If true, run will be called. By default, a PrintHelpMessage is thrown instead. val invokeWithoutSubcommand: Boolean messages All messages issued during parsing. val messages: List < String > printHelpOnEmptyArgs If this command is called with no values on the command line, print a help message (by throwing PrintHelpMessage ) if this is true, otherwise run normally. val printHelpOnEmptyArgs: Boolean","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/#functions","text":"Name Summary aliases A list of command aliases. open fun aliases(): Map < String , List < String >> confirm Prompt for user confirmation. fun confirm(text: String , default: Boolean = false, abort: Boolean = false, promptSuffix: String = \": \", showDefault: Boolean = true): Boolean ? echo Prints lineSeparator to stdout , or to stderr if err is true fun echo(err: Boolean = false, lineSeparator: String = currentContext.console.lineSeparator): Unit Print the message to the screen. fun echo(message: Any ?, trailingNewline: Boolean = true, err: Boolean = false, lineSeparator: String = currentContext.console.lineSeparator): Unit getFormattedHelp Return the full help string for this command. open fun getFormattedHelp(): String getFormattedUsage Return the usage string for this command. open fun getFormattedUsage(): String issueMessage Add a message to be printed after parsing fun issueMessage(message: String ): Unit main Parse the command line and print helpful output if any errors occur. fun main(argv: List < String >): Unit fun main(argv: Array <out String >): Unit parse Parse the command line and throw an exception if parsing fails. fun parse(argv: List < String >, parentContext: Context ? = null): Unit fun parse(argv: Array < String >, parentContext: Context ? = null): Unit prompt Prompt a user for text input. fun prompt(text: String , default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \"Repeat for confirmation: \", promptSuffix: String = \": \", showDefault: Boolean = true): String ? Prompt a user for text input and convert the result. fun <T> prompt(text: String , default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \"Repeat for confirmation: \", promptSuffix: String = \": \", showDefault: Boolean = true, convert: ( String ) -> T): T? registerArgument Register an argument with this command. fun registerArgument(argument: Argument ): Unit registeredArguments Get a read-only list of arguments registered in this command (e.g. via registerArgument or an argument delegate) fun registeredArguments(): List < Argument > registeredOptions Get a read-only list of options registered in this command (e.g. via registerOption or an option delegate) fun registeredOptions(): List < Option > registeredParameterGroups Get a read-only list of groups registered in this command (e.g. via registerOptionGroup or an OptionGroup delegate) fun registeredParameterGroups(): List < ParameterGroup > registeredSubcommandNames The names of all direct children of this command fun registeredSubcommandNames(): List < String > registeredSubcommands Get a read-only list of commands registered as subcommands of this command. fun registeredSubcommands(): List < CliktCommand > registerOption Register an option with this command. fun registerOption(option: Option ): Unit Register an option with this command or group. open fun registerOption(option: GroupableOption ): Unit registerOptionGroup Register a group with this command. fun registerOptionGroup(group: ParameterGroup ): Unit run Perform actions after parsing is complete and this command is invoked. abstract fun run(): Unit shortHelp The help displayed in the commands list when this command is used as a subcommand. fun shortHelp(): String toString open fun toString(): String","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/#extension-functions","text":"Name Summary argument Create a property delegate argument. fun CliktCommand .argument(name: String = \"\", help: String = \"\", helpTags: Map < String , String > = emptyMap(), completionCandidates: CompletionCandidates ? = null): RawArgument context Configure this command\u2019s Context . fun <T : CliktCommand > T.context(block: Builder.() -> Unit ): T eagerOption Add an eager option to this command that, when invoked, runs action . fun <T : CliktCommand > T.eagerOption(name: String , vararg additionalNames: String , help: String = \"\", hidden: Boolean = false, helpTags: Map < String , String > = emptyMap(), groupName: String ? = null, action: OptionTransformContext .() -> Unit ): T fun <T : CliktCommand > T.eagerOption(names: Collection < String >, help: String = \"\", hidden: Boolean = false, helpTags: Map < String , String > = emptyMap(), groupName: String ? = null, action: OptionTransformContext .() -> Unit ): T findObject Find the closest object of type T , or null fun <T : Any > CliktCommand .findObject(): ReadOnlyProperty < CliktCommand , T?> findOrSetObject Find the closest object of type T , setting context.obj if one is not found. fun <T : Any > CliktCommand .findOrSetObject(default: () -> T): ReadOnlyProperty < CliktCommand , T> mutuallyExclusiveOptions Declare a set of two or more mutually exclusive options. fun <T : Any > ParameterHolder .mutuallyExclusiveOptions(option1: OptionDelegate <T?>, option2: OptionDelegate <T?>, vararg options: OptionDelegate <T?>, name: String ? = null, help: String ? = null): MutuallyExclusiveOptions <T, T?> option Create a property delegate option. fun ParameterHolder .option(vararg names: String , help: String = \"\", metavar: String ? = null, hidden: Boolean = false, envvar: String ? = null, helpTags: Map < String , String > = emptyMap(), completionCandidates: CompletionCandidates ? = null, valueSourceKey: String ? = null): RawOption requireObject Find the closest object of type T , or throw a NullPointerException fun <T : Any > CliktCommand .requireObject(): ReadOnlyProperty < CliktCommand , T> subcommands Add the given commands as a subcommand of this command. fun <T : CliktCommand > T.subcommands(commands: Iterable < CliktCommand >): T fun <T : CliktCommand > T.subcommands(vararg commands: CliktCommand ): T versionOption Add an eager option to this command that, when invoked, prints a version message and exits. fun <T : CliktCommand > T.versionOption(version: String , help: String = \"Show the version and exit\", names: Set < String > = setOf(\"--version\"), message: ( String ) -> String = { \"$commandName version $it\" }): T","title":"Extension Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/#inheritors","text":"Name Summary NoOpCliktCommand A CliktCommand that has a default implementation of CliktCommand.run that is a no-op. open class NoOpCliktCommand : CliktCommand","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/-init-/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / <init> <init> \u00b6 CliktCommand(help: String = \u201c\u201d, epilog: String = \u201c\u201d, name: String ? = null, invokeWithoutSubcommand: Boolean = false, printHelpOnEmptyArgs: Boolean = false, helpTags: Map < String , String > = emptyMap(), autoCompleteEnvvar: String ? = \u201c\u201d, allowMultipleSubcommands: Boolean = false, treatUnknownOptionsAsArgs: Boolean = false) The CliktCommand is the core of command line interfaces in Clikt. Command line interfaces created by creating a subclass of CliktCommand with properties defined with option and argument . You can then parse argv by calling main , which will take care of printing errors and help to the user. If you want to handle output yourself, you can use parse instead. Once the command line has been parsed and all of the parameters are populated, run is called. Parameters \u00b6 help - The help for this command. The first line is used in the usage string, and the entire string is used in the help output. Paragraphs are automatically re-wrapped to the terminal width. epilog - Text to display at the end of the full help output. It is automatically re-wrapped to the terminal width. name - The name of the program to use in the help output. If not given, it is inferred from the class name. invokeWithoutSubcommand - Used when this command has subcommands, and this command is called without a subcommand. If true, run will be called. By default, a PrintHelpMessage is thrown instead. printHelpOnEmptyArgs - If this command is called with no values on the command line, print a help message (by throwing PrintHelpMessage ) if this is true, otherwise run normally. helpTags - Extra information about this option to pass to the help formatter. autoCompleteEnvvar - The envvar to use to enable shell autocomplete script generation. Set to null to disable generation. allowMultipleSubcommands - If true, allow multiple of this command\u2019s subcommands to be called sequentially. This will disable allowInterspersedArgs on the context of this command an its descendants. This functionality is experimental, and may change in a future release. treatUnknownOptionsAsArgs - If true, any options on the command line whose names aren\u2019t valid will be parsed as an argument rather than reporting an error. You\u2019ll need to define an argument().multiple() to collect these options, or an error will still be reported. Unknown short option flags grouped with other flags on the command line will always be reported as errors.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/-init-/#init","text":"CliktCommand(help: String = \u201c\u201d, epilog: String = \u201c\u201d, name: String ? = null, invokeWithoutSubcommand: Boolean = false, printHelpOnEmptyArgs: Boolean = false, helpTags: Map < String , String > = emptyMap(), autoCompleteEnvvar: String ? = \u201c\u201d, allowMultipleSubcommands: Boolean = false, treatUnknownOptionsAsArgs: Boolean = false) The CliktCommand is the core of command line interfaces in Clikt. Command line interfaces created by creating a subclass of CliktCommand with properties defined with option and argument . You can then parse argv by calling main , which will take care of printing errors and help to the user. If you want to handle output yourself, you can use parse instead. Once the command line has been parsed and all of the parameters are populated, run is called.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/-init-/#parameters","text":"help - The help for this command. The first line is used in the usage string, and the entire string is used in the help output. Paragraphs are automatically re-wrapped to the terminal width. epilog - Text to display at the end of the full help output. It is automatically re-wrapped to the terminal width. name - The name of the program to use in the help output. If not given, it is inferred from the class name. invokeWithoutSubcommand - Used when this command has subcommands, and this command is called without a subcommand. If true, run will be called. By default, a PrintHelpMessage is thrown instead. printHelpOnEmptyArgs - If this command is called with no values on the command line, print a help message (by throwing PrintHelpMessage ) if this is true, otherwise run normally. helpTags - Extra information about this option to pass to the help formatter. autoCompleteEnvvar - The envvar to use to enable shell autocomplete script generation. Set to null to disable generation. allowMultipleSubcommands - If true, allow multiple of this command\u2019s subcommands to be called sequentially. This will disable allowInterspersedArgs on the context of this command an its descendants. This functionality is experimental, and may change in a future release. treatUnknownOptionsAsArgs - If true, any options on the command line whose names aren\u2019t valid will be parsed as an argument rather than reporting an error. You\u2019ll need to define an argument().multiple() to collect these options, or an error will still be reported. Unknown short option flags grouped with other flags on the command line will always be reported as errors.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/aliases/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / aliases aliases \u00b6 open fun aliases(): Map < String , List < String >> A list of command aliases. If the user enters a command that matches the a key in this map, the command is replaced with the corresponding value in in map. The aliases aren\u2019t recursive, so aliases won\u2019t be looked up again while tokens from an existing alias are being parsed.","title":"Aliases"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/aliases/#aliases","text":"open fun aliases(): Map < String , List < String >> A list of command aliases. If the user enters a command that matches the a key in this map, the command is replaced with the corresponding value in in map. The aliases aren\u2019t recursive, so aliases won\u2019t be looked up again while tokens from an existing alias are being parsed.","title":"aliases"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/command-help-epilog/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / commandHelpEpilog commandHelpEpilog \u00b6 open val commandHelpEpilog: String Help text to display at the end of the help output, after any parameters. You can set this by passing epilog to the CliktCommand constructor, or by overriding this property.","title":"Command help epilog"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/command-help-epilog/#commandhelpepilog","text":"open val commandHelpEpilog: String Help text to display at the end of the help output, after any parameters. You can set this by passing epilog to the CliktCommand constructor, or by overriding this property.","title":"commandHelpEpilog"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/command-help/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / commandHelp commandHelp \u00b6 open val commandHelp: String The help text for this command. You can set this by passing help to the CliktCommand constructor, or by overriding this property.","title":"Command help"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/command-help/#commandhelp","text":"open val commandHelp: String The help text for this command. You can set this by passing help to the CliktCommand constructor, or by overriding this property.","title":"commandHelp"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/command-name/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / commandName commandName \u00b6 val commandName: String The name of this command, used in help output. You can set this by passing name to the CliktCommand constructor.","title":"Command name"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/command-name/#commandname","text":"val commandName: String The name of this command, used in help output. You can set this by passing name to the CliktCommand constructor.","title":"commandName"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/confirm/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / confirm confirm \u00b6 protected fun confirm(text: String , default: Boolean = false, abort: Boolean = false, promptSuffix: String = \u201c: \u201c, showDefault: Boolean = true): Boolean ? Prompt for user confirmation. Responses will be read from stdin, even if it\u2019s redirected to a file. Parameters \u00b6 text - the question to ask default - the default, used if stdin is empty abort - if true, a negative answer aborts the program by raising Abort promptSuffix - a string added after the question and choices showDefault - if false, the choices will not be shown in the prompt. Return the user\u2019s response, or null if stdin is not interactive and EOF was encountered.","title":"Confirm"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/confirm/#confirm","text":"protected fun confirm(text: String , default: Boolean = false, abort: Boolean = false, promptSuffix: String = \u201c: \u201c, showDefault: Boolean = true): Boolean ? Prompt for user confirmation. Responses will be read from stdin, even if it\u2019s redirected to a file.","title":"confirm"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/confirm/#parameters","text":"text - the question to ask default - the default, used if stdin is empty abort - if true, a negative answer aborts the program by raising Abort promptSuffix - a string added after the question and choices showDefault - if false, the choices will not be shown in the prompt. Return the user\u2019s response, or null if stdin is not interactive and EOF was encountered.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/current-context/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / currentContext currentContext \u00b6 val currentContext: Context This command\u2019s context. Exceptions \u00b6 NullPointerException - if accessed before parse or main are called.","title":"Current context"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/current-context/#currentcontext","text":"val currentContext: Context This command\u2019s context.","title":"currentContext"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/current-context/#exceptions","text":"NullPointerException - if accessed before parse or main are called.","title":"Exceptions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/echo/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / echo echo \u00b6 protected fun echo(err: Boolean = false, lineSeparator: String = currentContext.console.lineSeparator): Unit Prints lineSeparator to stdout , or to stderr if err is true protected fun echo(message: Any ?, trailingNewline: Boolean = true, err: Boolean = false, lineSeparator: String = currentContext.console.lineSeparator): Unit Print the message to the screen. This is similar to print or println , but converts newlines to the system line separator. This is equivalent to calling TermUi.echo with the console from the current context. Parameters \u00b6 message - The message to print. trailingNewline - If true, behave like println , otherwise behave like print err - If true, print to stderr instead of stdout","title":"Echo"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/echo/#echo","text":"protected fun echo(err: Boolean = false, lineSeparator: String = currentContext.console.lineSeparator): Unit Prints lineSeparator to stdout , or to stderr if err is true protected fun echo(message: Any ?, trailingNewline: Boolean = true, err: Boolean = false, lineSeparator: String = currentContext.console.lineSeparator): Unit Print the message to the screen. This is similar to print or println , but converts newlines to the system line separator. This is equivalent to calling TermUi.echo with the console from the current context.","title":"echo"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/echo/#parameters","text":"message - The message to print. trailingNewline - If true, behave like println , otherwise behave like print err - If true, print to stderr instead of stdout","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/get-formatted-help/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / getFormattedHelp getFormattedHelp \u00b6 open fun getFormattedHelp(): String Return the full help string for this command.","title":"Get formatted help"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/get-formatted-help/#getformattedhelp","text":"open fun getFormattedHelp(): String Return the full help string for this command.","title":"getFormattedHelp"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/get-formatted-usage/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / getFormattedUsage getFormattedUsage \u00b6 open fun getFormattedUsage(): String Return the usage string for this command.","title":"Get formatted usage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/get-formatted-usage/#getformattedusage","text":"open fun getFormattedUsage(): String Return the usage string for this command.","title":"getFormattedUsage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/help-tags/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / helpTags helpTags \u00b6 val helpTags: Map < String , String > Extra information about this option to pass to the help formatter.","title":"Help tags"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/help-tags/#helptags","text":"val helpTags: Map < String , String > Extra information about this option to pass to the help formatter.","title":"helpTags"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/invoke-without-subcommand/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / invokeWithoutSubcommand invokeWithoutSubcommand \u00b6 val invokeWithoutSubcommand: Boolean Used when this command has subcommands, and this command is called without a subcommand. If true, run will be called. By default, a PrintHelpMessage is thrown instead.","title":"Invoke without subcommand"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/invoke-without-subcommand/#invokewithoutsubcommand","text":"val invokeWithoutSubcommand: Boolean Used when this command has subcommands, and this command is called without a subcommand. If true, run will be called. By default, a PrintHelpMessage is thrown instead.","title":"invokeWithoutSubcommand"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/issue-message/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / issueMessage issueMessage \u00b6 fun issueMessage(message: String ): Unit Add a message to be printed after parsing","title":"Issue message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/issue-message/#issuemessage","text":"fun issueMessage(message: String ): Unit Add a message to be printed after parsing","title":"issueMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/main/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / main main \u00b6 fun main(argv: List < String >): Unit Parse the command line and print helpful output if any errors occur. This function calls parse and catches and CliktError s that are thrown. Other errors are allowed to pass through. fun main(argv: Array String >): Unit","title":"Main"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/main/#main","text":"fun main(argv: List < String >): Unit Parse the command line and print helpful output if any errors occur. This function calls parse and catches and CliktError s that are thrown. Other errors are allowed to pass through. fun main(argv: Array String >): Unit","title":"main"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/messages/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / messages messages \u00b6 val messages: List < String > All messages issued during parsing.","title":"Messages"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/messages/#messages","text":"val messages: List < String > All messages issued during parsing.","title":"messages"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/parse/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / parse parse \u00b6 fun parse(argv: List < String >, parentContext: Context ? = null): Unit Parse the command line and throw an exception if parsing fails. You should use main instead unless you want to handle output yourself. fun parse(argv: Array < String >, parentContext: Context ? = null): Unit","title":"Parse"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/parse/#parse","text":"fun parse(argv: List < String >, parentContext: Context ? = null): Unit Parse the command line and throw an exception if parsing fails. You should use main instead unless you want to handle output yourself. fun parse(argv: Array < String >, parentContext: Context ? = null): Unit","title":"parse"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/print-help-on-empty-args/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / printHelpOnEmptyArgs printHelpOnEmptyArgs \u00b6 val printHelpOnEmptyArgs: Boolean If this command is called with no values on the command line, print a help message (by throwing PrintHelpMessage ) if this is true, otherwise run normally.","title":"Print help on empty args"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/print-help-on-empty-args/#printhelponemptyargs","text":"val printHelpOnEmptyArgs: Boolean If this command is called with no values on the command line, print a help message (by throwing PrintHelpMessage ) if this is true, otherwise run normally.","title":"printHelpOnEmptyArgs"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/prompt/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / prompt prompt \u00b6 protected fun prompt(text: String , default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \u201cRepeat for confirmation: \u201c, promptSuffix: String = \u201c: \u201c, showDefault: Boolean = true): String ? Prompt a user for text input. If the user sends a terminate signal (e.g. ctrl-c) while the prompt is active, null will be returned. Parameters \u00b6 text - The text to display for the prompt. default - The default value to use for the input. If the user enters a newline without any other value, default will be returned. hideInput - If true, the user\u2019s input will not be echoed back to the screen. This is commonly used for password inputs. requireConfirmation - If true, the user will be required to enter the same value twice before it is accepted. confirmationPrompt - The text to show the user when requireConfirmation is true. promptSuffix - A delimiter printed between the text and the user\u2019s input. showDefault - If true, the default value will be shown as part of the prompt. Return the user\u2019s input, or null if the stdin is not interactive and EOF was encountered. protected fun prompt(text: String , default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \u201cRepeat for confirmation: \u201c, promptSuffix: String = \u201c: \u201c, showDefault: Boolean = true, convert: ( String ) -> T): T? Prompt a user for text input and convert the result. If the user sends a terminate signal (e.g. ctrl-c) while the prompt is active, null will be returned. Parameters \u00b6 text - The text to display for the prompt. default - The default value to use for the input. If the user enters a newline without any other value, default will be returned. This parameter is a String instead of T , since it will be displayed to the user. hideInput - If true, the user\u2019s input will not be echoed back to the screen. This is commonly used for password inputs. requireConfirmation - If true, the user will be required to enter the same value twice before it is accepted. confirmationPrompt - The text to show the user when requireConfirmation is true. promptSuffix - A delimiter printed between the text and the user\u2019s input. showDefault - If true, the default value will be shown as part of the prompt. convert - A callback that will convert the text that the user enters to the return value of the function. If the callback raises a UsageError , its message will be printed and the user will be asked to enter a new value. If default is not null and the user does not input a value, the value of default will be passed to this callback. Return the user\u2019s input, or null if the stdin is not interactive and EOF was encountered.","title":"Prompt"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/prompt/#prompt","text":"protected fun prompt(text: String , default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \u201cRepeat for confirmation: \u201c, promptSuffix: String = \u201c: \u201c, showDefault: Boolean = true): String ? Prompt a user for text input. If the user sends a terminate signal (e.g. ctrl-c) while the prompt is active, null will be returned.","title":"prompt"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/prompt/#parameters","text":"text - The text to display for the prompt. default - The default value to use for the input. If the user enters a newline without any other value, default will be returned. hideInput - If true, the user\u2019s input will not be echoed back to the screen. This is commonly used for password inputs. requireConfirmation - If true, the user will be required to enter the same value twice before it is accepted. confirmationPrompt - The text to show the user when requireConfirmation is true. promptSuffix - A delimiter printed between the text and the user\u2019s input. showDefault - If true, the default value will be shown as part of the prompt. Return the user\u2019s input, or null if the stdin is not interactive and EOF was encountered. protected fun prompt(text: String , default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \u201cRepeat for confirmation: \u201c, promptSuffix: String = \u201c: \u201c, showDefault: Boolean = true, convert: ( String ) -> T): T? Prompt a user for text input and convert the result. If the user sends a terminate signal (e.g. ctrl-c) while the prompt is active, null will be returned.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/prompt/#parameters_1","text":"text - The text to display for the prompt. default - The default value to use for the input. If the user enters a newline without any other value, default will be returned. This parameter is a String instead of T , since it will be displayed to the user. hideInput - If true, the user\u2019s input will not be echoed back to the screen. This is commonly used for password inputs. requireConfirmation - If true, the user will be required to enter the same value twice before it is accepted. confirmationPrompt - The text to show the user when requireConfirmation is true. promptSuffix - A delimiter printed between the text and the user\u2019s input. showDefault - If true, the default value will be shown as part of the prompt. convert - A callback that will convert the text that the user enters to the return value of the function. If the callback raises a UsageError , its message will be printed and the user will be asked to enter a new value. If default is not null and the user does not input a value, the value of default will be passed to this callback. Return the user\u2019s input, or null if the stdin is not interactive and EOF was encountered.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/register-argument/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / registerArgument registerArgument \u00b6 fun registerArgument(argument: Argument ): Unit Register an argument with this command. This is called automatically for the built in arguments, but you need to call this if you want to add a custom argument.","title":"Register argument"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/register-argument/#registerargument","text":"fun registerArgument(argument: Argument ): Unit Register an argument with this command. This is called automatically for the built in arguments, but you need to call this if you want to add a custom argument.","title":"registerArgument"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/register-option-group/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / registerOptionGroup registerOptionGroup \u00b6 fun registerOptionGroup(group: ParameterGroup ): Unit Register a group with this command. This is called automatically for built in groups, but you need to call this if you want to add a custom group.","title":"Register option group"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/register-option-group/#registeroptiongroup","text":"fun registerOptionGroup(group: ParameterGroup ): Unit Register a group with this command. This is called automatically for built in groups, but you need to call this if you want to add a custom group.","title":"registerOptionGroup"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/register-option/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / registerOption registerOption \u00b6 fun registerOption(option: Option ): Unit Register an option with this command. This is called automatically for the built in options, but you need to call this if you want to add a custom option. open fun registerOption(option: GroupableOption ): Unit Register an option with this command or group. This is called automatically for the built in options, but you need to call this if you want to add a custom option.","title":"Register option"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/register-option/#registeroption","text":"fun registerOption(option: Option ): Unit Register an option with this command. This is called automatically for the built in options, but you need to call this if you want to add a custom option. open fun registerOption(option: GroupableOption ): Unit Register an option with this command or group. This is called automatically for the built in options, but you need to call this if you want to add a custom option.","title":"registerOption"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/registered-arguments/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / registeredArguments registeredArguments \u00b6 fun registeredArguments(): List < Argument > Get a read-only list of arguments registered in this command (e.g. via registerArgument or an argument delegate)","title":"Registered arguments"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/registered-arguments/#registeredarguments","text":"fun registeredArguments(): List < Argument > Get a read-only list of arguments registered in this command (e.g. via registerArgument or an argument delegate)","title":"registeredArguments"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/registered-options/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / registeredOptions registeredOptions \u00b6 fun registeredOptions(): List < Option > Get a read-only list of options registered in this command (e.g. via registerOption or an option delegate)","title":"Registered options"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/registered-options/#registeredoptions","text":"fun registeredOptions(): List < Option > Get a read-only list of options registered in this command (e.g. via registerOption or an option delegate)","title":"registeredOptions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/registered-parameter-groups/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / registeredParameterGroups registeredParameterGroups \u00b6 fun registeredParameterGroups(): List < ParameterGroup > Get a read-only list of groups registered in this command (e.g. via registerOptionGroup or an OptionGroup delegate)","title":"Registered parameter groups"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/registered-parameter-groups/#registeredparametergroups","text":"fun registeredParameterGroups(): List < ParameterGroup > Get a read-only list of groups registered in this command (e.g. via registerOptionGroup or an OptionGroup delegate)","title":"registeredParameterGroups"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/registered-subcommand-names/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / registeredSubcommandNames registeredSubcommandNames \u00b6 fun registeredSubcommandNames(): List < String > The names of all direct children of this command","title":"Registered subcommand names"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/registered-subcommand-names/#registeredsubcommandnames","text":"fun registeredSubcommandNames(): List < String > The names of all direct children of this command","title":"registeredSubcommandNames"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/registered-subcommands/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / registeredSubcommands registeredSubcommands \u00b6 fun registeredSubcommands(): List < CliktCommand > Get a read-only list of commands registered as subcommands of this command.","title":"Registered subcommands"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/registered-subcommands/#registeredsubcommands","text":"fun registeredSubcommands(): List < CliktCommand > Get a read-only list of commands registered as subcommands of this command.","title":"registeredSubcommands"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/run/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / run run \u00b6 abstract fun run(): Unit Perform actions after parsing is complete and this command is invoked. This is called after command line parsing is complete. If this command is a subcommand, this will only be called if the subcommand is invoked. If one of this command\u2019s subcommands is invoked, this is called before the subcommand\u2019s arguments are parsed.","title":"Run"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/run/#run","text":"abstract fun run(): Unit Perform actions after parsing is complete and this command is invoked. This is called after command line parsing is complete. If this command is a subcommand, this will only be called if the subcommand is invoked. If one of this command\u2019s subcommands is invoked, this is called before the subcommand\u2019s arguments are parsed.","title":"run"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/short-help/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / shortHelp shortHelp \u00b6 protected fun shortHelp(): String The help displayed in the commands list when this command is used as a subcommand.","title":"Short help"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/short-help/#shorthelp","text":"protected fun shortHelp(): String The help displayed in the commands list when this command is used as a subcommand.","title":"shortHelp"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/to-string/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / toString toString \u00b6 open fun toString(): String","title":"To string"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/to-string/#tostring","text":"open fun toString(): String","title":"toString"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-error/","text":"clikt / com.github.ajalt.clikt.core / CliktError CliktError \u00b6 open class CliktError : RuntimeException An exception during command line processing that should be shown to the user. If calling CliktCommand.main , these exceptions will be caught and the appropriate info will be printed. Constructors \u00b6 Name Summary <init> An exception during command line processing that should be shown to the user. CliktError(message: String ? = null, cause: Exception ? = null) Inheritors \u00b6 Name Summary PrintHelpMessage An exception that indicates that the command\u2019s help should be printed. class PrintHelpMessage : CliktError PrintMessage An exception that indicates that a message should be printed. open class PrintMessage : CliktError ProgramResult Indicate that that the program finished in a controlled manner, and should complete with the given statusCode class ProgramResult : CliktError UsageError An internal exception that signals a usage error. open class UsageError : CliktError","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-error/#clikterror","text":"open class CliktError : RuntimeException An exception during command line processing that should be shown to the user. If calling CliktCommand.main , these exceptions will be caught and the appropriate info will be printed.","title":"CliktError"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-error/#constructors","text":"Name Summary <init> An exception during command line processing that should be shown to the user. CliktError(message: String ? = null, cause: Exception ? = null)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-error/#inheritors","text":"Name Summary PrintHelpMessage An exception that indicates that the command\u2019s help should be printed. class PrintHelpMessage : CliktError PrintMessage An exception that indicates that a message should be printed. open class PrintMessage : CliktError ProgramResult Indicate that that the program finished in a controlled manner, and should complete with the given statusCode class ProgramResult : CliktError UsageError An internal exception that signals a usage error. open class UsageError : CliktError","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-error/-init-/","text":"clikt / com.github.ajalt.clikt.core / CliktError / <init> <init> \u00b6 CliktError(message: String ? = null, cause: Exception ? = null) An exception during command line processing that should be shown to the user. If calling CliktCommand.main , these exceptions will be caught and the appropriate info will be printed.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-error/-init-/#init","text":"CliktError(message: String ? = null, cause: Exception ? = null) An exception during command line processing that should be shown to the user. If calling CliktCommand.main , these exceptions will be caught and the appropriate info will be printed.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/","text":"clikt / com.github.ajalt.clikt.core / Context Context \u00b6 class Context A object used to control command line parsing and pass data between commands. A new Context instance is created for each command each time the command line is parsed. Types \u00b6 Name Summary Builder class Builder Constructors \u00b6 Name Summary <init> A object used to control command line parsing and pass data between commands. Context(parent: Context ?, command: CliktCommand , allowInterspersedArgs: Boolean , autoEnvvarPrefix: String ?, printExtraMessages: Boolean , helpOptionNames: Set < String >, helpFormatter: HelpFormatter , tokenTransformer: Context .( String ) -> String , console: CliktConsole , expandArgumentFiles: Boolean , readEnvvarBeforeValueSource: Boolean , valueSource: ValueSource ?, correctionSuggestor: TypoSuggestor , localization: Localization ) Properties \u00b6 Name Summary allowInterspersedArgs If false, options and arguments cannot be mixed; the first time an argument is encountered, all remaining tokens are parsed as arguments. val allowInterspersedArgs: Boolean autoEnvvarPrefix The prefix to add to inferred envvar names. If null, the prefix is based on the parent\u2019s prefix, if there is one. If no command specifies, a prefix, envvar lookup is disabled. val autoEnvvarPrefix: String ? command The command that this context associated with. val command: CliktCommand console The console to use to print messages. val console: CliktConsole correctionSuggestor A callback called when the command line contains an invalid option or subcommand name. It takes the entered name and a list of all registered names option/subcommand names and filters the list down to values to suggest to the user. val correctionSuggestor: TypoSuggestor expandArgumentFiles If true, arguments starting with @ will be expanded as argument files. If false, they will be treated as normal arguments. val expandArgumentFiles: Boolean helpFormatter The help formatter for this command. val helpFormatter: HelpFormatter helpOptionNames The names to use for the help option. If any names in the set conflict with other options, the conflicting name will not be used for the help option. If the set is empty, or contains no unique names, no help option will be added. val helpOptionNames: Set < String > invokedSubcommand var invokedSubcommand: CliktCommand ? localization val localization: Localization obj var obj: Any ? parent If this context is the child of another command, parent is the parent command\u2019s context. val parent: Context ? printExtraMessages Set this to false to prevent extra messages from being printed automatically. You can still access them at CliktCommand.messages inside of CliktCommand.run . val printExtraMessages: Boolean readEnvvarBeforeValueSource val readEnvvarBeforeValueSource: Boolean tokenTransformer An optional transformation function that is called to transform command line tokens (options and commands) before parsing. This can be used to implement e.g. case insensitive behavior. val tokenTransformer: Context .( String ) -> String valueSource val valueSource: ValueSource ? Functions \u00b6 Name Summary commandNameWithParents Return a list of command names, starting with the topmost command and ending with this Context\u2019s command. fun commandNameWithParents(): List < String > fail Throw a UsageError with the given message fun fail(message: String = \"\"): Nothing findObject Find the closest object of type T fun <T : Any > findObject(): T? findOrSetObject Find the closest object of type T , setting this. obj if one is not found. fun <T : Any > findOrSetObject(defaultValue: () -> T): T findRoot Find the outermost context fun findRoot(): Context parentNames Return a list of command names, starting with the topmost command and ending with this Context\u2019s parent. fun parentNames(): List < String > Companion Object Functions \u00b6 Name Summary build fun build(command: CliktCommand , parent: Context ? = null, block: Builder.() -> Unit ): Context","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/#context","text":"class Context A object used to control command line parsing and pass data between commands. A new Context instance is created for each command each time the command line is parsed.","title":"Context"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/#types","text":"Name Summary Builder class Builder","title":"Types"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/#constructors","text":"Name Summary <init> A object used to control command line parsing and pass data between commands. Context(parent: Context ?, command: CliktCommand , allowInterspersedArgs: Boolean , autoEnvvarPrefix: String ?, printExtraMessages: Boolean , helpOptionNames: Set < String >, helpFormatter: HelpFormatter , tokenTransformer: Context .( String ) -> String , console: CliktConsole , expandArgumentFiles: Boolean , readEnvvarBeforeValueSource: Boolean , valueSource: ValueSource ?, correctionSuggestor: TypoSuggestor , localization: Localization )","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/#properties","text":"Name Summary allowInterspersedArgs If false, options and arguments cannot be mixed; the first time an argument is encountered, all remaining tokens are parsed as arguments. val allowInterspersedArgs: Boolean autoEnvvarPrefix The prefix to add to inferred envvar names. If null, the prefix is based on the parent\u2019s prefix, if there is one. If no command specifies, a prefix, envvar lookup is disabled. val autoEnvvarPrefix: String ? command The command that this context associated with. val command: CliktCommand console The console to use to print messages. val console: CliktConsole correctionSuggestor A callback called when the command line contains an invalid option or subcommand name. It takes the entered name and a list of all registered names option/subcommand names and filters the list down to values to suggest to the user. val correctionSuggestor: TypoSuggestor expandArgumentFiles If true, arguments starting with @ will be expanded as argument files. If false, they will be treated as normal arguments. val expandArgumentFiles: Boolean helpFormatter The help formatter for this command. val helpFormatter: HelpFormatter helpOptionNames The names to use for the help option. If any names in the set conflict with other options, the conflicting name will not be used for the help option. If the set is empty, or contains no unique names, no help option will be added. val helpOptionNames: Set < String > invokedSubcommand var invokedSubcommand: CliktCommand ? localization val localization: Localization obj var obj: Any ? parent If this context is the child of another command, parent is the parent command\u2019s context. val parent: Context ? printExtraMessages Set this to false to prevent extra messages from being printed automatically. You can still access them at CliktCommand.messages inside of CliktCommand.run . val printExtraMessages: Boolean readEnvvarBeforeValueSource val readEnvvarBeforeValueSource: Boolean tokenTransformer An optional transformation function that is called to transform command line tokens (options and commands) before parsing. This can be used to implement e.g. case insensitive behavior. val tokenTransformer: Context .( String ) -> String valueSource val valueSource: ValueSource ?","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/#functions","text":"Name Summary commandNameWithParents Return a list of command names, starting with the topmost command and ending with this Context\u2019s command. fun commandNameWithParents(): List < String > fail Throw a UsageError with the given message fun fail(message: String = \"\"): Nothing findObject Find the closest object of type T fun <T : Any > findObject(): T? findOrSetObject Find the closest object of type T , setting this. obj if one is not found. fun <T : Any > findOrSetObject(defaultValue: () -> T): T findRoot Find the outermost context fun findRoot(): Context parentNames Return a list of command names, starting with the topmost command and ending with this Context\u2019s parent. fun parentNames(): List < String >","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/#companion-object-functions","text":"Name Summary build fun build(command: CliktCommand , parent: Context ? = null, block: Builder.() -> Unit ): Context","title":"Companion Object Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-init-/","text":"clikt / com.github.ajalt.clikt.core / Context / <init> <init> \u00b6 Context(parent: Context ?, command: CliktCommand , allowInterspersedArgs: Boolean , autoEnvvarPrefix: String ?, printExtraMessages: Boolean , helpOptionNames: Set < String >, helpFormatter: HelpFormatter , tokenTransformer: Context .( String ) -> String , console: CliktConsole , expandArgumentFiles: Boolean , readEnvvarBeforeValueSource: Boolean , valueSource: ValueSource ?, correctionSuggestor: TypoSuggestor , localization: Localization ) A object used to control command line parsing and pass data between commands. A new Context instance is created for each command each time the command line is parsed.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-init-/#init","text":"Context(parent: Context ?, command: CliktCommand , allowInterspersedArgs: Boolean , autoEnvvarPrefix: String ?, printExtraMessages: Boolean , helpOptionNames: Set < String >, helpFormatter: HelpFormatter , tokenTransformer: Context .( String ) -> String , console: CliktConsole , expandArgumentFiles: Boolean , readEnvvarBeforeValueSource: Boolean , valueSource: ValueSource ?, correctionSuggestor: TypoSuggestor , localization: Localization ) A object used to control command line parsing and pass data between commands. A new Context instance is created for each command each time the command line is parsed.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/allow-interspersed-args/","text":"clikt / com.github.ajalt.clikt.core / Context / allowInterspersedArgs allowInterspersedArgs \u00b6 val allowInterspersedArgs: Boolean If false, options and arguments cannot be mixed; the first time an argument is encountered, all remaining tokens are parsed as arguments. Property \u00b6 allowInterspersedArgs - If false, options and arguments cannot be mixed; the first time an argument is encountered, all remaining tokens are parsed as arguments.","title":"Allow interspersed args"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/allow-interspersed-args/#allowinterspersedargs","text":"val allowInterspersedArgs: Boolean If false, options and arguments cannot be mixed; the first time an argument is encountered, all remaining tokens are parsed as arguments.","title":"allowInterspersedArgs"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/allow-interspersed-args/#property","text":"allowInterspersedArgs - If false, options and arguments cannot be mixed; the first time an argument is encountered, all remaining tokens are parsed as arguments.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/auto-envvar-prefix/","text":"clikt / com.github.ajalt.clikt.core / Context / autoEnvvarPrefix autoEnvvarPrefix \u00b6 val autoEnvvarPrefix: String ? The prefix to add to inferred envvar names. If null, the prefix is based on the parent\u2019s prefix, if there is one. If no command specifies, a prefix, envvar lookup is disabled. Property \u00b6 autoEnvvarPrefix - The prefix to add to inferred envvar names. If null, the prefix is based on the parent\u2019s prefix, if there is one. If no command specifies, a prefix, envvar lookup is disabled.","title":"Auto envvar prefix"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/auto-envvar-prefix/#autoenvvarprefix","text":"val autoEnvvarPrefix: String ? The prefix to add to inferred envvar names. If null, the prefix is based on the parent\u2019s prefix, if there is one. If no command specifies, a prefix, envvar lookup is disabled.","title":"autoEnvvarPrefix"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/auto-envvar-prefix/#property","text":"autoEnvvarPrefix - The prefix to add to inferred envvar names. If null, the prefix is based on the parent\u2019s prefix, if there is one. If no command specifies, a prefix, envvar lookup is disabled.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/build/","text":"clikt / com.github.ajalt.clikt.core / Context / build build \u00b6 fun build(command: CliktCommand , parent: Context ? = null, block: Builder.() -> Unit ): Context","title":"Build"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/build/#build","text":"fun build(command: CliktCommand , parent: Context ? = null, block: Builder.() -> Unit ): Context","title":"build"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/command-name-with-parents/","text":"clikt / com.github.ajalt.clikt.core / Context / commandNameWithParents commandNameWithParents \u00b6 fun commandNameWithParents(): List < String > Return a list of command names, starting with the topmost command and ending with this Context\u2019s command.","title":"Command name with parents"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/command-name-with-parents/#commandnamewithparents","text":"fun commandNameWithParents(): List < String > Return a list of command names, starting with the topmost command and ending with this Context\u2019s command.","title":"commandNameWithParents"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/command/","text":"clikt / com.github.ajalt.clikt.core / Context / command command \u00b6 val command: CliktCommand The command that this context associated with. Property \u00b6 command - The command that this context associated with.","title":"Command"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/command/#command","text":"val command: CliktCommand The command that this context associated with.","title":"command"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/command/#property","text":"command - The command that this context associated with.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/console/","text":"clikt / com.github.ajalt.clikt.core / Context / console console \u00b6 val console: CliktConsole The console to use to print messages. Property \u00b6 console - The console to use to print messages.","title":"Console"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/console/#console","text":"val console: CliktConsole The console to use to print messages.","title":"console"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/console/#property","text":"console - The console to use to print messages.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/correction-suggestor/","text":"clikt / com.github.ajalt.clikt.core / Context / correctionSuggestor correctionSuggestor \u00b6 val correctionSuggestor: TypoSuggestor A callback called when the command line contains an invalid option or subcommand name. It takes the entered name and a list of all registered names option/subcommand names and filters the list down to values to suggest to the user. Property \u00b6 correctionSuggestor - A callback called when the command line contains an invalid option or subcommand name. It takes the entered name and a list of all registered names option/subcommand names and filters the list down to values to suggest to the user.","title":"Correction suggestor"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/correction-suggestor/#correctionsuggestor","text":"val correctionSuggestor: TypoSuggestor A callback called when the command line contains an invalid option or subcommand name. It takes the entered name and a list of all registered names option/subcommand names and filters the list down to values to suggest to the user.","title":"correctionSuggestor"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/correction-suggestor/#property","text":"correctionSuggestor - A callback called when the command line contains an invalid option or subcommand name. It takes the entered name and a list of all registered names option/subcommand names and filters the list down to values to suggest to the user.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/expand-argument-files/","text":"clikt / com.github.ajalt.clikt.core / Context / expandArgumentFiles expandArgumentFiles \u00b6 val expandArgumentFiles: Boolean If true, arguments starting with @ will be expanded as argument files. If false, they will be treated as normal arguments. Property \u00b6 expandArgumentFiles - If true, arguments starting with @ will be expanded as argument files. If false, they will be treated as normal arguments.","title":"Expand argument files"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/expand-argument-files/#expandargumentfiles","text":"val expandArgumentFiles: Boolean If true, arguments starting with @ will be expanded as argument files. If false, they will be treated as normal arguments.","title":"expandArgumentFiles"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/expand-argument-files/#property","text":"expandArgumentFiles - If true, arguments starting with @ will be expanded as argument files. If false, they will be treated as normal arguments.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/fail/","text":"clikt / com.github.ajalt.clikt.core / Context / fail fail \u00b6 fun fail(message: String = \u201c\u201d): Nothing Throw a UsageError with the given message","title":"Fail"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/fail/#fail","text":"fun fail(message: String = \u201c\u201d): Nothing Throw a UsageError with the given message","title":"fail"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/find-object/","text":"clikt / com.github.ajalt.clikt.core / Context / findObject findObject \u00b6 fun Any > findObject(): T? Find the closest object of type T","title":"Find object"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/find-object/#findobject","text":"fun Any > findObject(): T? Find the closest object of type T","title":"findObject"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/find-or-set-object/","text":"clikt / com.github.ajalt.clikt.core / Context / findOrSetObject findOrSetObject \u00b6 inline fun Any > findOrSetObject(defaultValue: () -> T): T Find the closest object of type T , setting this. obj if one is not found.","title":"Find or set object"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/find-or-set-object/#findorsetobject","text":"inline fun Any > findOrSetObject(defaultValue: () -> T): T Find the closest object of type T , setting this. obj if one is not found.","title":"findOrSetObject"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/find-root/","text":"clikt / com.github.ajalt.clikt.core / Context / findRoot findRoot \u00b6 fun findRoot(): Context Find the outermost context","title":"Find root"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/find-root/#findroot","text":"fun findRoot(): Context Find the outermost context","title":"findRoot"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/help-formatter/","text":"clikt / com.github.ajalt.clikt.core / Context / helpFormatter helpFormatter \u00b6 val helpFormatter: HelpFormatter The help formatter for this command. Property \u00b6 helpFormatter - The help formatter for this command.","title":"Help formatter"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/help-formatter/#helpformatter","text":"val helpFormatter: HelpFormatter The help formatter for this command.","title":"helpFormatter"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/help-formatter/#property","text":"helpFormatter - The help formatter for this command.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/help-option-message/","text":"clikt / com.github.ajalt.clikt.core / Context / helpOptionMessage helpOptionMessage \u00b6 val helpOptionMessage: String The description of the help option. Property \u00b6 helpOptionMessage - The description of the help option.","title":"Help option message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/help-option-message/#helpoptionmessage","text":"val helpOptionMessage: String The description of the help option.","title":"helpOptionMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/help-option-message/#property","text":"helpOptionMessage - The description of the help option.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/help-option-names/","text":"clikt / com.github.ajalt.clikt.core / Context / helpOptionNames helpOptionNames \u00b6 val helpOptionNames: Set < String > The names to use for the help option. If any names in the set conflict with other options, the conflicting name will not be used for the help option. If the set is empty, or contains no unique names, no help option will be added. Property \u00b6 helpOptionNames - The names to use for the help option. If any names in the set conflict with other options, the conflicting name will not be used for the help option. If the set is empty, or contains no unique names, no help option will be added.","title":"Help option names"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/help-option-names/#helpoptionnames","text":"val helpOptionNames: Set < String > The names to use for the help option. If any names in the set conflict with other options, the conflicting name will not be used for the help option. If the set is empty, or contains no unique names, no help option will be added.","title":"helpOptionNames"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/help-option-names/#property","text":"helpOptionNames - The names to use for the help option. If any names in the set conflict with other options, the conflicting name will not be used for the help option. If the set is empty, or contains no unique names, no help option will be added.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/invoked-subcommand/","text":"clikt / com.github.ajalt.clikt.core / Context / invokedSubcommand invokedSubcommand \u00b6 var invokedSubcommand: CliktCommand ?","title":"Invoked subcommand"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/invoked-subcommand/#invokedsubcommand","text":"var invokedSubcommand: CliktCommand ?","title":"invokedSubcommand"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/localization/","text":"clikt / com.github.ajalt.clikt.core / Context / localization localization \u00b6 val localization: Localization","title":"Localization"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/localization/#localization","text":"val localization: Localization","title":"localization"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/obj/","text":"clikt / com.github.ajalt.clikt.core / Context / obj obj \u00b6 var obj: Any ?","title":"Obj"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/obj/#obj","text":"var obj: Any ?","title":"obj"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/parent-names/","text":"clikt / com.github.ajalt.clikt.core / Context / parentNames parentNames \u00b6 fun parentNames(): List < String > Return a list of command names, starting with the topmost command and ending with this Context\u2019s parent.","title":"Parent names"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/parent-names/#parentnames","text":"fun parentNames(): List < String > Return a list of command names, starting with the topmost command and ending with this Context\u2019s parent.","title":"parentNames"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/parent/","text":"clikt / com.github.ajalt.clikt.core / Context / parent parent \u00b6 val parent: Context ? If this context is the child of another command, parent is the parent command\u2019s context. Property \u00b6 parent - If this context is the child of another command, parent is the parent command\u2019s context.","title":"Parent"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/parent/#parent","text":"val parent: Context ? If this context is the child of another command, parent is the parent command\u2019s context.","title":"parent"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/parent/#property","text":"parent - If this context is the child of another command, parent is the parent command\u2019s context.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/print-extra-messages/","text":"clikt / com.github.ajalt.clikt.core / Context / printExtraMessages printExtraMessages \u00b6 val printExtraMessages: Boolean Set this to false to prevent extra messages from being printed automatically. You can still access them at CliktCommand.messages inside of CliktCommand.run . Property \u00b6 printExtraMessages - Set this to false to prevent extra messages from being printed automatically. You can still access them at CliktCommand.messages inside of CliktCommand.run .","title":"Print extra messages"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/print-extra-messages/#printextramessages","text":"val printExtraMessages: Boolean Set this to false to prevent extra messages from being printed automatically. You can still access them at CliktCommand.messages inside of CliktCommand.run .","title":"printExtraMessages"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/print-extra-messages/#property","text":"printExtraMessages - Set this to false to prevent extra messages from being printed automatically. You can still access them at CliktCommand.messages inside of CliktCommand.run .","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/read-envvar-before-value-source/","text":"clikt / com.github.ajalt.clikt.core / Context / readEnvvarBeforeValueSource readEnvvarBeforeValueSource \u00b6 val readEnvvarBeforeValueSource: Boolean","title":"Read envvar before value source"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/read-envvar-before-value-source/#readenvvarbeforevaluesource","text":"val readEnvvarBeforeValueSource: Boolean","title":"readEnvvarBeforeValueSource"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/token-transformer/","text":"clikt / com.github.ajalt.clikt.core / Context / tokenTransformer tokenTransformer \u00b6 val tokenTransformer: Context .( String ) -> String An optional transformation function that is called to transform command line tokens (options and commands) before parsing. This can be used to implement e.g. case insensitive behavior. Property \u00b6 tokenTransformer - An optional transformation function that is called to transform command line tokens (options and commands) before parsing. This can be used to implement e.g. case insensitive behavior.","title":"Token transformer"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/token-transformer/#tokentransformer","text":"val tokenTransformer: Context .( String ) -> String An optional transformation function that is called to transform command line tokens (options and commands) before parsing. This can be used to implement e.g. case insensitive behavior.","title":"tokenTransformer"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/token-transformer/#property","text":"tokenTransformer - An optional transformation function that is called to transform command line tokens (options and commands) before parsing. This can be used to implement e.g. case insensitive behavior.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/value-source/","text":"clikt / com.github.ajalt.clikt.core / Context / valueSource valueSource \u00b6 val valueSource: ValueSource ?","title":"Value source"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/value-source/#valuesource","text":"val valueSource: ValueSource ?","title":"valueSource"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/","text":"clikt / com.github.ajalt.clikt.core / Context / Builder Builder \u00b6 class Builder Constructors \u00b6 Name Summary <init> Builder(command: CliktCommand , parent: Context ? = null) Properties \u00b6 Name Summary allowInterspersedArgs If false, options and arguments cannot be mixed; the first time an argument is encountered, all remaining tokens are parsed as arguments. var allowInterspersedArgs: Boolean autoEnvvarPrefix The prefix to add to inferred envvar names. var autoEnvvarPrefix: String ? console The console that will handle reading and writing text. var console: CliktConsole correctionSuggestor A callback called when the command line contains an invalid option or subcommand name. It takes the entered name and a list of all registered names option/subcommand names and filters the list down to values to suggest to the user. var correctionSuggestor: TypoSuggestor expandArgumentFiles If true, arguments starting with @ will be expanded as argument files. If false, they will be treated as normal arguments. var expandArgumentFiles: Boolean helpFormatter The help formatter for this command, or null to use the default var helpFormatter: HelpFormatter ? helpOptionNames The names to use for the help option. var helpOptionNames: Set < String > localization Localized strings to use for help output and error reporting. var localization: Localization printExtraMessages Set this to false to prevent extra messages from being printed automatically. var printExtraMessages: Boolean readEnvvarBeforeValueSource If false ,the valueSource is searched before environment variables. var readEnvvarBeforeValueSource: Boolean tokenTransformer An optional transformation function that is called to transform command line var tokenTransformer: Context .( String ) -> String valueSource The source that will attempt to read values for options that aren\u2019t present on the command line. var valueSource: ValueSource ? Functions \u00b6 Name Summary valueSources Set multiple sources that will attempt to read values for options not present on the command line. fun valueSources(vararg sources: ValueSource ): Unit","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/#builder","text":"class Builder","title":"Builder"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/#constructors","text":"Name Summary <init> Builder(command: CliktCommand , parent: Context ? = null)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/#properties","text":"Name Summary allowInterspersedArgs If false, options and arguments cannot be mixed; the first time an argument is encountered, all remaining tokens are parsed as arguments. var allowInterspersedArgs: Boolean autoEnvvarPrefix The prefix to add to inferred envvar names. var autoEnvvarPrefix: String ? console The console that will handle reading and writing text. var console: CliktConsole correctionSuggestor A callback called when the command line contains an invalid option or subcommand name. It takes the entered name and a list of all registered names option/subcommand names and filters the list down to values to suggest to the user. var correctionSuggestor: TypoSuggestor expandArgumentFiles If true, arguments starting with @ will be expanded as argument files. If false, they will be treated as normal arguments. var expandArgumentFiles: Boolean helpFormatter The help formatter for this command, or null to use the default var helpFormatter: HelpFormatter ? helpOptionNames The names to use for the help option. var helpOptionNames: Set < String > localization Localized strings to use for help output and error reporting. var localization: Localization printExtraMessages Set this to false to prevent extra messages from being printed automatically. var printExtraMessages: Boolean readEnvvarBeforeValueSource If false ,the valueSource is searched before environment variables. var readEnvvarBeforeValueSource: Boolean tokenTransformer An optional transformation function that is called to transform command line var tokenTransformer: Context .( String ) -> String valueSource The source that will attempt to read values for options that aren\u2019t present on the command line. var valueSource: ValueSource ?","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/#functions","text":"Name Summary valueSources Set multiple sources that will attempt to read values for options not present on the command line. fun valueSources(vararg sources: ValueSource ): Unit","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/-init-/","text":"clikt / com.github.ajalt.clikt.core / Context / Builder / <init> <init> \u00b6 Builder(command: CliktCommand , parent: Context ? = null)","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/-init-/#init","text":"Builder(command: CliktCommand , parent: Context ? = null)","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/allow-interspersed-args/","text":"clikt / com.github.ajalt.clikt.core / Context / Builder / allowInterspersedArgs allowInterspersedArgs \u00b6 var allowInterspersedArgs: Boolean If false, options and arguments cannot be mixed; the first time an argument is encountered, all remaining tokens are parsed as arguments.","title":"Allow interspersed args"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/allow-interspersed-args/#allowinterspersedargs","text":"var allowInterspersedArgs: Boolean If false, options and arguments cannot be mixed; the first time an argument is encountered, all remaining tokens are parsed as arguments.","title":"allowInterspersedArgs"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/auto-envvar-prefix/","text":"clikt / com.github.ajalt.clikt.core / Context / Builder / autoEnvvarPrefix autoEnvvarPrefix \u00b6 var autoEnvvarPrefix: String ? The prefix to add to inferred envvar names. If null, the prefix is based on the parent\u2019s prefix, if there is one. If no command specifies, a prefix, envvar lookup is disabled.","title":"Auto envvar prefix"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/auto-envvar-prefix/#autoenvvarprefix","text":"var autoEnvvarPrefix: String ? The prefix to add to inferred envvar names. If null, the prefix is based on the parent\u2019s prefix, if there is one. If no command specifies, a prefix, envvar lookup is disabled.","title":"autoEnvvarPrefix"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/console/","text":"clikt / com.github.ajalt.clikt.core / Context / Builder / console console \u00b6 var console: CliktConsole The console that will handle reading and writing text. The default uses stdin and stdout.","title":"Console"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/console/#console","text":"var console: CliktConsole The console that will handle reading and writing text. The default uses stdin and stdout.","title":"console"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/correction-suggestor/","text":"clikt / com.github.ajalt.clikt.core / Context / Builder / correctionSuggestor correctionSuggestor \u00b6 var correctionSuggestor: TypoSuggestor A callback called when the command line contains an invalid option or subcommand name. It takes the entered name and a list of all registered names option/subcommand names and filters the list down to values to suggest to the user.","title":"Correction suggestor"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/correction-suggestor/#correctionsuggestor","text":"var correctionSuggestor: TypoSuggestor A callback called when the command line contains an invalid option or subcommand name. It takes the entered name and a list of all registered names option/subcommand names and filters the list down to values to suggest to the user.","title":"correctionSuggestor"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/expand-argument-files/","text":"clikt / com.github.ajalt.clikt.core / Context / Builder / expandArgumentFiles expandArgumentFiles \u00b6 var expandArgumentFiles: Boolean If true, arguments starting with @ will be expanded as argument files. If false, they will be treated as normal arguments.","title":"Expand argument files"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/expand-argument-files/#expandargumentfiles","text":"var expandArgumentFiles: Boolean If true, arguments starting with @ will be expanded as argument files. If false, they will be treated as normal arguments.","title":"expandArgumentFiles"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/help-formatter/","text":"clikt / com.github.ajalt.clikt.core / Context / Builder / helpFormatter helpFormatter \u00b6 var helpFormatter: HelpFormatter ? The help formatter for this command, or null to use the default","title":"Help formatter"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/help-formatter/#helpformatter","text":"var helpFormatter: HelpFormatter ? The help formatter for this command, or null to use the default","title":"helpFormatter"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/help-option-message/","text":"clikt / com.github.ajalt.clikt.core / Context / Builder / helpOptionMessage helpOptionMessage \u00b6 var helpOptionMessage: String The description of the help option.","title":"Help option message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/help-option-message/#helpoptionmessage","text":"var helpOptionMessage: String The description of the help option.","title":"helpOptionMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/help-option-names/","text":"clikt / com.github.ajalt.clikt.core / Context / Builder / helpOptionNames helpOptionNames \u00b6 var helpOptionNames: Set < String > The names to use for the help option. If any names in the set conflict with other options, the conflicting name will not be used for the help option. If the set is empty, or contains no unique names, no help option will be added.","title":"Help option names"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/help-option-names/#helpoptionnames","text":"var helpOptionNames: Set < String > The names to use for the help option. If any names in the set conflict with other options, the conflicting name will not be used for the help option. If the set is empty, or contains no unique names, no help option will be added.","title":"helpOptionNames"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/localization/","text":"clikt / com.github.ajalt.clikt.core / Context / Builder / localization localization \u00b6 var localization: Localization Localized strings to use for help output and error reporting.","title":"Localization"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/localization/#localization","text":"var localization: Localization Localized strings to use for help output and error reporting.","title":"localization"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/print-extra-messages/","text":"clikt / com.github.ajalt.clikt.core / Context / Builder / printExtraMessages printExtraMessages \u00b6 var printExtraMessages: Boolean Set this to false to prevent extra messages from being printed automatically. You can still access them at CliktCommand.messages inside of CliktCommand.run .","title":"Print extra messages"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/print-extra-messages/#printextramessages","text":"var printExtraMessages: Boolean Set this to false to prevent extra messages from being printed automatically. You can still access them at CliktCommand.messages inside of CliktCommand.run .","title":"printExtraMessages"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/read-envvar-before-value-source/","text":"clikt / com.github.ajalt.clikt.core / Context / Builder / readEnvvarBeforeValueSource readEnvvarBeforeValueSource \u00b6 var readEnvvarBeforeValueSource: Boolean If false ,the valueSource is searched before environment variables. By default, environment variables will be searched for option values before the valueSource .","title":"Read envvar before value source"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/read-envvar-before-value-source/#readenvvarbeforevaluesource","text":"var readEnvvarBeforeValueSource: Boolean If false ,the valueSource is searched before environment variables. By default, environment variables will be searched for option values before the valueSource .","title":"readEnvvarBeforeValueSource"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/token-transformer/","text":"clikt / com.github.ajalt.clikt.core / Context / Builder / tokenTransformer tokenTransformer \u00b6 var tokenTransformer: Context .( String ) -> String An optional transformation function that is called to transform command line","title":"Token transformer"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/token-transformer/#tokentransformer","text":"var tokenTransformer: Context .( String ) -> String An optional transformation function that is called to transform command line","title":"tokenTransformer"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/value-source/","text":"clikt / com.github.ajalt.clikt.core / Context / Builder / valueSource valueSource \u00b6 var valueSource: ValueSource ? The source that will attempt to read values for options that aren\u2019t present on the command line. You can set multiple sources with valueSources","title":"Value source"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/value-source/#valuesource","text":"var valueSource: ValueSource ? The source that will attempt to read values for options that aren\u2019t present on the command line. You can set multiple sources with valueSources","title":"valueSource"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/value-sources/","text":"clikt / com.github.ajalt.clikt.core / Context / Builder / valueSources valueSources \u00b6 fun valueSources(vararg sources: ValueSource ): Unit Set multiple sources that will attempt to read values for options not present on the command line. Values are read from the first source, then if it doesn\u2019t return a value, later sources are read successively until one returns a value or all sources have been read.","title":"Value sources"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/value-sources/#valuesources","text":"fun valueSources(vararg sources: ValueSource ): Unit Set multiple sources that will attempt to read values for options not present on the command line. Values are read from the first source, then if it doesn\u2019t return a value, later sources are read successively until one returns a value or all sources have been read.","title":"valueSources"},{"location":"api/clikt/com.github.ajalt.clikt.core/-file-not-found/","text":"clikt / com.github.ajalt.clikt.core / FileNotFound FileNotFound \u00b6 class FileNotFound : UsageError A required configuration file was not found. Constructors \u00b6 Name Summary <init> A required configuration file was not found. FileNotFound(filename: String , context: Context ? = null) Functions \u00b6 Name Summary formatMessage fun formatMessage(): String","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.core/-file-not-found/#filenotfound","text":"class FileNotFound : UsageError A required configuration file was not found.","title":"FileNotFound"},{"location":"api/clikt/com.github.ajalt.clikt.core/-file-not-found/#constructors","text":"Name Summary <init> A required configuration file was not found. FileNotFound(filename: String , context: Context ? = null)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-file-not-found/#functions","text":"Name Summary formatMessage fun formatMessage(): String","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-file-not-found/-init-/","text":"clikt / com.github.ajalt.clikt.core / FileNotFound / <init> <init> \u00b6 FileNotFound(filename: String , context: Context ? = null) A required configuration file was not found.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-file-not-found/-init-/#init","text":"FileNotFound(filename: String , context: Context ? = null) A required configuration file was not found.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-file-not-found/format-message/","text":"clikt / com.github.ajalt.clikt.core / FileNotFound / formatMessage formatMessage \u00b6 protected fun formatMessage(): String","title":"Format message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-file-not-found/format-message/#formatmessage","text":"protected fun formatMessage(): String","title":"formatMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-groupable-option/","text":"clikt / com.github.ajalt.clikt.core / GroupableOption GroupableOption \u00b6 interface GroupableOption : StaticallyGroupedOption An option that can be added to a ParameterGroup Properties \u00b6 Name Summary groupName The name of the group, or null if this option should not be grouped in the help output. abstract var groupName: String ? parameterGroup The group that this option belongs to, or null. Set by the group. abstract var parameterGroup: ParameterGroup ? Inheritors \u00b6 Name Summary OptionDelegate An option that functions as a property delegate interface OptionDelegate<T> : GroupableOption , ReadOnlyProperty < ParameterHolder , T> OptionWithValues An Option that takes one or more values. class OptionWithValues<AllT, EachT, ValueT> : OptionDelegate <AllT>, GroupableOption","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.core/-groupable-option/#groupableoption","text":"interface GroupableOption : StaticallyGroupedOption An option that can be added to a ParameterGroup","title":"GroupableOption"},{"location":"api/clikt/com.github.ajalt.clikt.core/-groupable-option/#properties","text":"Name Summary groupName The name of the group, or null if this option should not be grouped in the help output. abstract var groupName: String ? parameterGroup The group that this option belongs to, or null. Set by the group. abstract var parameterGroup: ParameterGroup ?","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.core/-groupable-option/#inheritors","text":"Name Summary OptionDelegate An option that functions as a property delegate interface OptionDelegate<T> : GroupableOption , ReadOnlyProperty < ParameterHolder , T> OptionWithValues An Option that takes one or more values. class OptionWithValues<AllT, EachT, ValueT> : OptionDelegate <AllT>, GroupableOption","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-groupable-option/group-name/","text":"clikt / com.github.ajalt.clikt.core / GroupableOption / groupName groupName \u00b6 abstract var groupName: String ? The name of the group, or null if this option should not be grouped in the help output.","title":"Group name"},{"location":"api/clikt/com.github.ajalt.clikt.core/-groupable-option/group-name/#groupname","text":"abstract var groupName: String ? The name of the group, or null if this option should not be grouped in the help output.","title":"groupName"},{"location":"api/clikt/com.github.ajalt.clikt.core/-groupable-option/parameter-group/","text":"clikt / com.github.ajalt.clikt.core / GroupableOption / parameterGroup parameterGroup \u00b6 abstract var parameterGroup: ParameterGroup ? The group that this option belongs to, or null. Set by the group.","title":"Parameter group"},{"location":"api/clikt/com.github.ajalt.clikt.core/-groupable-option/parameter-group/#parametergroup","text":"abstract var parameterGroup: ParameterGroup ? The group that this option belongs to, or null. Set by the group.","title":"parameterGroup"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-argument-value-count/","text":"clikt / com.github.ajalt.clikt.core / IncorrectArgumentValueCount IncorrectArgumentValueCount \u00b6 class IncorrectArgumentValueCount : UsageError An argument was supplied but the number of values supplied was incorrect. Constructors \u00b6 Name Summary <init> An argument was supplied but the number of values supplied was incorrect. IncorrectArgumentValueCount(argument: Argument , context: Context ? = null) Functions \u00b6 Name Summary formatMessage fun formatMessage(): String","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-argument-value-count/#incorrectargumentvaluecount","text":"class IncorrectArgumentValueCount : UsageError An argument was supplied but the number of values supplied was incorrect.","title":"IncorrectArgumentValueCount"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-argument-value-count/#constructors","text":"Name Summary <init> An argument was supplied but the number of values supplied was incorrect. IncorrectArgumentValueCount(argument: Argument , context: Context ? = null)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-argument-value-count/#functions","text":"Name Summary formatMessage fun formatMessage(): String","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-argument-value-count/-init-/","text":"clikt / com.github.ajalt.clikt.core / IncorrectArgumentValueCount / <init> <init> \u00b6 IncorrectArgumentValueCount(argument: Argument , context: Context ? = null) An argument was supplied but the number of values supplied was incorrect.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-argument-value-count/-init-/#init","text":"IncorrectArgumentValueCount(argument: Argument , context: Context ? = null) An argument was supplied but the number of values supplied was incorrect.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-argument-value-count/format-message/","text":"clikt / com.github.ajalt.clikt.core / IncorrectArgumentValueCount / formatMessage formatMessage \u00b6 protected fun formatMessage(): String","title":"Format message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-argument-value-count/format-message/#formatmessage","text":"protected fun formatMessage(): String","title":"formatMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-option-value-count/","text":"clikt / com.github.ajalt.clikt.core / IncorrectOptionValueCount IncorrectOptionValueCount \u00b6 class IncorrectOptionValueCount : UsageError An option was supplied but the number of values supplied to the option was incorrect. Constructors \u00b6 Name Summary <init> An option was supplied but the number of values supplied to the option was incorrect. IncorrectOptionValueCount(option: Option , givenName: String , context: Context ? = null) Functions \u00b6 Name Summary formatMessage fun formatMessage(): String","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-option-value-count/#incorrectoptionvaluecount","text":"class IncorrectOptionValueCount : UsageError An option was supplied but the number of values supplied to the option was incorrect.","title":"IncorrectOptionValueCount"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-option-value-count/#constructors","text":"Name Summary <init> An option was supplied but the number of values supplied to the option was incorrect. IncorrectOptionValueCount(option: Option , givenName: String , context: Context ? = null)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-option-value-count/#functions","text":"Name Summary formatMessage fun formatMessage(): String","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-option-value-count/-init-/","text":"clikt / com.github.ajalt.clikt.core / IncorrectOptionValueCount / <init> <init> \u00b6 IncorrectOptionValueCount(option: Option , givenName: String , context: Context ? = null) An option was supplied but the number of values supplied to the option was incorrect.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-option-value-count/-init-/#init","text":"IncorrectOptionValueCount(option: Option , givenName: String , context: Context ? = null) An option was supplied but the number of values supplied to the option was incorrect.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-option-value-count/format-message/","text":"clikt / com.github.ajalt.clikt.core / IncorrectOptionValueCount / formatMessage formatMessage \u00b6 protected fun formatMessage(): String","title":"Format message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-option-value-count/format-message/#formatmessage","text":"protected fun formatMessage(): String","title":"formatMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-invalid-file-format/","text":"clikt / com.github.ajalt.clikt.core / InvalidFileFormat InvalidFileFormat \u00b6 class InvalidFileFormat : UsageError A configuration file failed to parse correctly Constructors \u00b6 Name Summary <init> A configuration file failed to parse correctly InvalidFileFormat(filename: String , message: String , lineno: Int ? = null, context: Context ? = null) Functions \u00b6 Name Summary formatMessage fun formatMessage(): String","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.core/-invalid-file-format/#invalidfileformat","text":"class InvalidFileFormat : UsageError A configuration file failed to parse correctly","title":"InvalidFileFormat"},{"location":"api/clikt/com.github.ajalt.clikt.core/-invalid-file-format/#constructors","text":"Name Summary <init> A configuration file failed to parse correctly InvalidFileFormat(filename: String , message: String , lineno: Int ? = null, context: Context ? = null)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-invalid-file-format/#functions","text":"Name Summary formatMessage fun formatMessage(): String","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-invalid-file-format/-init-/","text":"clikt / com.github.ajalt.clikt.core / InvalidFileFormat / <init> <init> \u00b6 InvalidFileFormat(filename: String , message: String , lineno: Int ? = null, context: Context ? = null) A configuration file failed to parse correctly","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-invalid-file-format/-init-/#init","text":"InvalidFileFormat(filename: String , message: String , lineno: Int ? = null, context: Context ? = null) A configuration file failed to parse correctly","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-invalid-file-format/format-message/","text":"clikt / com.github.ajalt.clikt.core / InvalidFileFormat / formatMessage formatMessage \u00b6 protected fun formatMessage(): String","title":"Format message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-invalid-file-format/format-message/#formatmessage","text":"protected fun formatMessage(): String","title":"formatMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-missing-argument/","text":"clikt / com.github.ajalt.clikt.core / MissingArgument MissingArgument \u00b6 class MissingArgument : UsageError A required argument was not provided Constructors \u00b6 Name Summary <init> A required argument was not provided MissingArgument(argument: Argument , context: Context ? = null) Functions \u00b6 Name Summary formatMessage fun formatMessage(): String","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.core/-missing-argument/#missingargument","text":"class MissingArgument : UsageError A required argument was not provided","title":"MissingArgument"},{"location":"api/clikt/com.github.ajalt.clikt.core/-missing-argument/#constructors","text":"Name Summary <init> A required argument was not provided MissingArgument(argument: Argument , context: Context ? = null)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-missing-argument/#functions","text":"Name Summary formatMessage fun formatMessage(): String","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-missing-argument/-init-/","text":"clikt / com.github.ajalt.clikt.core / MissingArgument / <init> <init> \u00b6 MissingArgument(argument: Argument , context: Context ? = null) A required argument was not provided","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-missing-argument/-init-/#init","text":"MissingArgument(argument: Argument , context: Context ? = null) A required argument was not provided","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-missing-argument/format-message/","text":"clikt / com.github.ajalt.clikt.core / MissingArgument / formatMessage formatMessage \u00b6 protected fun formatMessage(): String","title":"Format message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-missing-argument/format-message/#formatmessage","text":"protected fun formatMessage(): String","title":"formatMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-missing-option/","text":"clikt / com.github.ajalt.clikt.core / MissingOption MissingOption \u00b6 class MissingOption : UsageError A required option was not provided Constructors \u00b6 Name Summary <init> A required option was not provided MissingOption(option: Option , context: Context ? = null) Functions \u00b6 Name Summary formatMessage fun formatMessage(): String","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.core/-missing-option/#missingoption","text":"class MissingOption : UsageError A required option was not provided","title":"MissingOption"},{"location":"api/clikt/com.github.ajalt.clikt.core/-missing-option/#constructors","text":"Name Summary <init> A required option was not provided MissingOption(option: Option , context: Context ? = null)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-missing-option/#functions","text":"Name Summary formatMessage fun formatMessage(): String","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-missing-option/-init-/","text":"clikt / com.github.ajalt.clikt.core / MissingOption / <init> <init> \u00b6 MissingOption(option: Option , context: Context ? = null) A required option was not provided","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-missing-option/-init-/#init","text":"MissingOption(option: Option , context: Context ? = null) A required option was not provided","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-missing-option/format-message/","text":"clikt / com.github.ajalt.clikt.core / MissingOption / formatMessage formatMessage \u00b6 protected fun formatMessage(): String","title":"Format message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-missing-option/format-message/#formatmessage","text":"protected fun formatMessage(): String","title":"formatMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-mutually-exclusive-group-exception/","text":"clikt / com.github.ajalt.clikt.core / MutuallyExclusiveGroupException MutuallyExclusiveGroupException \u00b6 class MutuallyExclusiveGroupException : UsageError Constructors \u00b6 Name Summary <init> MutuallyExclusiveGroupException(names: List < String >, context: Context ? = null) Functions \u00b6 Name Summary formatMessage fun formatMessage(): String","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.core/-mutually-exclusive-group-exception/#mutuallyexclusivegroupexception","text":"class MutuallyExclusiveGroupException : UsageError","title":"MutuallyExclusiveGroupException"},{"location":"api/clikt/com.github.ajalt.clikt.core/-mutually-exclusive-group-exception/#constructors","text":"Name Summary <init> MutuallyExclusiveGroupException(names: List < String >, context: Context ? = null)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-mutually-exclusive-group-exception/#functions","text":"Name Summary formatMessage fun formatMessage(): String","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-mutually-exclusive-group-exception/-init-/","text":"clikt / com.github.ajalt.clikt.core / MutuallyExclusiveGroupException / <init> <init> \u00b6 MutuallyExclusiveGroupException(names: List < String >, context: Context ? = null)","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-mutually-exclusive-group-exception/-init-/#init","text":"MutuallyExclusiveGroupException(names: List < String >, context: Context ? = null)","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-mutually-exclusive-group-exception/format-message/","text":"clikt / com.github.ajalt.clikt.core / MutuallyExclusiveGroupException / formatMessage formatMessage \u00b6 protected fun formatMessage(): String","title":"Format message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-mutually-exclusive-group-exception/format-message/#formatmessage","text":"protected fun formatMessage(): String","title":"formatMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-op-clikt-command/","text":"clikt / com.github.ajalt.clikt.core / NoOpCliktCommand NoOpCliktCommand \u00b6 open class NoOpCliktCommand : CliktCommand A CliktCommand that has a default implementation of CliktCommand.run that is a no-op. Constructors \u00b6 Name Summary <init> A CliktCommand that has a default implementation of CliktCommand.run that is a no-op. NoOpCliktCommand(help: String = \"\", epilog: String = \"\", name: String ? = null, invokeWithoutSubcommand: Boolean = false, printHelpOnEmptyArgs: Boolean = false, helpTags: Map < String , String > = emptyMap(), autoCompleteEnvvar: String ? = \"\", allowMultipleSubcommands: Boolean = false) Functions \u00b6 Name Summary run Perform actions after parsing is complete and this command is invoked. open fun run(): Unit Extension Functions \u00b6 Name Summary argument Create a property delegate argument. fun CliktCommand .argument(name: String = \"\", help: String = \"\", helpTags: Map < String , String > = emptyMap(), completionCandidates: CompletionCandidates ? = null): RawArgument context Configure this command\u2019s Context . fun <T : CliktCommand > T.context(block: Builder.() -> Unit ): T eagerOption Add an eager option to this command that, when invoked, runs action . fun <T : CliktCommand > T.eagerOption(name: String , vararg additionalNames: String , help: String = \"\", hidden: Boolean = false, helpTags: Map < String , String > = emptyMap(), groupName: String ? = null, action: OptionTransformContext .() -> Unit ): T fun <T : CliktCommand > T.eagerOption(names: Collection < String >, help: String = \"\", hidden: Boolean = false, helpTags: Map < String , String > = emptyMap(), groupName: String ? = null, action: OptionTransformContext .() -> Unit ): T findObject Find the closest object of type T , or null fun <T : Any > CliktCommand .findObject(): ReadOnlyProperty < CliktCommand , T?> findOrSetObject Find the closest object of type T , setting context.obj if one is not found. fun <T : Any > CliktCommand .findOrSetObject(default: () -> T): ReadOnlyProperty < CliktCommand , T> mutuallyExclusiveOptions Declare a set of two or more mutually exclusive options. fun <T : Any > ParameterHolder .mutuallyExclusiveOptions(option1: OptionDelegate <T?>, option2: OptionDelegate <T?>, vararg options: OptionDelegate <T?>, name: String ? = null, help: String ? = null): MutuallyExclusiveOptions <T, T?> option Create a property delegate option. fun ParameterHolder .option(vararg names: String , help: String = \"\", metavar: String ? = null, hidden: Boolean = false, envvar: String ? = null, helpTags: Map < String , String > = emptyMap(), completionCandidates: CompletionCandidates ? = null, valueSourceKey: String ? = null): RawOption requireObject Find the closest object of type T , or throw a NullPointerException fun <T : Any > CliktCommand .requireObject(): ReadOnlyProperty < CliktCommand , T> subcommands Add the given commands as a subcommand of this command. fun <T : CliktCommand > T.subcommands(commands: Iterable < CliktCommand >): T fun <T : CliktCommand > T.subcommands(vararg commands: CliktCommand ): T versionOption Add an eager option to this command that, when invoked, prints a version message and exits. fun <T : CliktCommand > T.versionOption(version: String , help: String = \"Show the version and exit\", names: Set < String > = setOf(\"--version\"), message: ( String ) -> String = { \"$commandName version $it\" }): T","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-op-clikt-command/#noopcliktcommand","text":"open class NoOpCliktCommand : CliktCommand A CliktCommand that has a default implementation of CliktCommand.run that is a no-op.","title":"NoOpCliktCommand"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-op-clikt-command/#constructors","text":"Name Summary <init> A CliktCommand that has a default implementation of CliktCommand.run that is a no-op. NoOpCliktCommand(help: String = \"\", epilog: String = \"\", name: String ? = null, invokeWithoutSubcommand: Boolean = false, printHelpOnEmptyArgs: Boolean = false, helpTags: Map < String , String > = emptyMap(), autoCompleteEnvvar: String ? = \"\", allowMultipleSubcommands: Boolean = false)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-op-clikt-command/#functions","text":"Name Summary run Perform actions after parsing is complete and this command is invoked. open fun run(): Unit","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-op-clikt-command/#extension-functions","text":"Name Summary argument Create a property delegate argument. fun CliktCommand .argument(name: String = \"\", help: String = \"\", helpTags: Map < String , String > = emptyMap(), completionCandidates: CompletionCandidates ? = null): RawArgument context Configure this command\u2019s Context . fun <T : CliktCommand > T.context(block: Builder.() -> Unit ): T eagerOption Add an eager option to this command that, when invoked, runs action . fun <T : CliktCommand > T.eagerOption(name: String , vararg additionalNames: String , help: String = \"\", hidden: Boolean = false, helpTags: Map < String , String > = emptyMap(), groupName: String ? = null, action: OptionTransformContext .() -> Unit ): T fun <T : CliktCommand > T.eagerOption(names: Collection < String >, help: String = \"\", hidden: Boolean = false, helpTags: Map < String , String > = emptyMap(), groupName: String ? = null, action: OptionTransformContext .() -> Unit ): T findObject Find the closest object of type T , or null fun <T : Any > CliktCommand .findObject(): ReadOnlyProperty < CliktCommand , T?> findOrSetObject Find the closest object of type T , setting context.obj if one is not found. fun <T : Any > CliktCommand .findOrSetObject(default: () -> T): ReadOnlyProperty < CliktCommand , T> mutuallyExclusiveOptions Declare a set of two or more mutually exclusive options. fun <T : Any > ParameterHolder .mutuallyExclusiveOptions(option1: OptionDelegate <T?>, option2: OptionDelegate <T?>, vararg options: OptionDelegate <T?>, name: String ? = null, help: String ? = null): MutuallyExclusiveOptions <T, T?> option Create a property delegate option. fun ParameterHolder .option(vararg names: String , help: String = \"\", metavar: String ? = null, hidden: Boolean = false, envvar: String ? = null, helpTags: Map < String , String > = emptyMap(), completionCandidates: CompletionCandidates ? = null, valueSourceKey: String ? = null): RawOption requireObject Find the closest object of type T , or throw a NullPointerException fun <T : Any > CliktCommand .requireObject(): ReadOnlyProperty < CliktCommand , T> subcommands Add the given commands as a subcommand of this command. fun <T : CliktCommand > T.subcommands(commands: Iterable < CliktCommand >): T fun <T : CliktCommand > T.subcommands(vararg commands: CliktCommand ): T versionOption Add an eager option to this command that, when invoked, prints a version message and exits. fun <T : CliktCommand > T.versionOption(version: String , help: String = \"Show the version and exit\", names: Set < String > = setOf(\"--version\"), message: ( String ) -> String = { \"$commandName version $it\" }): T","title":"Extension Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-op-clikt-command/-init-/","text":"clikt / com.github.ajalt.clikt.core / NoOpCliktCommand / <init> <init> \u00b6 NoOpCliktCommand(help: String = \u201c\u201d, epilog: String = \u201c\u201d, name: String ? = null, invokeWithoutSubcommand: Boolean = false, printHelpOnEmptyArgs: Boolean = false, helpTags: Map < String , String > = emptyMap(), autoCompleteEnvvar: String ? = \u201c\u201d, allowMultipleSubcommands: Boolean = false) A CliktCommand that has a default implementation of CliktCommand.run that is a no-op.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-op-clikt-command/-init-/#init","text":"NoOpCliktCommand(help: String = \u201c\u201d, epilog: String = \u201c\u201d, name: String ? = null, invokeWithoutSubcommand: Boolean = false, printHelpOnEmptyArgs: Boolean = false, helpTags: Map < String , String > = emptyMap(), autoCompleteEnvvar: String ? = \u201c\u201d, allowMultipleSubcommands: Boolean = false) A CliktCommand that has a default implementation of CliktCommand.run that is a no-op.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-op-clikt-command/run/","text":"clikt / com.github.ajalt.clikt.core / NoOpCliktCommand / run run \u00b6 open fun run(): Unit Perform actions after parsing is complete and this command is invoked. This is called after command line parsing is complete. If this command is a subcommand, this will only be called if the subcommand is invoked. If one of this command\u2019s subcommands is invoked, this is called before the subcommand\u2019s arguments are parsed.","title":"Run"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-op-clikt-command/run/#run","text":"open fun run(): Unit Perform actions after parsing is complete and this command is invoked. This is called after command line parsing is complete. If this command is a subcommand, this will only be called if the subcommand is invoked. If one of this command\u2019s subcommands is invoked, this is called before the subcommand\u2019s arguments are parsed.","title":"run"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-option/","text":"clikt / com.github.ajalt.clikt.core / NoSuchOption NoSuchOption \u00b6 class NoSuchOption : NoSuchParameter An option was provided that does not exist. Constructors \u00b6 Name Summary <init> An option was provided that does not exist. NoSuchOption(givenName: String , possibilities: List < String > = emptyList(), context: Context ? = null) Functions \u00b6 Name Summary formatMessage fun formatMessage(): String","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-option/#nosuchoption","text":"class NoSuchOption : NoSuchParameter An option was provided that does not exist.","title":"NoSuchOption"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-option/#constructors","text":"Name Summary <init> An option was provided that does not exist. NoSuchOption(givenName: String , possibilities: List < String > = emptyList(), context: Context ? = null)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-option/#functions","text":"Name Summary formatMessage fun formatMessage(): String","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-option/-init-/","text":"clikt / com.github.ajalt.clikt.core / NoSuchOption / <init> <init> \u00b6 NoSuchOption(givenName: String , possibilities: List < String > = emptyList(), context: Context ? = null) An option was provided that does not exist.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-option/-init-/#init","text":"NoSuchOption(givenName: String , possibilities: List < String > = emptyList(), context: Context ? = null) An option was provided that does not exist.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-option/format-message/","text":"clikt / com.github.ajalt.clikt.core / NoSuchOption / formatMessage formatMessage \u00b6 protected fun formatMessage(): String","title":"Format message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-option/format-message/#formatmessage","text":"protected fun formatMessage(): String","title":"formatMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-parameter/","text":"clikt / com.github.ajalt.clikt.core / NoSuchParameter NoSuchParameter \u00b6 open class NoSuchParameter : UsageError A parameter was provided that does not exist. Constructors \u00b6 Name Summary <init> A parameter was provided that does not exist. NoSuchParameter(context: Context ?) Inheritors \u00b6 Name Summary NoSuchOption An option was provided that does not exist. class NoSuchOption : NoSuchParameter NoSuchSubcommand A subcommand was provided that does not exist. class NoSuchSubcommand : NoSuchParameter","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-parameter/#nosuchparameter","text":"open class NoSuchParameter : UsageError A parameter was provided that does not exist.","title":"NoSuchParameter"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-parameter/#constructors","text":"Name Summary <init> A parameter was provided that does not exist. NoSuchParameter(context: Context ?)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-parameter/#inheritors","text":"Name Summary NoSuchOption An option was provided that does not exist. class NoSuchOption : NoSuchParameter NoSuchSubcommand A subcommand was provided that does not exist. class NoSuchSubcommand : NoSuchParameter","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-parameter/-init-/","text":"clikt / com.github.ajalt.clikt.core / NoSuchParameter / <init> <init> \u00b6 protected NoSuchParameter(context: Context ?) A parameter was provided that does not exist.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-parameter/-init-/#init","text":"protected NoSuchParameter(context: Context ?) A parameter was provided that does not exist.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-subcommand/","text":"clikt / com.github.ajalt.clikt.core / NoSuchSubcommand NoSuchSubcommand \u00b6 class NoSuchSubcommand : NoSuchParameter A subcommand was provided that does not exist. Constructors \u00b6 Name Summary <init> A subcommand was provided that does not exist. NoSuchSubcommand(givenName: String , possibilities: List < String > = emptyList(), context: Context ? = null) Functions \u00b6 Name Summary formatMessage fun formatMessage(): String","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-subcommand/#nosuchsubcommand","text":"class NoSuchSubcommand : NoSuchParameter A subcommand was provided that does not exist.","title":"NoSuchSubcommand"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-subcommand/#constructors","text":"Name Summary <init> A subcommand was provided that does not exist. NoSuchSubcommand(givenName: String , possibilities: List < String > = emptyList(), context: Context ? = null)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-subcommand/#functions","text":"Name Summary formatMessage fun formatMessage(): String","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-subcommand/-init-/","text":"clikt / com.github.ajalt.clikt.core / NoSuchSubcommand / <init> <init> \u00b6 NoSuchSubcommand(givenName: String , possibilities: List < String > = emptyList(), context: Context ? = null) A subcommand was provided that does not exist.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-subcommand/-init-/#init","text":"NoSuchSubcommand(givenName: String , possibilities: List < String > = emptyList(), context: Context ? = null) A subcommand was provided that does not exist.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-subcommand/format-message/","text":"clikt / com.github.ajalt.clikt.core / NoSuchSubcommand / formatMessage formatMessage \u00b6 protected fun formatMessage(): String","title":"Format message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-subcommand/format-message/#formatmessage","text":"protected fun formatMessage(): String","title":"formatMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-parameter-holder/","text":"clikt / com.github.ajalt.clikt.core / ParameterHolder ParameterHolder \u00b6 interface ParameterHolder Functions \u00b6 Name Summary registerOption Register an option with this command or group. abstract fun registerOption(option: GroupableOption ): Unit Extension Functions \u00b6 Name Summary mutuallyExclusiveOptions Declare a set of two or more mutually exclusive options. fun <T : Any > ParameterHolder .mutuallyExclusiveOptions(option1: OptionDelegate <T?>, option2: OptionDelegate <T?>, vararg options: OptionDelegate <T?>, name: String ? = null, help: String ? = null): MutuallyExclusiveOptions <T, T?> option Create a property delegate option. fun ParameterHolder .option(vararg names: String , help: String = \"\", metavar: String ? = null, hidden: Boolean = false, envvar: String ? = null, helpTags: Map < String , String > = emptyMap(), completionCandidates: CompletionCandidates ? = null, valueSourceKey: String ? = null): RawOption Inheritors \u00b6 Name Summary CliktCommand The CliktCommand is the core of command line interfaces in Clikt. abstract class CliktCommand : ParameterHolder OptionGroup A group of options that can be shown together in help output, or restricted to be cooccurring . open class OptionGroup : ParameterGroup , ParameterHolder","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.core/-parameter-holder/#parameterholder","text":"interface ParameterHolder","title":"ParameterHolder"},{"location":"api/clikt/com.github.ajalt.clikt.core/-parameter-holder/#functions","text":"Name Summary registerOption Register an option with this command or group. abstract fun registerOption(option: GroupableOption ): Unit","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-parameter-holder/#extension-functions","text":"Name Summary mutuallyExclusiveOptions Declare a set of two or more mutually exclusive options. fun <T : Any > ParameterHolder .mutuallyExclusiveOptions(option1: OptionDelegate <T?>, option2: OptionDelegate <T?>, vararg options: OptionDelegate <T?>, name: String ? = null, help: String ? = null): MutuallyExclusiveOptions <T, T?> option Create a property delegate option. fun ParameterHolder .option(vararg names: String , help: String = \"\", metavar: String ? = null, hidden: Boolean = false, envvar: String ? = null, helpTags: Map < String , String > = emptyMap(), completionCandidates: CompletionCandidates ? = null, valueSourceKey: String ? = null): RawOption","title":"Extension Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-parameter-holder/#inheritors","text":"Name Summary CliktCommand The CliktCommand is the core of command line interfaces in Clikt. abstract class CliktCommand : ParameterHolder OptionGroup A group of options that can be shown together in help output, or restricted to be cooccurring . open class OptionGroup : ParameterGroup , ParameterHolder","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-parameter-holder/register-option/","text":"clikt / com.github.ajalt.clikt.core / ParameterHolder / registerOption registerOption \u00b6 abstract fun registerOption(option: GroupableOption ): Unit Register an option with this command or group. This is called automatically for the built in options, but you need to call this if you want to add a custom option.","title":"Register option"},{"location":"api/clikt/com.github.ajalt.clikt.core/-parameter-holder/register-option/#registeroption","text":"abstract fun registerOption(option: GroupableOption ): Unit Register an option with this command or group. This is called automatically for the built in options, but you need to call this if you want to add a custom option.","title":"registerOption"},{"location":"api/clikt/com.github.ajalt.clikt.core/-parameter-holder-dsl/","text":"clikt / com.github.ajalt.clikt.core / ParameterHolderDsl ParameterHolderDsl \u00b6 @DslMarker annotation class ParameterHolderDsl Constructors \u00b6 Name Summary <init> ParameterHolderDsl()","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.core/-parameter-holder-dsl/#parameterholderdsl","text":"@DslMarker annotation class ParameterHolderDsl","title":"ParameterHolderDsl"},{"location":"api/clikt/com.github.ajalt.clikt.core/-parameter-holder-dsl/#constructors","text":"Name Summary <init> ParameterHolderDsl()","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-parameter-holder-dsl/-init-/","text":"clikt / com.github.ajalt.clikt.core / ParameterHolderDsl / <init> <init> \u00b6 ParameterHolderDsl()","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-parameter-holder-dsl/-init-/#init","text":"ParameterHolderDsl()","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-completion-message/","text":"clikt / com.github.ajalt.clikt.core / PrintCompletionMessage PrintCompletionMessage \u00b6 class PrintCompletionMessage : PrintMessage An exception that indicates that shell completion code should be printed. Execution should be immediately halted without an error. Parameters \u00b6 forceUnixLineEndings - if true, all line endings in the message should be \\n , regardless of the current operating system. Constructors \u00b6 Name Summary <init> An exception that indicates that shell completion code should be printed. PrintCompletionMessage(message: String , forceUnixLineEndings: Boolean ) Properties \u00b6 Name Summary forceUnixLineEndings if true, all line endings in the message should be \\n , regardless of the current operating system. val forceUnixLineEndings: Boolean","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-completion-message/#printcompletionmessage","text":"class PrintCompletionMessage : PrintMessage An exception that indicates that shell completion code should be printed. Execution should be immediately halted without an error.","title":"PrintCompletionMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-completion-message/#parameters","text":"forceUnixLineEndings - if true, all line endings in the message should be \\n , regardless of the current operating system.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-completion-message/#constructors","text":"Name Summary <init> An exception that indicates that shell completion code should be printed. PrintCompletionMessage(message: String , forceUnixLineEndings: Boolean )","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-completion-message/#properties","text":"Name Summary forceUnixLineEndings if true, all line endings in the message should be \\n , regardless of the current operating system. val forceUnixLineEndings: Boolean","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-completion-message/-init-/","text":"clikt / com.github.ajalt.clikt.core / PrintCompletionMessage / <init> <init> \u00b6 PrintCompletionMessage(message: String , forceUnixLineEndings: Boolean ) An exception that indicates that shell completion code should be printed. Execution should be immediately halted without an error. Parameters \u00b6 forceUnixLineEndings - if true, all line endings in the message should be \\n , regardless of the current operating system.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-completion-message/-init-/#init","text":"PrintCompletionMessage(message: String , forceUnixLineEndings: Boolean ) An exception that indicates that shell completion code should be printed. Execution should be immediately halted without an error.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-completion-message/-init-/#parameters","text":"forceUnixLineEndings - if true, all line endings in the message should be \\n , regardless of the current operating system.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-completion-message/force-unix-line-endings/","text":"clikt / com.github.ajalt.clikt.core / PrintCompletionMessage / forceUnixLineEndings forceUnixLineEndings \u00b6 val forceUnixLineEndings: Boolean if true, all line endings in the message should be \\n , regardless of the current operating system.","title":"Force unix line endings"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-completion-message/force-unix-line-endings/#forceunixlineendings","text":"val forceUnixLineEndings: Boolean if true, all line endings in the message should be \\n , regardless of the current operating system.","title":"forceUnixLineEndings"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-help-message/","text":"clikt / com.github.ajalt.clikt.core / PrintHelpMessage PrintHelpMessage \u00b6 class PrintHelpMessage : CliktError An exception that indicates that the command\u2019s help should be printed. Execution should be immediately halted. Constructors \u00b6 Name Summary <init> An exception that indicates that the command\u2019s help should be printed. PrintHelpMessage(command: CliktCommand , error: Boolean = false) Properties \u00b6 Name Summary command val command: CliktCommand error If true, execution should halt with an error. Otherwise, execution halt with no error code. val error: Boolean","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-help-message/#printhelpmessage","text":"class PrintHelpMessage : CliktError An exception that indicates that the command\u2019s help should be printed. Execution should be immediately halted.","title":"PrintHelpMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-help-message/#constructors","text":"Name Summary <init> An exception that indicates that the command\u2019s help should be printed. PrintHelpMessage(command: CliktCommand , error: Boolean = false)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-help-message/#properties","text":"Name Summary command val command: CliktCommand error If true, execution should halt with an error. Otherwise, execution halt with no error code. val error: Boolean","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-help-message/-init-/","text":"clikt / com.github.ajalt.clikt.core / PrintHelpMessage / <init> <init> \u00b6 PrintHelpMessage(command: CliktCommand , error: Boolean = false) An exception that indicates that the command\u2019s help should be printed. Execution should be immediately halted.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-help-message/-init-/#init","text":"PrintHelpMessage(command: CliktCommand , error: Boolean = false) An exception that indicates that the command\u2019s help should be printed. Execution should be immediately halted.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-help-message/command/","text":"clikt / com.github.ajalt.clikt.core / PrintHelpMessage / command command \u00b6 val command: CliktCommand","title":"Command"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-help-message/command/#command","text":"val command: CliktCommand","title":"command"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-help-message/error/","text":"clikt / com.github.ajalt.clikt.core / PrintHelpMessage / error error \u00b6 val error: Boolean If true, execution should halt with an error. Otherwise, execution halt with no error code. Property \u00b6 error - If true, execution should halt with an error. Otherwise, execution halt with no error code.","title":"Error"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-help-message/error/#error","text":"val error: Boolean If true, execution should halt with an error. Otherwise, execution halt with no error code.","title":"error"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-help-message/error/#property","text":"error - If true, execution should halt with an error. Otherwise, execution halt with no error code.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-message/","text":"clikt / com.github.ajalt.clikt.core / PrintMessage PrintMessage \u00b6 open class PrintMessage : CliktError An exception that indicates that a message should be printed. Execution should be immediately halted. Constructors \u00b6 Name Summary <init> An exception that indicates that a message should be printed. PrintMessage(message: String , error: Boolean = false) Properties \u00b6 Name Summary error If true, execution should halt with an error. Otherwise, execution halt with no error code. val error: Boolean Inheritors \u00b6 Name Summary PrintCompletionMessage An exception that indicates that shell completion code should be printed. class PrintCompletionMessage : PrintMessage","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-message/#printmessage","text":"open class PrintMessage : CliktError An exception that indicates that a message should be printed. Execution should be immediately halted.","title":"PrintMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-message/#constructors","text":"Name Summary <init> An exception that indicates that a message should be printed. PrintMessage(message: String , error: Boolean = false)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-message/#properties","text":"Name Summary error If true, execution should halt with an error. Otherwise, execution halt with no error code. val error: Boolean","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-message/#inheritors","text":"Name Summary PrintCompletionMessage An exception that indicates that shell completion code should be printed. class PrintCompletionMessage : PrintMessage","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-message/-init-/","text":"clikt / com.github.ajalt.clikt.core / PrintMessage / <init> <init> \u00b6 PrintMessage(message: String , error: Boolean = false) An exception that indicates that a message should be printed. Execution should be immediately halted.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-message/-init-/#init","text":"PrintMessage(message: String , error: Boolean = false) An exception that indicates that a message should be printed. Execution should be immediately halted.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-message/error/","text":"clikt / com.github.ajalt.clikt.core / PrintMessage / error error \u00b6 val error: Boolean If true, execution should halt with an error. Otherwise, execution halt with no error code. Property \u00b6 error - If true, execution should halt with an error. Otherwise, execution halt with no error code.","title":"Error"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-message/error/#error","text":"val error: Boolean If true, execution should halt with an error. Otherwise, execution halt with no error code.","title":"error"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-message/error/#property","text":"error - If true, execution should halt with an error. Otherwise, execution halt with no error code.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-program-result/","text":"clikt / com.github.ajalt.clikt.core / ProgramResult ProgramResult \u00b6 class ProgramResult : CliktError Indicate that that the program finished in a controlled manner, and should complete with the given statusCode Constructors \u00b6 Name Summary <init> Indicate that that the program finished in a controlled manner, and should complete with the given statusCode ProgramResult(statusCode: Int ) Properties \u00b6 Name Summary statusCode val statusCode: Int","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.core/-program-result/#programresult","text":"class ProgramResult : CliktError Indicate that that the program finished in a controlled manner, and should complete with the given statusCode","title":"ProgramResult"},{"location":"api/clikt/com.github.ajalt.clikt.core/-program-result/#constructors","text":"Name Summary <init> Indicate that that the program finished in a controlled manner, and should complete with the given statusCode ProgramResult(statusCode: Int )","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-program-result/#properties","text":"Name Summary statusCode val statusCode: Int","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.core/-program-result/-init-/","text":"clikt / com.github.ajalt.clikt.core / ProgramResult / <init> <init> \u00b6 ProgramResult(statusCode: Int ) Indicate that that the program finished in a controlled manner, and should complete with the given statusCode","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-program-result/-init-/#init","text":"ProgramResult(statusCode: Int ) Indicate that that the program finished in a controlled manner, and should complete with the given statusCode","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-program-result/status-code/","text":"clikt / com.github.ajalt.clikt.core / ProgramResult / statusCode statusCode \u00b6 val statusCode: Int","title":"Status code"},{"location":"api/clikt/com.github.ajalt.clikt.core/-program-result/status-code/#statuscode","text":"val statusCode: Int","title":"statusCode"},{"location":"api/clikt/com.github.ajalt.clikt.core/-statically-grouped-option/","text":"clikt / com.github.ajalt.clikt.core / StaticallyGroupedOption StaticallyGroupedOption \u00b6 interface StaticallyGroupedOption : Option Properties \u00b6 Name Summary groupName The name of the group, or null if this option should not be grouped in the help output. abstract val groupName: String ? Inheritors \u00b6 Name Summary EagerOption An Option with no values that is finalize d before other types of options. class EagerOption : StaticallyGroupedOption GroupableOption An option that can be added to a ParameterGroup interface GroupableOption : StaticallyGroupedOption","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.core/-statically-grouped-option/#staticallygroupedoption","text":"interface StaticallyGroupedOption : Option","title":"StaticallyGroupedOption"},{"location":"api/clikt/com.github.ajalt.clikt.core/-statically-grouped-option/#properties","text":"Name Summary groupName The name of the group, or null if this option should not be grouped in the help output. abstract val groupName: String ?","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.core/-statically-grouped-option/#inheritors","text":"Name Summary EagerOption An Option with no values that is finalize d before other types of options. class EagerOption : StaticallyGroupedOption GroupableOption An option that can be added to a ParameterGroup interface GroupableOption : StaticallyGroupedOption","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-statically-grouped-option/group-name/","text":"clikt / com.github.ajalt.clikt.core / StaticallyGroupedOption / groupName groupName \u00b6 abstract val groupName: String ? The name of the group, or null if this option should not be grouped in the help output.","title":"Group name"},{"location":"api/clikt/com.github.ajalt.clikt.core/-statically-grouped-option/group-name/#groupname","text":"abstract val groupName: String ? The name of the group, or null if this option should not be grouped in the help output.","title":"groupName"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/","text":"clikt / com.github.ajalt.clikt.core / UsageError UsageError \u00b6 open class UsageError : CliktError An internal exception that signals a usage error. The option and argument properties are used in message formatting, and can be set after the exception is created. If this is thrown inside a call to convert , the argument or option value will be set automatically Constructors \u00b6 Name Summary <init> UsageError(text: String , paramName: String ? = null, context: Context ? = null, statusCode: Int = 1) UsageError(text: String , argument: Argument , context: Context ? = null, statusCode: Int = 1) UsageError(text: String , option: Option , context: Context ? = null, statusCode: Int = 1) Properties \u00b6 Name Summary argument The argument that caused this error. This may be set after the error is thrown. var argument: Argument ? context var context: Context ? localization val localization: Localization message open val message: String ? option The option that caused this error. This may be set after the error is thrown. var option: Option ? paramName The name of the parameter that caused the error. If possible, this should be set to the actual name used. If not set, it will be inferred from argument or option if either is set. var paramName: String ? statusCode The value to use as the exit code for the process. If you use CliktCommand.main , it will pass this value to exitProcess after printing message . Defaults to 1. val statusCode: Int text Extra text to add to the message. Not all subclasses uses this. val text: String ? Functions \u00b6 Name Summary formatMessage open fun formatMessage(): String helpMessage fun helpMessage(): String inferParamName fun inferParamName(): String Inheritors \u00b6 Name Summary BadParameterValue A parameter was given the correct number of values, but of invalid format or type. class BadParameterValue : UsageError FileNotFound A required configuration file was not found. class FileNotFound : UsageError IncorrectArgumentValueCount An argument was supplied but the number of values supplied was incorrect. class IncorrectArgumentValueCount : UsageError IncorrectOptionValueCount An option was supplied but the number of values supplied to the option was incorrect. class IncorrectOptionValueCount : UsageError InvalidFileFormat A configuration file failed to parse correctly class InvalidFileFormat : UsageError MissingArgument A required argument was not provided class MissingArgument : UsageError MissingOption A required option was not provided class MissingOption : UsageError MutuallyExclusiveGroupException class MutuallyExclusiveGroupException : UsageError NoSuchParameter A parameter was provided that does not exist. open class NoSuchParameter : UsageError","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/#usageerror","text":"open class UsageError : CliktError An internal exception that signals a usage error. The option and argument properties are used in message formatting, and can be set after the exception is created. If this is thrown inside a call to convert , the argument or option value will be set automatically","title":"UsageError"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/#constructors","text":"Name Summary <init> UsageError(text: String , paramName: String ? = null, context: Context ? = null, statusCode: Int = 1) UsageError(text: String , argument: Argument , context: Context ? = null, statusCode: Int = 1) UsageError(text: String , option: Option , context: Context ? = null, statusCode: Int = 1)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/#properties","text":"Name Summary argument The argument that caused this error. This may be set after the error is thrown. var argument: Argument ? context var context: Context ? localization val localization: Localization message open val message: String ? option The option that caused this error. This may be set after the error is thrown. var option: Option ? paramName The name of the parameter that caused the error. If possible, this should be set to the actual name used. If not set, it will be inferred from argument or option if either is set. var paramName: String ? statusCode The value to use as the exit code for the process. If you use CliktCommand.main , it will pass this value to exitProcess after printing message . Defaults to 1. val statusCode: Int text Extra text to add to the message. Not all subclasses uses this. val text: String ?","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/#functions","text":"Name Summary formatMessage open fun formatMessage(): String helpMessage fun helpMessage(): String inferParamName fun inferParamName(): String","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/#inheritors","text":"Name Summary BadParameterValue A parameter was given the correct number of values, but of invalid format or type. class BadParameterValue : UsageError FileNotFound A required configuration file was not found. class FileNotFound : UsageError IncorrectArgumentValueCount An argument was supplied but the number of values supplied was incorrect. class IncorrectArgumentValueCount : UsageError IncorrectOptionValueCount An option was supplied but the number of values supplied to the option was incorrect. class IncorrectOptionValueCount : UsageError InvalidFileFormat A configuration file failed to parse correctly class InvalidFileFormat : UsageError MissingArgument A required argument was not provided class MissingArgument : UsageError MissingOption A required option was not provided class MissingOption : UsageError MutuallyExclusiveGroupException class MutuallyExclusiveGroupException : UsageError NoSuchParameter A parameter was provided that does not exist. open class NoSuchParameter : UsageError","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/-init-/","text":"clikt / com.github.ajalt.clikt.core / UsageError / <init> <init> \u00b6 UsageError(text: String , paramName: String ? = null, context: Context ? = null, statusCode: Int = 1) UsageError(text: String , argument: Argument , context: Context ? = null, statusCode: Int = 1) UsageError(text: String , option: Option , context: Context ? = null, statusCode: Int = 1)","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/-init-/#init","text":"UsageError(text: String , paramName: String ? = null, context: Context ? = null, statusCode: Int = 1) UsageError(text: String , argument: Argument , context: Context ? = null, statusCode: Int = 1) UsageError(text: String , option: Option , context: Context ? = null, statusCode: Int = 1)","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/argument/","text":"clikt / com.github.ajalt.clikt.core / UsageError / argument argument \u00b6 var argument: Argument ? The argument that caused this error. This may be set after the error is thrown. Property \u00b6 argument - The argument that caused this error. This may be set after the error is thrown.","title":"Argument"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/argument/#argument","text":"var argument: Argument ? The argument that caused this error. This may be set after the error is thrown.","title":"argument"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/argument/#property","text":"argument - The argument that caused this error. This may be set after the error is thrown.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/context/","text":"clikt / com.github.ajalt.clikt.core / UsageError / context context \u00b6 var context: Context ?","title":"Context"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/context/#context","text":"var context: Context ?","title":"context"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/format-message/","text":"clikt / com.github.ajalt.clikt.core / UsageError / formatMessage formatMessage \u00b6 protected open fun formatMessage(): String","title":"Format message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/format-message/#formatmessage","text":"protected open fun formatMessage(): String","title":"formatMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/help-message/","text":"clikt / com.github.ajalt.clikt.core / UsageError / helpMessage helpMessage \u00b6 fun helpMessage(): String","title":"Help message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/help-message/#helpmessage","text":"fun helpMessage(): String","title":"helpMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/infer-param-name/","text":"clikt / com.github.ajalt.clikt.core / UsageError / inferParamName inferParamName \u00b6 protected fun inferParamName(): String","title":"Infer param name"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/infer-param-name/#inferparamname","text":"protected fun inferParamName(): String","title":"inferParamName"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/localization/","text":"clikt / com.github.ajalt.clikt.core / UsageError / localization localization \u00b6 protected val localization: Localization","title":"Localization"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/localization/#localization","text":"protected val localization: Localization","title":"localization"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/message/","text":"clikt / com.github.ajalt.clikt.core / UsageError / message message \u00b6 open val message: String ?","title":"Message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/message/#message","text":"open val message: String ?","title":"message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/option/","text":"clikt / com.github.ajalt.clikt.core / UsageError / option option \u00b6 var option: Option ? The option that caused this error. This may be set after the error is thrown. Property \u00b6 option - The option that caused this error. This may be set after the error is thrown.","title":"Option"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/option/#option","text":"var option: Option ? The option that caused this error. This may be set after the error is thrown.","title":"option"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/option/#property","text":"option - The option that caused this error. This may be set after the error is thrown.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/param-name/","text":"clikt / com.github.ajalt.clikt.core / UsageError / paramName paramName \u00b6 var paramName: String ? The name of the parameter that caused the error. If possible, this should be set to the actual name used. If not set, it will be inferred from argument or option if either is set. Property \u00b6 paramName - The name of the parameter that caused the error. If possible, this should be set to the actual name used. If not set, it will be inferred from argument or option if either is set.","title":"Param name"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/param-name/#paramname","text":"var paramName: String ? The name of the parameter that caused the error. If possible, this should be set to the actual name used. If not set, it will be inferred from argument or option if either is set.","title":"paramName"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/param-name/#property","text":"paramName - The name of the parameter that caused the error. If possible, this should be set to the actual name used. If not set, it will be inferred from argument or option if either is set.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/status-code/","text":"clikt / com.github.ajalt.clikt.core / UsageError / statusCode statusCode \u00b6 val statusCode: Int The value to use as the exit code for the process. If you use CliktCommand.main , it will pass this value to exitProcess after printing message . Defaults to 1. Property \u00b6 statusCode - The value to use as the exit code for the process. If you use CliktCommand.main , it will pass this value to exitProcess after printing message . Defaults to 1.","title":"Status code"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/status-code/#statuscode","text":"val statusCode: Int The value to use as the exit code for the process. If you use CliktCommand.main , it will pass this value to exitProcess after printing message . Defaults to 1.","title":"statusCode"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/status-code/#property","text":"statusCode - The value to use as the exit code for the process. If you use CliktCommand.main , it will pass this value to exitProcess after printing message . Defaults to 1.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/text/","text":"clikt / com.github.ajalt.clikt.core / UsageError / text text \u00b6 val text: String ? Extra text to add to the message. Not all subclasses uses this. Property \u00b6 text - Extra text to add to the message. Not all subclasses uses this.","title":"Text"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/text/#text","text":"val text: String ? Extra text to add to the message. Not all subclasses uses this.","title":"text"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/text/#property","text":"text - Extra text to add to the message. Not all subclasses uses this.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.output/","text":"clikt / com.github.ajalt.clikt.output Package com.github.ajalt.clikt.output \u00b6 Types \u00b6 Name Summary CliktConsole An object that is used by commands and parameters to show text to the user and read input. interface CliktConsole CliktHelpFormatter open class CliktHelpFormatter : HelpFormatter HelpFormatter Creates help and usage strings for a command. interface HelpFormatter InteractiveCliktConsole class InteractiveCliktConsole : CliktConsole Localization Strings to use for help output and error messages interface Localization NonInteractiveCliktConsole class NonInteractiveCliktConsole : CliktConsole TermUi object TermUi Functions \u00b6 Name Summary defaultCliktConsole Return a CliktConsole for this platform. fun defaultCliktConsole(): CliktConsole","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.output/#package-comgithubajaltcliktoutput","text":"","title":"Package com.github.ajalt.clikt.output"},{"location":"api/clikt/com.github.ajalt.clikt.output/#types","text":"Name Summary CliktConsole An object that is used by commands and parameters to show text to the user and read input. interface CliktConsole CliktHelpFormatter open class CliktHelpFormatter : HelpFormatter HelpFormatter Creates help and usage strings for a command. interface HelpFormatter InteractiveCliktConsole class InteractiveCliktConsole : CliktConsole Localization Strings to use for help output and error messages interface Localization NonInteractiveCliktConsole class NonInteractiveCliktConsole : CliktConsole TermUi object TermUi","title":"Types"},{"location":"api/clikt/com.github.ajalt.clikt.output/#functions","text":"Name Summary defaultCliktConsole Return a CliktConsole for this platform. fun defaultCliktConsole(): CliktConsole","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.output/default-clikt-console/","text":"clikt / com.github.ajalt.clikt.output / defaultCliktConsole defaultCliktConsole \u00b6 fun defaultCliktConsole(): CliktConsole Return a CliktConsole for this platform.","title":"Default clikt console"},{"location":"api/clikt/com.github.ajalt.clikt.output/default-clikt-console/#defaultcliktconsole","text":"fun defaultCliktConsole(): CliktConsole Return a CliktConsole for this platform.","title":"defaultCliktConsole"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-console/","text":"clikt / com.github.ajalt.clikt.output / CliktConsole CliktConsole \u00b6 interface CliktConsole An object that is used by commands and parameters to show text to the user and read input. By default, stdin and stdout are used, but you can provide an implementation of this interface to Context.console to customize the behavior. Properties \u00b6 Name Summary lineSeparator The line separator to use. (Either \u201c\\n\u201d or \u201c\\r\\n\u201d) abstract val lineSeparator: String Functions \u00b6 Name Summary print Show some text to the user. abstract fun print(text: String , error: Boolean ): Unit promptForLine Show the prompt to the user, and return a line of their response. abstract fun promptForLine(prompt: String , hideInput: Boolean ): String ? Inheritors \u00b6 Name Summary InteractiveCliktConsole class InteractiveCliktConsole : CliktConsole NonInteractiveCliktConsole class NonInteractiveCliktConsole : CliktConsole","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-console/#cliktconsole","text":"interface CliktConsole An object that is used by commands and parameters to show text to the user and read input. By default, stdin and stdout are used, but you can provide an implementation of this interface to Context.console to customize the behavior.","title":"CliktConsole"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-console/#properties","text":"Name Summary lineSeparator The line separator to use. (Either \u201c\\n\u201d or \u201c\\r\\n\u201d) abstract val lineSeparator: String","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-console/#functions","text":"Name Summary print Show some text to the user. abstract fun print(text: String , error: Boolean ): Unit promptForLine Show the prompt to the user, and return a line of their response. abstract fun promptForLine(prompt: String , hideInput: Boolean ): String ?","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-console/#inheritors","text":"Name Summary InteractiveCliktConsole class InteractiveCliktConsole : CliktConsole NonInteractiveCliktConsole class NonInteractiveCliktConsole : CliktConsole","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-console/line-separator/","text":"clikt / com.github.ajalt.clikt.output / CliktConsole / lineSeparator lineSeparator \u00b6 abstract val lineSeparator: String The line separator to use. (Either \u201c\\n\u201d or \u201c\\r\\n\u201d)","title":"Line separator"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-console/line-separator/#lineseparator","text":"abstract val lineSeparator: String The line separator to use. (Either \u201c\\n\u201d or \u201c\\r\\n\u201d)","title":"lineSeparator"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-console/print/","text":"clikt / com.github.ajalt.clikt.output / CliktConsole / print print \u00b6 abstract fun print(text: String , error: Boolean ): Unit Show some text to the user. Parameters \u00b6 text - The text to display. May or may not contain a tailing newline. error - If true, the text is an error message, and should be printed in an alternate stream or format, if applicable.","title":"Print"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-console/print/#print","text":"abstract fun print(text: String , error: Boolean ): Unit Show some text to the user.","title":"print"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-console/print/#parameters","text":"text - The text to display. May or may not contain a tailing newline. error - If true, the text is an error message, and should be printed in an alternate stream or format, if applicable.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-console/prompt-for-line/","text":"clikt / com.github.ajalt.clikt.output / CliktConsole / promptForLine promptForLine \u00b6 abstract fun promptForLine(prompt: String , hideInput: Boolean ): String ? Show the prompt to the user, and return a line of their response. This function will block until a line of input has been read. Parameters \u00b6 prompt - The text to display to the user hideInput - If true, the user\u2019s input should not be echoed to the screen. If the current console does not support hidden input, this argument may be ignored. Currently, this argument is ignored on JS and Native platforms. Return A line of user input, or null if an error occurred.","title":"Prompt for line"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-console/prompt-for-line/#promptforline","text":"abstract fun promptForLine(prompt: String , hideInput: Boolean ): String ? Show the prompt to the user, and return a line of their response. This function will block until a line of input has been read.","title":"promptForLine"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-console/prompt-for-line/#parameters","text":"prompt - The text to display to the user hideInput - If true, the user\u2019s input should not be echoed to the screen. If the current console does not support hidden input, this argument may be ignored. Currently, this argument is ignored on JS and Native platforms. Return A line of user input, or null if an error occurred.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter CliktHelpFormatter \u00b6 open class CliktHelpFormatter : HelpFormatter Types \u00b6 Name Summary DefinitionRow data class DefinitionRow Constructors \u00b6 Name Summary <init> CliktHelpFormatter(localization: Localization = defaultLocalization, indent: String = \" \", width: Int ? = null, maxWidth: Int = 78, maxColWidth: Int ? = null, colSpacing: Int = 2, requiredOptionMarker: String ? = null, showDefaultValues: Boolean = false, showRequiredTag: Boolean = false) Properties \u00b6 Name Summary colSpacing val colSpacing: Int graphemeLength The number of visible characters in a string val String .graphemeLength: Int indent val indent: String localization val localization: Localization maxColWidth val maxColWidth: Int requiredOptionMarker val requiredOptionMarker: String ? showDefaultValues val showDefaultValues: Boolean showRequiredTag val showRequiredTag: Boolean width val width: Int Functions \u00b6 Name Summary addArguments open fun StringBuilder .addArguments(parameters: List <ParameterHelp>): Unit addCommands open fun StringBuilder .addCommands(parameters: List <ParameterHelp>): Unit addEpilog open fun StringBuilder .addEpilog(epilog: String ): Unit addOptionGroup open fun StringBuilder .addOptionGroup(title: String , help: String ?, parameters: List <Option>): Unit addOptions open fun StringBuilder .addOptions(parameters: List <ParameterHelp>): Unit addProlog open fun StringBuilder .addProlog(prolog: String ): Unit addUsage open fun StringBuilder .addUsage(parameters: List <ParameterHelp>, programName: String ): Unit appendDefinitionList fun StringBuilder .appendDefinitionList(rows: List <DefinitionRow>): Unit formatHelp Create the full help string. open fun formatHelp(prolog: String , epilog: String , parameters: List <ParameterHelp>, programName: String ): String formatUsage Create the one-line usage information for a command. open fun formatUsage(parameters: List <ParameterHelp>, programName: String ): String joinNamesForOption open fun joinNamesForOption(names: Set < String >): String optionMetavar open fun optionMetavar(option: Option): String renderArgumentName open fun renderArgumentName(name: String ): String renderHelpText open fun renderHelpText(help: String , tags: Map < String , String >): String renderOptionName open fun renderOptionName(name: String ): String renderSectionTitle open fun renderSectionTitle(title: String ): String renderSubcommandName open fun renderSubcommandName(name: String ): String renderTag open fun renderTag(tag: String , value: String ): String shouldShowTag open fun shouldShowTag(tag: String , value: String ): Boolean","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/#clikthelpformatter","text":"open class CliktHelpFormatter : HelpFormatter","title":"CliktHelpFormatter"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/#types","text":"Name Summary DefinitionRow data class DefinitionRow","title":"Types"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/#constructors","text":"Name Summary <init> CliktHelpFormatter(localization: Localization = defaultLocalization, indent: String = \" \", width: Int ? = null, maxWidth: Int = 78, maxColWidth: Int ? = null, colSpacing: Int = 2, requiredOptionMarker: String ? = null, showDefaultValues: Boolean = false, showRequiredTag: Boolean = false)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/#properties","text":"Name Summary colSpacing val colSpacing: Int graphemeLength The number of visible characters in a string val String .graphemeLength: Int indent val indent: String localization val localization: Localization maxColWidth val maxColWidth: Int requiredOptionMarker val requiredOptionMarker: String ? showDefaultValues val showDefaultValues: Boolean showRequiredTag val showRequiredTag: Boolean width val width: Int","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/#functions","text":"Name Summary addArguments open fun StringBuilder .addArguments(parameters: List <ParameterHelp>): Unit addCommands open fun StringBuilder .addCommands(parameters: List <ParameterHelp>): Unit addEpilog open fun StringBuilder .addEpilog(epilog: String ): Unit addOptionGroup open fun StringBuilder .addOptionGroup(title: String , help: String ?, parameters: List <Option>): Unit addOptions open fun StringBuilder .addOptions(parameters: List <ParameterHelp>): Unit addProlog open fun StringBuilder .addProlog(prolog: String ): Unit addUsage open fun StringBuilder .addUsage(parameters: List <ParameterHelp>, programName: String ): Unit appendDefinitionList fun StringBuilder .appendDefinitionList(rows: List <DefinitionRow>): Unit formatHelp Create the full help string. open fun formatHelp(prolog: String , epilog: String , parameters: List <ParameterHelp>, programName: String ): String formatUsage Create the one-line usage information for a command. open fun formatUsage(parameters: List <ParameterHelp>, programName: String ): String joinNamesForOption open fun joinNamesForOption(names: Set < String >): String optionMetavar open fun optionMetavar(option: Option): String renderArgumentName open fun renderArgumentName(name: String ): String renderHelpText open fun renderHelpText(help: String , tags: Map < String , String >): String renderOptionName open fun renderOptionName(name: String ): String renderSectionTitle open fun renderSectionTitle(title: String ): String renderSubcommandName open fun renderSubcommandName(name: String ): String renderTag open fun renderTag(tag: String , value: String ): String shouldShowTag open fun shouldShowTag(tag: String , value: String ): Boolean","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/-init-/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / <init> <init> \u00b6 CliktHelpFormatter(localization: Localization = defaultLocalization, indent: String = \u201d \u201c, width: Int ? = null, maxWidth: Int = 78, maxColWidth: Int ? = null, colSpacing: Int = 2, requiredOptionMarker: String ? = null, showDefaultValues: Boolean = false, showRequiredTag: Boolean = false)","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/-init-/#init","text":"CliktHelpFormatter(localization: Localization = defaultLocalization, indent: String = \u201d \u201c, width: Int ? = null, maxWidth: Int = 78, maxColWidth: Int ? = null, colSpacing: Int = 2, requiredOptionMarker: String ? = null, showDefaultValues: Boolean = false, showRequiredTag: Boolean = false)","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/add-arguments/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / addArguments addArguments \u00b6 protected open fun StringBuilder .addArguments(parameters: List ): Unit","title":"Add arguments"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/add-arguments/#addarguments","text":"protected open fun StringBuilder .addArguments(parameters: List ): Unit","title":"addArguments"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/add-commands/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / addCommands addCommands \u00b6 protected open fun StringBuilder .addCommands(parameters: List ): Unit","title":"Add commands"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/add-commands/#addcommands","text":"protected open fun StringBuilder .addCommands(parameters: List ): Unit","title":"addCommands"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/add-epilog/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / addEpilog addEpilog \u00b6 protected open fun StringBuilder .addEpilog(epilog: String ): Unit","title":"Add epilog"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/add-epilog/#addepilog","text":"protected open fun StringBuilder .addEpilog(epilog: String ): Unit","title":"addEpilog"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/add-option-group/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / addOptionGroup addOptionGroup \u00b6 protected open fun StringBuilder .addOptionGroup(title: String , help: String ?, parameters: List ): Unit","title":"Add option group"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/add-option-group/#addoptiongroup","text":"protected open fun StringBuilder .addOptionGroup(title: String , help: String ?, parameters: List ): Unit","title":"addOptionGroup"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/add-options/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / addOptions addOptions \u00b6 protected open fun StringBuilder .addOptions(parameters: List ): Unit","title":"Add options"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/add-options/#addoptions","text":"protected open fun StringBuilder .addOptions(parameters: List ): Unit","title":"addOptions"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/add-prolog/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / addProlog addProlog \u00b6 protected open fun StringBuilder .addProlog(prolog: String ): Unit","title":"Add prolog"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/add-prolog/#addprolog","text":"protected open fun StringBuilder .addProlog(prolog: String ): Unit","title":"addProlog"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/add-usage/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / addUsage addUsage \u00b6 protected open fun StringBuilder .addUsage(parameters: List , programName: String ): Unit","title":"Add usage"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/add-usage/#addusage","text":"protected open fun StringBuilder .addUsage(parameters: List , programName: String ): Unit","title":"addUsage"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/append-definition-list/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / appendDefinitionList appendDefinitionList \u00b6 protected fun StringBuilder .appendDefinitionList(rows: List ): Unit","title":"Append definition list"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/append-definition-list/#appenddefinitionlist","text":"protected fun StringBuilder .appendDefinitionList(rows: List ): Unit","title":"appendDefinitionList"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/arguments-title/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / argumentsTitle argumentsTitle \u00b6 protected val argumentsTitle: String","title":"Arguments title"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/arguments-title/#argumentstitle","text":"protected val argumentsTitle: String","title":"argumentsTitle"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/col-spacing/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / colSpacing colSpacing \u00b6 protected val colSpacing: Int","title":"Col spacing"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/col-spacing/#colspacing","text":"protected val colSpacing: Int","title":"colSpacing"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/command-metavar/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / commandMetavar commandMetavar \u00b6 protected val commandMetavar: String","title":"Command metavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/command-metavar/#commandmetavar","text":"protected val commandMetavar: String","title":"commandMetavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/commands-title/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / commandsTitle commandsTitle \u00b6 protected val commandsTitle: String","title":"Commands title"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/commands-title/#commandstitle","text":"protected val commandsTitle: String","title":"commandsTitle"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/format-help/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / formatHelp formatHelp \u00b6 open fun formatHelp(prolog: String , epilog: String , parameters: List , programName: String ): String Create the full help string. Parameters \u00b6 prolog - Text to display before any parameter information epilog - Text to display after any parameter information parameters - Information about the command\u2019s parameters programName - The name of the currently executing program","title":"Format help"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/format-help/#formathelp","text":"open fun formatHelp(prolog: String , epilog: String , parameters: List , programName: String ): String Create the full help string.","title":"formatHelp"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/format-help/#parameters","text":"prolog - Text to display before any parameter information epilog - Text to display after any parameter information parameters - Information about the command\u2019s parameters programName - The name of the currently executing program","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/format-usage/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / formatUsage formatUsage \u00b6 open fun formatUsage(parameters: List , programName: String ): String Create the one-line usage information for a command. This is usually displayed when incorrect input is encountered, and as the first line of the full help.","title":"Format usage"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/format-usage/#formatusage","text":"open fun formatUsage(parameters: List , programName: String ): String Create the one-line usage information for a command. This is usually displayed when incorrect input is encountered, and as the first line of the full help.","title":"formatUsage"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/grapheme-length/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / graphemeLength graphemeLength \u00b6 protected val String .graphemeLength: Int The number of visible characters in a string","title":"Grapheme length"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/grapheme-length/#graphemelength","text":"protected val String .graphemeLength: Int The number of visible characters in a string","title":"graphemeLength"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/indent/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / indent indent \u00b6 protected val indent: String","title":"Indent"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/indent/#indent","text":"protected val indent: String","title":"indent"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/join-names-for-option/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / joinNamesForOption joinNamesForOption \u00b6 protected open fun joinNamesForOption(names: Set < String >): String","title":"Join names for option"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/join-names-for-option/#joinnamesforoption","text":"protected open fun joinNamesForOption(names: Set < String >): String","title":"joinNamesForOption"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/localization/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / localization localization \u00b6 protected val localization: Localization","title":"Localization"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/localization/#localization","text":"protected val localization: Localization","title":"localization"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/max-col-width/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / maxColWidth maxColWidth \u00b6 protected val maxColWidth: Int","title":"Max col width"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/max-col-width/#maxcolwidth","text":"protected val maxColWidth: Int","title":"maxColWidth"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/option-metavar/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / optionMetavar optionMetavar \u00b6 protected open fun optionMetavar(option: Option): String","title":"Option metavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/option-metavar/#optionmetavar","text":"protected open fun optionMetavar(option: Option): String","title":"optionMetavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/options-metavar/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / optionsMetavar optionsMetavar \u00b6 protected val optionsMetavar: String","title":"Options metavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/options-metavar/#optionsmetavar","text":"protected val optionsMetavar: String","title":"optionsMetavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/options-title/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / optionsTitle optionsTitle \u00b6 protected val optionsTitle: String","title":"Options title"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/options-title/#optionstitle","text":"protected val optionsTitle: String","title":"optionsTitle"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/render-argument-name/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / renderArgumentName renderArgumentName \u00b6 protected open fun renderArgumentName(name: String ): String","title":"Render argument name"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/render-argument-name/#renderargumentname","text":"protected open fun renderArgumentName(name: String ): String","title":"renderArgumentName"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/render-help-text/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / renderHelpText renderHelpText \u00b6 protected open fun renderHelpText(help: String , tags: Map < String , String >): String","title":"Render help text"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/render-help-text/#renderhelptext","text":"protected open fun renderHelpText(help: String , tags: Map < String , String >): String","title":"renderHelpText"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/render-option-name/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / renderOptionName renderOptionName \u00b6 protected open fun renderOptionName(name: String ): String","title":"Render option name"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/render-option-name/#renderoptionname","text":"protected open fun renderOptionName(name: String ): String","title":"renderOptionName"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/render-section-title/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / renderSectionTitle renderSectionTitle \u00b6 protected open fun renderSectionTitle(title: String ): String","title":"Render section title"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/render-section-title/#rendersectiontitle","text":"protected open fun renderSectionTitle(title: String ): String","title":"renderSectionTitle"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/render-subcommand-name/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / renderSubcommandName renderSubcommandName \u00b6 protected open fun renderSubcommandName(name: String ): String","title":"Render subcommand name"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/render-subcommand-name/#rendersubcommandname","text":"protected open fun renderSubcommandName(name: String ): String","title":"renderSubcommandName"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/render-tag/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / renderTag renderTag \u00b6 protected open fun renderTag(tag: String , value: String ): String","title":"Render tag"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/render-tag/#rendertag","text":"protected open fun renderTag(tag: String , value: String ): String","title":"renderTag"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/required-option-marker/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / requiredOptionMarker requiredOptionMarker \u00b6 protected val requiredOptionMarker: String ?","title":"Required option marker"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/required-option-marker/#requiredoptionmarker","text":"protected val requiredOptionMarker: String ?","title":"requiredOptionMarker"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/should-show-tag/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / shouldShowTag shouldShowTag \u00b6 protected open fun shouldShowTag(tag: String , value: String ): Boolean","title":"Should show tag"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/should-show-tag/#shouldshowtag","text":"protected open fun shouldShowTag(tag: String , value: String ): Boolean","title":"shouldShowTag"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/show-default-values/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / showDefaultValues showDefaultValues \u00b6 protected val showDefaultValues: Boolean","title":"Show default values"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/show-default-values/#showdefaultvalues","text":"protected val showDefaultValues: Boolean","title":"showDefaultValues"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/show-required-tag/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / showRequiredTag showRequiredTag \u00b6 protected val showRequiredTag: Boolean","title":"Show required tag"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/show-required-tag/#showrequiredtag","text":"protected val showRequiredTag: Boolean","title":"showRequiredTag"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/usage-title/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / usageTitle usageTitle \u00b6 protected val usageTitle: String","title":"Usage title"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/usage-title/#usagetitle","text":"protected val usageTitle: String","title":"usageTitle"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/width/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / width width \u00b6 protected val width: Int","title":"Width"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/width/#width","text":"protected val width: Int","title":"width"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/-definition-row/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / DefinitionRow DefinitionRow \u00b6 protected data class DefinitionRow Constructors \u00b6 Name Summary <init> DefinitionRow(col1: String , col2: String , marker: String ? = null) Properties \u00b6 Name Summary col1 val col1: String col2 val col2: String marker val marker: String ?","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/-definition-row/#definitionrow","text":"protected data class DefinitionRow","title":"DefinitionRow"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/-definition-row/#constructors","text":"Name Summary <init> DefinitionRow(col1: String , col2: String , marker: String ? = null)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/-definition-row/#properties","text":"Name Summary col1 val col1: String col2 val col2: String marker val marker: String ?","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/-definition-row/-init-/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / DefinitionRow / <init> <init> \u00b6 DefinitionRow(col1: String , col2: String , marker: String ? = null)","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/-definition-row/-init-/#init","text":"DefinitionRow(col1: String , col2: String , marker: String ? = null)","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/-definition-row/col1/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / DefinitionRow / col1 col1 \u00b6 val col1: String","title":"Col1"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/-definition-row/col1/#col1","text":"val col1: String","title":"col1"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/-definition-row/col2/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / DefinitionRow / col2 col2 \u00b6 val col2: String","title":"Col2"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/-definition-row/col2/#col2","text":"val col2: String","title":"col2"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/-definition-row/marker/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / DefinitionRow / marker marker \u00b6 val marker: String ?","title":"Marker"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/-definition-row/marker/#marker","text":"val marker: String ?","title":"marker"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter HelpFormatter \u00b6 interface HelpFormatter Creates help and usage strings for a command. You can set the formatter for a command when configuring the context. Types \u00b6 Name Summary ParameterHelp sealed class ParameterHelp Tags Standard tag names for parameter help object Tags Functions \u00b6 Name Summary formatHelp Create the full help string. abstract fun formatHelp(prolog: String , epilog: String , parameters: List <ParameterHelp>, programName: String = \"\"): String formatUsage Create the one-line usage information for a command. abstract fun formatUsage(parameters: List <ParameterHelp>, programName: String = \"\"): String Inheritors \u00b6 Name Summary CliktHelpFormatter open class CliktHelpFormatter : HelpFormatter","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/#helpformatter","text":"interface HelpFormatter Creates help and usage strings for a command. You can set the formatter for a command when configuring the context.","title":"HelpFormatter"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/#types","text":"Name Summary ParameterHelp sealed class ParameterHelp Tags Standard tag names for parameter help object Tags","title":"Types"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/#functions","text":"Name Summary formatHelp Create the full help string. abstract fun formatHelp(prolog: String , epilog: String , parameters: List <ParameterHelp>, programName: String = \"\"): String formatUsage Create the one-line usage information for a command. abstract fun formatUsage(parameters: List <ParameterHelp>, programName: String = \"\"): String","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/#inheritors","text":"Name Summary CliktHelpFormatter open class CliktHelpFormatter : HelpFormatter","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/format-help/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / formatHelp formatHelp \u00b6 abstract fun formatHelp(prolog: String , epilog: String , parameters: List , programName: String = \u201c\u201d): String Create the full help string. Parameters \u00b6 prolog - Text to display before any parameter information epilog - Text to display after any parameter information parameters - Information about the command\u2019s parameters programName - The name of the currently executing program","title":"Format help"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/format-help/#formathelp","text":"abstract fun formatHelp(prolog: String , epilog: String , parameters: List , programName: String = \u201c\u201d): String Create the full help string.","title":"formatHelp"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/format-help/#parameters","text":"prolog - Text to display before any parameter information epilog - Text to display after any parameter information parameters - Information about the command\u2019s parameters programName - The name of the currently executing program","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/format-usage/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / formatUsage formatUsage \u00b6 abstract fun formatUsage(parameters: List , programName: String = \u201c\u201d): String Create the one-line usage information for a command. This is usually displayed when incorrect input is encountered, and as the first line of the full help.","title":"Format usage"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/format-usage/#formatusage","text":"abstract fun formatUsage(parameters: List , programName: String = \u201c\u201d): String Create the one-line usage information for a command. This is usually displayed when incorrect input is encountered, and as the first line of the full help.","title":"formatUsage"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp ParameterHelp \u00b6 sealed class ParameterHelp Types \u00b6 Name Summary Argument data class Argument : ParameterHelp Group Help for an option group. If the group doesn\u2019t have a name or help, you don\u2019t need to create an instance of this class for it. data class Group : ParameterHelp Option data class Option : ParameterHelp Subcommand data class Subcommand : ParameterHelp","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/#parameterhelp","text":"sealed class ParameterHelp","title":"ParameterHelp"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/#types","text":"Name Summary Argument data class Argument : ParameterHelp Group Help for an option group. If the group doesn\u2019t have a name or help, you don\u2019t need to create an instance of this class for it. data class Group : ParameterHelp Option data class Option : ParameterHelp Subcommand data class Subcommand : ParameterHelp","title":"Types"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Argument Argument \u00b6 data class Argument : ParameterHelp Parameters \u00b6 name - The name / metavar for this argument help - The arguments\u2019s description required - True if this argument must be specified repeatable - True if this argument takes an unlimited number of values Constructors \u00b6 Name Summary <init> Argument(name: String , help: String , required: Boolean , repeatable: Boolean , tags: Map < String , String >) Properties \u00b6 Name Summary help The arguments\u2019s description val help: String name The name / metavar for this argument val name: String repeatable True if this argument takes an unlimited number of values val repeatable: Boolean required True if this argument must be specified val required: Boolean tags val tags: Map < String , String >","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/#argument","text":"data class Argument : ParameterHelp","title":"Argument"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/#parameters","text":"name - The name / metavar for this argument help - The arguments\u2019s description required - True if this argument must be specified repeatable - True if this argument takes an unlimited number of values","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/#constructors","text":"Name Summary <init> Argument(name: String , help: String , required: Boolean , repeatable: Boolean , tags: Map < String , String >)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/#properties","text":"Name Summary help The arguments\u2019s description val help: String name The name / metavar for this argument val name: String repeatable True if this argument takes an unlimited number of values val repeatable: Boolean required True if this argument must be specified val required: Boolean tags val tags: Map < String , String >","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/-init-/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Argument / <init> <init> \u00b6 Argument(name: String , help: String , required: Boolean , repeatable: Boolean , tags: Map < String , String >) Parameters \u00b6 name - The name / metavar for this argument help - The arguments\u2019s description required - True if this argument must be specified repeatable - True if this argument takes an unlimited number of values","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/-init-/#init","text":"Argument(name: String , help: String , required: Boolean , repeatable: Boolean , tags: Map < String , String >)","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/-init-/#parameters","text":"name - The name / metavar for this argument help - The arguments\u2019s description required - True if this argument must be specified repeatable - True if this argument takes an unlimited number of values","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/help/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Argument / help help \u00b6 val help: String The arguments\u2019s description","title":"Help"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/help/#help","text":"val help: String The arguments\u2019s description","title":"help"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/name/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Argument / name name \u00b6 val name: String The name / metavar for this argument","title":"Name"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/name/#name","text":"val name: String The name / metavar for this argument","title":"name"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/repeatable/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Argument / repeatable repeatable \u00b6 val repeatable: Boolean True if this argument takes an unlimited number of values","title":"Repeatable"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/repeatable/#repeatable","text":"val repeatable: Boolean True if this argument takes an unlimited number of values","title":"repeatable"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/required/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Argument / required required \u00b6 val required: Boolean True if this argument must be specified","title":"Required"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/required/#required","text":"val required: Boolean True if this argument must be specified","title":"required"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/tags/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Argument / tags tags \u00b6 val tags: Map < String , String >","title":"Tags"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/tags/#tags","text":"val tags: Map < String , String >","title":"tags"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-group/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Group Group \u00b6 data class Group : ParameterHelp Help for an option group. If the group doesn\u2019t have a name or help, you don\u2019t need to create an instance of this class for it. Constructors \u00b6 Name Summary <init> Help for an option group. If the group doesn\u2019t have a name or help, you don\u2019t need to create an instance of this class for it. Group(name: String , help: String ) Properties \u00b6 Name Summary help The help text for this group val help: String name The group name val name: String","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-group/#group","text":"data class Group : ParameterHelp Help for an option group. If the group doesn\u2019t have a name or help, you don\u2019t need to create an instance of this class for it.","title":"Group"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-group/#constructors","text":"Name Summary <init> Help for an option group. If the group doesn\u2019t have a name or help, you don\u2019t need to create an instance of this class for it. Group(name: String , help: String )","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-group/#properties","text":"Name Summary help The help text for this group val help: String name The group name val name: String","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-group/-init-/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Group / <init> <init> \u00b6 Group(name: String , help: String ) Help for an option group. If the group doesn\u2019t have a name or help, you don\u2019t need to create an instance of this class for it.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-group/-init-/#init","text":"Group(name: String , help: String ) Help for an option group. If the group doesn\u2019t have a name or help, you don\u2019t need to create an instance of this class for it.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-group/help/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Group / help help \u00b6 val help: String The help text for this group Property \u00b6 help - The help text for this group","title":"Help"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-group/help/#help","text":"val help: String The help text for this group","title":"help"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-group/help/#property","text":"help - The help text for this group","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-group/name/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Group / name name \u00b6 val name: String The group name Property \u00b6 name - The group name","title":"Name"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-group/name/#name","text":"val name: String The group name","title":"name"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-group/name/#property","text":"name - The group name","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Option Option \u00b6 data class Option : ParameterHelp Parameters \u00b6 names - The names that can be used to invoke this option secondaryNames - Secondary names that can be used to e.g. disable the option metavar - The metavar to display for the option if it takes values help - The option\u2019s description nvalues - The number of values that this option takes tags - Any extra tags to display with the help message for this option groupName - The name of the group this option belongs to, if there is one and its name should be shown in the help message Constructors \u00b6 Name Summary <init> Option(names: Set < String >, secondaryNames: Set < String >, metavar: String ?, help: String , nvalues: Int , tags: Map < String , String >, groupName: String ?) Properties \u00b6 Name Summary groupName The name of the group this option belongs to, if there is one and its name should be shown in the help message val groupName: String ? help The option\u2019s description val help: String metavar The metavar to display for the option if it takes values val metavar: String ? names The names that can be used to invoke this option val names: Set < String > nvalues The number of values that this option takes val nvalues: Int secondaryNames Secondary names that can be used to e.g. disable the option val secondaryNames: Set < String > tags Any extra tags to display with the help message for this option val tags: Map < String , String >","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/#option","text":"data class Option : ParameterHelp","title":"Option"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/#parameters","text":"names - The names that can be used to invoke this option secondaryNames - Secondary names that can be used to e.g. disable the option metavar - The metavar to display for the option if it takes values help - The option\u2019s description nvalues - The number of values that this option takes tags - Any extra tags to display with the help message for this option groupName - The name of the group this option belongs to, if there is one and its name should be shown in the help message","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/#constructors","text":"Name Summary <init> Option(names: Set < String >, secondaryNames: Set < String >, metavar: String ?, help: String , nvalues: Int , tags: Map < String , String >, groupName: String ?)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/#properties","text":"Name Summary groupName The name of the group this option belongs to, if there is one and its name should be shown in the help message val groupName: String ? help The option\u2019s description val help: String metavar The metavar to display for the option if it takes values val metavar: String ? names The names that can be used to invoke this option val names: Set < String > nvalues The number of values that this option takes val nvalues: Int secondaryNames Secondary names that can be used to e.g. disable the option val secondaryNames: Set < String > tags Any extra tags to display with the help message for this option val tags: Map < String , String >","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/-init-/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Option / <init> <init> \u00b6 Option(names: Set < String >, secondaryNames: Set < String >, metavar: String ?, help: String , nvalues: Int , tags: Map < String , String >, groupName: String ?) Parameters \u00b6 names - The names that can be used to invoke this option secondaryNames - Secondary names that can be used to e.g. disable the option metavar - The metavar to display for the option if it takes values help - The option\u2019s description nvalues - The number of values that this option takes tags - Any extra tags to display with the help message for this option groupName - The name of the group this option belongs to, if there is one and its name should be shown in the help message","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/-init-/#init","text":"Option(names: Set < String >, secondaryNames: Set < String >, metavar: String ?, help: String , nvalues: Int , tags: Map < String , String >, groupName: String ?)","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/-init-/#parameters","text":"names - The names that can be used to invoke this option secondaryNames - Secondary names that can be used to e.g. disable the option metavar - The metavar to display for the option if it takes values help - The option\u2019s description nvalues - The number of values that this option takes tags - Any extra tags to display with the help message for this option groupName - The name of the group this option belongs to, if there is one and its name should be shown in the help message","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/group-name/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Option / groupName groupName \u00b6 val groupName: String ? The name of the group this option belongs to, if there is one and its name should be shown in the help message","title":"Group name"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/group-name/#groupname","text":"val groupName: String ? The name of the group this option belongs to, if there is one and its name should be shown in the help message","title":"groupName"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/help/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Option / help help \u00b6 val help: String The option\u2019s description","title":"Help"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/help/#help","text":"val help: String The option\u2019s description","title":"help"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/metavar/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Option / metavar metavar \u00b6 val metavar: String ? The metavar to display for the option if it takes values","title":"Metavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/metavar/#metavar","text":"val metavar: String ? The metavar to display for the option if it takes values","title":"metavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/names/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Option / names names \u00b6 val names: Set < String > The names that can be used to invoke this option","title":"Names"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/names/#names","text":"val names: Set < String > The names that can be used to invoke this option","title":"names"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/nvalues/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Option / nvalues nvalues \u00b6 val nvalues: Int The number of values that this option takes","title":"Nvalues"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/nvalues/#nvalues","text":"val nvalues: Int The number of values that this option takes","title":"nvalues"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/secondary-names/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Option / secondaryNames secondaryNames \u00b6 val secondaryNames: Set < String > Secondary names that can be used to e.g. disable the option","title":"Secondary names"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/secondary-names/#secondarynames","text":"val secondaryNames: Set < String > Secondary names that can be used to e.g. disable the option","title":"secondaryNames"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/tags/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Option / tags tags \u00b6 val tags: Map < String , String > Any extra tags to display with the help message for this option","title":"Tags"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/tags/#tags","text":"val tags: Map < String , String > Any extra tags to display with the help message for this option","title":"tags"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-subcommand/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Subcommand Subcommand \u00b6 data class Subcommand : ParameterHelp Parameters \u00b6 name - The name for this command help - The command\u2019s description Constructors \u00b6 Name Summary <init> Subcommand(name: String , help: String , tags: Map < String , String >) Properties \u00b6 Name Summary help The command\u2019s description val help: String name The name for this command val name: String tags val tags: Map < String , String >","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-subcommand/#subcommand","text":"data class Subcommand : ParameterHelp","title":"Subcommand"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-subcommand/#parameters","text":"name - The name for this command help - The command\u2019s description","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-subcommand/#constructors","text":"Name Summary <init> Subcommand(name: String , help: String , tags: Map < String , String >)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-subcommand/#properties","text":"Name Summary help The command\u2019s description val help: String name The name for this command val name: String tags val tags: Map < String , String >","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-subcommand/-init-/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Subcommand / <init> <init> \u00b6 Subcommand(name: String , help: String , tags: Map < String , String >) Parameters \u00b6 name - The name for this command help - The command\u2019s description","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-subcommand/-init-/#init","text":"Subcommand(name: String , help: String , tags: Map < String , String >)","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-subcommand/-init-/#parameters","text":"name - The name for this command help - The command\u2019s description","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-subcommand/help/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Subcommand / help help \u00b6 val help: String The command\u2019s description","title":"Help"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-subcommand/help/#help","text":"val help: String The command\u2019s description","title":"help"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-subcommand/name/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Subcommand / name name \u00b6 val name: String The name for this command","title":"Name"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-subcommand/name/#name","text":"val name: String The name for this command","title":"name"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-subcommand/tags/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Subcommand / tags tags \u00b6 val tags: Map < String , String >","title":"Tags"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-subcommand/tags/#tags","text":"val tags: Map < String , String >","title":"tags"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-tags/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / Tags Tags \u00b6 object Tags Standard tag names for parameter help Properties \u00b6 Name Summary DEFAULT A value that can be displayed to the user as the default for this option, or null if there is no default. const val DEFAULT: String REQUIRED If true, this option is required. Only used for help output. const val REQUIRED: String","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-tags/#tags","text":"object Tags Standard tag names for parameter help","title":"Tags"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-tags/#properties","text":"Name Summary DEFAULT A value that can be displayed to the user as the default for this option, or null if there is no default. const val DEFAULT: String REQUIRED If true, this option is required. Only used for help output. const val REQUIRED: String","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-tags/-d-e-f-a-u-l-t/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / Tags / DEFAULT DEFAULT \u00b6 const val DEFAULT: String A value that can be displayed to the user as the default for this option, or null if there is no default.","title":" d e f a u l t"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-tags/-d-e-f-a-u-l-t/#default","text":"const val DEFAULT: String A value that can be displayed to the user as the default for this option, or null if there is no default.","title":"DEFAULT"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-tags/-r-e-q-u-i-r-e-d/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / Tags / REQUIRED REQUIRED \u00b6 const val REQUIRED: String If true, this option is required. Only used for help output.","title":" r e q u i r e d"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-tags/-r-e-q-u-i-r-e-d/#required","text":"const val REQUIRED: String If true, this option is required. Only used for help output.","title":"REQUIRED"},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/","text":"clikt / com.github.ajalt.clikt.output / InteractiveCliktConsole InteractiveCliktConsole \u00b6 class InteractiveCliktConsole : CliktConsole Constructors \u00b6 Name Summary <init> InteractiveCliktConsole(console: Console ) Properties \u00b6 Name Summary lineSeparator The line separator to use. (Either \u201c\\n\u201d or \u201c\\r\\n\u201d) val lineSeparator: String Functions \u00b6 Name Summary print Show some text to the user. fun print(text: String , error: Boolean ): Unit promptForLine Show the prompt to the user, and return a line of their response. fun promptForLine(prompt: String , hideInput: Boolean ): String ?","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/#interactivecliktconsole","text":"class InteractiveCliktConsole : CliktConsole","title":"InteractiveCliktConsole"},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/#constructors","text":"Name Summary <init> InteractiveCliktConsole(console: Console )","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/#properties","text":"Name Summary lineSeparator The line separator to use. (Either \u201c\\n\u201d or \u201c\\r\\n\u201d) val lineSeparator: String","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/#functions","text":"Name Summary print Show some text to the user. fun print(text: String , error: Boolean ): Unit promptForLine Show the prompt to the user, and return a line of their response. fun promptForLine(prompt: String , hideInput: Boolean ): String ?","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/-init-/","text":"clikt / com.github.ajalt.clikt.output / InteractiveCliktConsole / <init> <init> \u00b6 InteractiveCliktConsole(console: Console )","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/-init-/#init","text":"InteractiveCliktConsole(console: Console )","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/line-separator/","text":"clikt / com.github.ajalt.clikt.output / InteractiveCliktConsole / lineSeparator lineSeparator \u00b6 val lineSeparator: String The line separator to use. (Either \u201c\\n\u201d or \u201c\\r\\n\u201d)","title":"Line separator"},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/line-separator/#lineseparator","text":"val lineSeparator: String The line separator to use. (Either \u201c\\n\u201d or \u201c\\r\\n\u201d)","title":"lineSeparator"},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/print/","text":"clikt / com.github.ajalt.clikt.output / InteractiveCliktConsole / print print \u00b6 fun print(text: String , error: Boolean ): Unit Show some text to the user. Parameters \u00b6 text - The text to display. May or may not contain a tailing newline. error - If true, the text is an error message, and should be printed in an alternate stream or format, if applicable.","title":"Print"},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/print/#print","text":"fun print(text: String , error: Boolean ): Unit Show some text to the user.","title":"print"},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/print/#parameters","text":"text - The text to display. May or may not contain a tailing newline. error - If true, the text is an error message, and should be printed in an alternate stream or format, if applicable.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/prompt-for-line/","text":"clikt / com.github.ajalt.clikt.output / InteractiveCliktConsole / promptForLine promptForLine \u00b6 fun promptForLine(prompt: String , hideInput: Boolean ): String ? Show the prompt to the user, and return a line of their response. This function will block until a line of input has been read. Parameters \u00b6 prompt - The text to display to the user hideInput - If true, the user\u2019s input should not be echoed to the screen. If the current console does not support hidden input, this argument may be ignored. Currently, this argument is ignored on JS and Native platforms. Return A line of user input, or null if an error occurred.","title":"Prompt for line"},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/prompt-for-line/#promptforline","text":"fun promptForLine(prompt: String , hideInput: Boolean ): String ? Show the prompt to the user, and return a line of their response. This function will block until a line of input has been read.","title":"promptForLine"},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/prompt-for-line/#parameters","text":"prompt - The text to display to the user hideInput - If true, the user\u2019s input should not be echoed to the screen. If the current console does not support hidden input, this argument may be ignored. Currently, this argument is ignored on JS and Native platforms. Return A line of user input, or null if an error occurred.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/","text":"clikt / com.github.ajalt.clikt.output / Localization Localization \u00b6 interface Localization Strings to use for help output and error messages Functions \u00b6 Name Summary aborted Abort was thrown open fun aborted(): String argumentsTitle The title for the arguments section of help output open fun argumentsTitle(): String badParameter Message for BadParameterValue open fun badParameter(): String badParameterWithMessage Message for BadParameterValue open fun badParameterWithMessage(message: String ): String badParameterWithMessageAndParam Message for BadParameterValue open fun badParameterWithMessageAndParam(paramName: String , message: String ): String badParameterWithParam Message for BadParameterValue open fun badParameterWithParam(paramName: String ): String boolConversionError Invalid value for a parameter of type Boolean open fun boolConversionError(value: String ): String commandMetavar The that indicates where subcommands may be present in the usage help output open fun commandMetavar(): String commandsTitle The title for the subcommands section of help output open fun commandsTitle(): String defaultMetavar Metavar used for options with unspecified value type open fun defaultMetavar(): String extraArgumentMany More than one extra argument is present open fun extraArgumentMany(name: String , count: Int ): String extraArgumentOne One extra argument is present open fun extraArgumentOne(name: String ): String fileEndsWithSlash Error in message for InvalidFileFormat open fun fileEndsWithSlash(): String fileMetavar Metavar used for options that take InputStream or OutputStream values open fun fileMetavar(): String fileNotFound Message for FileNotFound open fun fileNotFound(filename: String ): String floatConversionError Invalid value for a parameter of type Double or Float open fun floatConversionError(value: String ): String floatMetavar Metavar used for options that take Float or Double values open fun floatMetavar(): String helpOptionMessage The default message for the --help option. open fun helpOptionMessage(): String helpTagDefault Text rendered for parameters tagged with HelpFormatter.Tags.DEFAULT open fun helpTagDefault(): String helpTagRequired Text rendered for parameters tagged with HelpFormatter.Tags.REQUIRED open fun helpTagRequired(): String incorrectArgumentValueCount Message for IncorrectArgumentValueCount open fun incorrectArgumentValueCount(name: String , count: Int ): String incorrectOptionValueCount Message for IncorrectOptionValueCount open fun incorrectOptionValueCount(name: String , count: Int ): String intConversionError Invalid value for a parameter of type Int or Long open fun intConversionError(value: String ): String intMetavar Metavar used for options that take Int or Long values open fun intMetavar(): String invalidChoice Invalid value for choice parameter open fun invalidChoice(choice: String , choices: List < String >): String invalidFileFormat Message for InvalidFileFormat open fun invalidFileFormat(filename: String , message: String ): String open fun invalidFileFormat(filename: String , lineNumber: Int , message: String ): String invalidFlagValueInFile Error message when reading flag option from a file open fun invalidFlagValueInFile(name: String ): String invalidGroupChoice ChoiceGroup value was invalid open fun invalidGroupChoice(value: String , choices: List < String >): String missingArgument Message for MissingArgument open fun missingArgument(paramName: String ): String missingOption Message for MissingOption open fun missingOption(paramName: String ): String mutexGroupException Message for MutuallyExclusiveGroupException open fun mutexGroupException(name: String , others: List < String >): String noSuchOption Message for NoSuchOption open fun noSuchOption(name: String , possibilities: List < String >): String noSuchSubcommand Message for NoSuchSubcommand open fun noSuchSubcommand(name: String , possibilities: List < String >): String optionsMetavar The that indicates where options may be present in the usage help output open fun optionsMetavar(): String optionsTitle The title for the options section of help output open fun optionsTitle(): String pathDoesNotExist Invalid path type open fun pathDoesNotExist(pathType: String , path: String ): String pathIsDirectory Invalid path type open fun pathIsDirectory(pathType: String , path: String ): String pathIsFile Invalid path type open fun pathIsFile(pathType: String , path: String ): String pathIsNotReadable Invalid path type open fun pathIsNotReadable(pathType: String , path: String ): String pathIsNotWritable Invalid path type open fun pathIsNotWritable(pathType: String , path: String ): String pathIsSymlink Invalid path type open fun pathIsSymlink(pathType: String , path: String ): String pathMetavar Metavar used for options that take File or Path values open fun pathMetavar(): String pathTypeDirectory The pathType parameter to pathDoesNotExist and other path* errors open fun pathTypeDirectory(): String pathTypeFile The pathType parameter to pathDoesNotExist and other path* errors open fun pathTypeFile(): String pathTypeOther The pathType parameter to pathDoesNotExist and other path* errors open fun pathTypeOther(): String rangeExceededBoth Invalid value falls outside range open fun rangeExceededBoth(value: String , min: String , max: String ): String rangeExceededMax Invalid value falls outside range open fun rangeExceededMax(value: String , limit: String ): String rangeExceededMin Invalid value falls outside range open fun rangeExceededMin(value: String , limit: String ): String requiredMutexOption Required MutuallyExclusiveOptions was not provided open fun requiredMutexOption(options: String ): String stringMetavar Metavar used for options that take String values open fun stringMetavar(): String switchOptionEnvvar Error message when reading switch option from environment variable open fun switchOptionEnvvar(): String unclosedQuote Error in message for InvalidFileFormat open fun unclosedQuote(): String usageError Prefix for any UsageError open fun usageError(message: String ): String usageTitle The title for the usage section of help output open fun usageTitle(): String","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/#localization","text":"interface Localization Strings to use for help output and error messages","title":"Localization"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/#functions","text":"Name Summary aborted Abort was thrown open fun aborted(): String argumentsTitle The title for the arguments section of help output open fun argumentsTitle(): String badParameter Message for BadParameterValue open fun badParameter(): String badParameterWithMessage Message for BadParameterValue open fun badParameterWithMessage(message: String ): String badParameterWithMessageAndParam Message for BadParameterValue open fun badParameterWithMessageAndParam(paramName: String , message: String ): String badParameterWithParam Message for BadParameterValue open fun badParameterWithParam(paramName: String ): String boolConversionError Invalid value for a parameter of type Boolean open fun boolConversionError(value: String ): String commandMetavar The that indicates where subcommands may be present in the usage help output open fun commandMetavar(): String commandsTitle The title for the subcommands section of help output open fun commandsTitle(): String defaultMetavar Metavar used for options with unspecified value type open fun defaultMetavar(): String extraArgumentMany More than one extra argument is present open fun extraArgumentMany(name: String , count: Int ): String extraArgumentOne One extra argument is present open fun extraArgumentOne(name: String ): String fileEndsWithSlash Error in message for InvalidFileFormat open fun fileEndsWithSlash(): String fileMetavar Metavar used for options that take InputStream or OutputStream values open fun fileMetavar(): String fileNotFound Message for FileNotFound open fun fileNotFound(filename: String ): String floatConversionError Invalid value for a parameter of type Double or Float open fun floatConversionError(value: String ): String floatMetavar Metavar used for options that take Float or Double values open fun floatMetavar(): String helpOptionMessage The default message for the --help option. open fun helpOptionMessage(): String helpTagDefault Text rendered for parameters tagged with HelpFormatter.Tags.DEFAULT open fun helpTagDefault(): String helpTagRequired Text rendered for parameters tagged with HelpFormatter.Tags.REQUIRED open fun helpTagRequired(): String incorrectArgumentValueCount Message for IncorrectArgumentValueCount open fun incorrectArgumentValueCount(name: String , count: Int ): String incorrectOptionValueCount Message for IncorrectOptionValueCount open fun incorrectOptionValueCount(name: String , count: Int ): String intConversionError Invalid value for a parameter of type Int or Long open fun intConversionError(value: String ): String intMetavar Metavar used for options that take Int or Long values open fun intMetavar(): String invalidChoice Invalid value for choice parameter open fun invalidChoice(choice: String , choices: List < String >): String invalidFileFormat Message for InvalidFileFormat open fun invalidFileFormat(filename: String , message: String ): String open fun invalidFileFormat(filename: String , lineNumber: Int , message: String ): String invalidFlagValueInFile Error message when reading flag option from a file open fun invalidFlagValueInFile(name: String ): String invalidGroupChoice ChoiceGroup value was invalid open fun invalidGroupChoice(value: String , choices: List < String >): String missingArgument Message for MissingArgument open fun missingArgument(paramName: String ): String missingOption Message for MissingOption open fun missingOption(paramName: String ): String mutexGroupException Message for MutuallyExclusiveGroupException open fun mutexGroupException(name: String , others: List < String >): String noSuchOption Message for NoSuchOption open fun noSuchOption(name: String , possibilities: List < String >): String noSuchSubcommand Message for NoSuchSubcommand open fun noSuchSubcommand(name: String , possibilities: List < String >): String optionsMetavar The that indicates where options may be present in the usage help output open fun optionsMetavar(): String optionsTitle The title for the options section of help output open fun optionsTitle(): String pathDoesNotExist Invalid path type open fun pathDoesNotExist(pathType: String , path: String ): String pathIsDirectory Invalid path type open fun pathIsDirectory(pathType: String , path: String ): String pathIsFile Invalid path type open fun pathIsFile(pathType: String , path: String ): String pathIsNotReadable Invalid path type open fun pathIsNotReadable(pathType: String , path: String ): String pathIsNotWritable Invalid path type open fun pathIsNotWritable(pathType: String , path: String ): String pathIsSymlink Invalid path type open fun pathIsSymlink(pathType: String , path: String ): String pathMetavar Metavar used for options that take File or Path values open fun pathMetavar(): String pathTypeDirectory The pathType parameter to pathDoesNotExist and other path* errors open fun pathTypeDirectory(): String pathTypeFile The pathType parameter to pathDoesNotExist and other path* errors open fun pathTypeFile(): String pathTypeOther The pathType parameter to pathDoesNotExist and other path* errors open fun pathTypeOther(): String rangeExceededBoth Invalid value falls outside range open fun rangeExceededBoth(value: String , min: String , max: String ): String rangeExceededMax Invalid value falls outside range open fun rangeExceededMax(value: String , limit: String ): String rangeExceededMin Invalid value falls outside range open fun rangeExceededMin(value: String , limit: String ): String requiredMutexOption Required MutuallyExclusiveOptions was not provided open fun requiredMutexOption(options: String ): String stringMetavar Metavar used for options that take String values open fun stringMetavar(): String switchOptionEnvvar Error message when reading switch option from environment variable open fun switchOptionEnvvar(): String unclosedQuote Error in message for InvalidFileFormat open fun unclosedQuote(): String usageError Prefix for any UsageError open fun usageError(message: String ): String usageTitle The title for the usage section of help output open fun usageTitle(): String","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/aborted/","text":"clikt / com.github.ajalt.clikt.output / Localization / aborted aborted \u00b6 open fun aborted(): String Abort was thrown","title":"Aborted"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/aborted/#aborted","text":"open fun aborted(): String Abort was thrown","title":"aborted"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/arguments-title/","text":"clikt / com.github.ajalt.clikt.output / Localization / argumentsTitle argumentsTitle \u00b6 open fun argumentsTitle(): String The title for the arguments section of help output","title":"Arguments title"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/arguments-title/#argumentstitle","text":"open fun argumentsTitle(): String The title for the arguments section of help output","title":"argumentsTitle"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/bad-parameter-with-message-and-param/","text":"clikt / com.github.ajalt.clikt.output / Localization / badParameterWithMessageAndParam badParameterWithMessageAndParam \u00b6 open fun badParameterWithMessageAndParam(paramName: String , message: String ): String Message for BadParameterValue","title":"Bad parameter with message and param"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/bad-parameter-with-message-and-param/#badparameterwithmessageandparam","text":"open fun badParameterWithMessageAndParam(paramName: String , message: String ): String Message for BadParameterValue","title":"badParameterWithMessageAndParam"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/bad-parameter-with-message/","text":"clikt / com.github.ajalt.clikt.output / Localization / badParameterWithMessage badParameterWithMessage \u00b6 open fun badParameterWithMessage(message: String ): String Message for BadParameterValue","title":"Bad parameter with message"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/bad-parameter-with-message/#badparameterwithmessage","text":"open fun badParameterWithMessage(message: String ): String Message for BadParameterValue","title":"badParameterWithMessage"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/bad-parameter-with-param/","text":"clikt / com.github.ajalt.clikt.output / Localization / badParameterWithParam badParameterWithParam \u00b6 open fun badParameterWithParam(paramName: String ): String Message for BadParameterValue","title":"Bad parameter with param"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/bad-parameter-with-param/#badparameterwithparam","text":"open fun badParameterWithParam(paramName: String ): String Message for BadParameterValue","title":"badParameterWithParam"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/bad-parameter/","text":"clikt / com.github.ajalt.clikt.output / Localization / badParameter badParameter \u00b6 open fun badParameter(): String Message for BadParameterValue","title":"Bad parameter"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/bad-parameter/#badparameter","text":"open fun badParameter(): String Message for BadParameterValue","title":"badParameter"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/bool-conversion-error/","text":"clikt / com.github.ajalt.clikt.output / Localization / boolConversionError boolConversionError \u00b6 open fun boolConversionError(value: String ): String Invalid value for a parameter of type Boolean","title":"Bool conversion error"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/bool-conversion-error/#boolconversionerror","text":"open fun boolConversionError(value: String ): String Invalid value for a parameter of type Boolean","title":"boolConversionError"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/command-metavar/","text":"clikt / com.github.ajalt.clikt.output / Localization / commandMetavar commandMetavar \u00b6 open fun commandMetavar(): String The that indicates where subcommands may be present in the usage help output","title":"Command metavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/command-metavar/#commandmetavar","text":"open fun commandMetavar(): String The that indicates where subcommands may be present in the usage help output","title":"commandMetavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/commands-title/","text":"clikt / com.github.ajalt.clikt.output / Localization / commandsTitle commandsTitle \u00b6 open fun commandsTitle(): String The title for the subcommands section of help output","title":"Commands title"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/commands-title/#commandstitle","text":"open fun commandsTitle(): String The title for the subcommands section of help output","title":"commandsTitle"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/default-metavar/","text":"clikt / com.github.ajalt.clikt.output / Localization / defaultMetavar defaultMetavar \u00b6 open fun defaultMetavar(): String Metavar used for options with unspecified value type","title":"Default metavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/default-metavar/#defaultmetavar","text":"open fun defaultMetavar(): String Metavar used for options with unspecified value type","title":"defaultMetavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/extra-argument-many/","text":"clikt / com.github.ajalt.clikt.output / Localization / extraArgumentMany extraArgumentMany \u00b6 open fun extraArgumentMany(name: String , count: Int ): String More than one extra argument is present","title":"Extra argument many"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/extra-argument-many/#extraargumentmany","text":"open fun extraArgumentMany(name: String , count: Int ): String More than one extra argument is present","title":"extraArgumentMany"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/extra-argument-one/","text":"clikt / com.github.ajalt.clikt.output / Localization / extraArgumentOne extraArgumentOne \u00b6 open fun extraArgumentOne(name: String ): String One extra argument is present","title":"Extra argument one"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/extra-argument-one/#extraargumentone","text":"open fun extraArgumentOne(name: String ): String One extra argument is present","title":"extraArgumentOne"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/file-ends-with-slash/","text":"clikt / com.github.ajalt.clikt.output / Localization / fileEndsWithSlash fileEndsWithSlash \u00b6 open fun fileEndsWithSlash(): String Error in message for InvalidFileFormat","title":"File ends with slash"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/file-ends-with-slash/#fileendswithslash","text":"open fun fileEndsWithSlash(): String Error in message for InvalidFileFormat","title":"fileEndsWithSlash"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/file-metavar/","text":"clikt / com.github.ajalt.clikt.output / Localization / fileMetavar fileMetavar \u00b6 open fun fileMetavar(): String Metavar used for options that take InputStream or OutputStream values","title":"File metavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/file-metavar/#filemetavar","text":"open fun fileMetavar(): String Metavar used for options that take InputStream or OutputStream values","title":"fileMetavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/file-not-found/","text":"clikt / com.github.ajalt.clikt.output / Localization / fileNotFound fileNotFound \u00b6 open fun fileNotFound(filename: String ): String Message for FileNotFound","title":"File not found"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/file-not-found/#filenotfound","text":"open fun fileNotFound(filename: String ): String Message for FileNotFound","title":"fileNotFound"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/float-conversion-error/","text":"clikt / com.github.ajalt.clikt.output / Localization / floatConversionError floatConversionError \u00b6 open fun floatConversionError(value: String ): String Invalid value for a parameter of type Double or Float","title":"Float conversion error"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/float-conversion-error/#floatconversionerror","text":"open fun floatConversionError(value: String ): String Invalid value for a parameter of type Double or Float","title":"floatConversionError"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/float-metavar/","text":"clikt / com.github.ajalt.clikt.output / Localization / floatMetavar floatMetavar \u00b6 open fun floatMetavar(): String Metavar used for options that take Float or Double values","title":"Float metavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/float-metavar/#floatmetavar","text":"open fun floatMetavar(): String Metavar used for options that take Float or Double values","title":"floatMetavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/help-option-message/","text":"clikt / com.github.ajalt.clikt.output / Localization / helpOptionMessage helpOptionMessage \u00b6 open fun helpOptionMessage(): String The default message for the --help option.","title":"Help option message"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/help-option-message/#helpoptionmessage","text":"open fun helpOptionMessage(): String The default message for the --help option.","title":"helpOptionMessage"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/help-tag-default/","text":"clikt / com.github.ajalt.clikt.output / Localization / helpTagDefault helpTagDefault \u00b6 open fun helpTagDefault(): String Text rendered for parameters tagged with HelpFormatter.Tags.DEFAULT","title":"Help tag default"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/help-tag-default/#helptagdefault","text":"open fun helpTagDefault(): String Text rendered for parameters tagged with HelpFormatter.Tags.DEFAULT","title":"helpTagDefault"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/help-tag-required/","text":"clikt / com.github.ajalt.clikt.output / Localization / helpTagRequired helpTagRequired \u00b6 open fun helpTagRequired(): String Text rendered for parameters tagged with HelpFormatter.Tags.REQUIRED","title":"Help tag required"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/help-tag-required/#helptagrequired","text":"open fun helpTagRequired(): String Text rendered for parameters tagged with HelpFormatter.Tags.REQUIRED","title":"helpTagRequired"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/incorrect-argument-value-count/","text":"clikt / com.github.ajalt.clikt.output / Localization / incorrectArgumentValueCount incorrectArgumentValueCount \u00b6 open fun incorrectArgumentValueCount(name: String , count: Int ): String Message for IncorrectArgumentValueCount Parameters \u00b6 count - non-negative count of required values","title":"Incorrect argument value count"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/incorrect-argument-value-count/#incorrectargumentvaluecount","text":"open fun incorrectArgumentValueCount(name: String , count: Int ): String Message for IncorrectArgumentValueCount","title":"incorrectArgumentValueCount"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/incorrect-argument-value-count/#parameters","text":"count - non-negative count of required values","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/incorrect-option-value-count/","text":"clikt / com.github.ajalt.clikt.output / Localization / incorrectOptionValueCount incorrectOptionValueCount \u00b6 open fun incorrectOptionValueCount(name: String , count: Int ): String Message for IncorrectOptionValueCount Parameters \u00b6 count - non-negative count of required values","title":"Incorrect option value count"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/incorrect-option-value-count/#incorrectoptionvaluecount","text":"open fun incorrectOptionValueCount(name: String , count: Int ): String Message for IncorrectOptionValueCount","title":"incorrectOptionValueCount"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/incorrect-option-value-count/#parameters","text":"count - non-negative count of required values","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/int-conversion-error/","text":"clikt / com.github.ajalt.clikt.output / Localization / intConversionError intConversionError \u00b6 open fun intConversionError(value: String ): String Invalid value for a parameter of type Int or Long","title":"Int conversion error"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/int-conversion-error/#intconversionerror","text":"open fun intConversionError(value: String ): String Invalid value for a parameter of type Int or Long","title":"intConversionError"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/int-metavar/","text":"clikt / com.github.ajalt.clikt.output / Localization / intMetavar intMetavar \u00b6 open fun intMetavar(): String Metavar used for options that take Int or Long values","title":"Int metavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/int-metavar/#intmetavar","text":"open fun intMetavar(): String Metavar used for options that take Int or Long values","title":"intMetavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/invalid-choice/","text":"clikt / com.github.ajalt.clikt.output / Localization / invalidChoice invalidChoice \u00b6 open fun invalidChoice(choice: String , choices: List < String >): String Invalid value for choice parameter Parameters \u00b6 choices - non-empty list of possible choices","title":"Invalid choice"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/invalid-choice/#invalidchoice","text":"open fun invalidChoice(choice: String , choices: List < String >): String Invalid value for choice parameter","title":"invalidChoice"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/invalid-choice/#parameters","text":"choices - non-empty list of possible choices","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/invalid-file-format/","text":"clikt / com.github.ajalt.clikt.output / Localization / invalidFileFormat invalidFileFormat \u00b6 open fun invalidFileFormat(filename: String , message: String ): String open fun invalidFileFormat(filename: String , lineNumber: Int , message: String ): String Message for InvalidFileFormat","title":"Invalid file format"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/invalid-file-format/#invalidfileformat","text":"open fun invalidFileFormat(filename: String , message: String ): String open fun invalidFileFormat(filename: String , lineNumber: Int , message: String ): String Message for InvalidFileFormat","title":"invalidFileFormat"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/invalid-flag-value-in-file/","text":"clikt / com.github.ajalt.clikt.output / Localization / invalidFlagValueInFile invalidFlagValueInFile \u00b6 open fun invalidFlagValueInFile(name: String ): String Error message when reading flag option from a file","title":"Invalid flag value in file"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/invalid-flag-value-in-file/#invalidflagvalueinfile","text":"open fun invalidFlagValueInFile(name: String ): String Error message when reading flag option from a file","title":"invalidFlagValueInFile"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/invalid-group-choice/","text":"clikt / com.github.ajalt.clikt.output / Localization / invalidGroupChoice invalidGroupChoice \u00b6 open fun invalidGroupChoice(value: String , choices: List < String >): String ChoiceGroup value was invalid Parameters \u00b6 choices - non-empty list of possible choices","title":"Invalid group choice"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/invalid-group-choice/#invalidgroupchoice","text":"open fun invalidGroupChoice(value: String , choices: List < String >): String ChoiceGroup value was invalid","title":"invalidGroupChoice"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/invalid-group-choice/#parameters","text":"choices - non-empty list of possible choices","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/missing-argument/","text":"clikt / com.github.ajalt.clikt.output / Localization / missingArgument missingArgument \u00b6 open fun missingArgument(paramName: String ): String Message for MissingArgument","title":"Missing argument"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/missing-argument/#missingargument","text":"open fun missingArgument(paramName: String ): String Message for MissingArgument","title":"missingArgument"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/missing-option/","text":"clikt / com.github.ajalt.clikt.output / Localization / missingOption missingOption \u00b6 open fun missingOption(paramName: String ): String Message for MissingOption","title":"Missing option"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/missing-option/#missingoption","text":"open fun missingOption(paramName: String ): String Message for MissingOption","title":"missingOption"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/mutex-group-exception/","text":"clikt / com.github.ajalt.clikt.output / Localization / mutexGroupException mutexGroupException \u00b6 open fun mutexGroupException(name: String , others: List < String >): String Message for MutuallyExclusiveGroupException Parameters \u00b6 others - non-empty list of other options in the group","title":"Mutex group exception"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/mutex-group-exception/#mutexgroupexception","text":"open fun mutexGroupException(name: String , others: List < String >): String Message for MutuallyExclusiveGroupException","title":"mutexGroupException"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/mutex-group-exception/#parameters","text":"others - non-empty list of other options in the group","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/no-such-option/","text":"clikt / com.github.ajalt.clikt.output / Localization / noSuchOption noSuchOption \u00b6 open fun noSuchOption(name: String , possibilities: List < String >): String Message for NoSuchOption","title":"No such option"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/no-such-option/#nosuchoption","text":"open fun noSuchOption(name: String , possibilities: List < String >): String Message for NoSuchOption","title":"noSuchOption"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/no-such-subcommand/","text":"clikt / com.github.ajalt.clikt.output / Localization / noSuchSubcommand noSuchSubcommand \u00b6 open fun noSuchSubcommand(name: String , possibilities: List < String >): String Message for NoSuchSubcommand","title":"No such subcommand"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/no-such-subcommand/#nosuchsubcommand","text":"open fun noSuchSubcommand(name: String , possibilities: List < String >): String Message for NoSuchSubcommand","title":"noSuchSubcommand"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/options-metavar/","text":"clikt / com.github.ajalt.clikt.output / Localization / optionsMetavar optionsMetavar \u00b6 open fun optionsMetavar(): String The that indicates where options may be present in the usage help output","title":"Options metavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/options-metavar/#optionsmetavar","text":"open fun optionsMetavar(): String The that indicates where options may be present in the usage help output","title":"optionsMetavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/options-title/","text":"clikt / com.github.ajalt.clikt.output / Localization / optionsTitle optionsTitle \u00b6 open fun optionsTitle(): String The title for the options section of help output","title":"Options title"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/options-title/#optionstitle","text":"open fun optionsTitle(): String The title for the options section of help output","title":"optionsTitle"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/path-does-not-exist/","text":"clikt / com.github.ajalt.clikt.output / Localization / pathDoesNotExist pathDoesNotExist \u00b6 open fun pathDoesNotExist(pathType: String , path: String ): String Invalid path type","title":"Path does not exist"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/path-does-not-exist/#pathdoesnotexist","text":"open fun pathDoesNotExist(pathType: String , path: String ): String Invalid path type","title":"pathDoesNotExist"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/path-is-directory/","text":"clikt / com.github.ajalt.clikt.output / Localization / pathIsDirectory pathIsDirectory \u00b6 open fun pathIsDirectory(pathType: String , path: String ): String Invalid path type","title":"Path is directory"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/path-is-directory/#pathisdirectory","text":"open fun pathIsDirectory(pathType: String , path: String ): String Invalid path type","title":"pathIsDirectory"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/path-is-file/","text":"clikt / com.github.ajalt.clikt.output / Localization / pathIsFile pathIsFile \u00b6 open fun pathIsFile(pathType: String , path: String ): String Invalid path type","title":"Path is file"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/path-is-file/#pathisfile","text":"open fun pathIsFile(pathType: String , path: String ): String Invalid path type","title":"pathIsFile"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/path-is-not-readable/","text":"clikt / com.github.ajalt.clikt.output / Localization / pathIsNotReadable pathIsNotReadable \u00b6 open fun pathIsNotReadable(pathType: String , path: String ): String Invalid path type","title":"Path is not readable"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/path-is-not-readable/#pathisnotreadable","text":"open fun pathIsNotReadable(pathType: String , path: String ): String Invalid path type","title":"pathIsNotReadable"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/path-is-not-writable/","text":"clikt / com.github.ajalt.clikt.output / Localization / pathIsNotWritable pathIsNotWritable \u00b6 open fun pathIsNotWritable(pathType: String , path: String ): String Invalid path type","title":"Path is not writable"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/path-is-not-writable/#pathisnotwritable","text":"open fun pathIsNotWritable(pathType: String , path: String ): String Invalid path type","title":"pathIsNotWritable"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/path-is-symlink/","text":"clikt / com.github.ajalt.clikt.output / Localization / pathIsSymlink pathIsSymlink \u00b6 open fun pathIsSymlink(pathType: String , path: String ): String Invalid path type","title":"Path is symlink"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/path-is-symlink/#pathissymlink","text":"open fun pathIsSymlink(pathType: String , path: String ): String Invalid path type","title":"pathIsSymlink"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/path-metavar/","text":"clikt / com.github.ajalt.clikt.output / Localization / pathMetavar pathMetavar \u00b6 open fun pathMetavar(): String Metavar used for options that take File or Path values","title":"Path metavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/path-metavar/#pathmetavar","text":"open fun pathMetavar(): String Metavar used for options that take File or Path values","title":"pathMetavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/path-type-directory/","text":"clikt / com.github.ajalt.clikt.output / Localization / pathTypeDirectory pathTypeDirectory \u00b6 open fun pathTypeDirectory(): String The pathType parameter to pathDoesNotExist and other path* errors","title":"Path type directory"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/path-type-directory/#pathtypedirectory","text":"open fun pathTypeDirectory(): String The pathType parameter to pathDoesNotExist and other path* errors","title":"pathTypeDirectory"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/path-type-file/","text":"clikt / com.github.ajalt.clikt.output / Localization / pathTypeFile pathTypeFile \u00b6 open fun pathTypeFile(): String The pathType parameter to pathDoesNotExist and other path* errors","title":"Path type file"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/path-type-file/#pathtypefile","text":"open fun pathTypeFile(): String The pathType parameter to pathDoesNotExist and other path* errors","title":"pathTypeFile"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/path-type-other/","text":"clikt / com.github.ajalt.clikt.output / Localization / pathTypeOther pathTypeOther \u00b6 open fun pathTypeOther(): String The pathType parameter to pathDoesNotExist and other path* errors","title":"Path type other"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/path-type-other/#pathtypeother","text":"open fun pathTypeOther(): String The pathType parameter to pathDoesNotExist and other path* errors","title":"pathTypeOther"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/range-exceeded-both/","text":"clikt / com.github.ajalt.clikt.output / Localization / rangeExceededBoth rangeExceededBoth \u00b6 open fun rangeExceededBoth(value: String , min: String , max: String ): String Invalid value falls outside range","title":"Range exceeded both"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/range-exceeded-both/#rangeexceededboth","text":"open fun rangeExceededBoth(value: String , min: String , max: String ): String Invalid value falls outside range","title":"rangeExceededBoth"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/range-exceeded-max/","text":"clikt / com.github.ajalt.clikt.output / Localization / rangeExceededMax rangeExceededMax \u00b6 open fun rangeExceededMax(value: String , limit: String ): String Invalid value falls outside range","title":"Range exceeded max"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/range-exceeded-max/#rangeexceededmax","text":"open fun rangeExceededMax(value: String , limit: String ): String Invalid value falls outside range","title":"rangeExceededMax"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/range-exceeded-min/","text":"clikt / com.github.ajalt.clikt.output / Localization / rangeExceededMin rangeExceededMin \u00b6 open fun rangeExceededMin(value: String , limit: String ): String Invalid value falls outside range","title":"Range exceeded min"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/range-exceeded-min/#rangeexceededmin","text":"open fun rangeExceededMin(value: String , limit: String ): String Invalid value falls outside range","title":"rangeExceededMin"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/required-mutex-option/","text":"clikt / com.github.ajalt.clikt.output / Localization / requiredMutexOption requiredMutexOption \u00b6 open fun requiredMutexOption(options: String ): String Required MutuallyExclusiveOptions was not provided","title":"Required mutex option"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/required-mutex-option/#requiredmutexoption","text":"open fun requiredMutexOption(options: String ): String Required MutuallyExclusiveOptions was not provided","title":"requiredMutexOption"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/string-metavar/","text":"clikt / com.github.ajalt.clikt.output / Localization / stringMetavar stringMetavar \u00b6 open fun stringMetavar(): String Metavar used for options that take String values","title":"String metavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/string-metavar/#stringmetavar","text":"open fun stringMetavar(): String Metavar used for options that take String values","title":"stringMetavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/switch-option-envvar/","text":"clikt / com.github.ajalt.clikt.output / Localization / switchOptionEnvvar switchOptionEnvvar \u00b6 open fun switchOptionEnvvar(): String Error message when reading switch option from environment variable","title":"Switch option envvar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/switch-option-envvar/#switchoptionenvvar","text":"open fun switchOptionEnvvar(): String Error message when reading switch option from environment variable","title":"switchOptionEnvvar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/unclosed-quote/","text":"clikt / com.github.ajalt.clikt.output / Localization / unclosedQuote unclosedQuote \u00b6 open fun unclosedQuote(): String Error in message for InvalidFileFormat","title":"Unclosed quote"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/unclosed-quote/#unclosedquote","text":"open fun unclosedQuote(): String Error in message for InvalidFileFormat","title":"unclosedQuote"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/usage-error/","text":"clikt / com.github.ajalt.clikt.output / Localization / usageError usageError \u00b6 open fun usageError(message: String ): String Prefix for any UsageError","title":"Usage error"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/usage-error/#usageerror","text":"open fun usageError(message: String ): String Prefix for any UsageError","title":"usageError"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/usage-title/","text":"clikt / com.github.ajalt.clikt.output / Localization / usageTitle usageTitle \u00b6 open fun usageTitle(): String The title for the usage section of help output","title":"Usage title"},{"location":"api/clikt/com.github.ajalt.clikt.output/-localization/usage-title/#usagetitle","text":"open fun usageTitle(): String The title for the usage section of help output","title":"usageTitle"},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/","text":"clikt / com.github.ajalt.clikt.output / NonInteractiveCliktConsole NonInteractiveCliktConsole \u00b6 class NonInteractiveCliktConsole : CliktConsole Constructors \u00b6 Name Summary <init> NonInteractiveCliktConsole() Properties \u00b6 Name Summary lineSeparator The line separator to use. (Either \u201c\\n\u201d or \u201c\\r\\n\u201d) val lineSeparator: String Functions \u00b6 Name Summary print Show some text to the user. fun print(text: String , error: Boolean ): Unit promptForLine Show the prompt to the user, and return a line of their response. fun promptForLine(prompt: String , hideInput: Boolean ): String","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/#noninteractivecliktconsole","text":"class NonInteractiveCliktConsole : CliktConsole","title":"NonInteractiveCliktConsole"},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/#constructors","text":"Name Summary <init> NonInteractiveCliktConsole()","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/#properties","text":"Name Summary lineSeparator The line separator to use. (Either \u201c\\n\u201d or \u201c\\r\\n\u201d) val lineSeparator: String","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/#functions","text":"Name Summary print Show some text to the user. fun print(text: String , error: Boolean ): Unit promptForLine Show the prompt to the user, and return a line of their response. fun promptForLine(prompt: String , hideInput: Boolean ): String","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/-init-/","text":"clikt / com.github.ajalt.clikt.output / NonInteractiveCliktConsole / <init> <init> \u00b6 NonInteractiveCliktConsole()","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/-init-/#init","text":"NonInteractiveCliktConsole()","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/line-separator/","text":"clikt / com.github.ajalt.clikt.output / NonInteractiveCliktConsole / lineSeparator lineSeparator \u00b6 val lineSeparator: String The line separator to use. (Either \u201c\\n\u201d or \u201c\\r\\n\u201d)","title":"Line separator"},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/line-separator/#lineseparator","text":"val lineSeparator: String The line separator to use. (Either \u201c\\n\u201d or \u201c\\r\\n\u201d)","title":"lineSeparator"},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/print/","text":"clikt / com.github.ajalt.clikt.output / NonInteractiveCliktConsole / print print \u00b6 fun print(text: String , error: Boolean ): Unit Show some text to the user. Parameters \u00b6 text - The text to display. May or may not contain a tailing newline. error - If true, the text is an error message, and should be printed in an alternate stream or format, if applicable.","title":"Print"},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/print/#print","text":"fun print(text: String , error: Boolean ): Unit Show some text to the user.","title":"print"},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/print/#parameters","text":"text - The text to display. May or may not contain a tailing newline. error - If true, the text is an error message, and should be printed in an alternate stream or format, if applicable.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/prompt-for-line/","text":"clikt / com.github.ajalt.clikt.output / NonInteractiveCliktConsole / promptForLine promptForLine \u00b6 fun promptForLine(prompt: String , hideInput: Boolean ): String Show the prompt to the user, and return a line of their response. This function will block until a line of input has been read. Parameters \u00b6 prompt - The text to display to the user hideInput - If true, the user\u2019s input should not be echoed to the screen. If the current console does not support hidden input, this argument may be ignored. Currently, this argument is ignored on JS and Native platforms. Return A line of user input, or null if an error occurred.","title":"Prompt for line"},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/prompt-for-line/#promptforline","text":"fun promptForLine(prompt: String , hideInput: Boolean ): String Show the prompt to the user, and return a line of their response. This function will block until a line of input has been read.","title":"promptForLine"},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/prompt-for-line/#parameters","text":"prompt - The text to display to the user hideInput - If true, the user\u2019s input should not be echoed to the screen. If the current console does not support hidden input, this argument may be ignored. Currently, this argument is ignored on JS and Native platforms. Return A line of user input, or null if an error occurred.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/","text":"clikt / com.github.ajalt.clikt.output / TermUi TermUi \u00b6 object TermUi Properties \u00b6 Name Summary isWindows True if the current platform is a version of windows. val isWindows: Boolean Functions \u00b6 Name Summary confirm Prompt for user confirmation. fun confirm(text: String , default: Boolean = false, abort: Boolean = false, promptSuffix: String = \": \", showDefault: Boolean = true, console: CliktConsole = defaultCliktConsole()): Boolean ? echo Print the message to the screen. fun echo(message: Any ?, trailingNewline: Boolean = true, err: Boolean = false, console: CliktConsole = defaultCliktConsole(), lineSeparator: String = console.lineSeparator): Unit editFile Edit the file with filename in the editor . fun editFile(filename: String , editor: String ? = null, env: Map < String , String > = emptyMap(), requireSave: Boolean = false, extension: String = \".txt\"): Unit editText Edit text in the editor . fun editText(text: String , editor: String ? = null, env: Map < String , String > = emptyMap(), requireSave: Boolean = false, extension: String = \".txt\"): String ? prompt Prompt a user for text input. fun <T> prompt(text: String , default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \"Repeat for confirmation: \", promptSuffix: String = \": \", showDefault: Boolean = true, console: CliktConsole = defaultCliktConsole(), convert: ( String ) -> T): T? fun prompt(text: String , default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \"Repeat for confirmation: \", promptSuffix: String = \": \", showDefault: Boolean = true): String ?","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/#termui","text":"object TermUi","title":"TermUi"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/#properties","text":"Name Summary isWindows True if the current platform is a version of windows. val isWindows: Boolean","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/#functions","text":"Name Summary confirm Prompt for user confirmation. fun confirm(text: String , default: Boolean = false, abort: Boolean = false, promptSuffix: String = \": \", showDefault: Boolean = true, console: CliktConsole = defaultCliktConsole()): Boolean ? echo Print the message to the screen. fun echo(message: Any ?, trailingNewline: Boolean = true, err: Boolean = false, console: CliktConsole = defaultCliktConsole(), lineSeparator: String = console.lineSeparator): Unit editFile Edit the file with filename in the editor . fun editFile(filename: String , editor: String ? = null, env: Map < String , String > = emptyMap(), requireSave: Boolean = false, extension: String = \".txt\"): Unit editText Edit text in the editor . fun editText(text: String , editor: String ? = null, env: Map < String , String > = emptyMap(), requireSave: Boolean = false, extension: String = \".txt\"): String ? prompt Prompt a user for text input. fun <T> prompt(text: String , default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \"Repeat for confirmation: \", promptSuffix: String = \": \", showDefault: Boolean = true, console: CliktConsole = defaultCliktConsole(), convert: ( String ) -> T): T? fun prompt(text: String , default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \"Repeat for confirmation: \", promptSuffix: String = \": \", showDefault: Boolean = true): String ?","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/confirm/","text":"clikt / com.github.ajalt.clikt.output / TermUi / confirm confirm \u00b6 fun confirm(text: String , default: Boolean = false, abort: Boolean = false, promptSuffix: String = \u201c: \u201c, showDefault: Boolean = true, console: CliktConsole = defaultCliktConsole()): Boolean ? Prompt for user confirmation. Responses will be read from stdin, even if it\u2019s redirected to a file. Parameters \u00b6 text - the question to ask default - the default, used if stdin is empty abort - if true, a negative answer aborts the program by raising Abort promptSuffix - a string added after the question and choices showDefault - if false, the choices will not be shown in the prompt. Return the user\u2019s response, or null if stdin is not interactive and EOF was encountered.","title":"Confirm"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/confirm/#confirm","text":"fun confirm(text: String , default: Boolean = false, abort: Boolean = false, promptSuffix: String = \u201c: \u201c, showDefault: Boolean = true, console: CliktConsole = defaultCliktConsole()): Boolean ? Prompt for user confirmation. Responses will be read from stdin, even if it\u2019s redirected to a file.","title":"confirm"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/confirm/#parameters","text":"text - the question to ask default - the default, used if stdin is empty abort - if true, a negative answer aborts the program by raising Abort promptSuffix - a string added after the question and choices showDefault - if false, the choices will not be shown in the prompt. Return the user\u2019s response, or null if stdin is not interactive and EOF was encountered.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/echo/","text":"clikt / com.github.ajalt.clikt.output / TermUi / echo echo \u00b6 fun echo(message: Any ?, trailingNewline: Boolean = true, err: Boolean = false, console: CliktConsole = defaultCliktConsole(), lineSeparator: String = console.lineSeparator): Unit Print the message to the screen. This is similar to print or println , but converts newlines to the system line separator. Parameters \u00b6 message - The message to print. trailingNewline - If true, behave like println , otherwise behave like print err - If true, print to stderr instead of stdout console - The console to echo to lineSeparator - The line separator to use, defaults to the console \u2018s lineSeparator","title":"Echo"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/echo/#echo","text":"fun echo(message: Any ?, trailingNewline: Boolean = true, err: Boolean = false, console: CliktConsole = defaultCliktConsole(), lineSeparator: String = console.lineSeparator): Unit Print the message to the screen. This is similar to print or println , but converts newlines to the system line separator.","title":"echo"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/echo/#parameters","text":"message - The message to print. trailingNewline - If true, behave like println , otherwise behave like print err - If true, print to stderr instead of stdout console - The console to echo to lineSeparator - The line separator to use, defaults to the console \u2018s lineSeparator","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/edit-file/","text":"clikt / com.github.ajalt.clikt.output / TermUi / editFile editFile \u00b6 fun editFile(filename: String , editor: String ? = null, env: Map < String , String > = emptyMap(), requireSave: Boolean = false, extension: String = \u201c.txt\u201d): Unit Edit the file with filename in the editor . See Also editText","title":"Edit file"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/edit-file/#editfile","text":"fun editFile(filename: String , editor: String ? = null, env: Map < String , String > = emptyMap(), requireSave: Boolean = false, extension: String = \u201c.txt\u201d): Unit Edit the file with filename in the editor . See Also editText","title":"editFile"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/edit-text/","text":"clikt / com.github.ajalt.clikt.output / TermUi / editText editText \u00b6 fun editText(text: String , editor: String ? = null, env: Map < String , String > = emptyMap(), requireSave: Boolean = false, extension: String = \u201c.txt\u201d): String ? Edit text in the editor . This blocks until the editor is closed. Parameters \u00b6 text - The text to edit. editor - The path to the editor to use. Defaults to automatic detection. env - Environment variables to forward to the editor. requireSave - If the editor is closed without saving, null will be returned if true, otherwise text will be returned. extension - The extension of the temporary file that the editor will open. This can affect syntax coloring etc. Exceptions \u00b6 CliktError - if the editor cannot be opened. Return The edited text, or null if requireSave is true and the editor was closed without saving.","title":"Edit text"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/edit-text/#edittext","text":"fun editText(text: String , editor: String ? = null, env: Map < String , String > = emptyMap(), requireSave: Boolean = false, extension: String = \u201c.txt\u201d): String ? Edit text in the editor . This blocks until the editor is closed.","title":"editText"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/edit-text/#parameters","text":"text - The text to edit. editor - The path to the editor to use. Defaults to automatic detection. env - Environment variables to forward to the editor. requireSave - If the editor is closed without saving, null will be returned if true, otherwise text will be returned. extension - The extension of the temporary file that the editor will open. This can affect syntax coloring etc.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/edit-text/#exceptions","text":"CliktError - if the editor cannot be opened. Return The edited text, or null if requireSave is true and the editor was closed without saving.","title":"Exceptions"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/is-windows/","text":"clikt / com.github.ajalt.clikt.output / TermUi / isWindows isWindows \u00b6 val isWindows: Boolean True if the current platform is a version of windows.","title":"Is windows"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/is-windows/#iswindows","text":"val isWindows: Boolean True if the current platform is a version of windows.","title":"isWindows"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/prompt/","text":"clikt / com.github.ajalt.clikt.output / TermUi / prompt prompt \u00b6 fun prompt(text: String , default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \u201cRepeat for confirmation: \u201c, promptSuffix: String = \u201c: \u201c, showDefault: Boolean = true, console: CliktConsole = defaultCliktConsole(), convert: ( String ) -> T): T? Prompt a user for text input. If the user sends a terminate signal (e.g. ctrl-c) while the prompt is active, null will be returned. Parameters \u00b6 text - The text to display for the prompt. default - The default value to use for the input. If the user enters a newline without any other value, default will be returned. This parameter is a String instead of T , since it will be displayed to the user. hideInput - If true, the user\u2019s input will not be echoed back to the screen. This is commonly used for password inputs. requireConfirmation - If true, the user will be required to enter the same value twice before it is accepted. confirmationPrompt - The text to show the user when requireConfirmation is true. promptSuffix - A delimiter printed between the text and the user\u2019s input. showDefault - If true, the default value will be shown as part of the prompt. convert - A callback that will convert the text that the user enters to the return value of the function. If the callback raises a UsageError , its message will be printed and the user will be asked to enter a new value. If default is not null and the user does not input a value, the value of default will be passed to this callback. Return the user\u2019s input, or null if the stdin is not interactive and EOF was encountered. fun prompt(text: String , default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \u201cRepeat for confirmation: \u201c, promptSuffix: String = \u201c: \u201c, showDefault: Boolean = true): String ? Prompt a user for text input. If the user sends a terminate signal (e.g. ctrl-c) while the prompt is active, null will be returned. Parameters \u00b6 text - The text to display for the prompt. default - The default value to use for the input. If the user enters a newline without any other value, default will be returned. hideInput - If true, the user\u2019s input will not be echoed back to the screen. This is commonly used for password inputs. requireConfirmation - If true, the user will be required to enter the same value twice before it is accepted. confirmationPrompt - The text to show the user when requireConfirmation is true. promptSuffix - A delimiter printed between the text and the user\u2019s input. showDefault - If true, the default value will be shown as part of the prompt. Return the user\u2019s input, or null if the stdin is not interactive and EOF was encountered.","title":"Prompt"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/prompt/#prompt","text":"fun prompt(text: String , default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \u201cRepeat for confirmation: \u201c, promptSuffix: String = \u201c: \u201c, showDefault: Boolean = true, console: CliktConsole = defaultCliktConsole(), convert: ( String ) -> T): T? Prompt a user for text input. If the user sends a terminate signal (e.g. ctrl-c) while the prompt is active, null will be returned.","title":"prompt"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/prompt/#parameters","text":"text - The text to display for the prompt. default - The default value to use for the input. If the user enters a newline without any other value, default will be returned. This parameter is a String instead of T , since it will be displayed to the user. hideInput - If true, the user\u2019s input will not be echoed back to the screen. This is commonly used for password inputs. requireConfirmation - If true, the user will be required to enter the same value twice before it is accepted. confirmationPrompt - The text to show the user when requireConfirmation is true. promptSuffix - A delimiter printed between the text and the user\u2019s input. showDefault - If true, the default value will be shown as part of the prompt. convert - A callback that will convert the text that the user enters to the return value of the function. If the callback raises a UsageError , its message will be printed and the user will be asked to enter a new value. If default is not null and the user does not input a value, the value of default will be passed to this callback. Return the user\u2019s input, or null if the stdin is not interactive and EOF was encountered. fun prompt(text: String , default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \u201cRepeat for confirmation: \u201c, promptSuffix: String = \u201c: \u201c, showDefault: Boolean = true): String ? Prompt a user for text input. If the user sends a terminate signal (e.g. ctrl-c) while the prompt is active, null will be returned.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/prompt/#parameters_1","text":"text - The text to display for the prompt. default - The default value to use for the input. If the user enters a newline without any other value, default will be returned. hideInput - If true, the user\u2019s input will not be echoed back to the screen. This is commonly used for password inputs. requireConfirmation - If true, the user will be required to enter the same value twice before it is accepted. confirmationPrompt - The text to show the user when requireConfirmation is true. promptSuffix - A delimiter printed between the text and the user\u2019s input. showDefault - If true, the default value will be shown as part of the prompt. Return the user\u2019s input, or null if the stdin is not interactive and EOF was encountered.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/","text":"clikt / com.github.ajalt.clikt.parameters.arguments Package com.github.ajalt.clikt.parameters.arguments \u00b6 Types \u00b6 Name Summary ArgCallsTransformer A callback that transforms all the values into the final argument type typealias ArgCallsTransformer<AllT, EachT> = ArgumentTransformContext .( List <EachT>) -> AllT Argument A positional parameter to a command. interface Argument ArgumentDelegate An argument that functions as a property delegate interface ArgumentDelegate<out T> : Argument , ReadOnlyProperty < CliktCommand , T> ArgumentTransformContext A receiver for argument transformers. class ArgumentTransformContext : Argument ArgValidator A callback validates the final argument type typealias ArgValidator<AllT> = ArgumentTransformContext .(AllT) -> Unit ArgValueConverter A callback that transforms a single value from one type to another typealias ArgValueConverter<InT, ValueT> = ArgumentTransformContext .(InT) -> ValueT ArgValueTransformer A callback that transforms a single value from a string to the value type typealias ArgValueTransformer<T> = ArgValueConverter < String , T> ProcessedArgument An Argument delegate implementation that transforms its values . class ProcessedArgument<AllT, ValueT> : ArgumentDelegate <AllT> RawArgument typealias RawArgument = ProcessedArgument < String , String > Functions \u00b6 Name Summary argument Create a property delegate argument. fun CliktCommand .argument(name: String = \"\", help: String = \"\", helpTags: Map < String , String > = emptyMap(), completionCandidates: CompletionCandidates ? = null): RawArgument check Check the final argument value and raise an error if it\u2019s not valid. fun <AllT : Any , ValueT> ProcessedArgument <AllT, ValueT>.check(message: String , validator: (AllT) -> Boolean ): ArgumentDelegate <AllT> fun <AllT : Any , ValueT> ProcessedArgument <AllT, ValueT>.check(lazyMessage: (AllT) -> String = { it.toString() }, validator: (AllT) -> Boolean ): ArgumentDelegate <AllT> convert Convert the argument\u2019s values. fun <InT : Any , ValueT : Any > ProcessedArgument <InT, InT>.convert(completionCandidates: CompletionCandidates = completionCandidatesWithDefault.default, conversion: ArgValueConverter <InT, ValueT>): ProcessedArgument <ValueT, ValueT> default If the argument is not given, use value instead of throwing an error. fun <T : Any > ProcessedArgument <T, T>.default(value: T): ArgumentDelegate <T> defaultLazy If the argument is not given, call value and use its return value instead of throwing an error. fun <T : Any > ProcessedArgument <T, T>.defaultLazy(value: () -> T): ArgumentDelegate <T> help Set the help for this argument. fun <AllT, ValueT> ProcessedArgument <AllT, ValueT>.help(help: String ): ProcessedArgument <AllT, ValueT> multiple Accept any number of values to this argument. fun <T : Any > ProcessedArgument <T, T>.multiple(required: Boolean = false): ProcessedArgument < List <T>, T> optional Return null instead of throwing an error if no value is given. fun <AllT : Any , ValueT> ProcessedArgument <AllT, ValueT>.optional(): ProcessedArgument <AllT?, ValueT> pair Require exactly two values to this argument, and store them in a Pair . fun <T : Any > ProcessedArgument <T, T>.pair(): ProcessedArgument < Pair <T, T>, T> transformAll Transform all values to the final argument type. fun <AllInT, ValueT, AllOutT> ProcessedArgument <AllInT, ValueT>.transformAll(nvalues: Int ? = null, required: Boolean ? = null, transform: ArgCallsTransformer <AllOutT, ValueT>): ProcessedArgument <AllOutT, ValueT> triple Require exactly three values to this argument, and store them in a Triple fun <T : Any > ProcessedArgument <T, T>.triple(): ProcessedArgument < Triple <T, T, T>, T> unique Only store unique values for this argument fun <T : Any > ProcessedArgument < List <T>, T>.unique(): ProcessedArgument < Set <T>, T> validate Check the final argument value and raise an error if it\u2019s not valid. fun <AllT : Any , ValueT> ProcessedArgument <AllT, ValueT>.validate(validator: ArgValidator <AllT>): ArgumentDelegate <AllT>","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/#package-comgithubajaltcliktparametersarguments","text":"","title":"Package com.github.ajalt.clikt.parameters.arguments"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/#types","text":"Name Summary ArgCallsTransformer A callback that transforms all the values into the final argument type typealias ArgCallsTransformer<AllT, EachT> = ArgumentTransformContext .( List <EachT>) -> AllT Argument A positional parameter to a command. interface Argument ArgumentDelegate An argument that functions as a property delegate interface ArgumentDelegate<out T> : Argument , ReadOnlyProperty < CliktCommand , T> ArgumentTransformContext A receiver for argument transformers. class ArgumentTransformContext : Argument ArgValidator A callback validates the final argument type typealias ArgValidator<AllT> = ArgumentTransformContext .(AllT) -> Unit ArgValueConverter A callback that transforms a single value from one type to another typealias ArgValueConverter<InT, ValueT> = ArgumentTransformContext .(InT) -> ValueT ArgValueTransformer A callback that transforms a single value from a string to the value type typealias ArgValueTransformer<T> = ArgValueConverter < String , T> ProcessedArgument An Argument delegate implementation that transforms its values . class ProcessedArgument<AllT, ValueT> : ArgumentDelegate <AllT> RawArgument typealias RawArgument = ProcessedArgument < String , String >","title":"Types"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/#functions","text":"Name Summary argument Create a property delegate argument. fun CliktCommand .argument(name: String = \"\", help: String = \"\", helpTags: Map < String , String > = emptyMap(), completionCandidates: CompletionCandidates ? = null): RawArgument check Check the final argument value and raise an error if it\u2019s not valid. fun <AllT : Any , ValueT> ProcessedArgument <AllT, ValueT>.check(message: String , validator: (AllT) -> Boolean ): ArgumentDelegate <AllT> fun <AllT : Any , ValueT> ProcessedArgument <AllT, ValueT>.check(lazyMessage: (AllT) -> String = { it.toString() }, validator: (AllT) -> Boolean ): ArgumentDelegate <AllT> convert Convert the argument\u2019s values. fun <InT : Any , ValueT : Any > ProcessedArgument <InT, InT>.convert(completionCandidates: CompletionCandidates = completionCandidatesWithDefault.default, conversion: ArgValueConverter <InT, ValueT>): ProcessedArgument <ValueT, ValueT> default If the argument is not given, use value instead of throwing an error. fun <T : Any > ProcessedArgument <T, T>.default(value: T): ArgumentDelegate <T> defaultLazy If the argument is not given, call value and use its return value instead of throwing an error. fun <T : Any > ProcessedArgument <T, T>.defaultLazy(value: () -> T): ArgumentDelegate <T> help Set the help for this argument. fun <AllT, ValueT> ProcessedArgument <AllT, ValueT>.help(help: String ): ProcessedArgument <AllT, ValueT> multiple Accept any number of values to this argument. fun <T : Any > ProcessedArgument <T, T>.multiple(required: Boolean = false): ProcessedArgument < List <T>, T> optional Return null instead of throwing an error if no value is given. fun <AllT : Any , ValueT> ProcessedArgument <AllT, ValueT>.optional(): ProcessedArgument <AllT?, ValueT> pair Require exactly two values to this argument, and store them in a Pair . fun <T : Any > ProcessedArgument <T, T>.pair(): ProcessedArgument < Pair <T, T>, T> transformAll Transform all values to the final argument type. fun <AllInT, ValueT, AllOutT> ProcessedArgument <AllInT, ValueT>.transformAll(nvalues: Int ? = null, required: Boolean ? = null, transform: ArgCallsTransformer <AllOutT, ValueT>): ProcessedArgument <AllOutT, ValueT> triple Require exactly three values to this argument, and store them in a Triple fun <T : Any > ProcessedArgument <T, T>.triple(): ProcessedArgument < Triple <T, T, T>, T> unique Only store unique values for this argument fun <T : Any > ProcessedArgument < List <T>, T>.unique(): ProcessedArgument < Set <T>, T> validate Check the final argument value and raise an error if it\u2019s not valid. fun <AllT : Any , ValueT> ProcessedArgument <AllT, ValueT>.validate(validator: ArgValidator <AllT>): ArgumentDelegate <AllT>","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-arg-calls-transformer/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ArgCallsTransformer ArgCallsTransformer \u00b6 typealias ArgCallsTransformer = ArgumentTransformContext .( List ) -> AllT A callback that transforms all the values into the final argument type","title":" arg calls transformer"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-arg-calls-transformer/#argcallstransformer","text":"typealias ArgCallsTransformer = ArgumentTransformContext .( List ) -> AllT A callback that transforms all the values into the final argument type","title":"ArgCallsTransformer"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-arg-validator/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ArgValidator ArgValidator \u00b6 typealias ArgValidator = ArgumentTransformContext .(AllT) -> Unit A callback validates the final argument type","title":" arg validator"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-arg-validator/#argvalidator","text":"typealias ArgValidator = ArgumentTransformContext .(AllT) -> Unit A callback validates the final argument type","title":"ArgValidator"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-arg-value-converter/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ArgValueConverter ArgValueConverter \u00b6 typealias ArgValueConverter = ArgumentTransformContext .(InT) -> ValueT A callback that transforms a single value from one type to another","title":" arg value converter"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-arg-value-converter/#argvalueconverter","text":"typealias ArgValueConverter = ArgumentTransformContext .(InT) -> ValueT A callback that transforms a single value from one type to another","title":"ArgValueConverter"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-arg-value-transformer/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ArgValueTransformer ArgValueTransformer \u00b6 typealias ArgValueTransformer = ArgValueConverter < String , T> A callback that transforms a single value from a string to the value type","title":" arg value transformer"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-arg-value-transformer/#argvaluetransformer","text":"typealias ArgValueTransformer = ArgValueConverter < String , T> A callback that transforms a single value from a string to the value type","title":"ArgValueTransformer"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-raw-argument/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / RawArgument RawArgument \u00b6 typealias RawArgument = ProcessedArgument < String , String >","title":" raw argument"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-raw-argument/#rawargument","text":"typealias RawArgument = ProcessedArgument < String , String >","title":"RawArgument"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/argument/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / argument argument \u00b6 fun CliktCommand .argument(name: String = \u201c\u201d, help: String = \u201c\u201d, helpTags: Map < String , String > = emptyMap(), completionCandidates: CompletionCandidates ? = null): RawArgument Create a property delegate argument. The order that these delegates are created is the order that arguments must appear. By default, the argument takes one value and throws an error if no value is given. The behavior can be changed with functions like int and optional . Parameters \u00b6 name - The metavar for this argument. If not given, the name is inferred form the property name. help - The description of this argument for help output. helpTags - Extra information about this option to pass to the help formatter","title":"Argument"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/argument/#argument","text":"fun CliktCommand .argument(name: String = \u201c\u201d, help: String = \u201c\u201d, helpTags: Map < String , String > = emptyMap(), completionCandidates: CompletionCandidates ? = null): RawArgument Create a property delegate argument. The order that these delegates are created is the order that arguments must appear. By default, the argument takes one value and throws an error if no value is given. The behavior can be changed with functions like int and optional .","title":"argument"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/argument/#parameters","text":"name - The metavar for this argument. If not given, the name is inferred form the property name. help - The description of this argument for help output. helpTags - Extra information about this option to pass to the help formatter","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/check/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / check check \u00b6 inline fun Any , ValueT> ProcessedArgument .check(message: String , crossinline validator: (AllT) -> Boolean ): ArgumentDelegate Check the final argument value and raise an error if it\u2019s not valid. The validator is called with the final argument type (the output of transformAll ), and should return false if the value is not valid. You can specify a message to include in the error output. You can use validate for more complex checks. Example: \u00b6 val arg by argument().int().check(\u201cvalue must be even\u201d) { it % 2 == 0 } inline fun Any , ValueT> ProcessedArgument .check(crossinline lazyMessage: (AllT) -> String = { it.toString() }, crossinline validator: (AllT) -> Boolean ): ArgumentDelegate Check the final argument value and raise an error if it\u2019s not valid. The validator is called with the final argument type (the output of transformAll ), and should return false if the value is not valid. You can specify a lazyMessage the returns a message to include in the error output. You can use validate for more complex checks. Example: \u00b6 val arg by argument().int().check(lazyMessage={\u201c$it is not even\u201d}) { it % 2 == 0 }","title":"Check"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/check/#check","text":"inline fun Any , ValueT> ProcessedArgument .check(message: String , crossinline validator: (AllT) -> Boolean ): ArgumentDelegate Check the final argument value and raise an error if it\u2019s not valid. The validator is called with the final argument type (the output of transformAll ), and should return false if the value is not valid. You can specify a message to include in the error output. You can use validate for more complex checks.","title":"check"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/check/#example","text":"val arg by argument().int().check(\u201cvalue must be even\u201d) { it % 2 == 0 } inline fun Any , ValueT> ProcessedArgument .check(crossinline lazyMessage: (AllT) -> String = { it.toString() }, crossinline validator: (AllT) -> Boolean ): ArgumentDelegate Check the final argument value and raise an error if it\u2019s not valid. The validator is called with the final argument type (the output of transformAll ), and should return false if the value is not valid. You can specify a lazyMessage the returns a message to include in the error output. You can use validate for more complex checks.","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/check/#example_1","text":"val arg by argument().int().check(lazyMessage={\u201c$it is not even\u201d}) { it % 2 == 0 }","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/convert/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / convert convert \u00b6 inline fun Any , ValueT : Any > ProcessedArgument .convert(completionCandidates: CompletionCandidates = completionCandidatesWithDefault.default, crossinline conversion: ArgValueConverter ): ProcessedArgument Convert the argument\u2019s values. The conversion is called once for each value given. If any errors are thrown, they are caught and a BadParameterValue is thrown with the error message. You can call fail to throw a BadParameterValue manually. You can call convert more than once to wrap the result of the previous convert , but it cannot be called after transformAll (e.g. multiple ) or transformValues (e.g. pair ). Example \u00b6 val bd: BigDecimal by argument().convert { it.toBigDecimal() } val fileText: ByteArray by argument().file().convert { it.readBytes() } Parameters \u00b6 completionCandidates - candidates to use when completing this argument in shell autocomplete, if no candidates are specified in argument","title":"Convert"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/convert/#convert","text":"inline fun Any , ValueT : Any > ProcessedArgument .convert(completionCandidates: CompletionCandidates = completionCandidatesWithDefault.default, crossinline conversion: ArgValueConverter ): ProcessedArgument Convert the argument\u2019s values. The conversion is called once for each value given. If any errors are thrown, they are caught and a BadParameterValue is thrown with the error message. You can call fail to throw a BadParameterValue manually. You can call convert more than once to wrap the result of the previous convert , but it cannot be called after transformAll (e.g. multiple ) or transformValues (e.g. pair ).","title":"convert"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/convert/#example","text":"val bd: BigDecimal by argument().convert { it.toBigDecimal() } val fileText: ByteArray by argument().file().convert { it.readBytes() }","title":"Example"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/convert/#parameters","text":"completionCandidates - candidates to use when completing this argument in shell autocomplete, if no candidates are specified in argument","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/default-lazy/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / defaultLazy defaultLazy \u00b6 inline fun Any > ProcessedArgument .defaultLazy(crossinline value: () -> T): ArgumentDelegate If the argument is not given, call value and use its return value instead of throwing an error. This must be applied after all other transforms. If the argument is given on the command line, value will not be called. Example: \u00b6 val arg: Pair by argument().int().pair().defaultLazy { expensiveOperation() }","title":"Default lazy"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/default-lazy/#defaultlazy","text":"inline fun Any > ProcessedArgument .defaultLazy(crossinline value: () -> T): ArgumentDelegate If the argument is not given, call value and use its return value instead of throwing an error. This must be applied after all other transforms. If the argument is given on the command line, value will not be called.","title":"defaultLazy"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/default-lazy/#example","text":"val arg: Pair by argument().int().pair().defaultLazy { expensiveOperation() }","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/default/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / default default \u00b6 fun Any > ProcessedArgument .default(value: T): ArgumentDelegate If the argument is not given, use value instead of throwing an error. This must be applied after all other transforms. Example: \u00b6 val arg: Pair by argument().int().pair().default(1 to 2)","title":"Default"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/default/#default","text":"fun Any > ProcessedArgument .default(value: T): ArgumentDelegate If the argument is not given, use value instead of throwing an error. This must be applied after all other transforms.","title":"default"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/default/#example","text":"val arg: Pair by argument().int().pair().default(1 to 2)","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/help/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / help help \u00b6 fun ProcessedArgument .help(help: String ): ProcessedArgument Set the help for this argument. Although you would normally pass the help string as an argument to argument , this function can be more convenient for long help strings. Example: \u00b6 val number by argument() .int() .help(\u201cThis is an argument that takes a number\u201d)","title":"Help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/help/#help","text":"fun ProcessedArgument .help(help: String ): ProcessedArgument Set the help for this argument. Although you would normally pass the help string as an argument to argument , this function can be more convenient for long help strings.","title":"help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/help/#example","text":"val number by argument() .int() .help(\u201cThis is an argument that takes a number\u201d)","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/multiple/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / multiple multiple \u00b6 fun Any > ProcessedArgument .multiple(required: Boolean = false): ProcessedArgument < List , T> Accept any number of values to this argument. Only one argument in a command may use this function, and the command may not have subcommands. This must be called after all other transforms. Example: \u00b6 val arg: List by argument().int().multiple()","title":"Multiple"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/multiple/#multiple","text":"fun Any > ProcessedArgument .multiple(required: Boolean = false): ProcessedArgument < List , T> Accept any number of values to this argument. Only one argument in a command may use this function, and the command may not have subcommands. This must be called after all other transforms.","title":"multiple"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/multiple/#example","text":"val arg: List by argument().int().multiple()","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/optional/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / optional optional \u00b6 fun Any , ValueT> ProcessedArgument .optional(): ProcessedArgument Return null instead of throwing an error if no value is given. This must be called after all other transforms. Example: \u00b6 val arg: Int? by argument().int().optional()","title":"Optional"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/optional/#optional","text":"fun Any , ValueT> ProcessedArgument .optional(): ProcessedArgument Return null instead of throwing an error if no value is given. This must be called after all other transforms.","title":"optional"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/optional/#example","text":"val arg: Int? by argument().int().optional()","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/pair/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / pair pair \u00b6 fun Any > ProcessedArgument .pair(): ProcessedArgument < Pair , T> Require exactly two values to this argument, and store them in a Pair . This must be called after converting the value type, and before other transforms. Example: \u00b6 val arg: Pair by argument().int().pair()","title":"Pair"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/pair/#pair","text":"fun Any > ProcessedArgument .pair(): ProcessedArgument < Pair , T> Require exactly two values to this argument, and store them in a Pair . This must be called after converting the value type, and before other transforms.","title":"pair"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/pair/#example","text":"val arg: Pair by argument().int().pair()","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/transform-all/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / transformAll transformAll \u00b6 fun ProcessedArgument .transformAll(nvalues: Int ? = null, required: Boolean ? = null, transform: ArgCallsTransformer ): ProcessedArgument Transform all values to the final argument type. The input is a list of values, one for each value on the command line. The values in the list are the output of calls to convert . The input list will have a size of nvalues if nvalues is > 0. Used to implement functions like pair and multiple . Example \u00b6 val entries by argument().transformAll { it.joinToString() } Parameters \u00b6 nvalues - The number of values required by this argument. A negative nvalues indicates a variable number of values. required - If true, an error with be thrown if no values are provided to this argument.","title":"Transform all"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/transform-all/#transformall","text":"fun ProcessedArgument .transformAll(nvalues: Int ? = null, required: Boolean ? = null, transform: ArgCallsTransformer ): ProcessedArgument Transform all values to the final argument type. The input is a list of values, one for each value on the command line. The values in the list are the output of calls to convert . The input list will have a size of nvalues if nvalues is > 0. Used to implement functions like pair and multiple .","title":"transformAll"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/transform-all/#example","text":"val entries by argument().transformAll { it.joinToString() }","title":"Example"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/transform-all/#parameters","text":"nvalues - The number of values required by this argument. A negative nvalues indicates a variable number of values. required - If true, an error with be thrown if no values are provided to this argument.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/triple/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / triple triple \u00b6 fun Any > ProcessedArgument .triple(): ProcessedArgument < Triple , T> Require exactly three values to this argument, and store them in a Triple This must be called after converting the value type, and before other transforms. Example: \u00b6 val arg: Triple by argument().int().triple()","title":"Triple"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/triple/#triple","text":"fun Any > ProcessedArgument .triple(): ProcessedArgument < Triple , T> Require exactly three values to this argument, and store them in a Triple This must be called after converting the value type, and before other transforms.","title":"triple"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/triple/#example","text":"val arg: Triple by argument().int().triple()","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/unique/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / unique unique \u00b6 fun Any > ProcessedArgument < List , T>.unique(): ProcessedArgument < Set , T> Only store unique values for this argument Example: \u00b6 val arg: Set by argument().int().multiple().unique()","title":"Unique"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/unique/#unique","text":"fun Any > ProcessedArgument < List , T>.unique(): ProcessedArgument < Set , T> Only store unique values for this argument","title":"unique"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/unique/#example","text":"val arg: Set by argument().int().multiple().unique()","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/validate/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / validate validate \u00b6 fun Any , ValueT> ProcessedArgument .validate(validator: ArgValidator ): ArgumentDelegate Check the final argument value and raise an error if it\u2019s not valid. The validator is called with the final argument type (the output of transformAll ), and should call fail if the value is not valid. Your validator can also call require to fail automatically if an expression is false, or message to show the user a warning message without aborting. Example: \u00b6 val arg by argument().int().validate { require(it % 2 == 0) { \u201cvalue must be even\u201d } }","title":"Validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/validate/#validate","text":"fun Any , ValueT> ProcessedArgument .validate(validator: ArgValidator ): ArgumentDelegate Check the final argument value and raise an error if it\u2019s not valid. The validator is called with the final argument type (the output of transformAll ), and should call fail if the value is not valid. Your validator can also call require to fail automatically if an expression is false, or message to show the user a warning message without aborting.","title":"validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/validate/#example","text":"val arg by argument().int().validate { require(it % 2 == 0) { \u201cvalue must be even\u201d } }","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / Argument Argument \u00b6 interface Argument A positional parameter to a command. Arguments can take any number of values. Properties \u00b6 Name Summary argumentHelp The description of this argument. abstract val argumentHelp: String completionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this argument. open val completionCandidates: CompletionCandidates helpTags Extra information about this argument to pass to the help formatter. abstract val helpTags: Map < String , String > name The metavar for this argument. abstract val name: String nvalues The number of values that this argument takes. abstract val nvalues: Int required If true, an error will be thrown if this argument is not given on the command line. abstract val required: Boolean Functions \u00b6 Name Summary finalize Called after this command\u2019s argv is parsed to transform and store the argument\u2019s value. abstract fun finalize(context: Context , values: List < String >): Unit parameterHelp Information about this argument for the help output. abstract fun parameterHelp(context: Context ): Argument? postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value. abstract fun postValidate(context: Context ): Unit Inheritors \u00b6 Name Summary ArgumentDelegate An argument that functions as a property delegate interface ArgumentDelegate<out T> : Argument , ReadOnlyProperty < CliktCommand , T> ArgumentTransformContext A receiver for argument transformers. class ArgumentTransformContext : Argument","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/#argument","text":"interface Argument A positional parameter to a command. Arguments can take any number of values.","title":"Argument"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/#properties","text":"Name Summary argumentHelp The description of this argument. abstract val argumentHelp: String completionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this argument. open val completionCandidates: CompletionCandidates helpTags Extra information about this argument to pass to the help formatter. abstract val helpTags: Map < String , String > name The metavar for this argument. abstract val name: String nvalues The number of values that this argument takes. abstract val nvalues: Int required If true, an error will be thrown if this argument is not given on the command line. abstract val required: Boolean","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/#functions","text":"Name Summary finalize Called after this command\u2019s argv is parsed to transform and store the argument\u2019s value. abstract fun finalize(context: Context , values: List < String >): Unit parameterHelp Information about this argument for the help output. abstract fun parameterHelp(context: Context ): Argument? postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value. abstract fun postValidate(context: Context ): Unit","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/#inheritors","text":"Name Summary ArgumentDelegate An argument that functions as a property delegate interface ArgumentDelegate<out T> : Argument , ReadOnlyProperty < CliktCommand , T> ArgumentTransformContext A receiver for argument transformers. class ArgumentTransformContext : Argument","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/argument-help/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / Argument / argumentHelp argumentHelp \u00b6 abstract val argumentHelp: String The description of this argument. It\u2019s usually better to leave this null and describe options in the usage line of the command instead.","title":"Argument help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/argument-help/#argumenthelp","text":"abstract val argumentHelp: String The description of this argument. It\u2019s usually better to leave this null and describe options in the usage line of the command instead.","title":"argumentHelp"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/completion-candidates/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / Argument / completionCandidates completionCandidates \u00b6 open val completionCandidates: CompletionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this argument.","title":"Completion candidates"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/completion-candidates/#completioncandidates","text":"open val completionCandidates: CompletionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this argument.","title":"completionCandidates"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/finalize/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / Argument / finalize finalize \u00b6 abstract fun finalize(context: Context , values: List < String >): Unit Called after this command\u2019s argv is parsed to transform and store the argument\u2019s value. You cannot refer to other parameter values during this call, since they might not have been finalized yet. Parameters \u00b6 context - The context for this parse values - A possibly empty list of values provided to this argument.","title":"Finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/finalize/#finalize","text":"abstract fun finalize(context: Context , values: List < String >): Unit Called after this command\u2019s argv is parsed to transform and store the argument\u2019s value. You cannot refer to other parameter values during this call, since they might not have been finalized yet.","title":"finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/finalize/#parameters","text":"context - The context for this parse values - A possibly empty list of values provided to this argument.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/help-tags/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / Argument / helpTags helpTags \u00b6 abstract val helpTags: Map < String , String > Extra information about this argument to pass to the help formatter.","title":"Help tags"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/help-tags/#helptags","text":"abstract val helpTags: Map < String , String > Extra information about this argument to pass to the help formatter.","title":"helpTags"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/name/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / Argument / name name \u00b6 abstract val name: String The metavar for this argument.","title":"Name"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/name/#name","text":"abstract val name: String The metavar for this argument.","title":"name"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/nvalues/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / Argument / nvalues nvalues \u00b6 abstract val nvalues: Int The number of values that this argument takes. Negative nvalues indicates a variable number of values. Cannot be 0.","title":"Nvalues"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/nvalues/#nvalues","text":"abstract val nvalues: Int The number of values that this argument takes. Negative nvalues indicates a variable number of values. Cannot be 0.","title":"nvalues"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/parameter-help/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / Argument / parameterHelp parameterHelp \u00b6 abstract fun parameterHelp(context: Context ): Argument? Information about this argument for the help output.","title":"Parameter help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/parameter-help/#parameterhelp","text":"abstract fun parameterHelp(context: Context ): Argument? Information about this argument for the help output.","title":"parameterHelp"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/post-validate/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / Argument / postValidate postValidate \u00b6 abstract fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"Post validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/post-validate/#postvalidate","text":"abstract fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"postValidate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/required/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / Argument / required required \u00b6 abstract val required: Boolean If true, an error will be thrown if this argument is not given on the command line.","title":"Required"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/required/#required","text":"abstract val required: Boolean If true, an error will be thrown if this argument is not given on the command line.","title":"required"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-delegate/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ArgumentDelegate ArgumentDelegate \u00b6 interface ArgumentDelegate : Argument , ReadOnlyProperty < CliktCommand , T> An argument that functions as a property delegate Functions \u00b6 Name Summary provideDelegate Implementations must call CliktCommand.registerArgument abstract operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , T> Inheritors \u00b6 Name Summary ProcessedArgument An Argument delegate implementation that transforms its values . class ProcessedArgument<AllT, ValueT> : ArgumentDelegate <AllT>","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-delegate/#argumentdelegate","text":"interface ArgumentDelegate : Argument , ReadOnlyProperty < CliktCommand , T> An argument that functions as a property delegate","title":"ArgumentDelegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-delegate/#functions","text":"Name Summary provideDelegate Implementations must call CliktCommand.registerArgument abstract operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , T>","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-delegate/#inheritors","text":"Name Summary ProcessedArgument An Argument delegate implementation that transforms its values . class ProcessedArgument<AllT, ValueT> : ArgumentDelegate <AllT>","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-delegate/provide-delegate/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ArgumentDelegate / provideDelegate provideDelegate \u00b6 abstract operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , T> Implementations must call CliktCommand.registerArgument","title":"Provide delegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-delegate/provide-delegate/#providedelegate","text":"abstract operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , T> Implementations must call CliktCommand.registerArgument","title":"provideDelegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ArgumentTransformContext ArgumentTransformContext \u00b6 class ArgumentTransformContext : Argument A receiver for argument transformers. Constructors \u00b6 Name Summary <init> A receiver for argument transformers. ArgumentTransformContext(argument: Argument , context: Context ) Properties \u00b6 Name Summary argument The argument that was invoked val argument: Argument context val context: Context Functions \u00b6 Name Summary fail Throw an exception indicating that usage was incorrect. fun fail(message: String ): Nothing message Issue a message that can be shown to the user fun message(message: String ): Unit require If value is false, call fail with the output of lazyMessage fun require(value: Boolean , lazyMessage: () -> String = { \"\" }): Unit","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/#argumenttransformcontext","text":"class ArgumentTransformContext : Argument A receiver for argument transformers.","title":"ArgumentTransformContext"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/#constructors","text":"Name Summary <init> A receiver for argument transformers. ArgumentTransformContext(argument: Argument , context: Context )","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/#properties","text":"Name Summary argument The argument that was invoked val argument: Argument context val context: Context","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/#functions","text":"Name Summary fail Throw an exception indicating that usage was incorrect. fun fail(message: String ): Nothing message Issue a message that can be shown to the user fun message(message: String ): Unit require If value is false, call fail with the output of lazyMessage fun require(value: Boolean , lazyMessage: () -> String = { \"\" }): Unit","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/-init-/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ArgumentTransformContext / <init> <init> \u00b6 ArgumentTransformContext(argument: Argument , context: Context ) A receiver for argument transformers.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/-init-/#init","text":"ArgumentTransformContext(argument: Argument , context: Context ) A receiver for argument transformers.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/argument/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ArgumentTransformContext / argument argument \u00b6 val argument: Argument The argument that was invoked Property \u00b6 argument - The argument that was invoked","title":"Argument"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/argument/#argument","text":"val argument: Argument The argument that was invoked","title":"argument"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/argument/#property","text":"argument - The argument that was invoked","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/context/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ArgumentTransformContext / context context \u00b6 val context: Context","title":"Context"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/context/#context","text":"val context: Context","title":"context"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/fail/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ArgumentTransformContext / fail fail \u00b6 fun fail(message: String ): Nothing Throw an exception indicating that usage was incorrect.","title":"Fail"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/fail/#fail","text":"fun fail(message: String ): Nothing Throw an exception indicating that usage was incorrect.","title":"fail"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/message/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ArgumentTransformContext / message message \u00b6 fun message(message: String ): Unit Issue a message that can be shown to the user","title":"Message"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/message/#message","text":"fun message(message: String ): Unit Issue a message that can be shown to the user","title":"message"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/require/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ArgumentTransformContext / require require \u00b6 inline fun require(value: Boolean , lazyMessage: () -> String = { \u201c\u201d }): Unit If value is false, call fail with the output of lazyMessage","title":"Require"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/require/#require","text":"inline fun require(value: Boolean , lazyMessage: () -> String = { \u201c\u201d }): Unit If value is false, call fail with the output of lazyMessage","title":"require"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument ProcessedArgument \u00b6 class ProcessedArgument : ArgumentDelegate An Argument delegate implementation that transforms its values . Properties \u00b6 Name Summary argumentHelp The description of this argument. val argumentHelp: String completionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this argument. val completionCandidates: CompletionCandidates completionCandidatesWithDefault val completionCandidatesWithDefault: ValueWithDefault < CompletionCandidates > helpTags Extra information about this argument to pass to the help formatter. val helpTags: Map < String , String > name The metavar for this argument. var name: String nvalues The number of values that this argument takes. val nvalues: Int required If true, an error will be thrown if this argument is not given on the command line. val required: Boolean transformAll Called in finalize to transform the list of values to the final type. val transformAll: ArgCallsTransformer <AllT, ValueT> transformValidator Called after all parameters have been finalize d to validate the result of transformAll val transformValidator: ArgValidator <AllT> transformValue Called in finalize to transform each value provided to the argument. val transformValue: ArgValueTransformer <ValueT> Functions \u00b6 Name Summary copy Create a new argument that is a copy of this one with different transforms. fun <AllT, ValueT> copy(transformValue: ArgValueTransformer <ValueT>, transformAll: ArgCallsTransformer <AllT, ValueT>, validator: ArgValidator <AllT>, name: String = this.name, nvalues: Int = this.nvalues, required: Boolean = this.required, help: String = this.argumentHelp, helpTags: Map < String , String > = this.helpTags, completionCandidatesWithDefault: ValueWithDefault < CompletionCandidates > = this.completionCandidatesWithDefault): ProcessedArgument <AllT, ValueT> Create a new argument that is a copy of this one with the same transforms. fun copy(validator: ArgValidator <AllT> = this.transformValidator, name: String = this.name, nvalues: Int = this.nvalues, required: Boolean = this.required, help: String = this.argumentHelp, helpTags: Map < String , String > = this.helpTags, completionCandidatesWithDefault: ValueWithDefault < CompletionCandidates > = this.completionCandidatesWithDefault): ProcessedArgument <AllT, ValueT> finalize Called after this command\u2019s argv is parsed to transform and store the argument\u2019s value. fun finalize(context: Context , values: List < String >): Unit getValue fun getValue(thisRef: CliktCommand , property: KProperty <*>): AllT parameterHelp Information about this argument for the help output. fun parameterHelp(context: Context ): Argument postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value. fun postValidate(context: Context ): Unit provideDelegate Implementations must call CliktCommand.registerArgument operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , AllT> Extension Functions \u00b6 Name Summary check Check the final argument value and raise an error if it\u2019s not valid. fun <AllT : Any , ValueT> ProcessedArgument <AllT, ValueT>.check(message: String , validator: (AllT) -> Boolean ): ArgumentDelegate <AllT> fun <AllT : Any , ValueT> ProcessedArgument <AllT, ValueT>.check(lazyMessage: (AllT) -> String = { it.toString() }, validator: (AllT) -> Boolean ): ArgumentDelegate <AllT> choice Convert the argument based on a fixed set of values. fun <T : Any > RawArgument .choice(choices: Map < String , T>, ignoreCase: Boolean = false): ProcessedArgument <T, T> fun <T : Any > RawArgument .choice(vararg choices: Pair < String , T>, ignoreCase: Boolean = false): ProcessedArgument <T, T> Restrict the argument to a fixed set of values. fun RawArgument .choice(vararg choices: String , ignoreCase: Boolean = false): ProcessedArgument < String , String > convert Convert the argument\u2019s values. fun <InT : Any , ValueT : Any > ProcessedArgument <InT, InT>.convert(completionCandidates: CompletionCandidates = completionCandidatesWithDefault.default, conversion: ArgValueConverter <InT, ValueT>): ProcessedArgument <ValueT, ValueT> default If the argument is not given, use value instead of throwing an error. fun <T : Any > ProcessedArgument <T, T>.default(value: T): ArgumentDelegate <T> defaultLazy If the argument is not given, call value and use its return value instead of throwing an error. fun <T : Any > ProcessedArgument <T, T>.defaultLazy(value: () -> T): ArgumentDelegate <T> defaultStdin Use - as the default value for an inputStream argument. fun ProcessedArgument < InputStream , InputStream >.defaultStdin(): ArgumentDelegate < InputStream > defaultStdout Use - as the default value for an outputStream argument. fun ProcessedArgument < OutputStream , OutputStream >.defaultStdout(): ArgumentDelegate < OutputStream > double Convert the argument values to a Double``fun RawArgument .double(): ProcessedArgument < Double , Double > enum Convert the argument to the values of an enum. fun <T : Enum <T>> RawArgument .enum(ignoreCase: Boolean = true, key: (T) -> String = { it.name }): ProcessedArgument <T, T> file Convert the argument to a File . fun RawArgument .file(mustExist: Boolean = false, canBeFile: Boolean = true, canBeDir: Boolean = true, mustBeWritable: Boolean = false, mustBeReadable: Boolean = false, canBeSymlink: Boolean = true): ProcessedArgument < File , File > float Convert the argument values to a Float``fun RawArgument .float(): ProcessedArgument < Float , Float > help Set the help for this argument. fun <AllT, ValueT> ProcessedArgument <AllT, ValueT>.help(help: String ): ProcessedArgument <AllT, ValueT> inputStream Convert the argument to an InputStream . fun RawArgument .inputStream(fileSystem: FileSystem = FileSystems.getDefault()): ProcessedArgument < InputStream , InputStream > int Convert the argument values to an Int``fun RawArgument .int(): ProcessedArgument < Int , Int > long Convert the argument values to a Long``fun RawArgument .long(): ProcessedArgument < Long , Long > multiple Accept any number of values to this argument. fun <T : Any > ProcessedArgument <T, T>.multiple(required: Boolean = false): ProcessedArgument < List <T>, T> optional Return null instead of throwing an error if no value is given. fun <AllT : Any , ValueT> ProcessedArgument <AllT, ValueT>.optional(): ProcessedArgument <AllT?, ValueT> outputStream Convert the argument to an OutputStream . fun RawArgument .outputStream(createIfNotExist: Boolean = true, truncateExisting: Boolean = false, fileSystem: FileSystem = FileSystems.getDefault()): ProcessedArgument < OutputStream , OutputStream > pair Require exactly two values to this argument, and store them in a Pair . fun <T : Any > ProcessedArgument <T, T>.pair(): ProcessedArgument < Pair <T, T>, T> path Convert the argument to a Path . fun RawArgument .path(mustExist: Boolean = false, canBeFile: Boolean = true, canBeDir: Boolean = true, mustBeWritable: Boolean = false, mustBeReadable: Boolean = false, canBeSymlink: Boolean = true, fileSystem: FileSystem = FileSystems.getDefault()): ProcessedArgument <Path, Path> restrictTo Restrict the argument values to fit into a range. fun <T : Comparable <T>> ProcessedArgument <T, T>.restrictTo(min: T? = null, max: T? = null, clamp: Boolean = false): ProcessedArgument <T, T> fun <T : Comparable <T>> ProcessedArgument <T, T>.restrictTo(range: ClosedRange <T>, clamp: Boolean = false): ProcessedArgument <T, T> transformAll Transform all values to the final argument type. fun <AllInT, ValueT, AllOutT> ProcessedArgument <AllInT, ValueT>.transformAll(nvalues: Int ? = null, required: Boolean ? = null, transform: ArgCallsTransformer <AllOutT, ValueT>): ProcessedArgument <AllOutT, ValueT> triple Require exactly three values to this argument, and store them in a Triple fun <T : Any > ProcessedArgument <T, T>.triple(): ProcessedArgument < Triple <T, T, T>, T> unique Only store unique values for this argument fun <T : Any > ProcessedArgument < List <T>, T>.unique(): ProcessedArgument < Set <T>, T> validate Check the final argument value and raise an error if it\u2019s not valid. fun <AllT : Any , ValueT> ProcessedArgument <AllT, ValueT>.validate(validator: ArgValidator <AllT>): ArgumentDelegate <AllT>","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/#processedargument","text":"class ProcessedArgument : ArgumentDelegate An Argument delegate implementation that transforms its values .","title":"ProcessedArgument"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/#properties","text":"Name Summary argumentHelp The description of this argument. val argumentHelp: String completionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this argument. val completionCandidates: CompletionCandidates completionCandidatesWithDefault val completionCandidatesWithDefault: ValueWithDefault < CompletionCandidates > helpTags Extra information about this argument to pass to the help formatter. val helpTags: Map < String , String > name The metavar for this argument. var name: String nvalues The number of values that this argument takes. val nvalues: Int required If true, an error will be thrown if this argument is not given on the command line. val required: Boolean transformAll Called in finalize to transform the list of values to the final type. val transformAll: ArgCallsTransformer <AllT, ValueT> transformValidator Called after all parameters have been finalize d to validate the result of transformAll val transformValidator: ArgValidator <AllT> transformValue Called in finalize to transform each value provided to the argument. val transformValue: ArgValueTransformer <ValueT>","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/#functions","text":"Name Summary copy Create a new argument that is a copy of this one with different transforms. fun <AllT, ValueT> copy(transformValue: ArgValueTransformer <ValueT>, transformAll: ArgCallsTransformer <AllT, ValueT>, validator: ArgValidator <AllT>, name: String = this.name, nvalues: Int = this.nvalues, required: Boolean = this.required, help: String = this.argumentHelp, helpTags: Map < String , String > = this.helpTags, completionCandidatesWithDefault: ValueWithDefault < CompletionCandidates > = this.completionCandidatesWithDefault): ProcessedArgument <AllT, ValueT> Create a new argument that is a copy of this one with the same transforms. fun copy(validator: ArgValidator <AllT> = this.transformValidator, name: String = this.name, nvalues: Int = this.nvalues, required: Boolean = this.required, help: String = this.argumentHelp, helpTags: Map < String , String > = this.helpTags, completionCandidatesWithDefault: ValueWithDefault < CompletionCandidates > = this.completionCandidatesWithDefault): ProcessedArgument <AllT, ValueT> finalize Called after this command\u2019s argv is parsed to transform and store the argument\u2019s value. fun finalize(context: Context , values: List < String >): Unit getValue fun getValue(thisRef: CliktCommand , property: KProperty <*>): AllT parameterHelp Information about this argument for the help output. fun parameterHelp(context: Context ): Argument postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value. fun postValidate(context: Context ): Unit provideDelegate Implementations must call CliktCommand.registerArgument operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , AllT>","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/#extension-functions","text":"Name Summary check Check the final argument value and raise an error if it\u2019s not valid. fun <AllT : Any , ValueT> ProcessedArgument <AllT, ValueT>.check(message: String , validator: (AllT) -> Boolean ): ArgumentDelegate <AllT> fun <AllT : Any , ValueT> ProcessedArgument <AllT, ValueT>.check(lazyMessage: (AllT) -> String = { it.toString() }, validator: (AllT) -> Boolean ): ArgumentDelegate <AllT> choice Convert the argument based on a fixed set of values. fun <T : Any > RawArgument .choice(choices: Map < String , T>, ignoreCase: Boolean = false): ProcessedArgument <T, T> fun <T : Any > RawArgument .choice(vararg choices: Pair < String , T>, ignoreCase: Boolean = false): ProcessedArgument <T, T> Restrict the argument to a fixed set of values. fun RawArgument .choice(vararg choices: String , ignoreCase: Boolean = false): ProcessedArgument < String , String > convert Convert the argument\u2019s values. fun <InT : Any , ValueT : Any > ProcessedArgument <InT, InT>.convert(completionCandidates: CompletionCandidates = completionCandidatesWithDefault.default, conversion: ArgValueConverter <InT, ValueT>): ProcessedArgument <ValueT, ValueT> default If the argument is not given, use value instead of throwing an error. fun <T : Any > ProcessedArgument <T, T>.default(value: T): ArgumentDelegate <T> defaultLazy If the argument is not given, call value and use its return value instead of throwing an error. fun <T : Any > ProcessedArgument <T, T>.defaultLazy(value: () -> T): ArgumentDelegate <T> defaultStdin Use - as the default value for an inputStream argument. fun ProcessedArgument < InputStream , InputStream >.defaultStdin(): ArgumentDelegate < InputStream > defaultStdout Use - as the default value for an outputStream argument. fun ProcessedArgument < OutputStream , OutputStream >.defaultStdout(): ArgumentDelegate < OutputStream > double Convert the argument values to a Double``fun RawArgument .double(): ProcessedArgument < Double , Double > enum Convert the argument to the values of an enum. fun <T : Enum <T>> RawArgument .enum(ignoreCase: Boolean = true, key: (T) -> String = { it.name }): ProcessedArgument <T, T> file Convert the argument to a File . fun RawArgument .file(mustExist: Boolean = false, canBeFile: Boolean = true, canBeDir: Boolean = true, mustBeWritable: Boolean = false, mustBeReadable: Boolean = false, canBeSymlink: Boolean = true): ProcessedArgument < File , File > float Convert the argument values to a Float``fun RawArgument .float(): ProcessedArgument < Float , Float > help Set the help for this argument. fun <AllT, ValueT> ProcessedArgument <AllT, ValueT>.help(help: String ): ProcessedArgument <AllT, ValueT> inputStream Convert the argument to an InputStream . fun RawArgument .inputStream(fileSystem: FileSystem = FileSystems.getDefault()): ProcessedArgument < InputStream , InputStream > int Convert the argument values to an Int``fun RawArgument .int(): ProcessedArgument < Int , Int > long Convert the argument values to a Long``fun RawArgument .long(): ProcessedArgument < Long , Long > multiple Accept any number of values to this argument. fun <T : Any > ProcessedArgument <T, T>.multiple(required: Boolean = false): ProcessedArgument < List <T>, T> optional Return null instead of throwing an error if no value is given. fun <AllT : Any , ValueT> ProcessedArgument <AllT, ValueT>.optional(): ProcessedArgument <AllT?, ValueT> outputStream Convert the argument to an OutputStream . fun RawArgument .outputStream(createIfNotExist: Boolean = true, truncateExisting: Boolean = false, fileSystem: FileSystem = FileSystems.getDefault()): ProcessedArgument < OutputStream , OutputStream > pair Require exactly two values to this argument, and store them in a Pair . fun <T : Any > ProcessedArgument <T, T>.pair(): ProcessedArgument < Pair <T, T>, T> path Convert the argument to a Path . fun RawArgument .path(mustExist: Boolean = false, canBeFile: Boolean = true, canBeDir: Boolean = true, mustBeWritable: Boolean = false, mustBeReadable: Boolean = false, canBeSymlink: Boolean = true, fileSystem: FileSystem = FileSystems.getDefault()): ProcessedArgument <Path, Path> restrictTo Restrict the argument values to fit into a range. fun <T : Comparable <T>> ProcessedArgument <T, T>.restrictTo(min: T? = null, max: T? = null, clamp: Boolean = false): ProcessedArgument <T, T> fun <T : Comparable <T>> ProcessedArgument <T, T>.restrictTo(range: ClosedRange <T>, clamp: Boolean = false): ProcessedArgument <T, T> transformAll Transform all values to the final argument type. fun <AllInT, ValueT, AllOutT> ProcessedArgument <AllInT, ValueT>.transformAll(nvalues: Int ? = null, required: Boolean ? = null, transform: ArgCallsTransformer <AllOutT, ValueT>): ProcessedArgument <AllOutT, ValueT> triple Require exactly three values to this argument, and store them in a Triple fun <T : Any > ProcessedArgument <T, T>.triple(): ProcessedArgument < Triple <T, T, T>, T> unique Only store unique values for this argument fun <T : Any > ProcessedArgument < List <T>, T>.unique(): ProcessedArgument < Set <T>, T> validate Check the final argument value and raise an error if it\u2019s not valid. fun <AllT : Any , ValueT> ProcessedArgument <AllT, ValueT>.validate(validator: ArgValidator <AllT>): ArgumentDelegate <AllT>","title":"Extension Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/argument-help/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / argumentHelp argumentHelp \u00b6 val argumentHelp: String The description of this argument. It\u2019s usually better to leave this null and describe options in the usage line of the command instead.","title":"Argument help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/argument-help/#argumenthelp","text":"val argumentHelp: String The description of this argument. It\u2019s usually better to leave this null and describe options in the usage line of the command instead.","title":"argumentHelp"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/completion-candidates-with-default/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / completionCandidatesWithDefault completionCandidatesWithDefault \u00b6 val completionCandidatesWithDefault: ValueWithDefault < CompletionCandidates >","title":"Completion candidates with default"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/completion-candidates-with-default/#completioncandidateswithdefault","text":"val completionCandidatesWithDefault: ValueWithDefault < CompletionCandidates >","title":"completionCandidatesWithDefault"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/completion-candidates/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / completionCandidates completionCandidates \u00b6 val completionCandidates: CompletionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this argument.","title":"Completion candidates"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/completion-candidates/#completioncandidates","text":"val completionCandidates: CompletionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this argument.","title":"completionCandidates"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/copy/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / copy copy \u00b6 fun copy(transformValue: ArgValueTransformer , transformAll: ArgCallsTransformer , validator: ArgValidator , name: String = this.name, nvalues: Int = this.nvalues, required: Boolean = this.required, help: String = this.argumentHelp, helpTags: Map < String , String > = this.helpTags, completionCandidatesWithDefault: ValueWithDefault < CompletionCandidates > = this.completionCandidatesWithDefault): ProcessedArgument Create a new argument that is a copy of this one with different transforms. fun copy(validator: ArgValidator = this.transformValidator, name: String = this.name, nvalues: Int = this.nvalues, required: Boolean = this.required, help: String = this.argumentHelp, helpTags: Map < String , String > = this.helpTags, completionCandidatesWithDefault: ValueWithDefault < CompletionCandidates > = this.completionCandidatesWithDefault): ProcessedArgument Create a new argument that is a copy of this one with the same transforms.","title":"Copy"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/copy/#copy","text":"fun copy(transformValue: ArgValueTransformer , transformAll: ArgCallsTransformer , validator: ArgValidator , name: String = this.name, nvalues: Int = this.nvalues, required: Boolean = this.required, help: String = this.argumentHelp, helpTags: Map < String , String > = this.helpTags, completionCandidatesWithDefault: ValueWithDefault < CompletionCandidates > = this.completionCandidatesWithDefault): ProcessedArgument Create a new argument that is a copy of this one with different transforms. fun copy(validator: ArgValidator = this.transformValidator, name: String = this.name, nvalues: Int = this.nvalues, required: Boolean = this.required, help: String = this.argumentHelp, helpTags: Map < String , String > = this.helpTags, completionCandidatesWithDefault: ValueWithDefault < CompletionCandidates > = this.completionCandidatesWithDefault): ProcessedArgument Create a new argument that is a copy of this one with the same transforms.","title":"copy"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/finalize/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / finalize finalize \u00b6 fun finalize(context: Context , values: List < String >): Unit Called after this command\u2019s argv is parsed to transform and store the argument\u2019s value. You cannot refer to other parameter values during this call, since they might not have been finalized yet. Parameters \u00b6 context - The context for this parse values - A possibly empty list of values provided to this argument.","title":"Finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/finalize/#finalize","text":"fun finalize(context: Context , values: List < String >): Unit Called after this command\u2019s argv is parsed to transform and store the argument\u2019s value. You cannot refer to other parameter values during this call, since they might not have been finalized yet.","title":"finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/finalize/#parameters","text":"context - The context for this parse values - A possibly empty list of values provided to this argument.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/get-value/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / getValue getValue \u00b6 fun getValue(thisRef: CliktCommand , property: KProperty <*>): AllT","title":"Get value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/get-value/#getvalue","text":"fun getValue(thisRef: CliktCommand , property: KProperty <*>): AllT","title":"getValue"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/help-tags/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / helpTags helpTags \u00b6 val helpTags: Map < String , String > Extra information about this argument to pass to the help formatter.","title":"Help tags"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/help-tags/#helptags","text":"val helpTags: Map < String , String > Extra information about this argument to pass to the help formatter.","title":"helpTags"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/name/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / name name \u00b6 var name: String The metavar for this argument.","title":"Name"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/name/#name","text":"var name: String The metavar for this argument.","title":"name"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/nvalues/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / nvalues nvalues \u00b6 val nvalues: Int The number of values that this argument takes. Negative nvalues indicates a variable number of values. Cannot be 0.","title":"Nvalues"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/nvalues/#nvalues","text":"val nvalues: Int The number of values that this argument takes. Negative nvalues indicates a variable number of values. Cannot be 0.","title":"nvalues"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/parameter-help/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / parameterHelp parameterHelp \u00b6 fun parameterHelp(context: Context ): Argument Information about this argument for the help output.","title":"Parameter help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/parameter-help/#parameterhelp","text":"fun parameterHelp(context: Context ): Argument Information about this argument for the help output.","title":"parameterHelp"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/post-validate/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / postValidate postValidate \u00b6 fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"Post validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/post-validate/#postvalidate","text":"fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"postValidate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/provide-delegate/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / provideDelegate provideDelegate \u00b6 operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , AllT> Implementations must call CliktCommand.registerArgument","title":"Provide delegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/provide-delegate/#providedelegate","text":"operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , AllT> Implementations must call CliktCommand.registerArgument","title":"provideDelegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/required/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / required required \u00b6 val required: Boolean If true, an error will be thrown if this argument is not given on the command line.","title":"Required"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/required/#required","text":"val required: Boolean If true, an error will be thrown if this argument is not given on the command line.","title":"required"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/transform-all/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / transformAll transformAll \u00b6 val transformAll: ArgCallsTransformer Called in finalize to transform the list of values to the final type. Property \u00b6 transformAll - Called in finalize to transform the list of values to the final type.","title":"Transform all"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/transform-all/#transformall","text":"val transformAll: ArgCallsTransformer Called in finalize to transform the list of values to the final type.","title":"transformAll"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/transform-all/#property","text":"transformAll - Called in finalize to transform the list of values to the final type.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/transform-validator/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / transformValidator transformValidator \u00b6 val transformValidator: ArgValidator Called after all parameters have been finalize d to validate the result of transformAll Property \u00b6 transformValidator - Called after all parameters have been finalize d to validate the result of transformAll","title":"Transform validator"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/transform-validator/#transformvalidator","text":"val transformValidator: ArgValidator Called after all parameters have been finalize d to validate the result of transformAll","title":"transformValidator"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/transform-validator/#property","text":"transformValidator - Called after all parameters have been finalize d to validate the result of transformAll","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/transform-value/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / transformValue transformValue \u00b6 val transformValue: ArgValueTransformer Called in finalize to transform each value provided to the argument. Property \u00b6 transformValue - Called in finalize to transform each value provided to the argument.","title":"Transform value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/transform-value/#transformvalue","text":"val transformValue: ArgValueTransformer Called in finalize to transform each value provided to the argument.","title":"transformValue"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/transform-value/#property","text":"transformValue - Called in finalize to transform each value provided to the argument.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/","text":"clikt / com.github.ajalt.clikt.parameters.groups Package com.github.ajalt.clikt.parameters.groups \u00b6 Types \u00b6 Name Summary ChoiceGroup class ChoiceGroup<GroupT : OptionGroup , OutT> : ParameterGroupDelegate <OutT> CoOccurringOptionGroup class CoOccurringOptionGroup<GroupT : OptionGroup , OutT> : ParameterGroupDelegate <OutT> CoOccurringOptionGroupTransform typealias CoOccurringOptionGroupTransform<GroupT, OutT> = (occurred: Boolean ?, group: GroupT, context: Context ) -> OutT MutuallyExclusiveOptions class MutuallyExclusiveOptions<OptT : Any , OutT> : ParameterGroupDelegate <OutT> MutuallyExclusiveOptionsTransform typealias MutuallyExclusiveOptionsTransform<OptT, OutT> = MutuallyExclusiveOptionTransformContext .( List <OptT>) -> OutT MutuallyExclusiveOptionTransformContext class MutuallyExclusiveOptionTransformContext OptionGroup A group of options that can be shown together in help output, or restricted to be cooccurring . open class OptionGroup : ParameterGroup , ParameterHolder ParameterGroup interface ParameterGroup ParameterGroupDelegate interface ParameterGroupDelegate<out T> : ParameterGroup , ReadOnlyProperty < CliktCommand , T> Functions \u00b6 Name Summary cooccurring Make this group a co-occurring group. fun <T : OptionGroup > T.cooccurring(): CoOccurringOptionGroup <T, T?> default If none of the options in a mutuallyExclusiveOptions group are given on the command line, us value for the group. fun <T : Any > MutuallyExclusiveOptions <T, T?>.default(value: T): MutuallyExclusiveOptions <T, T> defaultByName If a groupChoice or groupSwitch option is not called on the command line, use the value of the group with a switch or choice name . fun <T : OptionGroup > ChoiceGroup <T, T?>.defaultByName(name: String ): ChoiceGroup <T, T> groupChoice Convert the option to an option group based on a fixed set of values. fun <T : OptionGroup > RawOption .groupChoice(choices: Map < String , T>): ChoiceGroup <T, T?> fun <T : OptionGroup > RawOption .groupChoice(vararg choices: Pair < String , T>): ChoiceGroup <T, T?> groupSwitch Convert the option into a set of flags that each map to an option group. fun <T : OptionGroup > RawOption .groupSwitch(choices: Map < String , T>): ChoiceGroup <T, T?> fun <T : OptionGroup > RawOption .groupSwitch(vararg choices: Pair < String , T>): ChoiceGroup <T, T?> help Set the name and help for this option. fun <OptT : Any , OutT> MutuallyExclusiveOptions <OptT, OutT>.help(name: String , help: String ): MutuallyExclusiveOptions <OptT, OutT> mutuallyExclusiveOptions Declare a set of two or more mutually exclusive options. fun <T : Any > ParameterHolder .mutuallyExclusiveOptions(option1: OptionDelegate <T?>, option2: OptionDelegate <T?>, vararg options: OptionDelegate <T?>, name: String ? = null, help: String ? = null): MutuallyExclusiveOptions <T, T?> provideDelegate operator fun <T : OptionGroup > T.provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , T> required If a groupChoice or groupSwitch option is not called on the command line, throw a MissingOption exception. fun <T : OptionGroup > ChoiceGroup <T, T?>.required(): ChoiceGroup <T, T> Make a mutuallyExclusiveOptions group required. If none of the options in the group are given, a UsageError is thrown. fun <T : Any > MutuallyExclusiveOptions <T, T?>.required(): MutuallyExclusiveOptions <T, T> single If more than one of the group\u2019s options are given on the command line, throw a MutuallyExclusiveGroupException fun <T : Any > MutuallyExclusiveOptions <T, T?>.single(): MutuallyExclusiveOptions <T, T?>","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/#package-comgithubajaltcliktparametersgroups","text":"","title":"Package com.github.ajalt.clikt.parameters.groups"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/#types","text":"Name Summary ChoiceGroup class ChoiceGroup<GroupT : OptionGroup , OutT> : ParameterGroupDelegate <OutT> CoOccurringOptionGroup class CoOccurringOptionGroup<GroupT : OptionGroup , OutT> : ParameterGroupDelegate <OutT> CoOccurringOptionGroupTransform typealias CoOccurringOptionGroupTransform<GroupT, OutT> = (occurred: Boolean ?, group: GroupT, context: Context ) -> OutT MutuallyExclusiveOptions class MutuallyExclusiveOptions<OptT : Any , OutT> : ParameterGroupDelegate <OutT> MutuallyExclusiveOptionsTransform typealias MutuallyExclusiveOptionsTransform<OptT, OutT> = MutuallyExclusiveOptionTransformContext .( List <OptT>) -> OutT MutuallyExclusiveOptionTransformContext class MutuallyExclusiveOptionTransformContext OptionGroup A group of options that can be shown together in help output, or restricted to be cooccurring . open class OptionGroup : ParameterGroup , ParameterHolder ParameterGroup interface ParameterGroup ParameterGroupDelegate interface ParameterGroupDelegate<out T> : ParameterGroup , ReadOnlyProperty < CliktCommand , T>","title":"Types"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/#functions","text":"Name Summary cooccurring Make this group a co-occurring group. fun <T : OptionGroup > T.cooccurring(): CoOccurringOptionGroup <T, T?> default If none of the options in a mutuallyExclusiveOptions group are given on the command line, us value for the group. fun <T : Any > MutuallyExclusiveOptions <T, T?>.default(value: T): MutuallyExclusiveOptions <T, T> defaultByName If a groupChoice or groupSwitch option is not called on the command line, use the value of the group with a switch or choice name . fun <T : OptionGroup > ChoiceGroup <T, T?>.defaultByName(name: String ): ChoiceGroup <T, T> groupChoice Convert the option to an option group based on a fixed set of values. fun <T : OptionGroup > RawOption .groupChoice(choices: Map < String , T>): ChoiceGroup <T, T?> fun <T : OptionGroup > RawOption .groupChoice(vararg choices: Pair < String , T>): ChoiceGroup <T, T?> groupSwitch Convert the option into a set of flags that each map to an option group. fun <T : OptionGroup > RawOption .groupSwitch(choices: Map < String , T>): ChoiceGroup <T, T?> fun <T : OptionGroup > RawOption .groupSwitch(vararg choices: Pair < String , T>): ChoiceGroup <T, T?> help Set the name and help for this option. fun <OptT : Any , OutT> MutuallyExclusiveOptions <OptT, OutT>.help(name: String , help: String ): MutuallyExclusiveOptions <OptT, OutT> mutuallyExclusiveOptions Declare a set of two or more mutually exclusive options. fun <T : Any > ParameterHolder .mutuallyExclusiveOptions(option1: OptionDelegate <T?>, option2: OptionDelegate <T?>, vararg options: OptionDelegate <T?>, name: String ? = null, help: String ? = null): MutuallyExclusiveOptions <T, T?> provideDelegate operator fun <T : OptionGroup > T.provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , T> required If a groupChoice or groupSwitch option is not called on the command line, throw a MissingOption exception. fun <T : OptionGroup > ChoiceGroup <T, T?>.required(): ChoiceGroup <T, T> Make a mutuallyExclusiveOptions group required. If none of the options in the group are given, a UsageError is thrown. fun <T : Any > MutuallyExclusiveOptions <T, T?>.required(): MutuallyExclusiveOptions <T, T> single If more than one of the group\u2019s options are given on the command line, throw a MutuallyExclusiveGroupException fun <T : Any > MutuallyExclusiveOptions <T, T?>.single(): MutuallyExclusiveOptions <T, T?>","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group-transform/","text":"clikt / com.github.ajalt.clikt.parameters.groups / CoOccurringOptionGroupTransform CoOccurringOptionGroupTransform \u00b6 typealias CoOccurringOptionGroupTransform = (occurred: Boolean ?, group: GroupT, context: Context ) -> OutT","title":" co occurring option group transform"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group-transform/#cooccurringoptiongrouptransform","text":"typealias CoOccurringOptionGroupTransform = (occurred: Boolean ?, group: GroupT, context: Context ) -> OutT","title":"CoOccurringOptionGroupTransform"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options-transform/","text":"clikt / com.github.ajalt.clikt.parameters.groups / MutuallyExclusiveOptionsTransform MutuallyExclusiveOptionsTransform \u00b6 typealias MutuallyExclusiveOptionsTransform = MutuallyExclusiveOptionTransformContext .( List ) -> OutT","title":" mutually exclusive options transform"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options-transform/#mutuallyexclusiveoptionstransform","text":"typealias MutuallyExclusiveOptionsTransform = MutuallyExclusiveOptionTransformContext .( List ) -> OutT","title":"MutuallyExclusiveOptionsTransform"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/cooccurring/","text":"clikt / com.github.ajalt.clikt.parameters.groups / cooccurring cooccurring \u00b6 fun OptionGroup > T.cooccurring(): CoOccurringOptionGroup Make this group a co-occurring group. The group becomes nullable. At least one option in the group must be required . Of none of the options in the group are given on the command line, the group is null and none of the required constraints are enforced. If any option in the group is given, all required options in the group must be given as well.","title":"Cooccurring"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/cooccurring/#cooccurring","text":"fun OptionGroup > T.cooccurring(): CoOccurringOptionGroup Make this group a co-occurring group. The group becomes nullable. At least one option in the group must be required . Of none of the options in the group are given on the command line, the group is null and none of the required constraints are enforced. If any option in the group is given, all required options in the group must be given as well.","title":"cooccurring"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/default-by-name/","text":"clikt / com.github.ajalt.clikt.parameters.groups / defaultByName defaultByName \u00b6 fun OptionGroup > ChoiceGroup .defaultByName(name: String ): ChoiceGroup If a groupChoice or groupSwitch option is not called on the command line, use the value of the group with a switch or choice name . Example: \u00b6 option().groupChoice(\u201cfoo\u201d to FooOptionGroup(), \u201cbar\u201d to BarOptionGroup()).defaultByName(\u201cfoo\u201d) option().groupSwitch(\u201c\u2013foo\u201d to FooOptionGroup(), \u201c\u2013bar\u201d to BarOptionGroup()).defaultByName(\u201c\u2013bar\u201d) Exceptions \u00b6 IllegalArgumentException - if name is not one of the option\u2019s choice/switch names.","title":"Default by name"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/default-by-name/#defaultbyname","text":"fun OptionGroup > ChoiceGroup .defaultByName(name: String ): ChoiceGroup If a groupChoice or groupSwitch option is not called on the command line, use the value of the group with a switch or choice name .","title":"defaultByName"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/default-by-name/#example","text":"option().groupChoice(\u201cfoo\u201d to FooOptionGroup(), \u201cbar\u201d to BarOptionGroup()).defaultByName(\u201cfoo\u201d) option().groupSwitch(\u201c\u2013foo\u201d to FooOptionGroup(), \u201c\u2013bar\u201d to BarOptionGroup()).defaultByName(\u201c\u2013bar\u201d)","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/default-by-name/#exceptions","text":"IllegalArgumentException - if name is not one of the option\u2019s choice/switch names.","title":"Exceptions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/default/","text":"clikt / com.github.ajalt.clikt.parameters.groups / default default \u00b6 fun Any > MutuallyExclusiveOptions .default(value: T): MutuallyExclusiveOptions If none of the options in a mutuallyExclusiveOptions group are given on the command line, us value for the group.","title":"Default"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/default/#default","text":"fun Any > MutuallyExclusiveOptions .default(value: T): MutuallyExclusiveOptions If none of the options in a mutuallyExclusiveOptions group are given on the command line, us value for the group.","title":"default"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/group-choice/","text":"clikt / com.github.ajalt.clikt.parameters.groups / groupChoice groupChoice \u00b6 fun OptionGroup > RawOption .groupChoice(choices: Map < String , T>): ChoiceGroup Convert the option to an option group based on a fixed set of values. Example: \u00b6 option().groupChoice(mapOf(\u201cfoo\u201d to FooOptionGroup(), \u201cbar\u201d to BarOptionGroup())) See Also com.github.ajalt.clikt.parameters.types.choice fun OptionGroup > RawOption .groupChoice(vararg choices: Pair < String , T>): ChoiceGroup Convert the option to an option group based on a fixed set of values. Example: \u00b6 option().groupChoice(\u201cfoo\u201d to FooOptionGroup(), \u201cbar\u201d to BarOptionGroup()) See Also com.github.ajalt.clikt.parameters.types.choice","title":"Group choice"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/group-choice/#groupchoice","text":"fun OptionGroup > RawOption .groupChoice(choices: Map < String , T>): ChoiceGroup Convert the option to an option group based on a fixed set of values.","title":"groupChoice"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/group-choice/#example","text":"option().groupChoice(mapOf(\u201cfoo\u201d to FooOptionGroup(), \u201cbar\u201d to BarOptionGroup())) See Also com.github.ajalt.clikt.parameters.types.choice fun OptionGroup > RawOption .groupChoice(vararg choices: Pair < String , T>): ChoiceGroup Convert the option to an option group based on a fixed set of values.","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/group-choice/#example_1","text":"option().groupChoice(\u201cfoo\u201d to FooOptionGroup(), \u201cbar\u201d to BarOptionGroup()) See Also com.github.ajalt.clikt.parameters.types.choice","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/group-switch/","text":"clikt / com.github.ajalt.clikt.parameters.groups / groupSwitch groupSwitch \u00b6 fun OptionGroup > RawOption .groupSwitch(choices: Map < String , T>): ChoiceGroup Convert the option into a set of flags that each map to an option group. Example: \u00b6 option().groupSwitch(mapOf(\u201c\u2013foo\u201d to FooOptionGroup(), \u201c\u2013bar\u201d to BarOptionGroup())) fun OptionGroup > RawOption .groupSwitch(vararg choices: Pair < String , T>): ChoiceGroup Convert the option into a set of flags that each map to an option group. Example: \u00b6 option().groupSwitch(\u201c\u2013foo\u201d to FooOptionGroup(), \u201c\u2013bar\u201d to BarOptionGroup())","title":"Group switch"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/group-switch/#groupswitch","text":"fun OptionGroup > RawOption .groupSwitch(choices: Map < String , T>): ChoiceGroup Convert the option into a set of flags that each map to an option group.","title":"groupSwitch"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/group-switch/#example","text":"option().groupSwitch(mapOf(\u201c\u2013foo\u201d to FooOptionGroup(), \u201c\u2013bar\u201d to BarOptionGroup())) fun OptionGroup > RawOption .groupSwitch(vararg choices: Pair < String , T>): ChoiceGroup Convert the option into a set of flags that each map to an option group.","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/group-switch/#example_1","text":"option().groupSwitch(\u201c\u2013foo\u201d to FooOptionGroup(), \u201c\u2013bar\u201d to BarOptionGroup())","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/help/","text":"clikt / com.github.ajalt.clikt.parameters.groups / help help \u00b6 fun Any , OutT> MutuallyExclusiveOptions .help(name: String , help: String ): MutuallyExclusiveOptions Set the name and help for this option. Although you would normally pass the name and help strings as arguments to mutuallyExclusiveOptions , this function can be more convenient for long help strings. Parameters \u00b6 name - The name of the group. help - A help message to display for this group.","title":"Help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/help/#help","text":"fun Any , OutT> MutuallyExclusiveOptions .help(name: String , help: String ): MutuallyExclusiveOptions Set the name and help for this option. Although you would normally pass the name and help strings as arguments to mutuallyExclusiveOptions , this function can be more convenient for long help strings.","title":"help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/help/#parameters","text":"name - The name of the group. help - A help message to display for this group.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/mutually-exclusive-options/","text":"clikt / com.github.ajalt.clikt.parameters.groups / mutuallyExclusiveOptions mutuallyExclusiveOptions \u00b6 fun Any > ParameterHolder .mutuallyExclusiveOptions(option1: OptionDelegate , option2: OptionDelegate , vararg options: OptionDelegate , name: String ? = null, help: String ? = null): MutuallyExclusiveOptions Declare a set of two or more mutually exclusive options. If none of the options are given on the command line, the value of this delegate will be null. If one option is given, the value will be that option\u2019s value. If more than one option is given, the value of the last one is used. All options in the group must have a name specified. All options must be nullable (they cannot use flag , required etc.). If you want flags, you should use switch instead. Example: \u00b6 val fruits: Int? by mutuallyExclusiveOptions( option(\u201c\u2013apples\u201d).int(), option(\u201c\u2013oranges\u201d).int() ) Parameters \u00b6 name - If given, the options in this group will be grouped together under this value in the help output help - If given, this text will be added in help output to the group. If name is null, this value is not used. See Also com.github.ajalt.clikt.parameters.options.switch com.github.ajalt.clikt.parameters.types.choice","title":"Mutually exclusive options"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/mutually-exclusive-options/#mutuallyexclusiveoptions","text":"fun Any > ParameterHolder .mutuallyExclusiveOptions(option1: OptionDelegate , option2: OptionDelegate , vararg options: OptionDelegate , name: String ? = null, help: String ? = null): MutuallyExclusiveOptions Declare a set of two or more mutually exclusive options. If none of the options are given on the command line, the value of this delegate will be null. If one option is given, the value will be that option\u2019s value. If more than one option is given, the value of the last one is used. All options in the group must have a name specified. All options must be nullable (they cannot use flag , required etc.). If you want flags, you should use switch instead.","title":"mutuallyExclusiveOptions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/mutually-exclusive-options/#example","text":"val fruits: Int? by mutuallyExclusiveOptions( option(\u201c\u2013apples\u201d).int(), option(\u201c\u2013oranges\u201d).int() )","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/mutually-exclusive-options/#parameters","text":"name - If given, the options in this group will be grouped together under this value in the help output help - If given, this text will be added in help output to the group. If name is null, this value is not used. See Also com.github.ajalt.clikt.parameters.options.switch com.github.ajalt.clikt.parameters.types.choice","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/provide-delegate/","text":"clikt / com.github.ajalt.clikt.parameters.groups / provideDelegate provideDelegate \u00b6 operator fun OptionGroup > T.provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , T>","title":"Provide delegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/provide-delegate/#providedelegate","text":"operator fun OptionGroup > T.provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , T>","title":"provideDelegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/required/","text":"clikt / com.github.ajalt.clikt.parameters.groups / required required \u00b6 fun OptionGroup > ChoiceGroup .required(): ChoiceGroup If a groupChoice or groupSwitch option is not called on the command line, throw a MissingOption exception. Example: \u00b6 option().groupChoice(\u201cfoo\u201d to FooOptionGroup(), \u201cbar\u201d to BarOptionGroup()).required() fun Any > MutuallyExclusiveOptions .required(): MutuallyExclusiveOptions Make a mutuallyExclusiveOptions group required. If none of the options in the group are given, a UsageError is thrown.","title":"Required"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/required/#required","text":"fun OptionGroup > ChoiceGroup .required(): ChoiceGroup If a groupChoice or groupSwitch option is not called on the command line, throw a MissingOption exception.","title":"required"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/required/#example","text":"option().groupChoice(\u201cfoo\u201d to FooOptionGroup(), \u201cbar\u201d to BarOptionGroup()).required() fun Any > MutuallyExclusiveOptions .required(): MutuallyExclusiveOptions Make a mutuallyExclusiveOptions group required. If none of the options in the group are given, a UsageError is thrown.","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/single/","text":"clikt / com.github.ajalt.clikt.parameters.groups / single single \u00b6 fun Any > MutuallyExclusiveOptions .single(): MutuallyExclusiveOptions If more than one of the group\u2019s options are given on the command line, throw a MutuallyExclusiveGroupException","title":"Single"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/single/#single","text":"fun Any > MutuallyExclusiveOptions .single(): MutuallyExclusiveOptions If more than one of the group\u2019s options are given on the command line, throw a MutuallyExclusiveGroupException","title":"single"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ChoiceGroup ChoiceGroup \u00b6 class ChoiceGroup OptionGroup , OutT> : ParameterGroupDelegate Properties \u00b6 Name Summary groupHelp A help message to display for this group. val groupHelp: String ? groupName The name of the group, or null if parameters in the group should not be separated from other parameters in the help output. val groupName: String ? Functions \u00b6 Name Summary finalize Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. fun finalize(context: Context , invocationsByOption: Map < Option , List <Invocation>>): Unit getValue fun getValue(thisRef: CliktCommand , property: KProperty <*>): OutT postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values. fun postValidate(context: Context ): Unit provideDelegate Implementations must call CliktCommand.registerOptionGroup fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , OutT> Extension Functions \u00b6 Name Summary defaultByName If a groupChoice or groupSwitch option is not called on the command line, use the value of the group with a switch or choice name . fun <T : OptionGroup > ChoiceGroup <T, T?>.defaultByName(name: String ): ChoiceGroup <T, T> required If a groupChoice or groupSwitch option is not called on the command line, throw a MissingOption exception. fun <T : OptionGroup > ChoiceGroup <T, T?>.required(): ChoiceGroup <T, T>","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/#choicegroup","text":"class ChoiceGroup OptionGroup , OutT> : ParameterGroupDelegate","title":"ChoiceGroup"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/#properties","text":"Name Summary groupHelp A help message to display for this group. val groupHelp: String ? groupName The name of the group, or null if parameters in the group should not be separated from other parameters in the help output. val groupName: String ?","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/#functions","text":"Name Summary finalize Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. fun finalize(context: Context , invocationsByOption: Map < Option , List <Invocation>>): Unit getValue fun getValue(thisRef: CliktCommand , property: KProperty <*>): OutT postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values. fun postValidate(context: Context ): Unit provideDelegate Implementations must call CliktCommand.registerOptionGroup fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , OutT>","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/#extension-functions","text":"Name Summary defaultByName If a groupChoice or groupSwitch option is not called on the command line, use the value of the group with a switch or choice name . fun <T : OptionGroup > ChoiceGroup <T, T?>.defaultByName(name: String ): ChoiceGroup <T, T> required If a groupChoice or groupSwitch option is not called on the command line, throw a MissingOption exception. fun <T : OptionGroup > ChoiceGroup <T, T?>.required(): ChoiceGroup <T, T>","title":"Extension Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/finalize/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ChoiceGroup / finalize finalize \u00b6 fun finalize(context: Context , invocationsByOption: Map < Option , List >): Unit Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. Parameters \u00b6 context - The context for this parse invocationsByOption - The invocations of options in this group.","title":"Finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/finalize/#finalize","text":"fun finalize(context: Context , invocationsByOption: Map < Option , List >): Unit Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints.","title":"finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/finalize/#parameters","text":"context - The context for this parse invocationsByOption - The invocations of options in this group.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/get-value/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ChoiceGroup / getValue getValue \u00b6 fun getValue(thisRef: CliktCommand , property: KProperty <*>): OutT","title":"Get value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/get-value/#getvalue","text":"fun getValue(thisRef: CliktCommand , property: KProperty <*>): OutT","title":"getValue"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/group-help/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ChoiceGroup / groupHelp groupHelp \u00b6 val groupHelp: String ? A help message to display for this group. If groupName is null, the help formatter will ignore this value.","title":"Group help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/group-help/#grouphelp","text":"val groupHelp: String ? A help message to display for this group. If groupName is null, the help formatter will ignore this value.","title":"groupHelp"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/group-name/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ChoiceGroup / groupName groupName \u00b6 val groupName: String ? The name of the group, or null if parameters in the group should not be separated from other parameters in the help output.","title":"Group name"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/group-name/#groupname","text":"val groupName: String ? The name of the group, or null if parameters in the group should not be separated from other parameters in the help output.","title":"groupName"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/post-validate/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ChoiceGroup / postValidate postValidate \u00b6 fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values.","title":"Post validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/post-validate/#postvalidate","text":"fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values.","title":"postValidate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/provide-delegate/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ChoiceGroup / provideDelegate provideDelegate \u00b6 fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , OutT> Implementations must call CliktCommand.registerOptionGroup","title":"Provide delegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/provide-delegate/#providedelegate","text":"fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , OutT> Implementations must call CliktCommand.registerOptionGroup","title":"provideDelegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/","text":"clikt / com.github.ajalt.clikt.parameters.groups / CoOccurringOptionGroup CoOccurringOptionGroup \u00b6 class CoOccurringOptionGroup OptionGroup , OutT> : ParameterGroupDelegate Properties \u00b6 Name Summary groupHelp A help message to display for this group. val groupHelp: String ? groupName The name of the group, or null if parameters in the group should not be separated from other parameters in the help output. val groupName: String ? Functions \u00b6 Name Summary copy fun <T> copy(transform: CoOccurringOptionGroupTransform <GroupT, T>): CoOccurringOptionGroup <GroupT, T> finalize Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. fun finalize(context: Context , invocationsByOption: Map < Option , List <Invocation>>): Unit getValue fun getValue(thisRef: CliktCommand , property: KProperty <*>): OutT postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values. fun postValidate(context: Context ): Unit provideDelegate Implementations must call CliktCommand.registerOptionGroup fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , OutT>","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/#cooccurringoptiongroup","text":"class CoOccurringOptionGroup OptionGroup , OutT> : ParameterGroupDelegate","title":"CoOccurringOptionGroup"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/#properties","text":"Name Summary groupHelp A help message to display for this group. val groupHelp: String ? groupName The name of the group, or null if parameters in the group should not be separated from other parameters in the help output. val groupName: String ?","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/#functions","text":"Name Summary copy fun <T> copy(transform: CoOccurringOptionGroupTransform <GroupT, T>): CoOccurringOptionGroup <GroupT, T> finalize Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. fun finalize(context: Context , invocationsByOption: Map < Option , List <Invocation>>): Unit getValue fun getValue(thisRef: CliktCommand , property: KProperty <*>): OutT postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values. fun postValidate(context: Context ): Unit provideDelegate Implementations must call CliktCommand.registerOptionGroup fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , OutT>","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/copy/","text":"clikt / com.github.ajalt.clikt.parameters.groups / CoOccurringOptionGroup / copy copy \u00b6 fun copy(transform: CoOccurringOptionGroupTransform ): CoOccurringOptionGroup","title":"Copy"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/copy/#copy","text":"fun copy(transform: CoOccurringOptionGroupTransform ): CoOccurringOptionGroup","title":"copy"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/finalize/","text":"clikt / com.github.ajalt.clikt.parameters.groups / CoOccurringOptionGroup / finalize finalize \u00b6 fun finalize(context: Context , invocationsByOption: Map < Option , List >): Unit Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. Parameters \u00b6 context - The context for this parse invocationsByOption - The invocations of options in this group.","title":"Finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/finalize/#finalize","text":"fun finalize(context: Context , invocationsByOption: Map < Option , List >): Unit Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints.","title":"finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/finalize/#parameters","text":"context - The context for this parse invocationsByOption - The invocations of options in this group.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/get-value/","text":"clikt / com.github.ajalt.clikt.parameters.groups / CoOccurringOptionGroup / getValue getValue \u00b6 fun getValue(thisRef: CliktCommand , property: KProperty <*>): OutT","title":"Get value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/get-value/#getvalue","text":"fun getValue(thisRef: CliktCommand , property: KProperty <*>): OutT","title":"getValue"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/group-help/","text":"clikt / com.github.ajalt.clikt.parameters.groups / CoOccurringOptionGroup / groupHelp groupHelp \u00b6 val groupHelp: String ? A help message to display for this group. If groupName is null, the help formatter will ignore this value.","title":"Group help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/group-help/#grouphelp","text":"val groupHelp: String ? A help message to display for this group. If groupName is null, the help formatter will ignore this value.","title":"groupHelp"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/group-name/","text":"clikt / com.github.ajalt.clikt.parameters.groups / CoOccurringOptionGroup / groupName groupName \u00b6 val groupName: String ? The name of the group, or null if parameters in the group should not be separated from other parameters in the help output.","title":"Group name"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/group-name/#groupname","text":"val groupName: String ? The name of the group, or null if parameters in the group should not be separated from other parameters in the help output.","title":"groupName"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/post-validate/","text":"clikt / com.github.ajalt.clikt.parameters.groups / CoOccurringOptionGroup / postValidate postValidate \u00b6 fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values.","title":"Post validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/post-validate/#postvalidate","text":"fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values.","title":"postValidate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/provide-delegate/","text":"clikt / com.github.ajalt.clikt.parameters.groups / CoOccurringOptionGroup / provideDelegate provideDelegate \u00b6 fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , OutT> Implementations must call CliktCommand.registerOptionGroup","title":"Provide delegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/provide-delegate/#providedelegate","text":"fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , OutT> Implementations must call CliktCommand.registerOptionGroup","title":"provideDelegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-option-transform-context/","text":"clikt / com.github.ajalt.clikt.parameters.groups / MutuallyExclusiveOptionTransformContext MutuallyExclusiveOptionTransformContext \u00b6 class MutuallyExclusiveOptionTransformContext Constructors \u00b6 Name Summary <init> MutuallyExclusiveOptionTransformContext(context: Context ) Properties \u00b6 Name Summary context val context: Context","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-option-transform-context/#mutuallyexclusiveoptiontransformcontext","text":"class MutuallyExclusiveOptionTransformContext","title":"MutuallyExclusiveOptionTransformContext"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-option-transform-context/#constructors","text":"Name Summary <init> MutuallyExclusiveOptionTransformContext(context: Context )","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-option-transform-context/#properties","text":"Name Summary context val context: Context","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-option-transform-context/-init-/","text":"clikt / com.github.ajalt.clikt.parameters.groups / MutuallyExclusiveOptionTransformContext / <init> <init> \u00b6 MutuallyExclusiveOptionTransformContext(context: Context )","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-option-transform-context/-init-/#init","text":"MutuallyExclusiveOptionTransformContext(context: Context )","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-option-transform-context/context/","text":"clikt / com.github.ajalt.clikt.parameters.groups / MutuallyExclusiveOptionTransformContext / context context \u00b6 val context: Context","title":"Context"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-option-transform-context/context/#context","text":"val context: Context","title":"context"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/","text":"clikt / com.github.ajalt.clikt.parameters.groups / MutuallyExclusiveOptions MutuallyExclusiveOptions \u00b6 class MutuallyExclusiveOptions Any , OutT> : ParameterGroupDelegate Properties \u00b6 Name Summary groupHelp A help message to display for this group. val groupHelp: String ? groupName The name of the group, or null if parameters in the group should not be separated from other parameters in the help output. val groupName: String ? Functions \u00b6 Name Summary copy fun <T> copy(transformAll: MutuallyExclusiveOptionsTransform <OptT, T>): MutuallyExclusiveOptions <OptT, T> finalize Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. fun finalize(context: Context , invocationsByOption: Map < Option , List <Invocation>>): Unit getValue fun getValue(thisRef: CliktCommand , property: KProperty <*>): OutT postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values. fun postValidate(context: Context ): Unit provideDelegate Implementations must call CliktCommand.registerOptionGroup operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , OutT> Extension Functions \u00b6 Name Summary default If none of the options in a mutuallyExclusiveOptions group are given on the command line, us value for the group. fun <T : Any > MutuallyExclusiveOptions <T, T?>.default(value: T): MutuallyExclusiveOptions <T, T> help Set the name and help for this option. fun <OptT : Any , OutT> MutuallyExclusiveOptions <OptT, OutT>.help(name: String , help: String ): MutuallyExclusiveOptions <OptT, OutT> required Make a mutuallyExclusiveOptions group required. If none of the options in the group are given, a UsageError is thrown. fun <T : Any > MutuallyExclusiveOptions <T, T?>.required(): MutuallyExclusiveOptions <T, T> single If more than one of the group\u2019s options are given on the command line, throw a MutuallyExclusiveGroupException fun <T : Any > MutuallyExclusiveOptions <T, T?>.single(): MutuallyExclusiveOptions <T, T?>","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/#mutuallyexclusiveoptions","text":"class MutuallyExclusiveOptions Any , OutT> : ParameterGroupDelegate","title":"MutuallyExclusiveOptions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/#properties","text":"Name Summary groupHelp A help message to display for this group. val groupHelp: String ? groupName The name of the group, or null if parameters in the group should not be separated from other parameters in the help output. val groupName: String ?","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/#functions","text":"Name Summary copy fun <T> copy(transformAll: MutuallyExclusiveOptionsTransform <OptT, T>): MutuallyExclusiveOptions <OptT, T> finalize Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. fun finalize(context: Context , invocationsByOption: Map < Option , List <Invocation>>): Unit getValue fun getValue(thisRef: CliktCommand , property: KProperty <*>): OutT postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values. fun postValidate(context: Context ): Unit provideDelegate Implementations must call CliktCommand.registerOptionGroup operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , OutT>","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/#extension-functions","text":"Name Summary default If none of the options in a mutuallyExclusiveOptions group are given on the command line, us value for the group. fun <T : Any > MutuallyExclusiveOptions <T, T?>.default(value: T): MutuallyExclusiveOptions <T, T> help Set the name and help for this option. fun <OptT : Any , OutT> MutuallyExclusiveOptions <OptT, OutT>.help(name: String , help: String ): MutuallyExclusiveOptions <OptT, OutT> required Make a mutuallyExclusiveOptions group required. If none of the options in the group are given, a UsageError is thrown. fun <T : Any > MutuallyExclusiveOptions <T, T?>.required(): MutuallyExclusiveOptions <T, T> single If more than one of the group\u2019s options are given on the command line, throw a MutuallyExclusiveGroupException fun <T : Any > MutuallyExclusiveOptions <T, T?>.single(): MutuallyExclusiveOptions <T, T?>","title":"Extension Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/copy/","text":"clikt / com.github.ajalt.clikt.parameters.groups / MutuallyExclusiveOptions / copy copy \u00b6 fun copy(transformAll: MutuallyExclusiveOptionsTransform ): MutuallyExclusiveOptions","title":"Copy"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/copy/#copy","text":"fun copy(transformAll: MutuallyExclusiveOptionsTransform ): MutuallyExclusiveOptions","title":"copy"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/finalize/","text":"clikt / com.github.ajalt.clikt.parameters.groups / MutuallyExclusiveOptions / finalize finalize \u00b6 fun finalize(context: Context , invocationsByOption: Map < Option , List >): Unit Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. Parameters \u00b6 context - The context for this parse invocationsByOption - The invocations of options in this group.","title":"Finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/finalize/#finalize","text":"fun finalize(context: Context , invocationsByOption: Map < Option , List >): Unit Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints.","title":"finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/finalize/#parameters","text":"context - The context for this parse invocationsByOption - The invocations of options in this group.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/get-value/","text":"clikt / com.github.ajalt.clikt.parameters.groups / MutuallyExclusiveOptions / getValue getValue \u00b6 fun getValue(thisRef: CliktCommand , property: KProperty <*>): OutT","title":"Get value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/get-value/#getvalue","text":"fun getValue(thisRef: CliktCommand , property: KProperty <*>): OutT","title":"getValue"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/group-help/","text":"clikt / com.github.ajalt.clikt.parameters.groups / MutuallyExclusiveOptions / groupHelp groupHelp \u00b6 val groupHelp: String ? A help message to display for this group. If groupName is null, the help formatter will ignore this value.","title":"Group help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/group-help/#grouphelp","text":"val groupHelp: String ? A help message to display for this group. If groupName is null, the help formatter will ignore this value.","title":"groupHelp"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/group-name/","text":"clikt / com.github.ajalt.clikt.parameters.groups / MutuallyExclusiveOptions / groupName groupName \u00b6 val groupName: String ? The name of the group, or null if parameters in the group should not be separated from other parameters in the help output.","title":"Group name"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/group-name/#groupname","text":"val groupName: String ? The name of the group, or null if parameters in the group should not be separated from other parameters in the help output.","title":"groupName"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/post-validate/","text":"clikt / com.github.ajalt.clikt.parameters.groups / MutuallyExclusiveOptions / postValidate postValidate \u00b6 fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values.","title":"Post validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/post-validate/#postvalidate","text":"fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values.","title":"postValidate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/provide-delegate/","text":"clikt / com.github.ajalt.clikt.parameters.groups / MutuallyExclusiveOptions / provideDelegate provideDelegate \u00b6 operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , OutT> Implementations must call CliktCommand.registerOptionGroup","title":"Provide delegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/provide-delegate/#providedelegate","text":"operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , OutT> Implementations must call CliktCommand.registerOptionGroup","title":"provideDelegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/","text":"clikt / com.github.ajalt.clikt.parameters.groups / OptionGroup OptionGroup \u00b6 open class OptionGroup : ParameterGroup , ParameterHolder A group of options that can be shown together in help output, or restricted to be cooccurring . Declare a subclass with option delegate properties, then use an instance of your subclass is a delegate property in your command with provideDelegate . Example: \u00b6 class UserOptions : OptionGroup(name = \u201cUser Options\u201d, help = \u201cOptions controlling the user\u201d) { val name by option() val age by option().int() } class Tool : CliktCommand() { val userOptions by UserOptions() } Constructors \u00b6 Name Summary <init> A group of options that can be shown together in help output, or restricted to be cooccurring . OptionGroup(name: String ? = null, help: String ? = null) Properties \u00b6 Name Summary groupHelp A help message to display for this group. open val groupHelp: String ? groupName The name of the group, or null if parameters in the group should not be separated from other parameters in the help output. open val groupName: String ? Functions \u00b6 Name Summary finalize Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. open fun finalize(context: Context , invocationsByOption: Map < Option , List <Invocation>>): Unit postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values. open fun postValidate(context: Context ): Unit registerOption Register an option with this command or group. open fun registerOption(option: GroupableOption ): Unit Extension Functions \u00b6 Name Summary cooccurring Make this group a co-occurring group. fun <T : OptionGroup > T.cooccurring(): CoOccurringOptionGroup <T, T?> mutuallyExclusiveOptions Declare a set of two or more mutually exclusive options. fun <T : Any > ParameterHolder .mutuallyExclusiveOptions(option1: OptionDelegate <T?>, option2: OptionDelegate <T?>, vararg options: OptionDelegate <T?>, name: String ? = null, help: String ? = null): MutuallyExclusiveOptions <T, T?> option Create a property delegate option. fun ParameterHolder .option(vararg names: String , help: String = \"\", metavar: String ? = null, hidden: Boolean = false, envvar: String ? = null, helpTags: Map < String , String > = emptyMap(), completionCandidates: CompletionCandidates ? = null, valueSourceKey: String ? = null): RawOption provideDelegate operator fun <T : OptionGroup > T.provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , T>","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/#optiongroup","text":"open class OptionGroup : ParameterGroup , ParameterHolder A group of options that can be shown together in help output, or restricted to be cooccurring . Declare a subclass with option delegate properties, then use an instance of your subclass is a delegate property in your command with provideDelegate .","title":"OptionGroup"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/#example","text":"class UserOptions : OptionGroup(name = \u201cUser Options\u201d, help = \u201cOptions controlling the user\u201d) { val name by option() val age by option().int() } class Tool : CliktCommand() { val userOptions by UserOptions() }","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/#constructors","text":"Name Summary <init> A group of options that can be shown together in help output, or restricted to be cooccurring . OptionGroup(name: String ? = null, help: String ? = null)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/#properties","text":"Name Summary groupHelp A help message to display for this group. open val groupHelp: String ? groupName The name of the group, or null if parameters in the group should not be separated from other parameters in the help output. open val groupName: String ?","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/#functions","text":"Name Summary finalize Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. open fun finalize(context: Context , invocationsByOption: Map < Option , List <Invocation>>): Unit postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values. open fun postValidate(context: Context ): Unit registerOption Register an option with this command or group. open fun registerOption(option: GroupableOption ): Unit","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/#extension-functions","text":"Name Summary cooccurring Make this group a co-occurring group. fun <T : OptionGroup > T.cooccurring(): CoOccurringOptionGroup <T, T?> mutuallyExclusiveOptions Declare a set of two or more mutually exclusive options. fun <T : Any > ParameterHolder .mutuallyExclusiveOptions(option1: OptionDelegate <T?>, option2: OptionDelegate <T?>, vararg options: OptionDelegate <T?>, name: String ? = null, help: String ? = null): MutuallyExclusiveOptions <T, T?> option Create a property delegate option. fun ParameterHolder .option(vararg names: String , help: String = \"\", metavar: String ? = null, hidden: Boolean = false, envvar: String ? = null, helpTags: Map < String , String > = emptyMap(), completionCandidates: CompletionCandidates ? = null, valueSourceKey: String ? = null): RawOption provideDelegate operator fun <T : OptionGroup > T.provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , T>","title":"Extension Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/-init-/","text":"clikt / com.github.ajalt.clikt.parameters.groups / OptionGroup / <init> <init> \u00b6 OptionGroup(name: String ? = null, help: String ? = null) A group of options that can be shown together in help output, or restricted to be cooccurring . Declare a subclass with option delegate properties, then use an instance of your subclass is a delegate property in your command with provideDelegate . Example: \u00b6 class UserOptions : OptionGroup(name = \u201cUser Options\u201d, help = \u201cOptions controlling the user\u201d) { val name by option() val age by option().int() } class Tool : CliktCommand() { val userOptions by UserOptions() }","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/-init-/#init","text":"OptionGroup(name: String ? = null, help: String ? = null) A group of options that can be shown together in help output, or restricted to be cooccurring . Declare a subclass with option delegate properties, then use an instance of your subclass is a delegate property in your command with provideDelegate .","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/-init-/#example","text":"class UserOptions : OptionGroup(name = \u201cUser Options\u201d, help = \u201cOptions controlling the user\u201d) { val name by option() val age by option().int() } class Tool : CliktCommand() { val userOptions by UserOptions() }","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/finalize/","text":"clikt / com.github.ajalt.clikt.parameters.groups / OptionGroup / finalize finalize \u00b6 open fun finalize(context: Context , invocationsByOption: Map < Option , List >): Unit Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. Parameters \u00b6 context - The context for this parse invocationsByOption - The invocations of options in this group.","title":"Finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/finalize/#finalize","text":"open fun finalize(context: Context , invocationsByOption: Map < Option , List >): Unit Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints.","title":"finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/finalize/#parameters","text":"context - The context for this parse invocationsByOption - The invocations of options in this group.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/group-help/","text":"clikt / com.github.ajalt.clikt.parameters.groups / OptionGroup / groupHelp groupHelp \u00b6 open val groupHelp: String ? A help message to display for this group. If groupName is null, the help formatter will ignore this value.","title":"Group help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/group-help/#grouphelp","text":"open val groupHelp: String ? A help message to display for this group. If groupName is null, the help formatter will ignore this value.","title":"groupHelp"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/group-name/","text":"clikt / com.github.ajalt.clikt.parameters.groups / OptionGroup / groupName groupName \u00b6 open val groupName: String ? The name of the group, or null if parameters in the group should not be separated from other parameters in the help output.","title":"Group name"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/group-name/#groupname","text":"open val groupName: String ? The name of the group, or null if parameters in the group should not be separated from other parameters in the help output.","title":"groupName"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/post-validate/","text":"clikt / com.github.ajalt.clikt.parameters.groups / OptionGroup / postValidate postValidate \u00b6 open fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values.","title":"Post validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/post-validate/#postvalidate","text":"open fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values.","title":"postValidate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/register-option/","text":"clikt / com.github.ajalt.clikt.parameters.groups / OptionGroup / registerOption registerOption \u00b6 open fun registerOption(option: GroupableOption ): Unit Register an option with this command or group. This is called automatically for the built in options, but you need to call this if you want to add a custom option.","title":"Register option"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/register-option/#registeroption","text":"open fun registerOption(option: GroupableOption ): Unit Register an option with this command or group. This is called automatically for the built in options, but you need to call this if you want to add a custom option.","title":"registerOption"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ParameterGroup ParameterGroup \u00b6 interface ParameterGroup Properties \u00b6 Name Summary groupHelp A help message to display for this group. abstract val groupHelp: String ? groupName The name of the group, or null if parameters in the group should not be separated from other parameters in the help output. abstract val groupName: String ? Functions \u00b6 Name Summary finalize Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. abstract fun finalize(context: Context , invocationsByOption: Map < Option , List <Invocation>>): Unit parameterHelp open fun parameterHelp(context: Context ): Group? postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values. abstract fun postValidate(context: Context ): Unit Inheritors \u00b6 Name Summary OptionGroup A group of options that can be shown together in help output, or restricted to be cooccurring . open class OptionGroup : ParameterGroup , ParameterHolder ParameterGroupDelegate interface ParameterGroupDelegate<out T> : ParameterGroup , ReadOnlyProperty < CliktCommand , T>","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/#parametergroup","text":"interface ParameterGroup","title":"ParameterGroup"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/#properties","text":"Name Summary groupHelp A help message to display for this group. abstract val groupHelp: String ? groupName The name of the group, or null if parameters in the group should not be separated from other parameters in the help output. abstract val groupName: String ?","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/#functions","text":"Name Summary finalize Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. abstract fun finalize(context: Context , invocationsByOption: Map < Option , List <Invocation>>): Unit parameterHelp open fun parameterHelp(context: Context ): Group? postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values. abstract fun postValidate(context: Context ): Unit","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/#inheritors","text":"Name Summary OptionGroup A group of options that can be shown together in help output, or restricted to be cooccurring . open class OptionGroup : ParameterGroup , ParameterHolder ParameterGroupDelegate interface ParameterGroupDelegate<out T> : ParameterGroup , ReadOnlyProperty < CliktCommand , T>","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/finalize/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ParameterGroup / finalize finalize \u00b6 abstract fun finalize(context: Context , invocationsByOption: Map < Option , List >): Unit Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. Parameters \u00b6 context - The context for this parse invocationsByOption - The invocations of options in this group.","title":"Finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/finalize/#finalize","text":"abstract fun finalize(context: Context , invocationsByOption: Map < Option , List >): Unit Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints.","title":"finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/finalize/#parameters","text":"context - The context for this parse invocationsByOption - The invocations of options in this group.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/group-help/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ParameterGroup / groupHelp groupHelp \u00b6 abstract val groupHelp: String ? A help message to display for this group. If groupName is null, the help formatter will ignore this value.","title":"Group help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/group-help/#grouphelp","text":"abstract val groupHelp: String ? A help message to display for this group. If groupName is null, the help formatter will ignore this value.","title":"groupHelp"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/group-name/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ParameterGroup / groupName groupName \u00b6 abstract val groupName: String ? The name of the group, or null if parameters in the group should not be separated from other parameters in the help output.","title":"Group name"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/group-name/#groupname","text":"abstract val groupName: String ? The name of the group, or null if parameters in the group should not be separated from other parameters in the help output.","title":"groupName"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/parameter-help/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ParameterGroup / parameterHelp parameterHelp \u00b6 open fun parameterHelp(context: Context ): Group?","title":"Parameter help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/parameter-help/#parameterhelp","text":"open fun parameterHelp(context: Context ): Group?","title":"parameterHelp"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/post-validate/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ParameterGroup / postValidate postValidate \u00b6 abstract fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values.","title":"Post validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/post-validate/#postvalidate","text":"abstract fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values.","title":"postValidate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group-delegate/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ParameterGroupDelegate ParameterGroupDelegate \u00b6 interface ParameterGroupDelegate : ParameterGroup , ReadOnlyProperty < CliktCommand , T> Functions \u00b6 Name Summary provideDelegate Implementations must call CliktCommand.registerOptionGroup abstract operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , T> Inheritors \u00b6 Name Summary ChoiceGroup class ChoiceGroup<GroupT : OptionGroup , OutT> : ParameterGroupDelegate <OutT> CoOccurringOptionGroup class CoOccurringOptionGroup<GroupT : OptionGroup , OutT> : ParameterGroupDelegate <OutT> MutuallyExclusiveOptions class MutuallyExclusiveOptions<OptT : Any , OutT> : ParameterGroupDelegate <OutT>","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group-delegate/#parametergroupdelegate","text":"interface ParameterGroupDelegate : ParameterGroup , ReadOnlyProperty < CliktCommand , T>","title":"ParameterGroupDelegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group-delegate/#functions","text":"Name Summary provideDelegate Implementations must call CliktCommand.registerOptionGroup abstract operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , T>","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group-delegate/#inheritors","text":"Name Summary ChoiceGroup class ChoiceGroup<GroupT : OptionGroup , OutT> : ParameterGroupDelegate <OutT> CoOccurringOptionGroup class CoOccurringOptionGroup<GroupT : OptionGroup , OutT> : ParameterGroupDelegate <OutT> MutuallyExclusiveOptions class MutuallyExclusiveOptions<OptT : Any , OutT> : ParameterGroupDelegate <OutT>","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group-delegate/provide-delegate/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ParameterGroupDelegate / provideDelegate provideDelegate \u00b6 abstract operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , T> Implementations must call CliktCommand.registerOptionGroup","title":"Provide delegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group-delegate/provide-delegate/#providedelegate","text":"abstract operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , T> Implementations must call CliktCommand.registerOptionGroup","title":"provideDelegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/","text":"clikt / com.github.ajalt.clikt.parameters.options Package com.github.ajalt.clikt.parameters.options \u00b6 Types \u00b6 Name Summary ArgsTransformer A callback that transforms all the values for a call to the call type. typealias ArgsTransformer<ValueT, EachT> = OptionCallTransformContext .( List <ValueT>) -> EachT CallsTransformer A callback that transforms all of the calls to the final option type. typealias CallsTransformer<EachT, AllT> = OptionTransformContext .( List <EachT>) -> AllT EagerOption An Option with no values that is finalize d before other types of options. class EagerOption : StaticallyGroupedOption FlagConverter A block that converts a flag value from one type to another typealias FlagConverter<InT, OutT> = OptionTransformContext .(InT) -> OutT FlagOption An Option that has no values. class FlagOption<T> : OptionDelegate <T> NullableOption typealias NullableOption<EachT, ValueT> = OptionWithValues <EachT?, EachT, ValueT> Option An optional command line parameter that takes a fixed number of values. interface Option OptionCallTransformContext A receiver for options transformers. class OptionCallTransformContext : Option OptionDelegate An option that functions as a property delegate interface OptionDelegate<T> : GroupableOption , ReadOnlyProperty < ParameterHolder , T> OptionTransformContext A receiver for options transformers. class OptionTransformContext : Option OptionValidator A callback validates the final option type typealias OptionValidator<AllT> = OptionTransformContext .(AllT) -> Unit OptionWithValues An Option that takes one or more values. class OptionWithValues<AllT, EachT, ValueT> : OptionDelegate <AllT>, GroupableOption RawOption typealias RawOption = NullableOption < String , String > ValueConverter A block that converts a single value from one type to another typealias ValueConverter<InT, ValueT> = OptionCallTransformContext .(InT) -> ValueT ValueTransformer A callback that transforms a single value from a string to the value type typealias ValueTransformer<ValueT> = ValueConverter < String , ValueT> ValueWithDefault A container for a value that can have a default value and can be manually set data class ValueWithDefault<out T> Functions \u00b6 Name Summary associate Change this option to take multiple values, each split on a delimiter , and converted to a map. fun RawOption .associate(delimiter: String = \"=\"): OptionWithValues < Map < String , String >, Pair < String , String >, Pair < String , String >> check Check the final option value and raise an error if it\u2019s not valid. fun <AllT : Any , EachT, ValueT> OptionWithValues <AllT, EachT, ValueT>.check(message: String , validator: (AllT) -> Boolean ): OptionDelegate <AllT> Check the final argument value and raise an error if it\u2019s not valid. fun <AllT : Any , EachT, ValueT> OptionWithValues <AllT, EachT, ValueT>.check(lazyMessage: (AllT) -> String = { it.toString() }, validator: (AllT) -> Boolean ): OptionDelegate <AllT> convert Convert the option\u2019s value type. fun <InT : Any , ValueT : Any > NullableOption <InT, InT>.convert(metavar: String , completionCandidates: CompletionCandidates = completionCandidatesWithDefault.default, conversion: ValueConverter <InT, ValueT>): NullableOption <ValueT, ValueT> fun <InT : Any , ValueT : Any > NullableOption <InT, InT>.convert(metavar: Context .() -> String = { localization.defaultMetavar() }, completionCandidates: CompletionCandidates = completionCandidatesWithDefault.default, conversion: ValueConverter <InT, ValueT>): NullableOption <ValueT, ValueT> fun <InT, OutT> FlagOption <InT>.convert(conversion: FlagConverter <InT, OutT>): FlagOption <OutT> counted Turn an option into a flag that counts the number of times the option occurs on the command line. fun RawOption .counted(): FlagOption < Int > default Set a default value for an option. fun <T : Any > FlagOption <T?>.default(value: T, defaultForHelp: String = value.toString()): FlagOption <T> If the option is not called on the command line (and is not set in an envvar), use value for the option. fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.default(value: EachT, defaultForHelp: String = value.toString()): OptionWithValues <EachT, EachT, ValueT> defaultLazy If the option is not called on the command line (and is not set in an envvar), call the value and use its return value for the option. fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.defaultLazy(defaultForHelp: String = \"\", value: () -> EachT): OptionWithValues <EachT, EachT, ValueT> deprecated Mark this option as deprecated in the help output. fun <T> FlagOption <T>.deprecated(message: String ? = \"\", tagName: String ? = \"deprecated\", tagValue: String = \"\", error: Boolean = false): OptionDelegate <T> fun <AllT, EachT, ValueT> OptionWithValues <AllT, EachT, ValueT>.deprecated(message: String ? = \"\", tagName: String ? = \"deprecated\", tagValue: String = \"\", error: Boolean = false): OptionDelegate <AllT> eagerOption Add an eager option to this command that, when invoked, runs action . fun <T : CliktCommand > T.eagerOption(name: String , vararg additionalNames: String , help: String = \"\", hidden: Boolean = false, helpTags: Map < String , String > = emptyMap(), groupName: String ? = null, action: OptionTransformContext .() -> Unit ): T fun <T : CliktCommand > T.eagerOption(names: Collection < String >, help: String = \"\", hidden: Boolean = false, helpTags: Map < String , String > = emptyMap(), groupName: String ? = null, action: OptionTransformContext .() -> Unit ): T flag Turn an option into a boolean flag. fun RawOption .flag(vararg secondaryNames: String , default: Boolean = false, defaultForHelp: String = \"\"): FlagOption < Boolean > help Set the help for this option. fun <T> FlagOption <T>.help(help: String ): FlagOption <T> fun <AllT, EachT, ValueT> OptionWithValues <AllT, EachT, ValueT>.help(help: String ): OptionWithValues <AllT, EachT, ValueT> multiple Make the option return a list of calls; each item in the list is the value of one call. fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.multiple(default: List <EachT> = emptyList(), required: Boolean = false): OptionWithValues < List <EachT>, EachT, ValueT> option Create a property delegate option. fun ParameterHolder .option(vararg names: String , help: String = \"\", metavar: String ? = null, hidden: Boolean = false, envvar: String ? = null, helpTags: Map < String , String > = emptyMap(), completionCandidates: CompletionCandidates ? = null, valueSourceKey: String ? = null): RawOption pair Change this option to take two values, held in a Pair . fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.pair(): NullableOption < Pair <ValueT, ValueT>, ValueT> prompt If the option isn\u2019t given on the command line, prompt the user for manual input. fun <T : Any > NullableOption <T, T>.prompt(text: String ? = null, default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \"Repeat for confirmation: \", promptSuffix: String = \": \", showDefault: Boolean = true): OptionWithValues <T, T, T> required If the option is not called on the command line (and is not set in an envvar), throw a MissingOption . fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.required(): OptionWithValues <EachT, EachT, ValueT> split Change to option to take any number of values, separated by a regex . fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.split(regex: Regex ): OptionWithValues < List <ValueT>?, List <ValueT>, ValueT> Change to option to take any number of values, separated by a string delimiter . fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.split(delimiter: String ): OptionWithValues < List <ValueT>?, List <ValueT>, ValueT> splitPair Split this option\u2019s value into two with a delimiter . fun RawOption .splitPair(delimiter: String = \"=\"): NullableOption < Pair < String , String >, Pair < String , String >> switch Turn an option into a set of flags that each map to a value. fun <T : Any > RawOption .switch(choices: Map < String , T>): FlagOption <T?> fun <T : Any > RawOption .switch(vararg choices: Pair < String , T>): FlagOption <T?> toMap Convert this option\u2019s values from a list of pairs into a map with key-value pairs from the list. fun <A, B> OptionWithValues < List < Pair <A, B>>, Pair <A, B>, Pair <A, B>>.toMap(): OptionWithValues < Map <A, B>, Pair <A, B>, Pair <A, B>> transformAll Transform all calls to the option to the final option type. fun <AllT, EachT : Any , ValueT> NullableOption <EachT, ValueT>.transformAll(defaultForHelp: String ? = this.helpTags[HelpFormatter.Tags.DEFAULT], showAsRequired: Boolean = HelpFormatter.Tags.REQUIRED in this.helpTags, transform: CallsTransformer <EachT, AllT>): OptionWithValues <AllT, EachT, ValueT> transformValues Change the number of values that this option takes. fun <EachInT : Any , EachOutT : Any , ValueT> NullableOption <EachInT, ValueT>.transformValues(nvalues: Int , transform: ArgsTransformer <ValueT, EachOutT>): NullableOption <EachOutT, ValueT> triple Change this option to take three values, held in a Triple . fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.triple(): NullableOption < Triple <ValueT, ValueT, ValueT>, ValueT> unique Make the multiple option return a unique set of calls fun <EachT : Any , ValueT> OptionWithValues < List <EachT>, EachT, ValueT>.unique(): OptionWithValues < Set <EachT>, EachT, ValueT> validate Check the final option value and raise an error if it\u2019s not valid. fun <T : Any > FlagOption <T>.validate(validator: OptionValidator <T>): OptionDelegate <T> fun <AllT : Any , EachT, ValueT> OptionWithValues <AllT, EachT, ValueT>.validate(validator: OptionValidator <AllT>): OptionDelegate <AllT> versionOption Add an eager option to this command that, when invoked, prints a version message and exits. fun <T : CliktCommand > T.versionOption(version: String , help: String = \"Show the version and exit\", names: Set < String > = setOf(\"--version\"), message: ( String ) -> String = { \"$commandName version $it\" }): T withDefault Create a copy with a new default value fun <T> ValueWithDefault <T>.withDefault(default: T): ValueWithDefault <T> withExplicit Create a copy with a new explicit value fun <T> ValueWithDefault <T>.withExplicit(explicit: T): ValueWithDefault <T>","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/#package-comgithubajaltcliktparametersoptions","text":"","title":"Package com.github.ajalt.clikt.parameters.options"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/#types","text":"Name Summary ArgsTransformer A callback that transforms all the values for a call to the call type. typealias ArgsTransformer<ValueT, EachT> = OptionCallTransformContext .( List <ValueT>) -> EachT CallsTransformer A callback that transforms all of the calls to the final option type. typealias CallsTransformer<EachT, AllT> = OptionTransformContext .( List <EachT>) -> AllT EagerOption An Option with no values that is finalize d before other types of options. class EagerOption : StaticallyGroupedOption FlagConverter A block that converts a flag value from one type to another typealias FlagConverter<InT, OutT> = OptionTransformContext .(InT) -> OutT FlagOption An Option that has no values. class FlagOption<T> : OptionDelegate <T> NullableOption typealias NullableOption<EachT, ValueT> = OptionWithValues <EachT?, EachT, ValueT> Option An optional command line parameter that takes a fixed number of values. interface Option OptionCallTransformContext A receiver for options transformers. class OptionCallTransformContext : Option OptionDelegate An option that functions as a property delegate interface OptionDelegate<T> : GroupableOption , ReadOnlyProperty < ParameterHolder , T> OptionTransformContext A receiver for options transformers. class OptionTransformContext : Option OptionValidator A callback validates the final option type typealias OptionValidator<AllT> = OptionTransformContext .(AllT) -> Unit OptionWithValues An Option that takes one or more values. class OptionWithValues<AllT, EachT, ValueT> : OptionDelegate <AllT>, GroupableOption RawOption typealias RawOption = NullableOption < String , String > ValueConverter A block that converts a single value from one type to another typealias ValueConverter<InT, ValueT> = OptionCallTransformContext .(InT) -> ValueT ValueTransformer A callback that transforms a single value from a string to the value type typealias ValueTransformer<ValueT> = ValueConverter < String , ValueT> ValueWithDefault A container for a value that can have a default value and can be manually set data class ValueWithDefault<out T>","title":"Types"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/#functions","text":"Name Summary associate Change this option to take multiple values, each split on a delimiter , and converted to a map. fun RawOption .associate(delimiter: String = \"=\"): OptionWithValues < Map < String , String >, Pair < String , String >, Pair < String , String >> check Check the final option value and raise an error if it\u2019s not valid. fun <AllT : Any , EachT, ValueT> OptionWithValues <AllT, EachT, ValueT>.check(message: String , validator: (AllT) -> Boolean ): OptionDelegate <AllT> Check the final argument value and raise an error if it\u2019s not valid. fun <AllT : Any , EachT, ValueT> OptionWithValues <AllT, EachT, ValueT>.check(lazyMessage: (AllT) -> String = { it.toString() }, validator: (AllT) -> Boolean ): OptionDelegate <AllT> convert Convert the option\u2019s value type. fun <InT : Any , ValueT : Any > NullableOption <InT, InT>.convert(metavar: String , completionCandidates: CompletionCandidates = completionCandidatesWithDefault.default, conversion: ValueConverter <InT, ValueT>): NullableOption <ValueT, ValueT> fun <InT : Any , ValueT : Any > NullableOption <InT, InT>.convert(metavar: Context .() -> String = { localization.defaultMetavar() }, completionCandidates: CompletionCandidates = completionCandidatesWithDefault.default, conversion: ValueConverter <InT, ValueT>): NullableOption <ValueT, ValueT> fun <InT, OutT> FlagOption <InT>.convert(conversion: FlagConverter <InT, OutT>): FlagOption <OutT> counted Turn an option into a flag that counts the number of times the option occurs on the command line. fun RawOption .counted(): FlagOption < Int > default Set a default value for an option. fun <T : Any > FlagOption <T?>.default(value: T, defaultForHelp: String = value.toString()): FlagOption <T> If the option is not called on the command line (and is not set in an envvar), use value for the option. fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.default(value: EachT, defaultForHelp: String = value.toString()): OptionWithValues <EachT, EachT, ValueT> defaultLazy If the option is not called on the command line (and is not set in an envvar), call the value and use its return value for the option. fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.defaultLazy(defaultForHelp: String = \"\", value: () -> EachT): OptionWithValues <EachT, EachT, ValueT> deprecated Mark this option as deprecated in the help output. fun <T> FlagOption <T>.deprecated(message: String ? = \"\", tagName: String ? = \"deprecated\", tagValue: String = \"\", error: Boolean = false): OptionDelegate <T> fun <AllT, EachT, ValueT> OptionWithValues <AllT, EachT, ValueT>.deprecated(message: String ? = \"\", tagName: String ? = \"deprecated\", tagValue: String = \"\", error: Boolean = false): OptionDelegate <AllT> eagerOption Add an eager option to this command that, when invoked, runs action . fun <T : CliktCommand > T.eagerOption(name: String , vararg additionalNames: String , help: String = \"\", hidden: Boolean = false, helpTags: Map < String , String > = emptyMap(), groupName: String ? = null, action: OptionTransformContext .() -> Unit ): T fun <T : CliktCommand > T.eagerOption(names: Collection < String >, help: String = \"\", hidden: Boolean = false, helpTags: Map < String , String > = emptyMap(), groupName: String ? = null, action: OptionTransformContext .() -> Unit ): T flag Turn an option into a boolean flag. fun RawOption .flag(vararg secondaryNames: String , default: Boolean = false, defaultForHelp: String = \"\"): FlagOption < Boolean > help Set the help for this option. fun <T> FlagOption <T>.help(help: String ): FlagOption <T> fun <AllT, EachT, ValueT> OptionWithValues <AllT, EachT, ValueT>.help(help: String ): OptionWithValues <AllT, EachT, ValueT> multiple Make the option return a list of calls; each item in the list is the value of one call. fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.multiple(default: List <EachT> = emptyList(), required: Boolean = false): OptionWithValues < List <EachT>, EachT, ValueT> option Create a property delegate option. fun ParameterHolder .option(vararg names: String , help: String = \"\", metavar: String ? = null, hidden: Boolean = false, envvar: String ? = null, helpTags: Map < String , String > = emptyMap(), completionCandidates: CompletionCandidates ? = null, valueSourceKey: String ? = null): RawOption pair Change this option to take two values, held in a Pair . fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.pair(): NullableOption < Pair <ValueT, ValueT>, ValueT> prompt If the option isn\u2019t given on the command line, prompt the user for manual input. fun <T : Any > NullableOption <T, T>.prompt(text: String ? = null, default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \"Repeat for confirmation: \", promptSuffix: String = \": \", showDefault: Boolean = true): OptionWithValues <T, T, T> required If the option is not called on the command line (and is not set in an envvar), throw a MissingOption . fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.required(): OptionWithValues <EachT, EachT, ValueT> split Change to option to take any number of values, separated by a regex . fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.split(regex: Regex ): OptionWithValues < List <ValueT>?, List <ValueT>, ValueT> Change to option to take any number of values, separated by a string delimiter . fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.split(delimiter: String ): OptionWithValues < List <ValueT>?, List <ValueT>, ValueT> splitPair Split this option\u2019s value into two with a delimiter . fun RawOption .splitPair(delimiter: String = \"=\"): NullableOption < Pair < String , String >, Pair < String , String >> switch Turn an option into a set of flags that each map to a value. fun <T : Any > RawOption .switch(choices: Map < String , T>): FlagOption <T?> fun <T : Any > RawOption .switch(vararg choices: Pair < String , T>): FlagOption <T?> toMap Convert this option\u2019s values from a list of pairs into a map with key-value pairs from the list. fun <A, B> OptionWithValues < List < Pair <A, B>>, Pair <A, B>, Pair <A, B>>.toMap(): OptionWithValues < Map <A, B>, Pair <A, B>, Pair <A, B>> transformAll Transform all calls to the option to the final option type. fun <AllT, EachT : Any , ValueT> NullableOption <EachT, ValueT>.transformAll(defaultForHelp: String ? = this.helpTags[HelpFormatter.Tags.DEFAULT], showAsRequired: Boolean = HelpFormatter.Tags.REQUIRED in this.helpTags, transform: CallsTransformer <EachT, AllT>): OptionWithValues <AllT, EachT, ValueT> transformValues Change the number of values that this option takes. fun <EachInT : Any , EachOutT : Any , ValueT> NullableOption <EachInT, ValueT>.transformValues(nvalues: Int , transform: ArgsTransformer <ValueT, EachOutT>): NullableOption <EachOutT, ValueT> triple Change this option to take three values, held in a Triple . fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.triple(): NullableOption < Triple <ValueT, ValueT, ValueT>, ValueT> unique Make the multiple option return a unique set of calls fun <EachT : Any , ValueT> OptionWithValues < List <EachT>, EachT, ValueT>.unique(): OptionWithValues < Set <EachT>, EachT, ValueT> validate Check the final option value and raise an error if it\u2019s not valid. fun <T : Any > FlagOption <T>.validate(validator: OptionValidator <T>): OptionDelegate <T> fun <AllT : Any , EachT, ValueT> OptionWithValues <AllT, EachT, ValueT>.validate(validator: OptionValidator <AllT>): OptionDelegate <AllT> versionOption Add an eager option to this command that, when invoked, prints a version message and exits. fun <T : CliktCommand > T.versionOption(version: String , help: String = \"Show the version and exit\", names: Set < String > = setOf(\"--version\"), message: ( String ) -> String = { \"$commandName version $it\" }): T withDefault Create a copy with a new default value fun <T> ValueWithDefault <T>.withDefault(default: T): ValueWithDefault <T> withExplicit Create a copy with a new explicit value fun <T> ValueWithDefault <T>.withExplicit(explicit: T): ValueWithDefault <T>","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-args-transformer/","text":"clikt / com.github.ajalt.clikt.parameters.options / ArgsTransformer ArgsTransformer \u00b6 typealias ArgsTransformer = OptionCallTransformContext .( List ) -> EachT A callback that transforms all the values for a call to the call type. The input list will always have a size equal to nvalues","title":" args transformer"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-args-transformer/#argstransformer","text":"typealias ArgsTransformer = OptionCallTransformContext .( List ) -> EachT A callback that transforms all the values for a call to the call type. The input list will always have a size equal to nvalues","title":"ArgsTransformer"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-calls-transformer/","text":"clikt / com.github.ajalt.clikt.parameters.options / CallsTransformer CallsTransformer \u00b6 typealias CallsTransformer = OptionTransformContext .( List ) -> AllT A callback that transforms all of the calls to the final option type. The input list will have a size equal to the number of times the option appears on the command line.","title":" calls transformer"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-calls-transformer/#callstransformer","text":"typealias CallsTransformer = OptionTransformContext .( List ) -> AllT A callback that transforms all of the calls to the final option type. The input list will have a size equal to the number of times the option appears on the command line.","title":"CallsTransformer"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-converter/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagConverter FlagConverter \u00b6 typealias FlagConverter = OptionTransformContext .(InT) -> OutT A block that converts a flag value from one type to another","title":" flag converter"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-converter/#flagconverter","text":"typealias FlagConverter = OptionTransformContext .(InT) -> OutT A block that converts a flag value from one type to another","title":"FlagConverter"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-nullable-option/","text":"clikt / com.github.ajalt.clikt.parameters.options / NullableOption NullableOption \u00b6 typealias NullableOption = OptionWithValues","title":" nullable option"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-nullable-option/#nullableoption","text":"typealias NullableOption = OptionWithValues","title":"NullableOption"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-validator/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionValidator OptionValidator \u00b6 typealias OptionValidator = OptionTransformContext .(AllT) -> Unit A callback validates the final option type","title":" option validator"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-validator/#optionvalidator","text":"typealias OptionValidator = OptionTransformContext .(AllT) -> Unit A callback validates the final option type","title":"OptionValidator"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-raw-option/","text":"clikt / com.github.ajalt.clikt.parameters.options / RawOption RawOption \u00b6 typealias RawOption = NullableOption < String , String >","title":" raw option"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-raw-option/#rawoption","text":"typealias RawOption = NullableOption < String , String >","title":"RawOption"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-converter/","text":"clikt / com.github.ajalt.clikt.parameters.options / ValueConverter ValueConverter \u00b6 typealias ValueConverter = OptionCallTransformContext .(InT) -> ValueT A block that converts a single value from one type to another","title":" value converter"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-converter/#valueconverter","text":"typealias ValueConverter = OptionCallTransformContext .(InT) -> ValueT A block that converts a single value from one type to another","title":"ValueConverter"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-transformer/","text":"clikt / com.github.ajalt.clikt.parameters.options / ValueTransformer ValueTransformer \u00b6 typealias ValueTransformer = ValueConverter < String , ValueT> A callback that transforms a single value from a string to the value type","title":" value transformer"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-transformer/#valuetransformer","text":"typealias ValueTransformer = ValueConverter < String , ValueT> A callback that transforms a single value from a string to the value type","title":"ValueTransformer"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/associate/","text":"clikt / com.github.ajalt.clikt.parameters.options / associate associate \u00b6 fun RawOption .associate(delimiter: String = \u201c=\u201d): OptionWithValues < Map < String , String >, Pair < String , String >, Pair < String , String >> Change this option to take multiple values, each split on a delimiter , and converted to a map. This is shorthand for splitPair , multiple , and toMap .","title":"Associate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/associate/#associate","text":"fun RawOption .associate(delimiter: String = \u201c=\u201d): OptionWithValues < Map < String , String >, Pair < String , String >, Pair < String , String >> Change this option to take multiple values, each split on a delimiter , and converted to a map. This is shorthand for splitPair , multiple , and toMap .","title":"associate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/check/","text":"clikt / com.github.ajalt.clikt.parameters.options / check check \u00b6 inline fun Any , EachT, ValueT> OptionWithValues .check(message: String , crossinline validator: (AllT) -> Boolean ): OptionDelegate Check the final option value and raise an error if it\u2019s not valid. The validator is called with the final option type (the output of transformAll ), and should return false if the value is not valid. You can specify a message to include in the error output. You can use validate for more complex checks. Example: \u00b6 val opt by option().int().check(\u201cvalue must be even\u201d) { it % 2 == 0 } inline fun Any , EachT, ValueT> OptionWithValues .check(crossinline lazyMessage: (AllT) -> String = { it.toString() }, crossinline validator: (AllT) -> Boolean ): OptionDelegate Check the final argument value and raise an error if it\u2019s not valid. The validator is called with the final option type (the output of transformAll ), and should return false if the value is not valid. You can specify a lazyMessage the returns a message to include in the error output. You can use validate for more complex checks. Example: \u00b6 val opt by option().int().check(lazyMessage={\u201c$it is not even\u201d}) { it % 2 == 0 }","title":"Check"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/check/#check","text":"inline fun Any , EachT, ValueT> OptionWithValues .check(message: String , crossinline validator: (AllT) -> Boolean ): OptionDelegate Check the final option value and raise an error if it\u2019s not valid. The validator is called with the final option type (the output of transformAll ), and should return false if the value is not valid. You can specify a message to include in the error output. You can use validate for more complex checks.","title":"check"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/check/#example","text":"val opt by option().int().check(\u201cvalue must be even\u201d) { it % 2 == 0 } inline fun Any , EachT, ValueT> OptionWithValues .check(crossinline lazyMessage: (AllT) -> String = { it.toString() }, crossinline validator: (AllT) -> Boolean ): OptionDelegate Check the final argument value and raise an error if it\u2019s not valid. The validator is called with the final option type (the output of transformAll ), and should return false if the value is not valid. You can specify a lazyMessage the returns a message to include in the error output. You can use validate for more complex checks.","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/check/#example_1","text":"val opt by option().int().check(lazyMessage={\u201c$it is not even\u201d}) { it % 2 == 0 }","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/convert/","text":"clikt / com.github.ajalt.clikt.parameters.options / convert convert \u00b6 inline fun Any , ValueT : Any > NullableOption .convert(metavar: String , completionCandidates: CompletionCandidates = completionCandidatesWithDefault.default, crossinline conversion: ValueConverter ): NullableOption Convert the option\u2019s value type. The conversion is called once for each value in each invocation of the option. If any errors are thrown, they are caught and a BadParameterValue is thrown with the error message. You can call fail to throw a BadParameterValue manually. You can call convert more than once to wrap the result of the previous convert , but it cannot be called after transformAll (e.g. multiple ) or transformValues (e.g. pair ). Example \u00b6 val bd: BigDecimal? by option().convert { it.toBigDecimal() } val fileText: ByteArray? by option().file().convert { it.readBytes() } Parameters \u00b6 metavar - The metavar for the type. Overridden by a metavar passed to option . completionCandidates - candidates to use when completing this option in shell autocomplete, if no candidates are specified in option inline fun <InT : Any , ValueT : Any > NullableOption <InT, InT>.convert(noinline metavar: Context .() -> String = { localization.defaultMetavar() }, completionCandidates: CompletionCandidates = completionCandidatesWithDefault.default, crossinline conversion: ValueConverter <InT, ValueT>): NullableOption <ValueT, ValueT> Convert the option\u2019s value type. The conversion is called once for each value in each invocation of the option. If any errors are thrown, they are caught and a BadParameterValue is thrown with the error message. You can call fail to throw a BadParameterValue manually. You can call convert more than once to wrap the result of the previous convert , but it cannot be called after transformAll (e.g. multiple ) or transformValues (e.g. pair ). Example \u00b6 val bd: BigDecimal? by option().convert { it.toBigDecimal() } val fileText: ByteArray? by option().file().convert { it.readBytes() } Parameters \u00b6 metavar - A lambda returning the metavar for the type. The lambda has a Context receiver for access to localization. Overridden by a metavar passed to option . completionCandidates - candidates to use when completing this option in shell autocomplete, if no candidates are specified in option inline fun <InT, OutT> FlagOption <InT>.convert(crossinline conversion: FlagConverter <InT, OutT>): FlagOption <OutT> Convert the option\u2019s value type. The conversion is called once with the final value of the option. If any errors are thrown, they are caught and a BadParameterValue is thrown with the error message. You can call fail to throw a BadParameterValue manually. Example \u00b6 val loud by option().flag().convert { if (it) Volume.Loud else Volume.Soft }","title":"Convert"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/convert/#convert","text":"inline fun Any , ValueT : Any > NullableOption .convert(metavar: String , completionCandidates: CompletionCandidates = completionCandidatesWithDefault.default, crossinline conversion: ValueConverter ): NullableOption Convert the option\u2019s value type. The conversion is called once for each value in each invocation of the option. If any errors are thrown, they are caught and a BadParameterValue is thrown with the error message. You can call fail to throw a BadParameterValue manually. You can call convert more than once to wrap the result of the previous convert , but it cannot be called after transformAll (e.g. multiple ) or transformValues (e.g. pair ).","title":"convert"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/convert/#example","text":"val bd: BigDecimal? by option().convert { it.toBigDecimal() } val fileText: ByteArray? by option().file().convert { it.readBytes() }","title":"Example"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/convert/#parameters","text":"metavar - The metavar for the type. Overridden by a metavar passed to option . completionCandidates - candidates to use when completing this option in shell autocomplete, if no candidates are specified in option inline fun <InT : Any , ValueT : Any > NullableOption <InT, InT>.convert(noinline metavar: Context .() -> String = { localization.defaultMetavar() }, completionCandidates: CompletionCandidates = completionCandidatesWithDefault.default, crossinline conversion: ValueConverter <InT, ValueT>): NullableOption <ValueT, ValueT> Convert the option\u2019s value type. The conversion is called once for each value in each invocation of the option. If any errors are thrown, they are caught and a BadParameterValue is thrown with the error message. You can call fail to throw a BadParameterValue manually. You can call convert more than once to wrap the result of the previous convert , but it cannot be called after transformAll (e.g. multiple ) or transformValues (e.g. pair ).","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/convert/#example_1","text":"val bd: BigDecimal? by option().convert { it.toBigDecimal() } val fileText: ByteArray? by option().file().convert { it.readBytes() }","title":"Example"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/convert/#parameters_1","text":"metavar - A lambda returning the metavar for the type. The lambda has a Context receiver for access to localization. Overridden by a metavar passed to option . completionCandidates - candidates to use when completing this option in shell autocomplete, if no candidates are specified in option inline fun <InT, OutT> FlagOption <InT>.convert(crossinline conversion: FlagConverter <InT, OutT>): FlagOption <OutT> Convert the option\u2019s value type. The conversion is called once with the final value of the option. If any errors are thrown, they are caught and a BadParameterValue is thrown with the error message. You can call fail to throw a BadParameterValue manually.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/convert/#example_2","text":"val loud by option().flag().convert { if (it) Volume.Loud else Volume.Soft }","title":"Example"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/counted/","text":"clikt / com.github.ajalt.clikt.parameters.options / counted counted \u00b6 fun RawOption .counted(): FlagOption < Int > Turn an option into a flag that counts the number of times the option occurs on the command line.","title":"Counted"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/counted/#counted","text":"fun RawOption .counted(): FlagOption < Int > Turn an option into a flag that counts the number of times the option occurs on the command line.","title":"counted"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/default-lazy/","text":"clikt / com.github.ajalt.clikt.parameters.options / defaultLazy defaultLazy \u00b6 inline fun Any , ValueT> NullableOption .defaultLazy(defaultForHelp: String = \u201c\u201d, crossinline value: () -> EachT): OptionWithValues If the option is not called on the command line (and is not set in an envvar), call the value and use its return value for the option. This must be applied after all other transforms. If the option is given on the command line, value will not be called. You can customize how the default is shown to the user with defaultForHelp . The default value is an empty string, so if you have the help formatter configured to show values, you should set this value manually. Example: \u00b6 val opt: Pair by option().int().pair().defaultLazy { expensiveOperation() }","title":"Default lazy"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/default-lazy/#defaultlazy","text":"inline fun Any , ValueT> NullableOption .defaultLazy(defaultForHelp: String = \u201c\u201d, crossinline value: () -> EachT): OptionWithValues If the option is not called on the command line (and is not set in an envvar), call the value and use its return value for the option. This must be applied after all other transforms. If the option is given on the command line, value will not be called. You can customize how the default is shown to the user with defaultForHelp . The default value is an empty string, so if you have the help formatter configured to show values, you should set this value manually.","title":"defaultLazy"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/default-lazy/#example","text":"val opt: Pair by option().int().pair().defaultLazy { expensiveOperation() }","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/default/","text":"clikt / com.github.ajalt.clikt.parameters.options / default default \u00b6 fun Any > FlagOption .default(value: T, defaultForHelp: String = value.toString()): FlagOption Set a default value for an option. Parameters \u00b6 defaultForHelp - The help text for this option\u2019s default value if the help formatter is configured to show them. Use an empty string to suppress the \u201cdefault\u201d help text. fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.default(value: EachT, defaultForHelp: String = value.toString()): OptionWithValues <EachT, EachT, ValueT> If the option is not called on the command line (and is not set in an envvar), use value for the option. This must be applied after all other transforms. You can customize how the default is shown to the user with defaultForHelp . Example: \u00b6 val opt: Pair by option().int().pair().default(1 to 2)","title":"Default"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/default/#default","text":"fun Any > FlagOption .default(value: T, defaultForHelp: String = value.toString()): FlagOption Set a default value for an option.","title":"default"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/default/#parameters","text":"defaultForHelp - The help text for this option\u2019s default value if the help formatter is configured to show them. Use an empty string to suppress the \u201cdefault\u201d help text. fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.default(value: EachT, defaultForHelp: String = value.toString()): OptionWithValues <EachT, EachT, ValueT> If the option is not called on the command line (and is not set in an envvar), use value for the option. This must be applied after all other transforms. You can customize how the default is shown to the user with defaultForHelp .","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/default/#example","text":"val opt: Pair by option().int().pair().default(1 to 2)","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/deprecated/","text":"clikt / com.github.ajalt.clikt.parameters.options / deprecated deprecated \u00b6 fun FlagOption .deprecated(message: String ? = \u201c\u201d, tagName: String ? = \u201cdeprecated\u201d, tagValue: String = \u201c\u201d, error: Boolean = false): OptionDelegate Mark this option as deprecated in the help output. By default, a tag is added to the help message and a warning is printed if the option is used. This should be called after any validation. Parameters \u00b6 message - The message to show in the warning or error. If null, no warning is issued. tagName - The tag to add to the help message tagValue - An extra message to add to the tag error - If true, when the option is invoked, a CliktError is raised immediately instead of issuing a warning.fun OptionWithValues .deprecated(message: String ? = \u201c\u201d, tagName: String ? = \u201cdeprecated\u201d, tagValue: String = \u201c\u201d, error: Boolean = false): OptionDelegate Mark this option as deprecated in the help output. By default, a tag is added to the help message and a warning is printed if the option is used. This should be called after any conversion and validation. Example: \u00b6 val opt by option().int().validate { require(it % 2 == 0) { \u201cvalue must be even\u201d } } .deprecated(\u201cWARNING: \u2013opt is deprecated, use \u2013new-opt instead\u201d) Parameters \u00b6 message - The message to show in the warning or error. If null, no warning is issued. tagName - The tag to add to the help message tagValue - An extra message to add to the tag error - If true, when the option is invoked, a CliktError is raised immediately instead of issuing a warning.","title":"Deprecated"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/deprecated/#deprecated","text":"fun FlagOption .deprecated(message: String ? = \u201c\u201d, tagName: String ? = \u201cdeprecated\u201d, tagValue: String = \u201c\u201d, error: Boolean = false): OptionDelegate Mark this option as deprecated in the help output. By default, a tag is added to the help message and a warning is printed if the option is used. This should be called after any validation.","title":"deprecated"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/deprecated/#parameters","text":"message - The message to show in the warning or error. If null, no warning is issued. tagName - The tag to add to the help message tagValue - An extra message to add to the tag error - If true, when the option is invoked, a CliktError is raised immediately instead of issuing a warning.fun OptionWithValues .deprecated(message: String ? = \u201c\u201d, tagName: String ? = \u201cdeprecated\u201d, tagValue: String = \u201c\u201d, error: Boolean = false): OptionDelegate Mark this option as deprecated in the help output. By default, a tag is added to the help message and a warning is printed if the option is used. This should be called after any conversion and validation.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/deprecated/#example","text":"val opt by option().int().validate { require(it % 2 == 0) { \u201cvalue must be even\u201d } } .deprecated(\u201cWARNING: \u2013opt is deprecated, use \u2013new-opt instead\u201d)","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/deprecated/#parameters_1","text":"message - The message to show in the warning or error. If null, no warning is issued. tagName - The tag to add to the help message tagValue - An extra message to add to the tag error - If true, when the option is invoked, a CliktError is raised immediately instead of issuing a warning.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/eager-option/","text":"clikt / com.github.ajalt.clikt.parameters.options / eagerOption eagerOption \u00b6 fun CliktCommand > T.eagerOption(name: String , vararg additionalNames: String , help: String = \u201c\u201d, hidden: Boolean = false, helpTags: Map < String , String > = emptyMap(), groupName: String ? = null, action: OptionTransformContext .() -> Unit ): T Add an eager option to this command that, when invoked, runs action . Parameters \u00b6 name - The names that can be used to invoke this option. They must start with a punctuation character. help - The description of this option, usually a single line. hidden - Hide this option from help outputs. helpTags - Extra information about this option to pass to the help formatter groupName - All options with that share a group name will be grouped together in help output. action - This callback is called when the option is encountered on the command line. If you want to print a message and halt execution normally, you should throw a PrintMessage exception. If you want to exit normally without printing a message, you should throw Abort(error=false) . The callback is passed the current execution context as a parameter. fun <T : CliktCommand > T.eagerOption(names: Collection < String >, help: String = \"\", hidden: Boolean = false, helpTags: Map < String , String > = emptyMap(), groupName: String ? = null, action: OptionTransformContext .() -> Unit ): T Add an eager option to this command that, when invoked, runs action . Parameters \u00b6 names - The names that can be used to invoke this option. They must start with a punctuation character. help - The description of this option, usually a single line. hidden - Hide this option from help outputs. helpTags - Extra information about this option to pass to the help formatter groupName - All options with that share a group name will be grouped together in help output. action - This callback is called when the option is encountered on the command line. If you want to print a message and halt execution normally, you should throw a PrintMessage exception. If you want to exit normally without printing a message, you should throw Abort(error=false) . The callback is passed the current execution context as a parameter.","title":"Eager option"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/eager-option/#eageroption","text":"fun CliktCommand > T.eagerOption(name: String , vararg additionalNames: String , help: String = \u201c\u201d, hidden: Boolean = false, helpTags: Map < String , String > = emptyMap(), groupName: String ? = null, action: OptionTransformContext .() -> Unit ): T Add an eager option to this command that, when invoked, runs action .","title":"eagerOption"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/eager-option/#parameters","text":"name - The names that can be used to invoke this option. They must start with a punctuation character. help - The description of this option, usually a single line. hidden - Hide this option from help outputs. helpTags - Extra information about this option to pass to the help formatter groupName - All options with that share a group name will be grouped together in help output. action - This callback is called when the option is encountered on the command line. If you want to print a message and halt execution normally, you should throw a PrintMessage exception. If you want to exit normally without printing a message, you should throw Abort(error=false) . The callback is passed the current execution context as a parameter. fun <T : CliktCommand > T.eagerOption(names: Collection < String >, help: String = \"\", hidden: Boolean = false, helpTags: Map < String , String > = emptyMap(), groupName: String ? = null, action: OptionTransformContext .() -> Unit ): T Add an eager option to this command that, when invoked, runs action .","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/eager-option/#parameters_1","text":"names - The names that can be used to invoke this option. They must start with a punctuation character. help - The description of this option, usually a single line. hidden - Hide this option from help outputs. helpTags - Extra information about this option to pass to the help formatter groupName - All options with that share a group name will be grouped together in help output. action - This callback is called when the option is encountered on the command line. If you want to print a message and halt execution normally, you should throw a PrintMessage exception. If you want to exit normally without printing a message, you should throw Abort(error=false) . The callback is passed the current execution context as a parameter.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/flag/","text":"clikt / com.github.ajalt.clikt.parameters.options / flag flag \u00b6 fun RawOption .flag(vararg secondaryNames: String , default: Boolean = false, defaultForHelp: String = \u201c\u201d): FlagOption < Boolean > Turn an option into a boolean flag. Parameters \u00b6 secondaryNames - additional names for that option that cause the option value to be false. It\u2019s good practice to provide secondary names so that users can disable an option that was previously enabled. default - the value for this property if the option is not given on the command line. defaultForHelp - The help text for this option\u2019s default value if the help formatter is configured to show them. By default, an empty string is being used to suppress the \u201cdefault\u201d help text.","title":"Flag"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/flag/#flag","text":"fun RawOption .flag(vararg secondaryNames: String , default: Boolean = false, defaultForHelp: String = \u201c\u201d): FlagOption < Boolean > Turn an option into a boolean flag.","title":"flag"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/flag/#parameters","text":"secondaryNames - additional names for that option that cause the option value to be false. It\u2019s good practice to provide secondary names so that users can disable an option that was previously enabled. default - the value for this property if the option is not given on the command line. defaultForHelp - The help text for this option\u2019s default value if the help formatter is configured to show them. By default, an empty string is being used to suppress the \u201cdefault\u201d help text.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/help/","text":"clikt / com.github.ajalt.clikt.parameters.options / help help \u00b6 fun FlagOption .help(help: String ): FlagOption Set the help for this option. Although you would normally pass the help string as an argument to option , this function can be more convenient for long help strings. Example: \u00b6 val number by option() .flag() .help(\u201cThis option is a flag\u201d) fun OptionWithValues .help(help: String ): OptionWithValues Set the help for this option. Although you would normally pass the help string as an argument to option , this function can be more convenient for long help strings. Example: \u00b6 val number by option() .int() .help(\u201cThis is an option that takes a number\u201d)","title":"Help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/help/#help","text":"fun FlagOption .help(help: String ): FlagOption Set the help for this option. Although you would normally pass the help string as an argument to option , this function can be more convenient for long help strings.","title":"help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/help/#example","text":"val number by option() .flag() .help(\u201cThis option is a flag\u201d) fun OptionWithValues .help(help: String ): OptionWithValues Set the help for this option. Although you would normally pass the help string as an argument to option , this function can be more convenient for long help strings.","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/help/#example_1","text":"val number by option() .int() .help(\u201cThis is an option that takes a number\u201d)","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/multiple/","text":"clikt / com.github.ajalt.clikt.parameters.options / multiple multiple \u00b6 fun Any , ValueT> NullableOption .multiple(default: List = emptyList(), required: Boolean = false): OptionWithValues < List , EachT, ValueT> Make the option return a list of calls; each item in the list is the value of one call. If the option is never called, the list will be empty. This must be applied after all other transforms. Example: \u00b6 val opt: List > by option().int().pair().multiple() Parameters \u00b6 default - The value to use if the option is not supplied. Defaults to an empty list. required - If true, default is ignored and MissingOption will be thrown if no instances of the option are present on the command line.","title":"Multiple"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/multiple/#multiple","text":"fun Any , ValueT> NullableOption .multiple(default: List = emptyList(), required: Boolean = false): OptionWithValues < List , EachT, ValueT> Make the option return a list of calls; each item in the list is the value of one call. If the option is never called, the list will be empty. This must be applied after all other transforms.","title":"multiple"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/multiple/#example","text":"val opt: List > by option().int().pair().multiple()","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/multiple/#parameters","text":"default - The value to use if the option is not supplied. Defaults to an empty list. required - If true, default is ignored and MissingOption will be thrown if no instances of the option are present on the command line.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/option/","text":"clikt / com.github.ajalt.clikt.parameters.options / option option \u00b6 fun ParameterHolder .option(vararg names: String , help: String = \u201c\u201d, metavar: String ? = null, hidden: Boolean = false, envvar: String ? = null, helpTags: Map < String , String > = emptyMap(), completionCandidates: CompletionCandidates ? = null, valueSourceKey: String ? = null): RawOption Create a property delegate option. By default, the property will return null if the option does not appear on the command line. If the option is invoked multiple times, the value from the last invocation will be used The option can be modified with functions like int , pair , and multiple . Parameters \u00b6 names - The names that can be used to invoke this option. They must start with a punctuation character. If not given, a name is inferred from the property name. help - The description of this option, usually a single line. metavar - A name representing the values for this option that can be displayed to the user. Automatically inferred from the type. hidden - Hide this option from help outputs. envvar - The environment variable that will be used for the value if one is not given on the command line. helpTags - Extra information about this option to pass to the help formatter","title":"Option"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/option/#option","text":"fun ParameterHolder .option(vararg names: String , help: String = \u201c\u201d, metavar: String ? = null, hidden: Boolean = false, envvar: String ? = null, helpTags: Map < String , String > = emptyMap(), completionCandidates: CompletionCandidates ? = null, valueSourceKey: String ? = null): RawOption Create a property delegate option. By default, the property will return null if the option does not appear on the command line. If the option is invoked multiple times, the value from the last invocation will be used The option can be modified with functions like int , pair , and multiple .","title":"option"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/option/#parameters","text":"names - The names that can be used to invoke this option. They must start with a punctuation character. If not given, a name is inferred from the property name. help - The description of this option, usually a single line. metavar - A name representing the values for this option that can be displayed to the user. Automatically inferred from the type. hidden - Hide this option from help outputs. envvar - The environment variable that will be used for the value if one is not given on the command line. helpTags - Extra information about this option to pass to the help formatter","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/pair/","text":"clikt / com.github.ajalt.clikt.parameters.options / pair pair \u00b6 fun Any , ValueT> NullableOption .pair(): NullableOption < Pair , ValueT> Change this option to take two values, held in a Pair . This must be called after converting the value type, and before other transforms. Example: \u00b6 val opt: Pair ? by option().int().pair()","title":"Pair"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/pair/#pair","text":"fun Any , ValueT> NullableOption .pair(): NullableOption < Pair , ValueT> Change this option to take two values, held in a Pair . This must be called after converting the value type, and before other transforms.","title":"pair"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/pair/#example","text":"val opt: Pair ? by option().int().pair()","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/prompt/","text":"clikt / com.github.ajalt.clikt.parameters.options / prompt prompt \u00b6 fun Any > NullableOption .prompt(text: String ? = null, default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \u201cRepeat for confirmation: \u201c, promptSuffix: String = \u201c: \u201c, showDefault: Boolean = true): OptionWithValues If the option isn\u2019t given on the command line, prompt the user for manual input. Parameters \u00b6 text - The text to prompt the user with default - The default value to use if no input is given. If null, the prompt will be repeated until input is given. hideInput - If true, user input will not be shown on the screen. Useful for passwords and sensitive input. requireConfirmation - If true, the user will be required to enter the same value twice before it is accepted. confirmationPrompt - If requireConfirmation is true, this will be used to ask for input again. promptSuffix - Text to display directly after text . Defaults to \u201c: \u201c. showDefault - Show default to the user in the prompt.","title":"Prompt"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/prompt/#prompt","text":"fun Any > NullableOption .prompt(text: String ? = null, default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \u201cRepeat for confirmation: \u201c, promptSuffix: String = \u201c: \u201c, showDefault: Boolean = true): OptionWithValues If the option isn\u2019t given on the command line, prompt the user for manual input.","title":"prompt"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/prompt/#parameters","text":"text - The text to prompt the user with default - The default value to use if no input is given. If null, the prompt will be repeated until input is given. hideInput - If true, user input will not be shown on the screen. Useful for passwords and sensitive input. requireConfirmation - If true, the user will be required to enter the same value twice before it is accepted. confirmationPrompt - If requireConfirmation is true, this will be used to ask for input again. promptSuffix - Text to display directly after text . Defaults to \u201c: \u201c. showDefault - Show default to the user in the prompt.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/required/","text":"clikt / com.github.ajalt.clikt.parameters.options / required required \u00b6 fun Any , ValueT> NullableOption .required(): OptionWithValues If the option is not called on the command line (and is not set in an envvar), throw a MissingOption . This must be applied after all other transforms. Example: \u00b6 val opt: Pair by option().int().pair().required()","title":"Required"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/required/#required","text":"fun Any , ValueT> NullableOption .required(): OptionWithValues If the option is not called on the command line (and is not set in an envvar), throw a MissingOption . This must be applied after all other transforms.","title":"required"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/required/#example","text":"val opt: Pair by option().int().pair().required()","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/split-pair/","text":"clikt / com.github.ajalt.clikt.parameters.options / splitPair splitPair \u00b6 fun RawOption .splitPair(delimiter: String = \u201c=\u201d): NullableOption < Pair < String , String >, Pair < String , String >> Split this option\u2019s value into two with a delimiter . If the delimiter is not present in the value, the second part of the pair will be an empty string. You can use validate to reject these values. You cannot call convert before this function, but you can call it after. Example: \u00b6 val opt: option(\u201c-o\u201d).splitPair() Which can be called like this: ./program -o key=value","title":"Split pair"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/split-pair/#splitpair","text":"fun RawOption .splitPair(delimiter: String = \u201c=\u201d): NullableOption < Pair < String , String >, Pair < String , String >> Split this option\u2019s value into two with a delimiter . If the delimiter is not present in the value, the second part of the pair will be an empty string. You can use validate to reject these values. You cannot call convert before this function, but you can call it after.","title":"splitPair"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/split-pair/#example","text":"val opt: option(\u201c-o\u201d).splitPair() Which can be called like this: ./program -o key=value","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/split/","text":"clikt / com.github.ajalt.clikt.parameters.options / split split \u00b6 fun Any , ValueT> NullableOption .split(regex: Regex ): OptionWithValues < List ?, List , ValueT> Change to option to take any number of values, separated by a regex . This must be called after converting the value type, and before other transforms. Example: \u00b6 val opt: List ? by option().int().split(Regex(\u201c,\u201d)) Which can be called like this: ./program \u2013opt 1,2,3 fun Any , ValueT> NullableOption .split(delimiter: String ): OptionWithValues < List ?, List , ValueT> Change to option to take any number of values, separated by a string delimiter . This must be called after converting the value type, and before other transforms. Example: \u00b6 val opt: List ? by option().int().split(\u201c,\u201d) Which can be called like this: ./program \u2013opt 1,2,3","title":"Split"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/split/#split","text":"fun Any , ValueT> NullableOption .split(regex: Regex ): OptionWithValues < List ?, List , ValueT> Change to option to take any number of values, separated by a regex . This must be called after converting the value type, and before other transforms.","title":"split"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/split/#example","text":"val opt: List ? by option().int().split(Regex(\u201c,\u201d)) Which can be called like this: ./program \u2013opt 1,2,3 fun Any , ValueT> NullableOption .split(delimiter: String ): OptionWithValues < List ?, List , ValueT> Change to option to take any number of values, separated by a string delimiter . This must be called after converting the value type, and before other transforms.","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/split/#example_1","text":"val opt: List ? by option().int().split(\u201c,\u201d) Which can be called like this: ./program \u2013opt 1,2,3","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/switch/","text":"clikt / com.github.ajalt.clikt.parameters.options / switch switch \u00b6 fun Any > RawOption .switch(choices: Map < String , T>): FlagOption Turn an option into a set of flags that each map to a value. Example: \u00b6 option().switch(mapOf(\u201c\u2013foo\u201d to Foo(), \u201c\u2013bar\u201d to Bar())) fun Any > RawOption .switch(vararg choices: Pair < String , T>): FlagOption Turn an option into a set of flags that each map to a value. Example: \u00b6 option().switch(\u201c\u2013foo\u201d to Foo(), \u201c\u2013bar\u201d to Bar())","title":"Switch"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/switch/#switch","text":"fun Any > RawOption .switch(choices: Map < String , T>): FlagOption Turn an option into a set of flags that each map to a value.","title":"switch"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/switch/#example","text":"option().switch(mapOf(\u201c\u2013foo\u201d to Foo(), \u201c\u2013bar\u201d to Bar())) fun Any > RawOption .switch(vararg choices: Pair < String , T>): FlagOption Turn an option into a set of flags that each map to a value.","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/switch/#example_1","text":"option().switch(\u201c\u2013foo\u201d to Foo(), \u201c\u2013bar\u201d to Bar())","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/to-map/","text":"clikt / com.github.ajalt.clikt.parameters.options / toMap toMap \u00b6 fun OptionWithValues < List < Pair >, Pair , Pair >.toMap(): OptionWithValues < Map , Pair , Pair > Convert this option\u2019s values from a list of pairs into a map with key-value pairs from the list. If the same key appears more than once, the last one will be added to the map.","title":"To map"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/to-map/#tomap","text":"fun OptionWithValues < List < Pair >, Pair , Pair >.toMap(): OptionWithValues < Map , Pair , Pair > Convert this option\u2019s values from a list of pairs into a map with key-value pairs from the list. If the same key appears more than once, the last one will be added to the map.","title":"toMap"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/transform-all/","text":"clikt / com.github.ajalt.clikt.parameters.options / transformAll transformAll \u00b6 fun Any , ValueT> NullableOption .transformAll(defaultForHelp: String ? = this.helpTags[HelpFormatter.Tags.DEFAULT], showAsRequired: Boolean = HelpFormatter.Tags.REQUIRED in this.helpTags, transform: CallsTransformer ): OptionWithValues Transform all calls to the option to the final option type. The input is a list of calls, one for each time the option appears on the command line. The values in the list are the output of calls to transformValues . If the option does not appear from any source (command line or envvar), this will be called with an empty list. Used to implement functions like default and multiple . Example \u00b6 val entries by option().transformAll { it.joinToString() } Parameters \u00b6 defaultForHelp - The help text for this option\u2019s default value if the help formatter is configured to show them, or null if this option has no default or the default value should not be shown.This does not affect behavior outside of help formatting. showAsRequired - Tell the help formatter that this option should be marked as required. This does not affect behavior outside of help formatting.","title":"Transform all"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/transform-all/#transformall","text":"fun Any , ValueT> NullableOption .transformAll(defaultForHelp: String ? = this.helpTags[HelpFormatter.Tags.DEFAULT], showAsRequired: Boolean = HelpFormatter.Tags.REQUIRED in this.helpTags, transform: CallsTransformer ): OptionWithValues Transform all calls to the option to the final option type. The input is a list of calls, one for each time the option appears on the command line. The values in the list are the output of calls to transformValues . If the option does not appear from any source (command line or envvar), this will be called with an empty list. Used to implement functions like default and multiple .","title":"transformAll"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/transform-all/#example","text":"val entries by option().transformAll { it.joinToString() }","title":"Example"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/transform-all/#parameters","text":"defaultForHelp - The help text for this option\u2019s default value if the help formatter is configured to show them, or null if this option has no default or the default value should not be shown.This does not affect behavior outside of help formatting. showAsRequired - Tell the help formatter that this option should be marked as required. This does not affect behavior outside of help formatting.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/transform-values/","text":"clikt / com.github.ajalt.clikt.parameters.options / transformValues transformValues \u00b6 fun Any , EachOutT : Any , ValueT> NullableOption .transformValues(nvalues: Int , transform: ArgsTransformer ): NullableOption Change the number of values that this option takes. The input will be a list of size nvalues , with each item in the list being the output of a call to convert . nvalues must be 2 or greater, since options cannot take a variable number of values, and option has nvalues = 1 by default. If you want to change the type of an option with one value, use convert instead. Used to implement functions like pair and triple . This must be applied after value conversions and before transformAll . Example \u00b6 data class Square(val top: Int, val right: Int, val bottom: Int, val left: Int) val square by option().int().transformValues(4) { Square(it[0], it[1], it[2], it[3]) }","title":"Transform values"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/transform-values/#transformvalues","text":"fun Any , EachOutT : Any , ValueT> NullableOption .transformValues(nvalues: Int , transform: ArgsTransformer ): NullableOption Change the number of values that this option takes. The input will be a list of size nvalues , with each item in the list being the output of a call to convert . nvalues must be 2 or greater, since options cannot take a variable number of values, and option has nvalues = 1 by default. If you want to change the type of an option with one value, use convert instead. Used to implement functions like pair and triple . This must be applied after value conversions and before transformAll .","title":"transformValues"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/transform-values/#example","text":"data class Square(val top: Int, val right: Int, val bottom: Int, val left: Int) val square by option().int().transformValues(4) { Square(it[0], it[1], it[2], it[3]) }","title":"Example"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/triple/","text":"clikt / com.github.ajalt.clikt.parameters.options / triple triple \u00b6 fun Any , ValueT> NullableOption .triple(): NullableOption < Triple , ValueT> Change this option to take three values, held in a Triple . This must be called after converting the value type, and before other transforms. Example: \u00b6 val opt: Triple ? by option().int().triple()","title":"Triple"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/triple/#triple","text":"fun Any , ValueT> NullableOption .triple(): NullableOption < Triple , ValueT> Change this option to take three values, held in a Triple . This must be called after converting the value type, and before other transforms.","title":"triple"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/triple/#example","text":"val opt: Triple ? by option().int().triple()","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/unique/","text":"clikt / com.github.ajalt.clikt.parameters.options / unique unique \u00b6 fun Any , ValueT> OptionWithValues < List , EachT, ValueT>.unique(): OptionWithValues < Set , EachT, ValueT> Make the multiple option return a unique set of calls Example: \u00b6 val opt: Set by option().int().multiple().unique()","title":"Unique"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/unique/#unique","text":"fun Any , ValueT> OptionWithValues < List , EachT, ValueT>.unique(): OptionWithValues < Set , EachT, ValueT> Make the multiple option return a unique set of calls","title":"unique"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/unique/#example","text":"val opt: Set by option().int().multiple().unique()","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/validate/","text":"clikt / com.github.ajalt.clikt.parameters.options / validate validate \u00b6 fun Any > FlagOption .validate(validator: OptionValidator ): OptionDelegate Check the final option value and raise an error if it\u2019s not valid. The validator is called with the final option type (the output of transformAll ), and should call fail if the value is not valid. It is not called if the delegate value is null. fun Any , EachT, ValueT> OptionWithValues .validate(validator: OptionValidator ): OptionDelegate Check the final option value and raise an error if it\u2019s not valid. The validator is called with the final option type (the output of transformAll ), and should call fail if the value is not valid. Your validator can also call require to fail automatically if an expression is false, or message to show the user a warning message without aborting. Example: \u00b6 val opt by option().int().validate { require(it % 2 == 0) { \u201cvalue must be even\u201d } }","title":"Validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/validate/#validate","text":"fun Any > FlagOption .validate(validator: OptionValidator ): OptionDelegate Check the final option value and raise an error if it\u2019s not valid. The validator is called with the final option type (the output of transformAll ), and should call fail if the value is not valid. It is not called if the delegate value is null. fun Any , EachT, ValueT> OptionWithValues .validate(validator: OptionValidator ): OptionDelegate Check the final option value and raise an error if it\u2019s not valid. The validator is called with the final option type (the output of transformAll ), and should call fail if the value is not valid. Your validator can also call require to fail automatically if an expression is false, or message to show the user a warning message without aborting.","title":"validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/validate/#example","text":"val opt by option().int().validate { require(it % 2 == 0) { \u201cvalue must be even\u201d } }","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/version-option/","text":"clikt / com.github.ajalt.clikt.parameters.options / versionOption versionOption \u00b6 inline fun CliktCommand > T.versionOption(version: String , help: String = \u201cShow the version and exit\u201d, names: Set < String > = setOf(\u201c\u2013version\u201d), crossinline message: ( String ) -> String = { \u201c$commandName version $it\u201d }): T Add an eager option to this command that, when invoked, prints a version message and exits.","title":"Version option"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/version-option/#versionoption","text":"inline fun CliktCommand > T.versionOption(version: String , help: String = \u201cShow the version and exit\u201d, names: Set < String > = setOf(\u201c\u2013version\u201d), crossinline message: ( String ) -> String = { \u201c$commandName version $it\u201d }): T Add an eager option to this command that, when invoked, prints a version message and exits.","title":"versionOption"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/with-default/","text":"clikt / com.github.ajalt.clikt.parameters.options / withDefault withDefault \u00b6 fun ValueWithDefault .withDefault(default: T): ValueWithDefault Create a copy with a new default value","title":"With default"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/with-default/#withdefault","text":"fun ValueWithDefault .withDefault(default: T): ValueWithDefault Create a copy with a new default value","title":"withDefault"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/with-explicit/","text":"clikt / com.github.ajalt.clikt.parameters.options / withExplicit withExplicit \u00b6 fun ValueWithDefault .withExplicit(explicit: T): ValueWithDefault Create a copy with a new explicit value","title":"With explicit"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/with-explicit/#withexplicit","text":"fun ValueWithDefault .withExplicit(explicit: T): ValueWithDefault Create a copy with a new explicit value","title":"withExplicit"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/","text":"clikt / com.github.ajalt.clikt.parameters.options / EagerOption EagerOption \u00b6 class EagerOption : StaticallyGroupedOption An Option with no values that is finalize d before other types of options. Parameters \u00b6 callback - This callback is called when the option is encountered on the command line. If you want to print a message and halt execution normally, you should throw a PrintMessage exception. If you want to exit normally without printing a message, you should throw Abort(error=false) . The callback is passed the current execution context as a parameter. Constructors \u00b6 Name Summary <init> EagerOption(vararg names: String , nvalues: Int = 0, help: String = \"\", hidden: Boolean = false, helpTags: Map < String , String > = emptyMap(), groupName: String ? = null, callback: OptionTransformContext .() -> Unit ) An Option with no values that is finalize d before other types of options. EagerOption(names: Set < String >, nvalues: Int , optionHelp: String , hidden: Boolean , helpTags: Map < String , String >, groupName: String ?, callback: OptionTransformContext .() -> Unit ) Properties \u00b6 Name Summary groupName The name of the group, or null if this option should not be grouped in the help output. val groupName: String ? helpTags Extra information about this option to pass to the help formatter. val helpTags: Map < String , String > hidden If true, this option should not appear in help output. val hidden: Boolean names The names that can be used to invoke this option. They must start with a punctuation character. val names: Set < String > nvalues The number of values that must be given to this option. val nvalues: Int optionHelp The description of this option, usually a single line. val optionHelp: String parser The parser for this option\u2019s values. val parser: OptionParser secondaryNames Names that can be used for a secondary purpose, like disabling flag options. val secondaryNames: Set < String > valueSourceKey Optional explicit key to use when looking this option up from a ValueSource val valueSourceKey: String ? Functions \u00b6 Name Summary finalize Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. fun finalize(context: Context , invocations: List <Invocation>): Unit metavar A name representing the values for this option that can be displayed to the user. fun metavar(context: Context ): String ? postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value. fun postValidate(context: Context ): Unit","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/#eageroption","text":"class EagerOption : StaticallyGroupedOption An Option with no values that is finalize d before other types of options.","title":"EagerOption"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/#parameters","text":"callback - This callback is called when the option is encountered on the command line. If you want to print a message and halt execution normally, you should throw a PrintMessage exception. If you want to exit normally without printing a message, you should throw Abort(error=false) . The callback is passed the current execution context as a parameter.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/#constructors","text":"Name Summary <init> EagerOption(vararg names: String , nvalues: Int = 0, help: String = \"\", hidden: Boolean = false, helpTags: Map < String , String > = emptyMap(), groupName: String ? = null, callback: OptionTransformContext .() -> Unit ) An Option with no values that is finalize d before other types of options. EagerOption(names: Set < String >, nvalues: Int , optionHelp: String , hidden: Boolean , helpTags: Map < String , String >, groupName: String ?, callback: OptionTransformContext .() -> Unit )","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/#properties","text":"Name Summary groupName The name of the group, or null if this option should not be grouped in the help output. val groupName: String ? helpTags Extra information about this option to pass to the help formatter. val helpTags: Map < String , String > hidden If true, this option should not appear in help output. val hidden: Boolean names The names that can be used to invoke this option. They must start with a punctuation character. val names: Set < String > nvalues The number of values that must be given to this option. val nvalues: Int optionHelp The description of this option, usually a single line. val optionHelp: String parser The parser for this option\u2019s values. val parser: OptionParser secondaryNames Names that can be used for a secondary purpose, like disabling flag options. val secondaryNames: Set < String > valueSourceKey Optional explicit key to use when looking this option up from a ValueSource val valueSourceKey: String ?","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/#functions","text":"Name Summary finalize Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. fun finalize(context: Context , invocations: List <Invocation>): Unit metavar A name representing the values for this option that can be displayed to the user. fun metavar(context: Context ): String ? postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value. fun postValidate(context: Context ): Unit","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/-init-/","text":"clikt / com.github.ajalt.clikt.parameters.options / EagerOption / <init> <init> \u00b6 EagerOption(vararg names: String , nvalues: Int = 0, help: String = \u201c\u201d, hidden: Boolean = false, helpTags: Map < String , String > = emptyMap(), groupName: String ? = null, callback: OptionTransformContext .() -> Unit )EagerOption(names: Set < String >, nvalues: Int , optionHelp: String , hidden: Boolean , helpTags: Map < String , String >, groupName: String ?, callback: OptionTransformContext .() -> Unit ) An Option with no values that is finalize d before other types of options. Parameters \u00b6 callback - This callback is called when the option is encountered on the command line. If you want to print a message and halt execution normally, you should throw a PrintMessage exception. If you want to exit normally without printing a message, you should throw Abort(error=false) . The callback is passed the current execution context as a parameter.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/-init-/#init","text":"EagerOption(vararg names: String , nvalues: Int = 0, help: String = \u201c\u201d, hidden: Boolean = false, helpTags: Map < String , String > = emptyMap(), groupName: String ? = null, callback: OptionTransformContext .() -> Unit )EagerOption(names: Set < String >, nvalues: Int , optionHelp: String , hidden: Boolean , helpTags: Map < String , String >, groupName: String ?, callback: OptionTransformContext .() -> Unit ) An Option with no values that is finalize d before other types of options.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/-init-/#parameters","text":"callback - This callback is called when the option is encountered on the command line. If you want to print a message and halt execution normally, you should throw a PrintMessage exception. If you want to exit normally without printing a message, you should throw Abort(error=false) . The callback is passed the current execution context as a parameter.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/finalize/","text":"clikt / com.github.ajalt.clikt.parameters.options / EagerOption / finalize finalize \u00b6 fun finalize(context: Context , invocations: List ): Unit Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. You cannot refer to other parameter values during this call, since they might not have been finalized yet. Parameters \u00b6 context - The context for this parse invocations - A possibly empty list of invocations of this option.","title":"Finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/finalize/#finalize","text":"fun finalize(context: Context , invocations: List ): Unit Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. You cannot refer to other parameter values during this call, since they might not have been finalized yet.","title":"finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/finalize/#parameters","text":"context - The context for this parse invocations - A possibly empty list of invocations of this option.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/group-name/","text":"clikt / com.github.ajalt.clikt.parameters.options / EagerOption / groupName groupName \u00b6 val groupName: String ? The name of the group, or null if this option should not be grouped in the help output.","title":"Group name"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/group-name/#groupname","text":"val groupName: String ? The name of the group, or null if this option should not be grouped in the help output.","title":"groupName"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/help-tags/","text":"clikt / com.github.ajalt.clikt.parameters.options / EagerOption / helpTags helpTags \u00b6 val helpTags: Map < String , String > Extra information about this option to pass to the help formatter.","title":"Help tags"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/help-tags/#helptags","text":"val helpTags: Map < String , String > Extra information about this option to pass to the help formatter.","title":"helpTags"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/hidden/","text":"clikt / com.github.ajalt.clikt.parameters.options / EagerOption / hidden hidden \u00b6 val hidden: Boolean If true, this option should not appear in help output.","title":"Hidden"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/hidden/#hidden","text":"val hidden: Boolean If true, this option should not appear in help output.","title":"hidden"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/metavar/","text":"clikt / com.github.ajalt.clikt.parameters.options / EagerOption / metavar metavar \u00b6 fun metavar(context: Context ): String ? A name representing the values for this option that can be displayed to the user.","title":"Metavar"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/metavar/#metavar","text":"fun metavar(context: Context ): String ? A name representing the values for this option that can be displayed to the user.","title":"metavar"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/names/","text":"clikt / com.github.ajalt.clikt.parameters.options / EagerOption / names names \u00b6 val names: Set < String > The names that can be used to invoke this option. They must start with a punctuation character.","title":"Names"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/names/#names","text":"val names: Set < String > The names that can be used to invoke this option. They must start with a punctuation character.","title":"names"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/nvalues/","text":"clikt / com.github.ajalt.clikt.parameters.options / EagerOption / nvalues nvalues \u00b6 val nvalues: Int The number of values that must be given to this option.","title":"Nvalues"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/nvalues/#nvalues","text":"val nvalues: Int The number of values that must be given to this option.","title":"nvalues"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/option-help/","text":"clikt / com.github.ajalt.clikt.parameters.options / EagerOption / optionHelp optionHelp \u00b6 val optionHelp: String The description of this option, usually a single line.","title":"Option help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/option-help/#optionhelp","text":"val optionHelp: String The description of this option, usually a single line.","title":"optionHelp"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/parser/","text":"clikt / com.github.ajalt.clikt.parameters.options / EagerOption / parser parser \u00b6 val parser: OptionParser The parser for this option\u2019s values.","title":"Parser"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/parser/#parser","text":"val parser: OptionParser The parser for this option\u2019s values.","title":"parser"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/post-validate/","text":"clikt / com.github.ajalt.clikt.parameters.options / EagerOption / postValidate postValidate \u00b6 fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"Post validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/post-validate/#postvalidate","text":"fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"postValidate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/secondary-names/","text":"clikt / com.github.ajalt.clikt.parameters.options / EagerOption / secondaryNames secondaryNames \u00b6 val secondaryNames: Set < String > Names that can be used for a secondary purpose, like disabling flag options.","title":"Secondary names"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/secondary-names/#secondarynames","text":"val secondaryNames: Set < String > Names that can be used for a secondary purpose, like disabling flag options.","title":"secondaryNames"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/value-source-key/","text":"clikt / com.github.ajalt.clikt.parameters.options / EagerOption / valueSourceKey valueSourceKey \u00b6 val valueSourceKey: String ? Optional explicit key to use when looking this option up from a ValueSource","title":"Value source key"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/value-source-key/#valuesourcekey","text":"val valueSourceKey: String ? Optional explicit key to use when looking this option up from a ValueSource","title":"valueSourceKey"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption FlagOption \u00b6 class FlagOption : OptionDelegate An Option that has no values. Properties \u00b6 Name Summary envvar The name of the environment variable for this option. Overrides automatic names. val envvar: String ? groupName The name of the group, or null if this option should not be grouped in the help output. var groupName: String ? helpTags Extra information about this option to pass to the help formatter. val helpTags: Map < String , String > hidden If true, this option should not appear in help output. val hidden: Boolean names The names that can be used to invoke this option. They must start with a punctuation character. var names: Set < String > nvalues The number of values that must be given to this option. val nvalues: Int optionHelp The description of this option, usually a single line. val optionHelp: String parameterGroup The group that this option belongs to, or null. Set by the group. var parameterGroup: ParameterGroup ? parser The parser for this option\u2019s values. val parser: FlagOptionParser secondaryNames Names that can be used for a secondary purpose, like disabling flag options. val secondaryNames: Set < String > transformAll Called to transform all invocations of this option into the final option type. val transformAll: CallsTransformer < String , T> transformEnvvar Called to transform string values from envvars and value sources into the option type. val transformEnvvar: OptionTransformContext .( String ) -> T validator val validator: OptionValidator <T> value The value for this option. var value: T valueSourceKey Optional explicit key to use when looking this option up from a ValueSource val valueSourceKey: String ? Functions \u00b6 Name Summary copy Create a new option that is a copy of this one with different transforms. fun <T> copy(transformEnvvar: OptionTransformContext .( String ) -> T, transformAll: CallsTransformer < String , T>, validator: OptionValidator <T>, names: Set < String > = this.names, secondaryNames: Set < String > = this.secondaryNames, help: String = this.optionHelp, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, valueSourceKey: String ? = this.valueSourceKey, envvar: String ? = this.envvar): FlagOption <T> Create a new option that is a copy of this one with the same transforms. fun copy(validator: OptionValidator <T> = this.validator, names: Set < String > = this.names, secondaryNames: Set < String > = this.secondaryNames, help: String = this.optionHelp, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, valueSourceKey: String ? = this.valueSourceKey, envvar: String ? = this.envvar): FlagOption <T> finalize Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. fun finalize(context: Context , invocations: List <Invocation>): Unit metavar A name representing the values for this option that can be displayed to the user. fun metavar(context: Context ): String ? postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value. fun postValidate(context: Context ): Unit provideDelegate Implementations must call ParameterHolder.registerOption operator fun provideDelegate(thisRef: ParameterHolder , prop: KProperty <*>): ReadOnlyProperty < ParameterHolder , T> Extension Functions \u00b6 Name Summary convert Convert the option\u2019s value type. fun <InT, OutT> FlagOption <InT>.convert(conversion: FlagConverter <InT, OutT>): FlagOption <OutT> default Set a default value for an option. fun <T : Any > FlagOption <T?>.default(value: T, defaultForHelp: String = value.toString()): FlagOption <T> deprecated Mark this option as deprecated in the help output. fun <T> FlagOption <T>.deprecated(message: String ? = \"\", tagName: String ? = \"deprecated\", tagValue: String = \"\", error: Boolean = false): OptionDelegate <T> help Set the help for this option. fun <T> FlagOption <T>.help(help: String ): FlagOption <T> validate Check the final option value and raise an error if it\u2019s not valid. fun <T : Any > FlagOption <T>.validate(validator: OptionValidator <T>): OptionDelegate <T>","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/#flagoption","text":"class FlagOption : OptionDelegate An Option that has no values.","title":"FlagOption"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/#properties","text":"Name Summary envvar The name of the environment variable for this option. Overrides automatic names. val envvar: String ? groupName The name of the group, or null if this option should not be grouped in the help output. var groupName: String ? helpTags Extra information about this option to pass to the help formatter. val helpTags: Map < String , String > hidden If true, this option should not appear in help output. val hidden: Boolean names The names that can be used to invoke this option. They must start with a punctuation character. var names: Set < String > nvalues The number of values that must be given to this option. val nvalues: Int optionHelp The description of this option, usually a single line. val optionHelp: String parameterGroup The group that this option belongs to, or null. Set by the group. var parameterGroup: ParameterGroup ? parser The parser for this option\u2019s values. val parser: FlagOptionParser secondaryNames Names that can be used for a secondary purpose, like disabling flag options. val secondaryNames: Set < String > transformAll Called to transform all invocations of this option into the final option type. val transformAll: CallsTransformer < String , T> transformEnvvar Called to transform string values from envvars and value sources into the option type. val transformEnvvar: OptionTransformContext .( String ) -> T validator val validator: OptionValidator <T> value The value for this option. var value: T valueSourceKey Optional explicit key to use when looking this option up from a ValueSource val valueSourceKey: String ?","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/#functions","text":"Name Summary copy Create a new option that is a copy of this one with different transforms. fun <T> copy(transformEnvvar: OptionTransformContext .( String ) -> T, transformAll: CallsTransformer < String , T>, validator: OptionValidator <T>, names: Set < String > = this.names, secondaryNames: Set < String > = this.secondaryNames, help: String = this.optionHelp, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, valueSourceKey: String ? = this.valueSourceKey, envvar: String ? = this.envvar): FlagOption <T> Create a new option that is a copy of this one with the same transforms. fun copy(validator: OptionValidator <T> = this.validator, names: Set < String > = this.names, secondaryNames: Set < String > = this.secondaryNames, help: String = this.optionHelp, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, valueSourceKey: String ? = this.valueSourceKey, envvar: String ? = this.envvar): FlagOption <T> finalize Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. fun finalize(context: Context , invocations: List <Invocation>): Unit metavar A name representing the values for this option that can be displayed to the user. fun metavar(context: Context ): String ? postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value. fun postValidate(context: Context ): Unit provideDelegate Implementations must call ParameterHolder.registerOption operator fun provideDelegate(thisRef: ParameterHolder , prop: KProperty <*>): ReadOnlyProperty < ParameterHolder , T>","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/#extension-functions","text":"Name Summary convert Convert the option\u2019s value type. fun <InT, OutT> FlagOption <InT>.convert(conversion: FlagConverter <InT, OutT>): FlagOption <OutT> default Set a default value for an option. fun <T : Any > FlagOption <T?>.default(value: T, defaultForHelp: String = value.toString()): FlagOption <T> deprecated Mark this option as deprecated in the help output. fun <T> FlagOption <T>.deprecated(message: String ? = \"\", tagName: String ? = \"deprecated\", tagValue: String = \"\", error: Boolean = false): OptionDelegate <T> help Set the help for this option. fun <T> FlagOption <T>.help(help: String ): FlagOption <T> validate Check the final option value and raise an error if it\u2019s not valid. fun <T : Any > FlagOption <T>.validate(validator: OptionValidator <T>): OptionDelegate <T>","title":"Extension Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/copy/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / copy copy \u00b6 fun copy(transformEnvvar: OptionTransformContext .( String ) -> T, transformAll: CallsTransformer < String , T>, validator: OptionValidator , names: Set < String > = this.names, secondaryNames: Set < String > = this.secondaryNames, help: String = this.optionHelp, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, valueSourceKey: String ? = this.valueSourceKey, envvar: String ? = this.envvar): FlagOption Create a new option that is a copy of this one with different transforms. fun copy(validator: OptionValidator = this.validator, names: Set < String > = this.names, secondaryNames: Set < String > = this.secondaryNames, help: String = this.optionHelp, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, valueSourceKey: String ? = this.valueSourceKey, envvar: String ? = this.envvar): FlagOption Create a new option that is a copy of this one with the same transforms.","title":"Copy"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/copy/#copy","text":"fun copy(transformEnvvar: OptionTransformContext .( String ) -> T, transformAll: CallsTransformer < String , T>, validator: OptionValidator , names: Set < String > = this.names, secondaryNames: Set < String > = this.secondaryNames, help: String = this.optionHelp, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, valueSourceKey: String ? = this.valueSourceKey, envvar: String ? = this.envvar): FlagOption Create a new option that is a copy of this one with different transforms. fun copy(validator: OptionValidator = this.validator, names: Set < String > = this.names, secondaryNames: Set < String > = this.secondaryNames, help: String = this.optionHelp, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, valueSourceKey: String ? = this.valueSourceKey, envvar: String ? = this.envvar): FlagOption Create a new option that is a copy of this one with the same transforms.","title":"copy"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/envvar/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / envvar envvar \u00b6 val envvar: String ? The name of the environment variable for this option. Overrides automatic names. Property \u00b6 envvar - The name of the environment variable for this option. Overrides automatic names.","title":"Envvar"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/envvar/#envvar","text":"val envvar: String ? The name of the environment variable for this option. Overrides automatic names.","title":"envvar"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/envvar/#property","text":"envvar - The name of the environment variable for this option. Overrides automatic names.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/finalize/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / finalize finalize \u00b6 fun finalize(context: Context , invocations: List ): Unit Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. You cannot refer to other parameter values during this call, since they might not have been finalized yet. Parameters \u00b6 context - The context for this parse invocations - A possibly empty list of invocations of this option.","title":"Finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/finalize/#finalize","text":"fun finalize(context: Context , invocations: List ): Unit Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. You cannot refer to other parameter values during this call, since they might not have been finalized yet.","title":"finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/finalize/#parameters","text":"context - The context for this parse invocations - A possibly empty list of invocations of this option.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/group-name/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / groupName groupName \u00b6 var groupName: String ? The name of the group, or null if this option should not be grouped in the help output.","title":"Group name"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/group-name/#groupname","text":"var groupName: String ? The name of the group, or null if this option should not be grouped in the help output.","title":"groupName"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/help-tags/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / helpTags helpTags \u00b6 val helpTags: Map < String , String > Extra information about this option to pass to the help formatter.","title":"Help tags"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/help-tags/#helptags","text":"val helpTags: Map < String , String > Extra information about this option to pass to the help formatter.","title":"helpTags"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/hidden/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / hidden hidden \u00b6 val hidden: Boolean If true, this option should not appear in help output.","title":"Hidden"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/hidden/#hidden","text":"val hidden: Boolean If true, this option should not appear in help output.","title":"hidden"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/metavar/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / metavar metavar \u00b6 fun metavar(context: Context ): String ? A name representing the values for this option that can be displayed to the user.","title":"Metavar"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/metavar/#metavar","text":"fun metavar(context: Context ): String ? A name representing the values for this option that can be displayed to the user.","title":"metavar"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/names/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / names names \u00b6 var names: Set < String > The names that can be used to invoke this option. They must start with a punctuation character.","title":"Names"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/names/#names","text":"var names: Set < String > The names that can be used to invoke this option. They must start with a punctuation character.","title":"names"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/nvalues/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / nvalues nvalues \u00b6 val nvalues: Int The number of values that must be given to this option.","title":"Nvalues"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/nvalues/#nvalues","text":"val nvalues: Int The number of values that must be given to this option.","title":"nvalues"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/option-help/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / optionHelp optionHelp \u00b6 val optionHelp: String The description of this option, usually a single line.","title":"Option help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/option-help/#optionhelp","text":"val optionHelp: String The description of this option, usually a single line.","title":"optionHelp"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/parameter-group/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / parameterGroup parameterGroup \u00b6 var parameterGroup: ParameterGroup ? The group that this option belongs to, or null. Set by the group.","title":"Parameter group"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/parameter-group/#parametergroup","text":"var parameterGroup: ParameterGroup ? The group that this option belongs to, or null. Set by the group.","title":"parameterGroup"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/parser/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / parser parser \u00b6 val parser: FlagOptionParser The parser for this option\u2019s values.","title":"Parser"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/parser/#parser","text":"val parser: FlagOptionParser The parser for this option\u2019s values.","title":"parser"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/post-validate/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / postValidate postValidate \u00b6 fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"Post validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/post-validate/#postvalidate","text":"fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"postValidate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/provide-delegate/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / provideDelegate provideDelegate \u00b6 operator fun provideDelegate(thisRef: ParameterHolder , prop: KProperty <*>): ReadOnlyProperty < ParameterHolder , T> Implementations must call ParameterHolder.registerOption","title":"Provide delegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/provide-delegate/#providedelegate","text":"operator fun provideDelegate(thisRef: ParameterHolder , prop: KProperty <*>): ReadOnlyProperty < ParameterHolder , T> Implementations must call ParameterHolder.registerOption","title":"provideDelegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/secondary-names/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / secondaryNames secondaryNames \u00b6 val secondaryNames: Set < String > Names that can be used for a secondary purpose, like disabling flag options.","title":"Secondary names"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/secondary-names/#secondarynames","text":"val secondaryNames: Set < String > Names that can be used for a secondary purpose, like disabling flag options.","title":"secondaryNames"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/transform-all/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / transformAll transformAll \u00b6 val transformAll: CallsTransformer < String , T> Called to transform all invocations of this option into the final option type. Property \u00b6 transformAll - Called to transform all invocations of this option into the final option type.","title":"Transform all"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/transform-all/#transformall","text":"val transformAll: CallsTransformer < String , T> Called to transform all invocations of this option into the final option type.","title":"transformAll"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/transform-all/#property","text":"transformAll - Called to transform all invocations of this option into the final option type.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/transform-envvar/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / transformEnvvar transformEnvvar \u00b6 val transformEnvvar: OptionTransformContext .( String ) -> T Called to transform string values from envvars and value sources into the option type. Property \u00b6 transformEnvvar - Called to transform string values from envvars and value sources into the option type.","title":"Transform envvar"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/transform-envvar/#transformenvvar","text":"val transformEnvvar: OptionTransformContext .( String ) -> T Called to transform string values from envvars and value sources into the option type.","title":"transformEnvvar"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/transform-envvar/#property","text":"transformEnvvar - Called to transform string values from envvars and value sources into the option type.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/validator/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / validator validator \u00b6 val validator: OptionValidator","title":"Validator"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/validator/#validator","text":"val validator: OptionValidator","title":"validator"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/value-source-key/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / valueSourceKey valueSourceKey \u00b6 val valueSourceKey: String ? Optional explicit key to use when looking this option up from a ValueSource","title":"Value source key"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/value-source-key/#valuesourcekey","text":"val valueSourceKey: String ? Optional explicit key to use when looking this option up from a ValueSource","title":"valueSourceKey"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/value/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / value value \u00b6 var value: T The value for this option. An exception should be thrown if this property is accessed before finalize is called. Getter The value for this option. An exception should be thrown if this property is accessed before finalize is called.","title":"Value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/value/#value","text":"var value: T The value for this option. An exception should be thrown if this property is accessed before finalize is called. Getter The value for this option. An exception should be thrown if this property is accessed before finalize is called.","title":"value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/","text":"clikt / com.github.ajalt.clikt.parameters.options / Option Option \u00b6 interface Option An optional command line parameter that takes a fixed number of values. Options can take any fixed number of values, including 0. Properties \u00b6 Name Summary completionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this option. open val completionCandidates: CompletionCandidates helpTags Extra information about this option to pass to the help formatter. abstract val helpTags: Map < String , String > hidden If true, this option should not appear in help output. abstract val hidden: Boolean names The names that can be used to invoke this option. They must start with a punctuation character. abstract val names: Set < String > nvalues The number of values that must be given to this option. abstract val nvalues: Int optionHelp The description of this option, usually a single line. abstract val optionHelp: String parser The parser for this option\u2019s values. abstract val parser: OptionParser secondaryNames Names that can be used for a secondary purpose, like disabling flag options. abstract val secondaryNames: Set < String > valueSourceKey Optional explicit key to use when looking this option up from a ValueSource abstract val valueSourceKey: String ? Functions \u00b6 Name Summary finalize Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. abstract fun finalize(context: Context , invocations: List <Invocation>): Unit metavar A name representing the values for this option that can be displayed to the user. abstract fun metavar(context: Context ): String ? parameterHelp Information about this option for the help output. open fun parameterHelp(context: Context ): Option? postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value. abstract fun postValidate(context: Context ): Unit Inheritors \u00b6 Name Summary OptionCallTransformContext A receiver for options transformers. class OptionCallTransformContext : Option OptionTransformContext A receiver for options transformers. class OptionTransformContext : Option StaticallyGroupedOption interface StaticallyGroupedOption : Option","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/#option","text":"interface Option An optional command line parameter that takes a fixed number of values. Options can take any fixed number of values, including 0.","title":"Option"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/#properties","text":"Name Summary completionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this option. open val completionCandidates: CompletionCandidates helpTags Extra information about this option to pass to the help formatter. abstract val helpTags: Map < String , String > hidden If true, this option should not appear in help output. abstract val hidden: Boolean names The names that can be used to invoke this option. They must start with a punctuation character. abstract val names: Set < String > nvalues The number of values that must be given to this option. abstract val nvalues: Int optionHelp The description of this option, usually a single line. abstract val optionHelp: String parser The parser for this option\u2019s values. abstract val parser: OptionParser secondaryNames Names that can be used for a secondary purpose, like disabling flag options. abstract val secondaryNames: Set < String > valueSourceKey Optional explicit key to use when looking this option up from a ValueSource abstract val valueSourceKey: String ?","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/#functions","text":"Name Summary finalize Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. abstract fun finalize(context: Context , invocations: List <Invocation>): Unit metavar A name representing the values for this option that can be displayed to the user. abstract fun metavar(context: Context ): String ? parameterHelp Information about this option for the help output. open fun parameterHelp(context: Context ): Option? postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value. abstract fun postValidate(context: Context ): Unit","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/#inheritors","text":"Name Summary OptionCallTransformContext A receiver for options transformers. class OptionCallTransformContext : Option OptionTransformContext A receiver for options transformers. class OptionTransformContext : Option StaticallyGroupedOption interface StaticallyGroupedOption : Option","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/completion-candidates/","text":"clikt / com.github.ajalt.clikt.parameters.options / Option / completionCandidates completionCandidates \u00b6 open val completionCandidates: CompletionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this option.","title":"Completion candidates"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/completion-candidates/#completioncandidates","text":"open val completionCandidates: CompletionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this option.","title":"completionCandidates"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/finalize/","text":"clikt / com.github.ajalt.clikt.parameters.options / Option / finalize finalize \u00b6 abstract fun finalize(context: Context , invocations: List ): Unit Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. You cannot refer to other parameter values during this call, since they might not have been finalized yet. Parameters \u00b6 context - The context for this parse invocations - A possibly empty list of invocations of this option.","title":"Finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/finalize/#finalize","text":"abstract fun finalize(context: Context , invocations: List ): Unit Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. You cannot refer to other parameter values during this call, since they might not have been finalized yet.","title":"finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/finalize/#parameters","text":"context - The context for this parse invocations - A possibly empty list of invocations of this option.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/help-tags/","text":"clikt / com.github.ajalt.clikt.parameters.options / Option / helpTags helpTags \u00b6 abstract val helpTags: Map < String , String > Extra information about this option to pass to the help formatter.","title":"Help tags"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/help-tags/#helptags","text":"abstract val helpTags: Map < String , String > Extra information about this option to pass to the help formatter.","title":"helpTags"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/hidden/","text":"clikt / com.github.ajalt.clikt.parameters.options / Option / hidden hidden \u00b6 abstract val hidden: Boolean If true, this option should not appear in help output.","title":"Hidden"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/hidden/#hidden","text":"abstract val hidden: Boolean If true, this option should not appear in help output.","title":"hidden"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/metavar/","text":"clikt / com.github.ajalt.clikt.parameters.options / Option / metavar metavar \u00b6 abstract fun metavar(context: Context ): String ? A name representing the values for this option that can be displayed to the user.","title":"Metavar"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/metavar/#metavar","text":"abstract fun metavar(context: Context ): String ? A name representing the values for this option that can be displayed to the user.","title":"metavar"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/names/","text":"clikt / com.github.ajalt.clikt.parameters.options / Option / names names \u00b6 abstract val names: Set < String > The names that can be used to invoke this option. They must start with a punctuation character.","title":"Names"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/names/#names","text":"abstract val names: Set < String > The names that can be used to invoke this option. They must start with a punctuation character.","title":"names"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/nvalues/","text":"clikt / com.github.ajalt.clikt.parameters.options / Option / nvalues nvalues \u00b6 abstract val nvalues: Int The number of values that must be given to this option.","title":"Nvalues"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/nvalues/#nvalues","text":"abstract val nvalues: Int The number of values that must be given to this option.","title":"nvalues"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/option-help/","text":"clikt / com.github.ajalt.clikt.parameters.options / Option / optionHelp optionHelp \u00b6 abstract val optionHelp: String The description of this option, usually a single line.","title":"Option help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/option-help/#optionhelp","text":"abstract val optionHelp: String The description of this option, usually a single line.","title":"optionHelp"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/parameter-help/","text":"clikt / com.github.ajalt.clikt.parameters.options / Option / parameterHelp parameterHelp \u00b6 open fun parameterHelp(context: Context ): Option? Information about this option for the help output.","title":"Parameter help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/parameter-help/#parameterhelp","text":"open fun parameterHelp(context: Context ): Option? Information about this option for the help output.","title":"parameterHelp"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/parser/","text":"clikt / com.github.ajalt.clikt.parameters.options / Option / parser parser \u00b6 abstract val parser: OptionParser The parser for this option\u2019s values.","title":"Parser"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/parser/#parser","text":"abstract val parser: OptionParser The parser for this option\u2019s values.","title":"parser"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/post-validate/","text":"clikt / com.github.ajalt.clikt.parameters.options / Option / postValidate postValidate \u00b6 abstract fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"Post validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/post-validate/#postvalidate","text":"abstract fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"postValidate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/secondary-names/","text":"clikt / com.github.ajalt.clikt.parameters.options / Option / secondaryNames secondaryNames \u00b6 abstract val secondaryNames: Set < String > Names that can be used for a secondary purpose, like disabling flag options.","title":"Secondary names"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/secondary-names/#secondarynames","text":"abstract val secondaryNames: Set < String > Names that can be used for a secondary purpose, like disabling flag options.","title":"secondaryNames"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/value-source-key/","text":"clikt / com.github.ajalt.clikt.parameters.options / Option / valueSourceKey valueSourceKey \u00b6 abstract val valueSourceKey: String ? Optional explicit key to use when looking this option up from a ValueSource","title":"Value source key"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/value-source-key/#valuesourcekey","text":"abstract val valueSourceKey: String ? Optional explicit key to use when looking this option up from a ValueSource","title":"valueSourceKey"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionCallTransformContext OptionCallTransformContext \u00b6 class OptionCallTransformContext : Option A receiver for options transformers. Constructors \u00b6 Name Summary <init> A receiver for options transformers. OptionCallTransformContext(name: String , option: Option , context: Context ) Properties \u00b6 Name Summary context val context: Context name The name that was used to invoke this option. val name: String option The option that was invoked val option: Option Functions \u00b6 Name Summary fail Throw an exception indicating that an invalid value was provided. fun fail(message: String ): Nothing message Issue a message that can be shown to the user fun message(message: String ): Unit require If value is false, call fail with the output of lazyMessage fun require(value: Boolean , lazyMessage: () -> String = { \"\" }): Unit","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/#optioncalltransformcontext","text":"class OptionCallTransformContext : Option A receiver for options transformers.","title":"OptionCallTransformContext"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/#constructors","text":"Name Summary <init> A receiver for options transformers. OptionCallTransformContext(name: String , option: Option , context: Context )","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/#properties","text":"Name Summary context val context: Context name The name that was used to invoke this option. val name: String option The option that was invoked val option: Option","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/#functions","text":"Name Summary fail Throw an exception indicating that an invalid value was provided. fun fail(message: String ): Nothing message Issue a message that can be shown to the user fun message(message: String ): Unit require If value is false, call fail with the output of lazyMessage fun require(value: Boolean , lazyMessage: () -> String = { \"\" }): Unit","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/-init-/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionCallTransformContext / <init> <init> \u00b6 OptionCallTransformContext(name: String , option: Option , context: Context ) A receiver for options transformers.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/-init-/#init","text":"OptionCallTransformContext(name: String , option: Option , context: Context ) A receiver for options transformers.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/context/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionCallTransformContext / context context \u00b6 val context: Context","title":"Context"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/context/#context","text":"val context: Context","title":"context"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/fail/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionCallTransformContext / fail fail \u00b6 fun fail(message: String ): Nothing Throw an exception indicating that an invalid value was provided.","title":"Fail"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/fail/#fail","text":"fun fail(message: String ): Nothing Throw an exception indicating that an invalid value was provided.","title":"fail"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/message/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionCallTransformContext / message message \u00b6 fun message(message: String ): Unit Issue a message that can be shown to the user","title":"Message"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/message/#message","text":"fun message(message: String ): Unit Issue a message that can be shown to the user","title":"message"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/name/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionCallTransformContext / name name \u00b6 val name: String The name that was used to invoke this option. Property \u00b6 name - The name that was used to invoke this option.","title":"Name"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/name/#name","text":"val name: String The name that was used to invoke this option.","title":"name"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/name/#property","text":"name - The name that was used to invoke this option.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/option/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionCallTransformContext / option option \u00b6 val option: Option The option that was invoked Property \u00b6 option - The option that was invoked","title":"Option"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/option/#option","text":"val option: Option The option that was invoked","title":"option"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/option/#property","text":"option - The option that was invoked","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/require/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionCallTransformContext / require require \u00b6 inline fun require(value: Boolean , lazyMessage: () -> String = { \u201c\u201d }): Unit If value is false, call fail with the output of lazyMessage","title":"Require"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/require/#require","text":"inline fun require(value: Boolean , lazyMessage: () -> String = { \u201c\u201d }): Unit If value is false, call fail with the output of lazyMessage","title":"require"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-delegate/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionDelegate OptionDelegate \u00b6 interface OptionDelegate : GroupableOption , ReadOnlyProperty < ParameterHolder , T> An option that functions as a property delegate Properties \u00b6 Name Summary value The value for this option. abstract val value: T Functions \u00b6 Name Summary getValue open fun getValue(thisRef: ParameterHolder , property: KProperty <*>): T provideDelegate Implementations must call ParameterHolder.registerOption abstract operator fun provideDelegate(thisRef: ParameterHolder , prop: KProperty <*>): ReadOnlyProperty < ParameterHolder , T> Inheritors \u00b6 Name Summary FlagOption An Option that has no values. class FlagOption<T> : OptionDelegate <T> OptionWithValues An Option that takes one or more values. class OptionWithValues<AllT, EachT, ValueT> : OptionDelegate <AllT>, GroupableOption","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-delegate/#optiondelegate","text":"interface OptionDelegate : GroupableOption , ReadOnlyProperty < ParameterHolder , T> An option that functions as a property delegate","title":"OptionDelegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-delegate/#properties","text":"Name Summary value The value for this option. abstract val value: T","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-delegate/#functions","text":"Name Summary getValue open fun getValue(thisRef: ParameterHolder , property: KProperty <*>): T provideDelegate Implementations must call ParameterHolder.registerOption abstract operator fun provideDelegate(thisRef: ParameterHolder , prop: KProperty <*>): ReadOnlyProperty < ParameterHolder , T>","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-delegate/#inheritors","text":"Name Summary FlagOption An Option that has no values. class FlagOption<T> : OptionDelegate <T> OptionWithValues An Option that takes one or more values. class OptionWithValues<AllT, EachT, ValueT> : OptionDelegate <AllT>, GroupableOption","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-delegate/get-value/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionDelegate / getValue getValue \u00b6 open fun getValue(thisRef: ParameterHolder , property: KProperty <*>): T","title":"Get value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-delegate/get-value/#getvalue","text":"open fun getValue(thisRef: ParameterHolder , property: KProperty <*>): T","title":"getValue"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-delegate/provide-delegate/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionDelegate / provideDelegate provideDelegate \u00b6 abstract operator fun provideDelegate(thisRef: ParameterHolder , prop: KProperty <*>): ReadOnlyProperty < ParameterHolder , T> Implementations must call ParameterHolder.registerOption","title":"Provide delegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-delegate/provide-delegate/#providedelegate","text":"abstract operator fun provideDelegate(thisRef: ParameterHolder , prop: KProperty <*>): ReadOnlyProperty < ParameterHolder , T> Implementations must call ParameterHolder.registerOption","title":"provideDelegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-delegate/value/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionDelegate / value value \u00b6 abstract val value: T The value for this option. An exception should be thrown if this property is accessed before finalize is called.","title":"Value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-delegate/value/#value","text":"abstract val value: T The value for this option. An exception should be thrown if this property is accessed before finalize is called.","title":"value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionTransformContext OptionTransformContext \u00b6 class OptionTransformContext : Option A receiver for options transformers. Constructors \u00b6 Name Summary <init> A receiver for options transformers. OptionTransformContext(option: Option , context: Context ) Properties \u00b6 Name Summary context val context: Context option The option that was invoked val option: Option Functions \u00b6 Name Summary fail Throw an exception indicating that usage was incorrect. fun fail(message: String ): Nothing message Issue a message that can be shown to the user fun message(message: String ): Unit require If value is false, call fail with the output of lazyMessage fun require(value: Boolean , lazyMessage: () -> String = { \"\" }): Unit","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/#optiontransformcontext","text":"class OptionTransformContext : Option A receiver for options transformers.","title":"OptionTransformContext"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/#constructors","text":"Name Summary <init> A receiver for options transformers. OptionTransformContext(option: Option , context: Context )","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/#properties","text":"Name Summary context val context: Context option The option that was invoked val option: Option","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/#functions","text":"Name Summary fail Throw an exception indicating that usage was incorrect. fun fail(message: String ): Nothing message Issue a message that can be shown to the user fun message(message: String ): Unit require If value is false, call fail with the output of lazyMessage fun require(value: Boolean , lazyMessage: () -> String = { \"\" }): Unit","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/-init-/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionTransformContext / <init> <init> \u00b6 OptionTransformContext(option: Option , context: Context ) A receiver for options transformers.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/-init-/#init","text":"OptionTransformContext(option: Option , context: Context ) A receiver for options transformers.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/context/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionTransformContext / context context \u00b6 val context: Context","title":"Context"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/context/#context","text":"val context: Context","title":"context"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/fail/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionTransformContext / fail fail \u00b6 fun fail(message: String ): Nothing Throw an exception indicating that usage was incorrect.","title":"Fail"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/fail/#fail","text":"fun fail(message: String ): Nothing Throw an exception indicating that usage was incorrect.","title":"fail"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/message/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionTransformContext / message message \u00b6 fun message(message: String ): Unit Issue a message that can be shown to the user","title":"Message"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/message/#message","text":"fun message(message: String ): Unit Issue a message that can be shown to the user","title":"message"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/option/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionTransformContext / option option \u00b6 val option: Option The option that was invoked Property \u00b6 option - The option that was invoked","title":"Option"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/option/#option","text":"val option: Option The option that was invoked","title":"option"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/option/#property","text":"option - The option that was invoked","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/require/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionTransformContext / require require \u00b6 inline fun require(value: Boolean , lazyMessage: () -> String = { \u201c\u201d }): Unit If value is false, call fail with the output of lazyMessage","title":"Require"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/require/#require","text":"inline fun require(value: Boolean , lazyMessage: () -> String = { \u201c\u201d }): Unit If value is false, call fail with the output of lazyMessage","title":"require"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues OptionWithValues \u00b6 class OptionWithValues : OptionDelegate , GroupableOption An Option that takes one or more values. Properties \u00b6 Name Summary completionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this option. val completionCandidates: CompletionCandidates completionCandidatesWithDefault val completionCandidatesWithDefault: ValueWithDefault < CompletionCandidates > envvar The environment variable name to use. val envvar: String ? groupName The name of the group, or null if this option should not be grouped in the help output. var groupName: String ? helpTags Extra information about this option to pass to the help formatter. val helpTags: Map < String , String > hidden If true, this option should not appear in help output. val hidden: Boolean metavarWithDefault The metavar to use. Specified at option creation. val metavarWithDefault: ValueWithDefault < Context .() -> String ?> names The names that can be used to invoke this option. They must start with a punctuation character. var names: Set < String > nvalues The number of values that must be given to this option. val nvalues: Int optionHelp The description of this option, usually a single line. val optionHelp: String parameterGroup The group that this option belongs to, or null. Set by the group. var parameterGroup: ParameterGroup ? parser The parser for this option\u2019s values. val parser: OptionWithValuesParser secondaryNames Names that can be used for a secondary purpose, like disabling flag options. val secondaryNames: Set < String > transformAll Called in finalize to transform all invocations into the final value. val transformAll: CallsTransformer <EachT, AllT> transformEach Called in finalize to transform each invocation. val transformEach: ArgsTransformer <ValueT, EachT> transformValidator Called after all parameters have been finalized to validate the output of transformAll val transformValidator: OptionValidator <AllT> transformValue Called in finalize to transform each value provided to each invocation. val transformValue: ValueTransformer <ValueT> value The value for this option. var value: AllT valueSourceKey Optional explicit key to use when looking this option up from a ValueSource val valueSourceKey: String ? valueSplit The pattern to split values from the command line on. By default, values are split on whitespace. val valueSplit: Regex ? Functions \u00b6 Name Summary copy Create a new option that is a copy of this one with different transforms. fun <AllT, EachT, ValueT> copy(transformValue: ValueTransformer <ValueT>, transformEach: ArgsTransformer <ValueT, EachT>, transformAll: CallsTransformer <EachT, AllT>, validator: OptionValidator <AllT>, names: Set < String > = this.names, metavarWithDefault: ValueWithDefault < Context .() -> String ?> = this.metavarWithDefault, nvalues: Int = this.nvalues, help: String = this.optionHelp, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, valueSourceKey: String ? = this.valueSourceKey, envvar: String ? = this.envvar, valueSplit: Regex ? = this.valueSplit, parser: OptionWithValuesParser = this.parser, completionCandidatesWithDefault: ValueWithDefault < CompletionCandidates > = this.completionCandidatesWithDefault): OptionWithValues <AllT, EachT, ValueT> Create a new option that is a copy of this one with the same transforms. fun copy(validator: OptionValidator <AllT> = this.transformValidator, names: Set < String > = this.names, metavarWithDefault: ValueWithDefault < Context .() -> String ?> = this.metavarWithDefault, nvalues: Int = this.nvalues, help: String = this.optionHelp, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, envvar: String ? = this.envvar, valueSourceKey: String ? = this.valueSourceKey, valueSplit: Regex ? = this.valueSplit, parser: OptionWithValuesParser = this.parser, completionCandidatesWithDefault: ValueWithDefault < CompletionCandidates > = this.completionCandidatesWithDefault): OptionWithValues <AllT, EachT, ValueT> finalize Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. fun finalize(context: Context , invocations: List <Invocation>): Unit metavar A name representing the values for this option that can be displayed to the user. fun metavar(context: Context ): String ? postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value. fun postValidate(context: Context ): Unit provideDelegate Implementations must call ParameterHolder.registerOption operator fun provideDelegate(thisRef: ParameterHolder , prop: KProperty <*>): ReadOnlyProperty < ParameterHolder , AllT> Extension Functions \u00b6 Name Summary associate Change this option to take multiple values, each split on a delimiter , and converted to a map. fun RawOption .associate(delimiter: String = \"=\"): OptionWithValues < Map < String , String >, Pair < String , String >, Pair < String , String >> check Check the final option value and raise an error if it\u2019s not valid. fun <AllT : Any , EachT, ValueT> OptionWithValues <AllT, EachT, ValueT>.check(message: String , validator: (AllT) -> Boolean ): OptionDelegate <AllT> Check the final argument value and raise an error if it\u2019s not valid. fun <AllT : Any , EachT, ValueT> OptionWithValues <AllT, EachT, ValueT>.check(lazyMessage: (AllT) -> String = { it.toString() }, validator: (AllT) -> Boolean ): OptionDelegate <AllT> choice Convert the option based on a fixed set of values. fun <T : Any > RawOption .choice(choices: Map < String , T>, metavar: String = mvar(choices.keys), ignoreCase: Boolean = false): NullableOption <T, T> fun <T : Any > RawOption .choice(vararg choices: Pair < String , T>, metavar: String = mvar(choices.map { it.first }), ignoreCase: Boolean = false): NullableOption <T, T> Restrict the option to a fixed set of values. fun RawOption .choice(vararg choices: String , metavar: String = mvar(choices.asIterable()), ignoreCase: Boolean = false): NullableOption < String , String > convert Convert the option\u2019s value type. fun <InT : Any , ValueT : Any > NullableOption <InT, InT>.convert(metavar: String , completionCandidates: CompletionCandidates = completionCandidatesWithDefault.default, conversion: ValueConverter <InT, ValueT>): NullableOption <ValueT, ValueT> fun <InT : Any , ValueT : Any > NullableOption <InT, InT>.convert(metavar: Context .() -> String = { localization.defaultMetavar() }, completionCandidates: CompletionCandidates = completionCandidatesWithDefault.default, conversion: ValueConverter <InT, ValueT>): NullableOption <ValueT, ValueT> counted Turn an option into a flag that counts the number of times the option occurs on the command line. fun RawOption .counted(): FlagOption < Int > default If the option is not called on the command line (and is not set in an envvar), use value for the option. fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.default(value: EachT, defaultForHelp: String = value.toString()): OptionWithValues <EachT, EachT, ValueT> defaultLazy If the option is not called on the command line (and is not set in an envvar), call the value and use its return value for the option. fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.defaultLazy(defaultForHelp: String = \"\", value: () -> EachT): OptionWithValues <EachT, EachT, ValueT> defaultStdin Use - as the default value for an inputStream option. fun NullableOption < InputStream , InputStream >.defaultStdin(): OptionWithValues < InputStream , InputStream , InputStream > defaultStdout Use - as the default value for an outputStream option. fun NullableOption < OutputStream , OutputStream >.defaultStdout(): OptionWithValues < OutputStream , OutputStream , OutputStream > deprecated Mark this option as deprecated in the help output. fun <AllT, EachT, ValueT> OptionWithValues <AllT, EachT, ValueT>.deprecated(message: String ? = \"\", tagName: String ? = \"deprecated\", tagValue: String = \"\", error: Boolean = false): OptionDelegate <AllT> double Convert the option values to a Double``fun RawOption .double(): NullableOption < Double , Double > enum Convert the option to the values of an enum. fun <T : Enum <T>> RawOption .enum(ignoreCase: Boolean = true, key: (T) -> String = { it.name }): NullableOption <T, T> file Convert the option to a File . fun RawOption .file(mustExist: Boolean = false, canBeFile: Boolean = true, canBeDir: Boolean = true, mustBeWritable: Boolean = false, mustBeReadable: Boolean = false, canBeSymlink: Boolean = true): NullableOption < File , File > flag Turn an option into a boolean flag. fun RawOption .flag(vararg secondaryNames: String , default: Boolean = false, defaultForHelp: String = \"\"): FlagOption < Boolean > float Convert the option values to a Float``fun RawOption .float(): NullableOption < Float , Float > groupChoice Convert the option to an option group based on a fixed set of values. fun <T : OptionGroup > RawOption .groupChoice(choices: Map < String , T>): ChoiceGroup <T, T?> fun <T : OptionGroup > RawOption .groupChoice(vararg choices: Pair < String , T>): ChoiceGroup <T, T?> groupSwitch Convert the option into a set of flags that each map to an option group. fun <T : OptionGroup > RawOption .groupSwitch(choices: Map < String , T>): ChoiceGroup <T, T?> fun <T : OptionGroup > RawOption .groupSwitch(vararg choices: Pair < String , T>): ChoiceGroup <T, T?> help Set the help for this option. fun <AllT, EachT, ValueT> OptionWithValues <AllT, EachT, ValueT>.help(help: String ): OptionWithValues <AllT, EachT, ValueT> inputStream Convert the option to an InputStream . fun RawOption .inputStream(fileSystem: FileSystem = FileSystems.getDefault()): NullableOption < InputStream , InputStream > int Convert the option values to an Int``fun RawOption .int(): NullableOption < Int , Int > long Convert the option values to a Long``fun RawOption .long(): NullableOption < Long , Long > multiple Make the option return a list of calls; each item in the list is the value of one call. fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.multiple(default: List <EachT> = emptyList(), required: Boolean = false): OptionWithValues < List <EachT>, EachT, ValueT> outputStream Convert the option to an OutputStream . fun RawOption .outputStream(createIfNotExist: Boolean = true, truncateExisting: Boolean = false, fileSystem: FileSystem = FileSystems.getDefault()): NullableOption < OutputStream , OutputStream > pair Change this option to take two values, held in a Pair . fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.pair(): NullableOption < Pair <ValueT, ValueT>, ValueT> path Convert the option to a Path . fun RawOption .path(mustExist: Boolean = false, canBeFile: Boolean = true, canBeDir: Boolean = true, mustBeWritable: Boolean = false, mustBeReadable: Boolean = false, canBeSymlink: Boolean = true, fileSystem: FileSystem = FileSystems.getDefault()): NullableOption <Path, Path> prompt If the option isn\u2019t given on the command line, prompt the user for manual input. fun <T : Any > NullableOption <T, T>.prompt(text: String ? = null, default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \"Repeat for confirmation: \", promptSuffix: String = \": \", showDefault: Boolean = true): OptionWithValues <T, T, T> required If the option is not called on the command line (and is not set in an envvar), throw a MissingOption . fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.required(): OptionWithValues <EachT, EachT, ValueT> restrictTo Restrict the option values to fit into a range. fun <T : Comparable <T>> OptionWithValues <T?, T, T>.restrictTo(min: T? = null, max: T? = null, clamp: Boolean = false): OptionWithValues <T?, T, T> fun <T : Comparable <T>> OptionWithValues <T?, T, T>.restrictTo(range: ClosedRange <T>, clamp: Boolean = false): OptionWithValues <T?, T, T> split Change to option to take any number of values, separated by a regex . fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.split(regex: Regex ): OptionWithValues < List <ValueT>?, List <ValueT>, ValueT> Change to option to take any number of values, separated by a string delimiter . fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.split(delimiter: String ): OptionWithValues < List <ValueT>?, List <ValueT>, ValueT> splitPair Split this option\u2019s value into two with a delimiter . fun RawOption .splitPair(delimiter: String = \"=\"): NullableOption < Pair < String , String >, Pair < String , String >> switch Turn an option into a set of flags that each map to a value. fun <T : Any > RawOption .switch(choices: Map < String , T>): FlagOption <T?> fun <T : Any > RawOption .switch(vararg choices: Pair < String , T>): FlagOption <T?> toMap Convert this option\u2019s values from a list of pairs into a map with key-value pairs from the list. fun <A, B> OptionWithValues < List < Pair <A, B>>, Pair <A, B>, Pair <A, B>>.toMap(): OptionWithValues < Map <A, B>, Pair <A, B>, Pair <A, B>> transformAll Transform all calls to the option to the final option type. fun <AllT, EachT : Any , ValueT> NullableOption <EachT, ValueT>.transformAll(defaultForHelp: String ? = this.helpTags[HelpFormatter.Tags.DEFAULT], showAsRequired: Boolean = HelpFormatter.Tags.REQUIRED in this.helpTags, transform: CallsTransformer <EachT, AllT>): OptionWithValues <AllT, EachT, ValueT> transformValues Change the number of values that this option takes. fun <EachInT : Any , EachOutT : Any , ValueT> NullableOption <EachInT, ValueT>.transformValues(nvalues: Int , transform: ArgsTransformer <ValueT, EachOutT>): NullableOption <EachOutT, ValueT> triple Change this option to take three values, held in a Triple . fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.triple(): NullableOption < Triple <ValueT, ValueT, ValueT>, ValueT> unique Make the multiple option return a unique set of calls fun <EachT : Any , ValueT> OptionWithValues < List <EachT>, EachT, ValueT>.unique(): OptionWithValues < Set <EachT>, EachT, ValueT> validate Check the final option value and raise an error if it\u2019s not valid. fun <AllT : Any , EachT, ValueT> OptionWithValues <AllT, EachT, ValueT>.validate(validator: OptionValidator <AllT>): OptionDelegate <AllT>","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/#optionwithvalues","text":"class OptionWithValues : OptionDelegate , GroupableOption An Option that takes one or more values.","title":"OptionWithValues"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/#properties","text":"Name Summary completionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this option. val completionCandidates: CompletionCandidates completionCandidatesWithDefault val completionCandidatesWithDefault: ValueWithDefault < CompletionCandidates > envvar The environment variable name to use. val envvar: String ? groupName The name of the group, or null if this option should not be grouped in the help output. var groupName: String ? helpTags Extra information about this option to pass to the help formatter. val helpTags: Map < String , String > hidden If true, this option should not appear in help output. val hidden: Boolean metavarWithDefault The metavar to use. Specified at option creation. val metavarWithDefault: ValueWithDefault < Context .() -> String ?> names The names that can be used to invoke this option. They must start with a punctuation character. var names: Set < String > nvalues The number of values that must be given to this option. val nvalues: Int optionHelp The description of this option, usually a single line. val optionHelp: String parameterGroup The group that this option belongs to, or null. Set by the group. var parameterGroup: ParameterGroup ? parser The parser for this option\u2019s values. val parser: OptionWithValuesParser secondaryNames Names that can be used for a secondary purpose, like disabling flag options. val secondaryNames: Set < String > transformAll Called in finalize to transform all invocations into the final value. val transformAll: CallsTransformer <EachT, AllT> transformEach Called in finalize to transform each invocation. val transformEach: ArgsTransformer <ValueT, EachT> transformValidator Called after all parameters have been finalized to validate the output of transformAll val transformValidator: OptionValidator <AllT> transformValue Called in finalize to transform each value provided to each invocation. val transformValue: ValueTransformer <ValueT> value The value for this option. var value: AllT valueSourceKey Optional explicit key to use when looking this option up from a ValueSource val valueSourceKey: String ? valueSplit The pattern to split values from the command line on. By default, values are split on whitespace. val valueSplit: Regex ?","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/#functions","text":"Name Summary copy Create a new option that is a copy of this one with different transforms. fun <AllT, EachT, ValueT> copy(transformValue: ValueTransformer <ValueT>, transformEach: ArgsTransformer <ValueT, EachT>, transformAll: CallsTransformer <EachT, AllT>, validator: OptionValidator <AllT>, names: Set < String > = this.names, metavarWithDefault: ValueWithDefault < Context .() -> String ?> = this.metavarWithDefault, nvalues: Int = this.nvalues, help: String = this.optionHelp, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, valueSourceKey: String ? = this.valueSourceKey, envvar: String ? = this.envvar, valueSplit: Regex ? = this.valueSplit, parser: OptionWithValuesParser = this.parser, completionCandidatesWithDefault: ValueWithDefault < CompletionCandidates > = this.completionCandidatesWithDefault): OptionWithValues <AllT, EachT, ValueT> Create a new option that is a copy of this one with the same transforms. fun copy(validator: OptionValidator <AllT> = this.transformValidator, names: Set < String > = this.names, metavarWithDefault: ValueWithDefault < Context .() -> String ?> = this.metavarWithDefault, nvalues: Int = this.nvalues, help: String = this.optionHelp, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, envvar: String ? = this.envvar, valueSourceKey: String ? = this.valueSourceKey, valueSplit: Regex ? = this.valueSplit, parser: OptionWithValuesParser = this.parser, completionCandidatesWithDefault: ValueWithDefault < CompletionCandidates > = this.completionCandidatesWithDefault): OptionWithValues <AllT, EachT, ValueT> finalize Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. fun finalize(context: Context , invocations: List <Invocation>): Unit metavar A name representing the values for this option that can be displayed to the user. fun metavar(context: Context ): String ? postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value. fun postValidate(context: Context ): Unit provideDelegate Implementations must call ParameterHolder.registerOption operator fun provideDelegate(thisRef: ParameterHolder , prop: KProperty <*>): ReadOnlyProperty < ParameterHolder , AllT>","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/#extension-functions","text":"Name Summary associate Change this option to take multiple values, each split on a delimiter , and converted to a map. fun RawOption .associate(delimiter: String = \"=\"): OptionWithValues < Map < String , String >, Pair < String , String >, Pair < String , String >> check Check the final option value and raise an error if it\u2019s not valid. fun <AllT : Any , EachT, ValueT> OptionWithValues <AllT, EachT, ValueT>.check(message: String , validator: (AllT) -> Boolean ): OptionDelegate <AllT> Check the final argument value and raise an error if it\u2019s not valid. fun <AllT : Any , EachT, ValueT> OptionWithValues <AllT, EachT, ValueT>.check(lazyMessage: (AllT) -> String = { it.toString() }, validator: (AllT) -> Boolean ): OptionDelegate <AllT> choice Convert the option based on a fixed set of values. fun <T : Any > RawOption .choice(choices: Map < String , T>, metavar: String = mvar(choices.keys), ignoreCase: Boolean = false): NullableOption <T, T> fun <T : Any > RawOption .choice(vararg choices: Pair < String , T>, metavar: String = mvar(choices.map { it.first }), ignoreCase: Boolean = false): NullableOption <T, T> Restrict the option to a fixed set of values. fun RawOption .choice(vararg choices: String , metavar: String = mvar(choices.asIterable()), ignoreCase: Boolean = false): NullableOption < String , String > convert Convert the option\u2019s value type. fun <InT : Any , ValueT : Any > NullableOption <InT, InT>.convert(metavar: String , completionCandidates: CompletionCandidates = completionCandidatesWithDefault.default, conversion: ValueConverter <InT, ValueT>): NullableOption <ValueT, ValueT> fun <InT : Any , ValueT : Any > NullableOption <InT, InT>.convert(metavar: Context .() -> String = { localization.defaultMetavar() }, completionCandidates: CompletionCandidates = completionCandidatesWithDefault.default, conversion: ValueConverter <InT, ValueT>): NullableOption <ValueT, ValueT> counted Turn an option into a flag that counts the number of times the option occurs on the command line. fun RawOption .counted(): FlagOption < Int > default If the option is not called on the command line (and is not set in an envvar), use value for the option. fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.default(value: EachT, defaultForHelp: String = value.toString()): OptionWithValues <EachT, EachT, ValueT> defaultLazy If the option is not called on the command line (and is not set in an envvar), call the value and use its return value for the option. fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.defaultLazy(defaultForHelp: String = \"\", value: () -> EachT): OptionWithValues <EachT, EachT, ValueT> defaultStdin Use - as the default value for an inputStream option. fun NullableOption < InputStream , InputStream >.defaultStdin(): OptionWithValues < InputStream , InputStream , InputStream > defaultStdout Use - as the default value for an outputStream option. fun NullableOption < OutputStream , OutputStream >.defaultStdout(): OptionWithValues < OutputStream , OutputStream , OutputStream > deprecated Mark this option as deprecated in the help output. fun <AllT, EachT, ValueT> OptionWithValues <AllT, EachT, ValueT>.deprecated(message: String ? = \"\", tagName: String ? = \"deprecated\", tagValue: String = \"\", error: Boolean = false): OptionDelegate <AllT> double Convert the option values to a Double``fun RawOption .double(): NullableOption < Double , Double > enum Convert the option to the values of an enum. fun <T : Enum <T>> RawOption .enum(ignoreCase: Boolean = true, key: (T) -> String = { it.name }): NullableOption <T, T> file Convert the option to a File . fun RawOption .file(mustExist: Boolean = false, canBeFile: Boolean = true, canBeDir: Boolean = true, mustBeWritable: Boolean = false, mustBeReadable: Boolean = false, canBeSymlink: Boolean = true): NullableOption < File , File > flag Turn an option into a boolean flag. fun RawOption .flag(vararg secondaryNames: String , default: Boolean = false, defaultForHelp: String = \"\"): FlagOption < Boolean > float Convert the option values to a Float``fun RawOption .float(): NullableOption < Float , Float > groupChoice Convert the option to an option group based on a fixed set of values. fun <T : OptionGroup > RawOption .groupChoice(choices: Map < String , T>): ChoiceGroup <T, T?> fun <T : OptionGroup > RawOption .groupChoice(vararg choices: Pair < String , T>): ChoiceGroup <T, T?> groupSwitch Convert the option into a set of flags that each map to an option group. fun <T : OptionGroup > RawOption .groupSwitch(choices: Map < String , T>): ChoiceGroup <T, T?> fun <T : OptionGroup > RawOption .groupSwitch(vararg choices: Pair < String , T>): ChoiceGroup <T, T?> help Set the help for this option. fun <AllT, EachT, ValueT> OptionWithValues <AllT, EachT, ValueT>.help(help: String ): OptionWithValues <AllT, EachT, ValueT> inputStream Convert the option to an InputStream . fun RawOption .inputStream(fileSystem: FileSystem = FileSystems.getDefault()): NullableOption < InputStream , InputStream > int Convert the option values to an Int``fun RawOption .int(): NullableOption < Int , Int > long Convert the option values to a Long``fun RawOption .long(): NullableOption < Long , Long > multiple Make the option return a list of calls; each item in the list is the value of one call. fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.multiple(default: List <EachT> = emptyList(), required: Boolean = false): OptionWithValues < List <EachT>, EachT, ValueT> outputStream Convert the option to an OutputStream . fun RawOption .outputStream(createIfNotExist: Boolean = true, truncateExisting: Boolean = false, fileSystem: FileSystem = FileSystems.getDefault()): NullableOption < OutputStream , OutputStream > pair Change this option to take two values, held in a Pair . fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.pair(): NullableOption < Pair <ValueT, ValueT>, ValueT> path Convert the option to a Path . fun RawOption .path(mustExist: Boolean = false, canBeFile: Boolean = true, canBeDir: Boolean = true, mustBeWritable: Boolean = false, mustBeReadable: Boolean = false, canBeSymlink: Boolean = true, fileSystem: FileSystem = FileSystems.getDefault()): NullableOption <Path, Path> prompt If the option isn\u2019t given on the command line, prompt the user for manual input. fun <T : Any > NullableOption <T, T>.prompt(text: String ? = null, default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \"Repeat for confirmation: \", promptSuffix: String = \": \", showDefault: Boolean = true): OptionWithValues <T, T, T> required If the option is not called on the command line (and is not set in an envvar), throw a MissingOption . fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.required(): OptionWithValues <EachT, EachT, ValueT> restrictTo Restrict the option values to fit into a range. fun <T : Comparable <T>> OptionWithValues <T?, T, T>.restrictTo(min: T? = null, max: T? = null, clamp: Boolean = false): OptionWithValues <T?, T, T> fun <T : Comparable <T>> OptionWithValues <T?, T, T>.restrictTo(range: ClosedRange <T>, clamp: Boolean = false): OptionWithValues <T?, T, T> split Change to option to take any number of values, separated by a regex . fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.split(regex: Regex ): OptionWithValues < List <ValueT>?, List <ValueT>, ValueT> Change to option to take any number of values, separated by a string delimiter . fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.split(delimiter: String ): OptionWithValues < List <ValueT>?, List <ValueT>, ValueT> splitPair Split this option\u2019s value into two with a delimiter . fun RawOption .splitPair(delimiter: String = \"=\"): NullableOption < Pair < String , String >, Pair < String , String >> switch Turn an option into a set of flags that each map to a value. fun <T : Any > RawOption .switch(choices: Map < String , T>): FlagOption <T?> fun <T : Any > RawOption .switch(vararg choices: Pair < String , T>): FlagOption <T?> toMap Convert this option\u2019s values from a list of pairs into a map with key-value pairs from the list. fun <A, B> OptionWithValues < List < Pair <A, B>>, Pair <A, B>, Pair <A, B>>.toMap(): OptionWithValues < Map <A, B>, Pair <A, B>, Pair <A, B>> transformAll Transform all calls to the option to the final option type. fun <AllT, EachT : Any , ValueT> NullableOption <EachT, ValueT>.transformAll(defaultForHelp: String ? = this.helpTags[HelpFormatter.Tags.DEFAULT], showAsRequired: Boolean = HelpFormatter.Tags.REQUIRED in this.helpTags, transform: CallsTransformer <EachT, AllT>): OptionWithValues <AllT, EachT, ValueT> transformValues Change the number of values that this option takes. fun <EachInT : Any , EachOutT : Any , ValueT> NullableOption <EachInT, ValueT>.transformValues(nvalues: Int , transform: ArgsTransformer <ValueT, EachOutT>): NullableOption <EachOutT, ValueT> triple Change this option to take three values, held in a Triple . fun <EachT : Any , ValueT> NullableOption <EachT, ValueT>.triple(): NullableOption < Triple <ValueT, ValueT, ValueT>, ValueT> unique Make the multiple option return a unique set of calls fun <EachT : Any , ValueT> OptionWithValues < List <EachT>, EachT, ValueT>.unique(): OptionWithValues < Set <EachT>, EachT, ValueT> validate Check the final option value and raise an error if it\u2019s not valid. fun <AllT : Any , EachT, ValueT> OptionWithValues <AllT, EachT, ValueT>.validate(validator: OptionValidator <AllT>): OptionDelegate <AllT>","title":"Extension Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/completion-candidates-with-default/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / completionCandidatesWithDefault completionCandidatesWithDefault \u00b6 val completionCandidatesWithDefault: ValueWithDefault < CompletionCandidates >","title":"Completion candidates with default"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/completion-candidates-with-default/#completioncandidateswithdefault","text":"val completionCandidatesWithDefault: ValueWithDefault < CompletionCandidates >","title":"completionCandidatesWithDefault"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/completion-candidates/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / completionCandidates completionCandidates \u00b6 val completionCandidates: CompletionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this option.","title":"Completion candidates"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/completion-candidates/#completioncandidates","text":"val completionCandidates: CompletionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this option.","title":"completionCandidates"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/copy/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / copy copy \u00b6 fun copy(transformValue: ValueTransformer , transformEach: ArgsTransformer , transformAll: CallsTransformer , validator: OptionValidator , names: Set < String > = this.names, metavarWithDefault: ValueWithDefault < Context .() -> String ?> = this.metavarWithDefault, nvalues: Int = this.nvalues, help: String = this.optionHelp, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, valueSourceKey: String ? = this.valueSourceKey, envvar: String ? = this.envvar, valueSplit: Regex ? = this.valueSplit, parser: OptionWithValuesParser = this.parser, completionCandidatesWithDefault: ValueWithDefault < CompletionCandidates > = this.completionCandidatesWithDefault): OptionWithValues Create a new option that is a copy of this one with different transforms. fun copy(validator: OptionValidator = this.transformValidator, names: Set < String > = this.names, metavarWithDefault: ValueWithDefault < Context .() -> String ?> = this.metavarWithDefault, nvalues: Int = this.nvalues, help: String = this.optionHelp, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, envvar: String ? = this.envvar, valueSourceKey: String ? = this.valueSourceKey, valueSplit: Regex ? = this.valueSplit, parser: OptionWithValuesParser = this.parser, completionCandidatesWithDefault: ValueWithDefault < CompletionCandidates > = this.completionCandidatesWithDefault): OptionWithValues Create a new option that is a copy of this one with the same transforms.","title":"Copy"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/copy/#copy","text":"fun copy(transformValue: ValueTransformer , transformEach: ArgsTransformer , transformAll: CallsTransformer , validator: OptionValidator , names: Set < String > = this.names, metavarWithDefault: ValueWithDefault < Context .() -> String ?> = this.metavarWithDefault, nvalues: Int = this.nvalues, help: String = this.optionHelp, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, valueSourceKey: String ? = this.valueSourceKey, envvar: String ? = this.envvar, valueSplit: Regex ? = this.valueSplit, parser: OptionWithValuesParser = this.parser, completionCandidatesWithDefault: ValueWithDefault < CompletionCandidates > = this.completionCandidatesWithDefault): OptionWithValues Create a new option that is a copy of this one with different transforms. fun copy(validator: OptionValidator = this.transformValidator, names: Set < String > = this.names, metavarWithDefault: ValueWithDefault < Context .() -> String ?> = this.metavarWithDefault, nvalues: Int = this.nvalues, help: String = this.optionHelp, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, envvar: String ? = this.envvar, valueSourceKey: String ? = this.valueSourceKey, valueSplit: Regex ? = this.valueSplit, parser: OptionWithValuesParser = this.parser, completionCandidatesWithDefault: ValueWithDefault < CompletionCandidates > = this.completionCandidatesWithDefault): OptionWithValues Create a new option that is a copy of this one with the same transforms.","title":"copy"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/envvar/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / envvar envvar \u00b6 val envvar: String ? The environment variable name to use. Property \u00b6 envvar - The environment variable name to use.","title":"Envvar"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/envvar/#envvar","text":"val envvar: String ? The environment variable name to use.","title":"envvar"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/envvar/#property","text":"envvar - The environment variable name to use.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/finalize/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / finalize finalize \u00b6 fun finalize(context: Context , invocations: List ): Unit Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. You cannot refer to other parameter values during this call, since they might not have been finalized yet. Parameters \u00b6 context - The context for this parse invocations - A possibly empty list of invocations of this option.","title":"Finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/finalize/#finalize","text":"fun finalize(context: Context , invocations: List ): Unit Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. You cannot refer to other parameter values during this call, since they might not have been finalized yet.","title":"finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/finalize/#parameters","text":"context - The context for this parse invocations - A possibly empty list of invocations of this option.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/group-name/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / groupName groupName \u00b6 var groupName: String ? The name of the group, or null if this option should not be grouped in the help output.","title":"Group name"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/group-name/#groupname","text":"var groupName: String ? The name of the group, or null if this option should not be grouped in the help output.","title":"groupName"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/help-tags/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / helpTags helpTags \u00b6 val helpTags: Map < String , String > Extra information about this option to pass to the help formatter.","title":"Help tags"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/help-tags/#helptags","text":"val helpTags: Map < String , String > Extra information about this option to pass to the help formatter.","title":"helpTags"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/hidden/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / hidden hidden \u00b6 val hidden: Boolean If true, this option should not appear in help output.","title":"Hidden"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/hidden/#hidden","text":"val hidden: Boolean If true, this option should not appear in help output.","title":"hidden"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/metavar-with-default/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / metavarWithDefault metavarWithDefault \u00b6 val metavarWithDefault: ValueWithDefault < Context .() -> String ?> The metavar to use. Specified at option creation. Property \u00b6 metavarWithDefault - The metavar to use. Specified at option creation.","title":"Metavar with default"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/metavar-with-default/#metavarwithdefault","text":"val metavarWithDefault: ValueWithDefault < Context .() -> String ?> The metavar to use. Specified at option creation.","title":"metavarWithDefault"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/metavar-with-default/#property","text":"metavarWithDefault - The metavar to use. Specified at option creation.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/metavar/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / metavar metavar \u00b6 fun metavar(context: Context ): String ? A name representing the values for this option that can be displayed to the user.","title":"Metavar"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/metavar/#metavar","text":"fun metavar(context: Context ): String ? A name representing the values for this option that can be displayed to the user.","title":"metavar"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/names/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / names names \u00b6 var names: Set < String > The names that can be used to invoke this option. They must start with a punctuation character.","title":"Names"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/names/#names","text":"var names: Set < String > The names that can be used to invoke this option. They must start with a punctuation character.","title":"names"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/nvalues/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / nvalues nvalues \u00b6 val nvalues: Int The number of values that must be given to this option.","title":"Nvalues"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/nvalues/#nvalues","text":"val nvalues: Int The number of values that must be given to this option.","title":"nvalues"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/option-help/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / optionHelp optionHelp \u00b6 val optionHelp: String The description of this option, usually a single line.","title":"Option help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/option-help/#optionhelp","text":"val optionHelp: String The description of this option, usually a single line.","title":"optionHelp"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/parameter-group/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / parameterGroup parameterGroup \u00b6 var parameterGroup: ParameterGroup ? The group that this option belongs to, or null. Set by the group.","title":"Parameter group"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/parameter-group/#parametergroup","text":"var parameterGroup: ParameterGroup ? The group that this option belongs to, or null. Set by the group.","title":"parameterGroup"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/parser/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / parser parser \u00b6 val parser: OptionWithValuesParser The parser for this option\u2019s values.","title":"Parser"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/parser/#parser","text":"val parser: OptionWithValuesParser The parser for this option\u2019s values.","title":"parser"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/post-validate/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / postValidate postValidate \u00b6 fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"Post validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/post-validate/#postvalidate","text":"fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"postValidate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/provide-delegate/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / provideDelegate provideDelegate \u00b6 operator fun provideDelegate(thisRef: ParameterHolder , prop: KProperty <*>): ReadOnlyProperty < ParameterHolder , AllT> Implementations must call ParameterHolder.registerOption","title":"Provide delegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/provide-delegate/#providedelegate","text":"operator fun provideDelegate(thisRef: ParameterHolder , prop: KProperty <*>): ReadOnlyProperty < ParameterHolder , AllT> Implementations must call ParameterHolder.registerOption","title":"provideDelegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/secondary-names/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / secondaryNames secondaryNames \u00b6 val secondaryNames: Set < String > Names that can be used for a secondary purpose, like disabling flag options.","title":"Secondary names"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/secondary-names/#secondarynames","text":"val secondaryNames: Set < String > Names that can be used for a secondary purpose, like disabling flag options.","title":"secondaryNames"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/transform-all/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / transformAll transformAll \u00b6 val transformAll: CallsTransformer Called in finalize to transform all invocations into the final value. Property \u00b6 transformAll - Called in finalize to transform all invocations into the final value.","title":"Transform all"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/transform-all/#transformall","text":"val transformAll: CallsTransformer Called in finalize to transform all invocations into the final value.","title":"transformAll"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/transform-all/#property","text":"transformAll - Called in finalize to transform all invocations into the final value.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/transform-each/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / transformEach transformEach \u00b6 val transformEach: ArgsTransformer Called in finalize to transform each invocation. Property \u00b6 transformEach - Called in finalize to transform each invocation.","title":"Transform each"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/transform-each/#transformeach","text":"val transformEach: ArgsTransformer Called in finalize to transform each invocation.","title":"transformEach"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/transform-each/#property","text":"transformEach - Called in finalize to transform each invocation.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/transform-validator/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / transformValidator transformValidator \u00b6 val transformValidator: OptionValidator Called after all parameters have been finalized to validate the output of transformAll Property \u00b6 transformValidator - Called after all parameters have been finalized to validate the output of transformAll","title":"Transform validator"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/transform-validator/#transformvalidator","text":"val transformValidator: OptionValidator Called after all parameters have been finalized to validate the output of transformAll","title":"transformValidator"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/transform-validator/#property","text":"transformValidator - Called after all parameters have been finalized to validate the output of transformAll","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/transform-value/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / transformValue transformValue \u00b6 val transformValue: ValueTransformer Called in finalize to transform each value provided to each invocation. Property \u00b6 transformValue - Called in finalize to transform each value provided to each invocation.","title":"Transform value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/transform-value/#transformvalue","text":"val transformValue: ValueTransformer Called in finalize to transform each value provided to each invocation.","title":"transformValue"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/transform-value/#property","text":"transformValue - Called in finalize to transform each value provided to each invocation.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/value-source-key/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / valueSourceKey valueSourceKey \u00b6 val valueSourceKey: String ? Optional explicit key to use when looking this option up from a ValueSource","title":"Value source key"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/value-source-key/#valuesourcekey","text":"val valueSourceKey: String ? Optional explicit key to use when looking this option up from a ValueSource","title":"valueSourceKey"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/value-split/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / valueSplit valueSplit \u00b6 val valueSplit: Regex ? The pattern to split values from the command line on. By default, values are split on whitespace. Property \u00b6 valueSplit - The pattern to split values from the command line on. By default, values are split on whitespace.","title":"Value split"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/value-split/#valuesplit","text":"val valueSplit: Regex ? The pattern to split values from the command line on. By default, values are split on whitespace.","title":"valueSplit"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/value-split/#property","text":"valueSplit - The pattern to split values from the command line on. By default, values are split on whitespace.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/value/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / value value \u00b6 var value: AllT The value for this option. An exception should be thrown if this property is accessed before finalize is called. Getter The value for this option. An exception should be thrown if this property is accessed before finalize is called.","title":"Value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/value/#value","text":"var value: AllT The value for this option. An exception should be thrown if this property is accessed before finalize is called. Getter The value for this option. An exception should be thrown if this property is accessed before finalize is called.","title":"value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-with-default/","text":"clikt / com.github.ajalt.clikt.parameters.options / ValueWithDefault ValueWithDefault \u00b6 data class ValueWithDefault A container for a value that can have a default value and can be manually set Constructors \u00b6 Name Summary <init> A container for a value that can have a default value and can be manually set ValueWithDefault(explicit: T?, default: T) Properties \u00b6 Name Summary default val default: T explicit val explicit: T? value val value: T Extension Functions \u00b6 Name Summary withDefault Create a copy with a new default value fun <T> ValueWithDefault <T>.withDefault(default: T): ValueWithDefault <T> withExplicit Create a copy with a new explicit value fun <T> ValueWithDefault <T>.withExplicit(explicit: T): ValueWithDefault <T>","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-with-default/#valuewithdefault","text":"data class ValueWithDefault A container for a value that can have a default value and can be manually set","title":"ValueWithDefault"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-with-default/#constructors","text":"Name Summary <init> A container for a value that can have a default value and can be manually set ValueWithDefault(explicit: T?, default: T)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-with-default/#properties","text":"Name Summary default val default: T explicit val explicit: T? value val value: T","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-with-default/#extension-functions","text":"Name Summary withDefault Create a copy with a new default value fun <T> ValueWithDefault <T>.withDefault(default: T): ValueWithDefault <T> withExplicit Create a copy with a new explicit value fun <T> ValueWithDefault <T>.withExplicit(explicit: T): ValueWithDefault <T>","title":"Extension Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-with-default/-init-/","text":"clikt / com.github.ajalt.clikt.parameters.options / ValueWithDefault / <init> <init> \u00b6 ValueWithDefault(explicit: T?, default: T) A container for a value that can have a default value and can be manually set","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-with-default/-init-/#init","text":"ValueWithDefault(explicit: T?, default: T) A container for a value that can have a default value and can be manually set","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-with-default/default/","text":"clikt / com.github.ajalt.clikt.parameters.options / ValueWithDefault / default default \u00b6 val default: T","title":"Default"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-with-default/default/#default","text":"val default: T","title":"default"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-with-default/explicit/","text":"clikt / com.github.ajalt.clikt.parameters.options / ValueWithDefault / explicit explicit \u00b6 val explicit: T?","title":"Explicit"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-with-default/explicit/#explicit","text":"val explicit: T?","title":"explicit"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-with-default/value/","text":"clikt / com.github.ajalt.clikt.parameters.options / ValueWithDefault / value value \u00b6 val value: T","title":"Value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-with-default/value/#value","text":"val value: T","title":"value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/","text":"clikt / com.github.ajalt.clikt.parameters.types Package com.github.ajalt.clikt.parameters.types \u00b6 Functions \u00b6 Name Summary choice Convert the argument based on a fixed set of values. fun <T : Any > RawArgument .choice(choices: Map < String , T>, ignoreCase: Boolean = false): ProcessedArgument <T, T> fun <T : Any > RawArgument .choice(vararg choices: Pair < String , T>, ignoreCase: Boolean = false): ProcessedArgument <T, T> Restrict the argument to a fixed set of values. fun RawArgument .choice(vararg choices: String , ignoreCase: Boolean = false): ProcessedArgument < String , String > Convert the option based on a fixed set of values. fun <T : Any > RawOption .choice(choices: Map < String , T>, metavar: String = mvar(choices.keys), ignoreCase: Boolean = false): NullableOption <T, T> fun <T : Any > RawOption .choice(vararg choices: Pair < String , T>, metavar: String = mvar(choices.map { it.first }), ignoreCase: Boolean = false): NullableOption <T, T> Restrict the option to a fixed set of values. fun RawOption .choice(vararg choices: String , metavar: String = mvar(choices.asIterable()), ignoreCase: Boolean = false): NullableOption < String , String > defaultStdin Use - as the default value for an inputStream option. fun NullableOption < InputStream , InputStream >.defaultStdin(): OptionWithValues < InputStream , InputStream , InputStream > Use - as the default value for an inputStream argument. fun ProcessedArgument < InputStream , InputStream >.defaultStdin(): ArgumentDelegate < InputStream > defaultStdout Use - as the default value for an outputStream option. fun NullableOption < OutputStream , OutputStream >.defaultStdout(): OptionWithValues < OutputStream , OutputStream , OutputStream > Use - as the default value for an outputStream argument. fun ProcessedArgument < OutputStream , OutputStream >.defaultStdout(): ArgumentDelegate < OutputStream > double Convert the argument values to a Double``fun RawArgument .double(): ProcessedArgument < Double , Double > Convert the option values to a Double``fun RawOption .double(): NullableOption < Double , Double > enum Convert the argument to the values of an enum. fun <T : Enum <T>> RawArgument .enum(ignoreCase: Boolean = true, key: (T) -> String = { it.name }): ProcessedArgument <T, T> Convert the option to the values of an enum. fun <T : Enum <T>> RawOption .enum(ignoreCase: Boolean = true, key: (T) -> String = { it.name }): NullableOption <T, T> file Convert the argument to a File . fun RawArgument .file(mustExist: Boolean = false, canBeFile: Boolean = true, canBeDir: Boolean = true, mustBeWritable: Boolean = false, mustBeReadable: Boolean = false, canBeSymlink: Boolean = true): ProcessedArgument < File , File > Convert the option to a File . fun RawOption .file(mustExist: Boolean = false, canBeFile: Boolean = true, canBeDir: Boolean = true, mustBeWritable: Boolean = false, mustBeReadable: Boolean = false, canBeSymlink: Boolean = true): NullableOption < File , File > float Convert the argument values to a Float``fun RawArgument .float(): ProcessedArgument < Float , Float > Convert the option values to a Float``fun RawOption .float(): NullableOption < Float , Float > inputStream Convert the option to an InputStream . fun RawOption .inputStream(fileSystem: FileSystem = FileSystems.getDefault()): NullableOption < InputStream , InputStream > Convert the argument to an InputStream . fun RawArgument .inputStream(fileSystem: FileSystem = FileSystems.getDefault()): ProcessedArgument < InputStream , InputStream > int Convert the argument values to an Int``fun RawArgument .int(): ProcessedArgument < Int , Int > Convert the option values to an Int``fun RawOption .int(): NullableOption < Int , Int > long Convert the argument values to a Long``fun RawArgument .long(): ProcessedArgument < Long , Long > Convert the option values to a Long``fun RawOption .long(): NullableOption < Long , Long > outputStream Convert the option to an OutputStream . fun RawOption .outputStream(createIfNotExist: Boolean = true, truncateExisting: Boolean = false, fileSystem: FileSystem = FileSystems.getDefault()): NullableOption < OutputStream , OutputStream > Convert the argument to an OutputStream . fun RawArgument .outputStream(createIfNotExist: Boolean = true, truncateExisting: Boolean = false, fileSystem: FileSystem = FileSystems.getDefault()): ProcessedArgument < OutputStream , OutputStream > path Convert the argument to a Path . fun RawArgument .path(mustExist: Boolean = false, canBeFile: Boolean = true, canBeDir: Boolean = true, mustBeWritable: Boolean = false, mustBeReadable: Boolean = false, canBeSymlink: Boolean = true, fileSystem: FileSystem = FileSystems.getDefault()): ProcessedArgument <Path, Path> Convert the option to a Path . fun RawOption .path(mustExist: Boolean = false, canBeFile: Boolean = true, canBeDir: Boolean = true, mustBeWritable: Boolean = false, mustBeReadable: Boolean = false, canBeSymlink: Boolean = true, fileSystem: FileSystem = FileSystems.getDefault()): NullableOption <Path, Path> restrictTo Restrict the argument values to fit into a range. fun <T : Comparable <T>> ProcessedArgument <T, T>.restrictTo(min: T? = null, max: T? = null, clamp: Boolean = false): ProcessedArgument <T, T> fun <T : Comparable <T>> ProcessedArgument <T, T>.restrictTo(range: ClosedRange <T>, clamp: Boolean = false): ProcessedArgument <T, T> Restrict the option values to fit into a range. fun <T : Comparable <T>> OptionWithValues <T?, T, T>.restrictTo(min: T? = null, max: T? = null, clamp: Boolean = false): OptionWithValues <T?, T, T> fun <T : Comparable <T>> OptionWithValues <T?, T, T>.restrictTo(range: ClosedRange <T>, clamp: Boolean = false): OptionWithValues <T?, T, T>","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/#package-comgithubajaltcliktparameterstypes","text":"","title":"Package com.github.ajalt.clikt.parameters.types"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/#functions","text":"Name Summary choice Convert the argument based on a fixed set of values. fun <T : Any > RawArgument .choice(choices: Map < String , T>, ignoreCase: Boolean = false): ProcessedArgument <T, T> fun <T : Any > RawArgument .choice(vararg choices: Pair < String , T>, ignoreCase: Boolean = false): ProcessedArgument <T, T> Restrict the argument to a fixed set of values. fun RawArgument .choice(vararg choices: String , ignoreCase: Boolean = false): ProcessedArgument < String , String > Convert the option based on a fixed set of values. fun <T : Any > RawOption .choice(choices: Map < String , T>, metavar: String = mvar(choices.keys), ignoreCase: Boolean = false): NullableOption <T, T> fun <T : Any > RawOption .choice(vararg choices: Pair < String , T>, metavar: String = mvar(choices.map { it.first }), ignoreCase: Boolean = false): NullableOption <T, T> Restrict the option to a fixed set of values. fun RawOption .choice(vararg choices: String , metavar: String = mvar(choices.asIterable()), ignoreCase: Boolean = false): NullableOption < String , String > defaultStdin Use - as the default value for an inputStream option. fun NullableOption < InputStream , InputStream >.defaultStdin(): OptionWithValues < InputStream , InputStream , InputStream > Use - as the default value for an inputStream argument. fun ProcessedArgument < InputStream , InputStream >.defaultStdin(): ArgumentDelegate < InputStream > defaultStdout Use - as the default value for an outputStream option. fun NullableOption < OutputStream , OutputStream >.defaultStdout(): OptionWithValues < OutputStream , OutputStream , OutputStream > Use - as the default value for an outputStream argument. fun ProcessedArgument < OutputStream , OutputStream >.defaultStdout(): ArgumentDelegate < OutputStream > double Convert the argument values to a Double``fun RawArgument .double(): ProcessedArgument < Double , Double > Convert the option values to a Double``fun RawOption .double(): NullableOption < Double , Double > enum Convert the argument to the values of an enum. fun <T : Enum <T>> RawArgument .enum(ignoreCase: Boolean = true, key: (T) -> String = { it.name }): ProcessedArgument <T, T> Convert the option to the values of an enum. fun <T : Enum <T>> RawOption .enum(ignoreCase: Boolean = true, key: (T) -> String = { it.name }): NullableOption <T, T> file Convert the argument to a File . fun RawArgument .file(mustExist: Boolean = false, canBeFile: Boolean = true, canBeDir: Boolean = true, mustBeWritable: Boolean = false, mustBeReadable: Boolean = false, canBeSymlink: Boolean = true): ProcessedArgument < File , File > Convert the option to a File . fun RawOption .file(mustExist: Boolean = false, canBeFile: Boolean = true, canBeDir: Boolean = true, mustBeWritable: Boolean = false, mustBeReadable: Boolean = false, canBeSymlink: Boolean = true): NullableOption < File , File > float Convert the argument values to a Float``fun RawArgument .float(): ProcessedArgument < Float , Float > Convert the option values to a Float``fun RawOption .float(): NullableOption < Float , Float > inputStream Convert the option to an InputStream . fun RawOption .inputStream(fileSystem: FileSystem = FileSystems.getDefault()): NullableOption < InputStream , InputStream > Convert the argument to an InputStream . fun RawArgument .inputStream(fileSystem: FileSystem = FileSystems.getDefault()): ProcessedArgument < InputStream , InputStream > int Convert the argument values to an Int``fun RawArgument .int(): ProcessedArgument < Int , Int > Convert the option values to an Int``fun RawOption .int(): NullableOption < Int , Int > long Convert the argument values to a Long``fun RawArgument .long(): ProcessedArgument < Long , Long > Convert the option values to a Long``fun RawOption .long(): NullableOption < Long , Long > outputStream Convert the option to an OutputStream . fun RawOption .outputStream(createIfNotExist: Boolean = true, truncateExisting: Boolean = false, fileSystem: FileSystem = FileSystems.getDefault()): NullableOption < OutputStream , OutputStream > Convert the argument to an OutputStream . fun RawArgument .outputStream(createIfNotExist: Boolean = true, truncateExisting: Boolean = false, fileSystem: FileSystem = FileSystems.getDefault()): ProcessedArgument < OutputStream , OutputStream > path Convert the argument to a Path . fun RawArgument .path(mustExist: Boolean = false, canBeFile: Boolean = true, canBeDir: Boolean = true, mustBeWritable: Boolean = false, mustBeReadable: Boolean = false, canBeSymlink: Boolean = true, fileSystem: FileSystem = FileSystems.getDefault()): ProcessedArgument <Path, Path> Convert the option to a Path . fun RawOption .path(mustExist: Boolean = false, canBeFile: Boolean = true, canBeDir: Boolean = true, mustBeWritable: Boolean = false, mustBeReadable: Boolean = false, canBeSymlink: Boolean = true, fileSystem: FileSystem = FileSystems.getDefault()): NullableOption <Path, Path> restrictTo Restrict the argument values to fit into a range. fun <T : Comparable <T>> ProcessedArgument <T, T>.restrictTo(min: T? = null, max: T? = null, clamp: Boolean = false): ProcessedArgument <T, T> fun <T : Comparable <T>> ProcessedArgument <T, T>.restrictTo(range: ClosedRange <T>, clamp: Boolean = false): ProcessedArgument <T, T> Restrict the option values to fit into a range. fun <T : Comparable <T>> OptionWithValues <T?, T, T>.restrictTo(min: T? = null, max: T? = null, clamp: Boolean = false): OptionWithValues <T?, T, T> fun <T : Comparable <T>> OptionWithValues <T?, T, T>.restrictTo(range: ClosedRange <T>, clamp: Boolean = false): OptionWithValues <T?, T, T>","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/choice/","text":"clikt / com.github.ajalt.clikt.parameters.types / choice choice \u00b6 fun Any > RawArgument .choice(choices: Map < String , T>, ignoreCase: Boolean = false): ProcessedArgument Convert the argument based on a fixed set of values. If ignoreCase is true , the argument will accept values is any mix of upper and lower case. Example: \u00b6 argument().choice(mapOf(\u201cfoo\u201d to 1, \u201cbar\u201d to 2)) fun Any > RawArgument .choice(vararg choices: Pair < String , T>, ignoreCase: Boolean = false): ProcessedArgument Convert the argument based on a fixed set of values. If ignoreCase is true , the argument will accept values is any mix of upper and lower case. Example: \u00b6 argument().choice(\u201cfoo\u201d to 1, \u201cbar\u201d to 2) fun RawArgument .choice(vararg choices: String , ignoreCase: Boolean = false): ProcessedArgument < String , String > Restrict the argument to a fixed set of values. If ignoreCase is true , the argument will accept values is any mix of upper and lower case. The argument\u2019s final value will always match the case of the corresponding value in choices . Example: \u00b6 argument().choice(\u201cfoo\u201d, \u201cbar\u201d) fun Any > RawOption .choice(choices: Map < String , T>, metavar: String = mvar(choices.keys), ignoreCase: Boolean = false): NullableOption Convert the option based on a fixed set of values. If ignoreCase is true , the option will accept values is any mix of upper and lower case. Example: \u00b6 option().choice(mapOf(\u201cfoo\u201d to 1, \u201cbar\u201d to 2)) See Also com.github.ajalt.clikt.parameters.groups.groupChoice fun Any > RawOption .choice(vararg choices: Pair < String , T>, metavar: String = mvar(choices.map { it.first }), ignoreCase: Boolean = false): NullableOption Convert the option based on a fixed set of values. If ignoreCase is true , the option will accept values is any mix of upper and lower case. Example: \u00b6 option().choice(\u201cfoo\u201d to 1, \u201cbar\u201d to 2) See Also com.github.ajalt.clikt.parameters.groups.groupChoice fun RawOption .choice(vararg choices: String , metavar: String = mvar(choices.asIterable()), ignoreCase: Boolean = false): NullableOption < String , String > Restrict the option to a fixed set of values. If ignoreCase is true , the option will accept values is any mix of upper and lower case. The option\u2019s final value will always match the case of the corresponding value in choices . Example: \u00b6 option().choice(\u201cfoo\u201d, \u201cbar\u201d)","title":"Choice"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/choice/#choice","text":"fun Any > RawArgument .choice(choices: Map < String , T>, ignoreCase: Boolean = false): ProcessedArgument Convert the argument based on a fixed set of values. If ignoreCase is true , the argument will accept values is any mix of upper and lower case.","title":"choice"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/choice/#example","text":"argument().choice(mapOf(\u201cfoo\u201d to 1, \u201cbar\u201d to 2)) fun Any > RawArgument .choice(vararg choices: Pair < String , T>, ignoreCase: Boolean = false): ProcessedArgument Convert the argument based on a fixed set of values. If ignoreCase is true , the argument will accept values is any mix of upper and lower case.","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/choice/#example_1","text":"argument().choice(\u201cfoo\u201d to 1, \u201cbar\u201d to 2) fun RawArgument .choice(vararg choices: String , ignoreCase: Boolean = false): ProcessedArgument < String , String > Restrict the argument to a fixed set of values. If ignoreCase is true , the argument will accept values is any mix of upper and lower case. The argument\u2019s final value will always match the case of the corresponding value in choices .","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/choice/#example_2","text":"argument().choice(\u201cfoo\u201d, \u201cbar\u201d) fun Any > RawOption .choice(choices: Map < String , T>, metavar: String = mvar(choices.keys), ignoreCase: Boolean = false): NullableOption Convert the option based on a fixed set of values. If ignoreCase is true , the option will accept values is any mix of upper and lower case.","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/choice/#example_3","text":"option().choice(mapOf(\u201cfoo\u201d to 1, \u201cbar\u201d to 2)) See Also com.github.ajalt.clikt.parameters.groups.groupChoice fun Any > RawOption .choice(vararg choices: Pair < String , T>, metavar: String = mvar(choices.map { it.first }), ignoreCase: Boolean = false): NullableOption Convert the option based on a fixed set of values. If ignoreCase is true , the option will accept values is any mix of upper and lower case.","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/choice/#example_4","text":"option().choice(\u201cfoo\u201d to 1, \u201cbar\u201d to 2) See Also com.github.ajalt.clikt.parameters.groups.groupChoice fun RawOption .choice(vararg choices: String , metavar: String = mvar(choices.asIterable()), ignoreCase: Boolean = false): NullableOption < String , String > Restrict the option to a fixed set of values. If ignoreCase is true , the option will accept values is any mix of upper and lower case. The option\u2019s final value will always match the case of the corresponding value in choices .","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/choice/#example_5","text":"option().choice(\u201cfoo\u201d, \u201cbar\u201d)","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/default-stdin/","text":"clikt / com.github.ajalt.clikt.parameters.types / defaultStdin defaultStdin \u00b6 fun NullableOption < InputStream , InputStream >.defaultStdin(): OptionWithValues < InputStream , InputStream , InputStream > Use - as the default value for an inputStream option. fun ProcessedArgument < InputStream , InputStream >.defaultStdin(): ArgumentDelegate < InputStream > Use - as the default value for an inputStream argument.","title":"Default stdin"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/default-stdin/#defaultstdin","text":"fun NullableOption < InputStream , InputStream >.defaultStdin(): OptionWithValues < InputStream , InputStream , InputStream > Use - as the default value for an inputStream option. fun ProcessedArgument < InputStream , InputStream >.defaultStdin(): ArgumentDelegate < InputStream > Use - as the default value for an inputStream argument.","title":"defaultStdin"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/default-stdout/","text":"clikt / com.github.ajalt.clikt.parameters.types / defaultStdout defaultStdout \u00b6 fun NullableOption < OutputStream , OutputStream >.defaultStdout(): OptionWithValues < OutputStream , OutputStream , OutputStream > Use - as the default value for an outputStream option. fun ProcessedArgument < OutputStream , OutputStream >.defaultStdout(): ArgumentDelegate < OutputStream > Use - as the default value for an outputStream argument.","title":"Default stdout"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/default-stdout/#defaultstdout","text":"fun NullableOption < OutputStream , OutputStream >.defaultStdout(): OptionWithValues < OutputStream , OutputStream , OutputStream > Use - as the default value for an outputStream option. fun ProcessedArgument < OutputStream , OutputStream >.defaultStdout(): ArgumentDelegate < OutputStream > Use - as the default value for an outputStream argument.","title":"defaultStdout"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/double/","text":"clikt / com.github.ajalt.clikt.parameters.types / double double \u00b6 fun RawArgument .double(): ProcessedArgument < Double , Double > Convert the argument values to a Double fun RawOption .double(): NullableOption < Double , Double > Convert the option values to a Double","title":"Double"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/double/#double","text":"fun RawArgument .double(): ProcessedArgument < Double , Double > Convert the argument values to a Double fun RawOption .double(): NullableOption < Double , Double > Convert the option values to a Double","title":"double"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/enum/","text":"clikt / com.github.ajalt.clikt.parameters.types / enum enum \u00b6 inline fun Enum \\ > RawArgument .enum(ignoreCase: Boolean = true, key: (T) -> String = { it.name }): ProcessedArgument Convert the argument to the values of an enum. If ignoreCase is false , the argument will only accept values that match the case of the enum values. Example: \u00b6 enum class Size { SMALL, LARGE } argument().enum () Parameters \u00b6 key - A block that returns the command line value to use for an enum value. The default is the enum name. inline fun <reified T : Enum <T>> RawOption .enum(ignoreCase: Boolean = true, key: (T) -> String = { it.name }): NullableOption <T, T> Convert the option to the values of an enum. If ignoreCase is false , the option will only accept values that match the case of the enum values. Example: \u00b6 enum class Size { SMALL, LARGE } option().enum () Parameters \u00b6 key - A block that returns the command line value to use for an enum value. The default is the enum name.","title":"Enum"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/enum/#enum","text":"inline fun Enum \\ > RawArgument .enum(ignoreCase: Boolean = true, key: (T) -> String = { it.name }): ProcessedArgument Convert the argument to the values of an enum. If ignoreCase is false , the argument will only accept values that match the case of the enum values.","title":"enum"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/enum/#example","text":"enum class Size { SMALL, LARGE } argument().enum ()","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/enum/#parameters","text":"key - A block that returns the command line value to use for an enum value. The default is the enum name. inline fun <reified T : Enum <T>> RawOption .enum(ignoreCase: Boolean = true, key: (T) -> String = { it.name }): NullableOption <T, T> Convert the option to the values of an enum. If ignoreCase is false , the option will only accept values that match the case of the enum values.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/enum/#example_1","text":"enum class Size { SMALL, LARGE } option().enum ()","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/enum/#parameters_1","text":"key - A block that returns the command line value to use for an enum value. The default is the enum name.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/file/","text":"clikt / com.github.ajalt.clikt.parameters.types / file file \u00b6 fun RawArgument .file(mustExist: Boolean = false, canBeFile: Boolean = true, canBeDir: Boolean = true, mustBeWritable: Boolean = false, mustBeReadable: Boolean = false, canBeSymlink: Boolean = true): ProcessedArgument < File , File > Convert the argument to a File . Parameters \u00b6 mustExist - If true, fail if the given path does not exist canBeFile - If false, fail if the given path is a file canBeDir - If false, fail if the given path is a directory mustBeWritable - If true, fail if the given path is not writable mustBeReadable - If true, fail if the given path is not readable canBeSymlink - If false, fail if the given path is a symlinkfun RawOption .file(mustExist: Boolean = false, canBeFile: Boolean = true, canBeDir: Boolean = true, mustBeWritable: Boolean = false, mustBeReadable: Boolean = false, canBeSymlink: Boolean = true): NullableOption < File , File > Convert the option to a File . Parameters \u00b6 mustExist - If true, fail if the given path does not exist canBeFile - If false, fail if the given path is a file canBeDir - If false, fail if the given path is a directory mustBeWritable - If true, fail if the given path is not writable mustBeReadable - If true, fail if the given path is not readable canBeSymlink - If false, fail if the given path is a symlink","title":"File"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/file/#file","text":"fun RawArgument .file(mustExist: Boolean = false, canBeFile: Boolean = true, canBeDir: Boolean = true, mustBeWritable: Boolean = false, mustBeReadable: Boolean = false, canBeSymlink: Boolean = true): ProcessedArgument < File , File > Convert the argument to a File .","title":"file"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/file/#parameters","text":"mustExist - If true, fail if the given path does not exist canBeFile - If false, fail if the given path is a file canBeDir - If false, fail if the given path is a directory mustBeWritable - If true, fail if the given path is not writable mustBeReadable - If true, fail if the given path is not readable canBeSymlink - If false, fail if the given path is a symlinkfun RawOption .file(mustExist: Boolean = false, canBeFile: Boolean = true, canBeDir: Boolean = true, mustBeWritable: Boolean = false, mustBeReadable: Boolean = false, canBeSymlink: Boolean = true): NullableOption < File , File > Convert the option to a File .","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/file/#parameters_1","text":"mustExist - If true, fail if the given path does not exist canBeFile - If false, fail if the given path is a file canBeDir - If false, fail if the given path is a directory mustBeWritable - If true, fail if the given path is not writable mustBeReadable - If true, fail if the given path is not readable canBeSymlink - If false, fail if the given path is a symlink","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/float/","text":"clikt / com.github.ajalt.clikt.parameters.types / float float \u00b6 fun RawArgument .float(): ProcessedArgument < Float , Float > Convert the argument values to a Float fun RawOption .float(): NullableOption < Float , Float > Convert the option values to a Float","title":"Float"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/float/#float","text":"fun RawArgument .float(): ProcessedArgument < Float , Float > Convert the argument values to a Float fun RawOption .float(): NullableOption < Float , Float > Convert the option values to a Float","title":"float"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/input-stream/","text":"clikt / com.github.ajalt.clikt.parameters.types / inputStream inputStream \u00b6 fun RawOption .inputStream(fileSystem: FileSystem = FileSystems.getDefault()): NullableOption < InputStream , InputStream > Convert the option to an InputStream . The value given on the command line must be either a path to a readable file, or - . If - is given, stdin will be used. If stdin is used, the resulting InputStream will be a proxy for System.in that will not close the underlying stream. So you can always close the resulting stream without worrying about accidentally closing System.in . fun RawArgument .inputStream(fileSystem: FileSystem = FileSystems.getDefault()): ProcessedArgument < InputStream , InputStream > Convert the argument to an InputStream . The value given on the command line must be either a path to a readable file, or - . If - is given, stdin will be used. If stdin is used, the resulting InputStream will be a proxy for System.in that will not close the underlying stream. So you can always close the resulting stream without worrying about accidentally closing System.in .","title":"Input stream"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/input-stream/#inputstream","text":"fun RawOption .inputStream(fileSystem: FileSystem = FileSystems.getDefault()): NullableOption < InputStream , InputStream > Convert the option to an InputStream . The value given on the command line must be either a path to a readable file, or - . If - is given, stdin will be used. If stdin is used, the resulting InputStream will be a proxy for System.in that will not close the underlying stream. So you can always close the resulting stream without worrying about accidentally closing System.in . fun RawArgument .inputStream(fileSystem: FileSystem = FileSystems.getDefault()): ProcessedArgument < InputStream , InputStream > Convert the argument to an InputStream . The value given on the command line must be either a path to a readable file, or - . If - is given, stdin will be used. If stdin is used, the resulting InputStream will be a proxy for System.in that will not close the underlying stream. So you can always close the resulting stream without worrying about accidentally closing System.in .","title":"inputStream"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/int/","text":"clikt / com.github.ajalt.clikt.parameters.types / int int \u00b6 fun RawArgument .int(): ProcessedArgument < Int , Int > Convert the argument values to an Int fun RawOption .int(): NullableOption < Int , Int > Convert the option values to an Int","title":"Int"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/int/#int","text":"fun RawArgument .int(): ProcessedArgument < Int , Int > Convert the argument values to an Int fun RawOption .int(): NullableOption < Int , Int > Convert the option values to an Int","title":"int"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/long/","text":"clikt / com.github.ajalt.clikt.parameters.types / long long \u00b6 fun RawArgument .long(): ProcessedArgument < Long , Long > Convert the argument values to a Long fun RawOption .long(): NullableOption < Long , Long > Convert the option values to a Long","title":"Long"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/long/#long","text":"fun RawArgument .long(): ProcessedArgument < Long , Long > Convert the argument values to a Long fun RawOption .long(): NullableOption < Long , Long > Convert the option values to a Long","title":"long"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/output-stream/","text":"clikt / com.github.ajalt.clikt.parameters.types / outputStream outputStream \u00b6 fun RawOption .outputStream(createIfNotExist: Boolean = true, truncateExisting: Boolean = false, fileSystem: FileSystem = FileSystems.getDefault()): NullableOption < OutputStream , OutputStream > Convert the option to an OutputStream . The value given on the command line must be either a path to a writable file, or - . If - is given, stdout will be used. If stdout is used, the resulting OutputStream will be a proxy for System.out that will not close the underlying stream. So you can always close the resulting stream without worrying about accidentally closing System.out . Parameters \u00b6 createIfNotExist - If false, an error will be reported if the given value doesn\u2019t exist. By default, the file will be created. truncateExisting - If true, existing files will be truncated when opened. By default, the file will be appended to.fun RawArgument .outputStream(createIfNotExist: Boolean = true, truncateExisting: Boolean = false, fileSystem: FileSystem = FileSystems.getDefault()): ProcessedArgument < OutputStream , OutputStream > Convert the argument to an OutputStream . The value given on the command line must be either a path to a writable file, or - . If - is given, stdout will be used. If stdout is used, the resulting OutputStream will be a proxy for System.out that will not close the underlying stream. So you can always close the resulting stream without worrying about accidentally closing System.out . Parameters \u00b6 createIfNotExist - If false, an error will be reported if the given value doesn\u2019t exist. By default, the file will be created. truncateExisting - If true, existing files will be truncated when opened. By default, the file will be appended to.","title":"Output stream"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/output-stream/#outputstream","text":"fun RawOption .outputStream(createIfNotExist: Boolean = true, truncateExisting: Boolean = false, fileSystem: FileSystem = FileSystems.getDefault()): NullableOption < OutputStream , OutputStream > Convert the option to an OutputStream . The value given on the command line must be either a path to a writable file, or - . If - is given, stdout will be used. If stdout is used, the resulting OutputStream will be a proxy for System.out that will not close the underlying stream. So you can always close the resulting stream without worrying about accidentally closing System.out .","title":"outputStream"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/output-stream/#parameters","text":"createIfNotExist - If false, an error will be reported if the given value doesn\u2019t exist. By default, the file will be created. truncateExisting - If true, existing files will be truncated when opened. By default, the file will be appended to.fun RawArgument .outputStream(createIfNotExist: Boolean = true, truncateExisting: Boolean = false, fileSystem: FileSystem = FileSystems.getDefault()): ProcessedArgument < OutputStream , OutputStream > Convert the argument to an OutputStream . The value given on the command line must be either a path to a writable file, or - . If - is given, stdout will be used. If stdout is used, the resulting OutputStream will be a proxy for System.out that will not close the underlying stream. So you can always close the resulting stream without worrying about accidentally closing System.out .","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/output-stream/#parameters_1","text":"createIfNotExist - If false, an error will be reported if the given value doesn\u2019t exist. By default, the file will be created. truncateExisting - If true, existing files will be truncated when opened. By default, the file will be appended to.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/path/","text":"clikt / com.github.ajalt.clikt.parameters.types / path path \u00b6 fun RawArgument .path(mustExist: Boolean = false, canBeFile: Boolean = true, canBeDir: Boolean = true, mustBeWritable: Boolean = false, mustBeReadable: Boolean = false, canBeSymlink: Boolean = true, fileSystem: FileSystem = FileSystems.getDefault()): ProcessedArgument Convert the argument to a Path . Parameters \u00b6 mustExist - If true, fail if the given path does not exist canBeFile - If false, fail if the given path is a file canBeDir - If false, fail if the given path is a directory mustBeWritable - If true, fail if the given path is not writable mustBeReadable - If true, fail if the given path is not readable fileSystem - The FileSystem with which to resolve paths canBeSymlink - If false, fail if the given path is a symlinkfun RawOption .path(mustExist: Boolean = false, canBeFile: Boolean = true, canBeDir: Boolean = true, mustBeWritable: Boolean = false, mustBeReadable: Boolean = false, canBeSymlink: Boolean = true, fileSystem: FileSystem = FileSystems.getDefault()): NullableOption Convert the option to a Path . Parameters \u00b6 mustExist - If true, fail if the given path does not exist canBeFile - If false, fail if the given path is a file canBeDir - If false, fail if the given path is a directory mustBeWritable - If true, fail if the given path is not writable mustBeReadable - If true, fail if the given path is not readable fileSystem - The FileSystem with which to resolve paths. canBeSymlink - If false, fail if the given path is a symlink","title":"Path"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/path/#path","text":"fun RawArgument .path(mustExist: Boolean = false, canBeFile: Boolean = true, canBeDir: Boolean = true, mustBeWritable: Boolean = false, mustBeReadable: Boolean = false, canBeSymlink: Boolean = true, fileSystem: FileSystem = FileSystems.getDefault()): ProcessedArgument Convert the argument to a Path .","title":"path"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/path/#parameters","text":"mustExist - If true, fail if the given path does not exist canBeFile - If false, fail if the given path is a file canBeDir - If false, fail if the given path is a directory mustBeWritable - If true, fail if the given path is not writable mustBeReadable - If true, fail if the given path is not readable fileSystem - The FileSystem with which to resolve paths canBeSymlink - If false, fail if the given path is a symlinkfun RawOption .path(mustExist: Boolean = false, canBeFile: Boolean = true, canBeDir: Boolean = true, mustBeWritable: Boolean = false, mustBeReadable: Boolean = false, canBeSymlink: Boolean = true, fileSystem: FileSystem = FileSystems.getDefault()): NullableOption Convert the option to a Path .","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/path/#parameters_1","text":"mustExist - If true, fail if the given path does not exist canBeFile - If false, fail if the given path is a file canBeDir - If false, fail if the given path is a directory mustBeWritable - If true, fail if the given path is not writable mustBeReadable - If true, fail if the given path is not readable fileSystem - The FileSystem with which to resolve paths. canBeSymlink - If false, fail if the given path is a symlink","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/restrict-to/","text":"clikt / com.github.ajalt.clikt.parameters.types / restrictTo restrictTo \u00b6 fun Comparable \\ > ProcessedArgument .restrictTo(min: T? = null, max: T? = null, clamp: Boolean = false): ProcessedArgument Restrict the argument values to fit into a range. By default, conversion fails if the value is outside the range, but if clamp is true, the value will be silently clamped to fit in the range. This must be called before transforms like pair , default , or multiple , since it checks each individual value. Example: \u00b6 argument().int().restrictTo(max=10, clamp=true).default(10) fun Comparable \\ > ProcessedArgument .restrictTo(range: ClosedRange , clamp: Boolean = false): ProcessedArgument Restrict the argument values to fit into a range. By default, conversion fails if the value is outside the range, but if clamp is true, the value will be silently clamped to fit in the range. This must be called before transforms like pair , default , or multiple , since it checks each individual value. Example: \u00b6 argument().int().restrictTo(1..10, clamp=true).default(10) fun Comparable \\ > OptionWithValues .restrictTo(min: T? = null, max: T? = null, clamp: Boolean = false): OptionWithValues Restrict the option values to fit into a range. By default, conversion fails if the value is outside the range, but if clamp is true, the value will be silently clamped to fit in the range. This must be called before transforms like pair , default , or multiple , since it checks each individual value. Example: \u00b6 option().int().restrictTo(max=10, clamp=true).default(10) fun Comparable \\ > OptionWithValues .restrictTo(range: ClosedRange , clamp: Boolean = false): OptionWithValues Restrict the option values to fit into a range. By default, conversion fails if the value is outside the range, but if clamp is true, the value will be silently clamped to fit in the range. This must be called before transforms like pair , default , or multiple , since it checks each individual value. Example: \u00b6 option().int().restrictTo(1..10, clamp=true).default(10)","title":"Restrict to"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/restrict-to/#restrictto","text":"fun Comparable \\ > ProcessedArgument .restrictTo(min: T? = null, max: T? = null, clamp: Boolean = false): ProcessedArgument Restrict the argument values to fit into a range. By default, conversion fails if the value is outside the range, but if clamp is true, the value will be silently clamped to fit in the range. This must be called before transforms like pair , default , or multiple , since it checks each individual value.","title":"restrictTo"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/restrict-to/#example","text":"argument().int().restrictTo(max=10, clamp=true).default(10) fun Comparable \\ > ProcessedArgument .restrictTo(range: ClosedRange , clamp: Boolean = false): ProcessedArgument Restrict the argument values to fit into a range. By default, conversion fails if the value is outside the range, but if clamp is true, the value will be silently clamped to fit in the range. This must be called before transforms like pair , default , or multiple , since it checks each individual value.","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/restrict-to/#example_1","text":"argument().int().restrictTo(1..10, clamp=true).default(10) fun Comparable \\ > OptionWithValues .restrictTo(min: T? = null, max: T? = null, clamp: Boolean = false): OptionWithValues Restrict the option values to fit into a range. By default, conversion fails if the value is outside the range, but if clamp is true, the value will be silently clamped to fit in the range. This must be called before transforms like pair , default , or multiple , since it checks each individual value.","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/restrict-to/#example_2","text":"option().int().restrictTo(max=10, clamp=true).default(10) fun Comparable \\ > OptionWithValues .restrictTo(range: ClosedRange , clamp: Boolean = false): OptionWithValues Restrict the option values to fit into a range. By default, conversion fails if the value is outside the range, but if clamp is true, the value will be silently clamped to fit in the range. This must be called before transforms like pair , default , or multiple , since it checks each individual value.","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/restrict-to/#example_3","text":"option().int().restrictTo(1..10, clamp=true).default(10)","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/","text":"clikt / com.github.ajalt.clikt.parsers Package com.github.ajalt.clikt.parsers \u00b6 Types \u00b6 Name Summary FlagOptionParser A parser for options that take no values. object FlagOptionParser : OptionParser OptionParser A parser for Option s. interface OptionParser OptionWithValuesParser An option that takes one more values object OptionWithValuesParser : OptionParser","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/#package-comgithubajaltcliktparsers","text":"","title":"Package com.github.ajalt.clikt.parsers"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/#types","text":"Name Summary FlagOptionParser A parser for options that take no values. object FlagOptionParser : OptionParser OptionParser A parser for Option s. interface OptionParser OptionWithValuesParser An option that takes one more values object OptionWithValuesParser : OptionParser","title":"Types"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-flag-option-parser/","text":"clikt / com.github.ajalt.clikt.parsers / FlagOptionParser FlagOptionParser \u00b6 object FlagOptionParser : OptionParser A parser for options that take no values. Functions \u00b6 Name Summary parseLongOpt Parse a single long option and its value. fun parseLongOpt(option: Option , name: String , argv: List < String >, index: Int , explicitValue: String ?): ParseResult parseShortOpt Parse a single short option and its value. fun parseShortOpt(option: Option , name: String , argv: List < String >, index: Int , optionIndex: Int ): ParseResult","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-flag-option-parser/#flagoptionparser","text":"object FlagOptionParser : OptionParser A parser for options that take no values.","title":"FlagOptionParser"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-flag-option-parser/#functions","text":"Name Summary parseLongOpt Parse a single long option and its value. fun parseLongOpt(option: Option , name: String , argv: List < String >, index: Int , explicitValue: String ?): ParseResult parseShortOpt Parse a single short option and its value. fun parseShortOpt(option: Option , name: String , argv: List < String >, index: Int , optionIndex: Int ): ParseResult","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-flag-option-parser/parse-long-opt/","text":"clikt / com.github.ajalt.clikt.parsers / FlagOptionParser / parseLongOpt parseLongOpt \u00b6 fun parseLongOpt(option: Option , name: String , argv: List < String >, index: Int , explicitValue: String ?): ParseResult Parse a single long option and its value. Parameters \u00b6 name - The name of the flag used to invoke this option argv - The entire list of command line arguments for the command index - The index of the option flag in argv , which may contain an \u2018=\u2019 with the first value","title":"Parse long opt"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-flag-option-parser/parse-long-opt/#parselongopt","text":"fun parseLongOpt(option: Option , name: String , argv: List < String >, index: Int , explicitValue: String ?): ParseResult Parse a single long option and its value.","title":"parseLongOpt"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-flag-option-parser/parse-long-opt/#parameters","text":"name - The name of the flag used to invoke this option argv - The entire list of command line arguments for the command index - The index of the option flag in argv , which may contain an \u2018=\u2019 with the first value","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-flag-option-parser/parse-short-opt/","text":"clikt / com.github.ajalt.clikt.parsers / FlagOptionParser / parseShortOpt parseShortOpt \u00b6 fun parseShortOpt(option: Option , name: String , argv: List < String >, index: Int , optionIndex: Int ): ParseResult Parse a single short option and its value. Parameters \u00b6 name - The name of the flag used to invoke this option argv - The entire list of command line arguments for the command index - The index of the option flag in argv , which may contain multiple short parameters. optionIndex - The index of the option within argv[index]","title":"Parse short opt"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-flag-option-parser/parse-short-opt/#parseshortopt","text":"fun parseShortOpt(option: Option , name: String , argv: List < String >, index: Int , optionIndex: Int ): ParseResult Parse a single short option and its value.","title":"parseShortOpt"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-flag-option-parser/parse-short-opt/#parameters","text":"name - The name of the flag used to invoke this option argv - The entire list of command line arguments for the command index - The index of the option flag in argv , which may contain multiple short parameters. optionIndex - The index of the option within argv[index]","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/","text":"clikt / com.github.ajalt.clikt.parsers / OptionParser OptionParser \u00b6 interface OptionParser A parser for Option s. All functions should be pure, since the same command instance can parse arguments multiple times. Types \u00b6 Name Summary Invocation The input from a single instance of an option input. data class Invocation ParseResult data class ParseResult Functions \u00b6 Name Summary parseLongOpt Parse a single long option and its value. abstract fun parseLongOpt(option: Option , name: String , argv: List < String >, index: Int , explicitValue: String ?): ParseResult parseShortOpt Parse a single short option and its value. abstract fun parseShortOpt(option: Option , name: String , argv: List < String >, index: Int , optionIndex: Int ): ParseResult Inheritors \u00b6 Name Summary FlagOptionParser A parser for options that take no values. object FlagOptionParser : OptionParser OptionWithValuesParser An option that takes one more values object OptionWithValuesParser : OptionParser","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/#optionparser","text":"interface OptionParser A parser for Option s. All functions should be pure, since the same command instance can parse arguments multiple times.","title":"OptionParser"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/#types","text":"Name Summary Invocation The input from a single instance of an option input. data class Invocation ParseResult data class ParseResult","title":"Types"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/#functions","text":"Name Summary parseLongOpt Parse a single long option and its value. abstract fun parseLongOpt(option: Option , name: String , argv: List < String >, index: Int , explicitValue: String ?): ParseResult parseShortOpt Parse a single short option and its value. abstract fun parseShortOpt(option: Option , name: String , argv: List < String >, index: Int , optionIndex: Int ): ParseResult","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/#inheritors","text":"Name Summary FlagOptionParser A parser for options that take no values. object FlagOptionParser : OptionParser OptionWithValuesParser An option that takes one more values object OptionWithValuesParser : OptionParser","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/parse-long-opt/","text":"clikt / com.github.ajalt.clikt.parsers / OptionParser / parseLongOpt parseLongOpt \u00b6 abstract fun parseLongOpt(option: Option , name: String , argv: List < String >, index: Int , explicitValue: String ?): ParseResult Parse a single long option and its value. Parameters \u00b6 name - The name of the flag used to invoke this option argv - The entire list of command line arguments for the command index - The index of the option flag in argv , which may contain an \u2018=\u2019 with the first value","title":"Parse long opt"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/parse-long-opt/#parselongopt","text":"abstract fun parseLongOpt(option: Option , name: String , argv: List < String >, index: Int , explicitValue: String ?): ParseResult Parse a single long option and its value.","title":"parseLongOpt"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/parse-long-opt/#parameters","text":"name - The name of the flag used to invoke this option argv - The entire list of command line arguments for the command index - The index of the option flag in argv , which may contain an \u2018=\u2019 with the first value","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/parse-short-opt/","text":"clikt / com.github.ajalt.clikt.parsers / OptionParser / parseShortOpt parseShortOpt \u00b6 abstract fun parseShortOpt(option: Option , name: String , argv: List < String >, index: Int , optionIndex: Int ): ParseResult Parse a single short option and its value. Parameters \u00b6 name - The name of the flag used to invoke this option argv - The entire list of command line arguments for the command index - The index of the option flag in argv , which may contain multiple short parameters. optionIndex - The index of the option within argv[index]","title":"Parse short opt"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/parse-short-opt/#parseshortopt","text":"abstract fun parseShortOpt(option: Option , name: String , argv: List < String >, index: Int , optionIndex: Int ): ParseResult Parse a single short option and its value.","title":"parseShortOpt"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/parse-short-opt/#parameters","text":"name - The name of the flag used to invoke this option argv - The entire list of command line arguments for the command index - The index of the option flag in argv , which may contain multiple short parameters. optionIndex - The index of the option within argv[index]","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-invocation/","text":"clikt / com.github.ajalt.clikt.parsers / OptionParser / Invocation Invocation \u00b6 data class Invocation The input from a single instance of an option input. Parameters \u00b6 name - The name that was used to invoke the option. May be empty if the value was not retrieved from the command line (e.g. values from environment variables). values - The values provided to the option. All instances passed to Option.finalize will have a size equal to Option.nvalues . Constructors \u00b6 Name Summary <init> The input from a single instance of an option input. Invocation(name: String , values: List < String >) Properties \u00b6 Name Summary name The name that was used to invoke the option. May be empty if the value was not retrieved from the command line (e.g. values from environment variables). val name: String values The values provided to the option. All instances passed to Option.finalize will have a size equal to Option.nvalues . val values: List < String >","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-invocation/#invocation","text":"data class Invocation The input from a single instance of an option input.","title":"Invocation"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-invocation/#parameters","text":"name - The name that was used to invoke the option. May be empty if the value was not retrieved from the command line (e.g. values from environment variables). values - The values provided to the option. All instances passed to Option.finalize will have a size equal to Option.nvalues .","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-invocation/#constructors","text":"Name Summary <init> The input from a single instance of an option input. Invocation(name: String , values: List < String >)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-invocation/#properties","text":"Name Summary name The name that was used to invoke the option. May be empty if the value was not retrieved from the command line (e.g. values from environment variables). val name: String values The values provided to the option. All instances passed to Option.finalize will have a size equal to Option.nvalues . val values: List < String >","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-invocation/-init-/","text":"clikt / com.github.ajalt.clikt.parsers / OptionParser / Invocation / <init> <init> \u00b6 Invocation(name: String , values: List < String >) The input from a single instance of an option input. Parameters \u00b6 name - The name that was used to invoke the option. May be empty if the value was not retrieved from the command line (e.g. values from environment variables). values - The values provided to the option. All instances passed to Option.finalize will have a size equal to Option.nvalues .","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-invocation/-init-/#init","text":"Invocation(name: String , values: List < String >) The input from a single instance of an option input.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-invocation/-init-/#parameters","text":"name - The name that was used to invoke the option. May be empty if the value was not retrieved from the command line (e.g. values from environment variables). values - The values provided to the option. All instances passed to Option.finalize will have a size equal to Option.nvalues .","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-invocation/name/","text":"clikt / com.github.ajalt.clikt.parsers / OptionParser / Invocation / name name \u00b6 val name: String The name that was used to invoke the option. May be empty if the value was not retrieved from the command line (e.g. values from environment variables).","title":"Name"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-invocation/name/#name","text":"val name: String The name that was used to invoke the option. May be empty if the value was not retrieved from the command line (e.g. values from environment variables).","title":"name"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-invocation/values/","text":"clikt / com.github.ajalt.clikt.parsers / OptionParser / Invocation / values values \u00b6 val values: List < String > The values provided to the option. All instances passed to Option.finalize will have a size equal to Option.nvalues .","title":"Values"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-invocation/values/#values","text":"val values: List < String > The values provided to the option. All instances passed to Option.finalize will have a size equal to Option.nvalues .","title":"values"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-parse-result/","text":"clikt / com.github.ajalt.clikt.parsers / OptionParser / ParseResult ParseResult \u00b6 data class ParseResult Parameters \u00b6 consumedCount - The number of items in argv that were consumed. This number must be >= 1 if the entire option was consumed, or 0 if there are other options in the same index (e.g. flag options) invocation - The data from this invocation. Constructors \u00b6 Name Summary <init> ParseResult(consumedCount: Int , name: String , values: List < String >) ParseResult(consumedCount: Int , invocation: Invocation) Properties \u00b6 Name Summary consumedCount The number of items in argv that were consumed. This number must be >= 1 if the entire option was consumed, or 0 if there are other options in the same index (e.g. flag options) val consumedCount: Int invocation The data from this invocation. val invocation: Invocation","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-parse-result/#parseresult","text":"data class ParseResult","title":"ParseResult"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-parse-result/#parameters","text":"consumedCount - The number of items in argv that were consumed. This number must be >= 1 if the entire option was consumed, or 0 if there are other options in the same index (e.g. flag options) invocation - The data from this invocation.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-parse-result/#constructors","text":"Name Summary <init> ParseResult(consumedCount: Int , name: String , values: List < String >) ParseResult(consumedCount: Int , invocation: Invocation)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-parse-result/#properties","text":"Name Summary consumedCount The number of items in argv that were consumed. This number must be >= 1 if the entire option was consumed, or 0 if there are other options in the same index (e.g. flag options) val consumedCount: Int invocation The data from this invocation. val invocation: Invocation","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-parse-result/-init-/","text":"clikt / com.github.ajalt.clikt.parsers / OptionParser / ParseResult / <init> <init> \u00b6 ParseResult(consumedCount: Int , name: String , values: List < String >)ParseResult(consumedCount: Int , invocation: Invocation) Parameters \u00b6 consumedCount - The number of items in argv that were consumed. This number must be >= 1 if the entire option was consumed, or 0 if there are other options in the same index (e.g. flag options) invocation - The data from this invocation.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-parse-result/-init-/#init","text":"ParseResult(consumedCount: Int , name: String , values: List < String >)ParseResult(consumedCount: Int , invocation: Invocation)","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-parse-result/-init-/#parameters","text":"consumedCount - The number of items in argv that were consumed. This number must be >= 1 if the entire option was consumed, or 0 if there are other options in the same index (e.g. flag options) invocation - The data from this invocation.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-parse-result/consumed-count/","text":"clikt / com.github.ajalt.clikt.parsers / OptionParser / ParseResult / consumedCount consumedCount \u00b6 val consumedCount: Int The number of items in argv that were consumed. This number must be >= 1 if the entire option was consumed, or 0 if there are other options in the same index (e.g. flag options)","title":"Consumed count"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-parse-result/consumed-count/#consumedcount","text":"val consumedCount: Int The number of items in argv that were consumed. This number must be >= 1 if the entire option was consumed, or 0 if there are other options in the same index (e.g. flag options)","title":"consumedCount"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-parse-result/invocation/","text":"clikt / com.github.ajalt.clikt.parsers / OptionParser / ParseResult / invocation invocation \u00b6 val invocation: Invocation The data from this invocation.","title":"Invocation"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-parse-result/invocation/#invocation","text":"val invocation: Invocation The data from this invocation.","title":"invocation"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-with-values-parser/","text":"clikt / com.github.ajalt.clikt.parsers / OptionWithValuesParser OptionWithValuesParser \u00b6 object OptionWithValuesParser : OptionParser An option that takes one more values Functions \u00b6 Name Summary parseLongOpt Parse a single long option and its value. fun parseLongOpt(option: Option , name: String , argv: List < String >, index: Int , explicitValue: String ?): ParseResult parseShortOpt Parse a single short option and its value. fun parseShortOpt(option: Option , name: String , argv: List < String >, index: Int , optionIndex: Int ): ParseResult","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-with-values-parser/#optionwithvaluesparser","text":"object OptionWithValuesParser : OptionParser An option that takes one more values","title":"OptionWithValuesParser"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-with-values-parser/#functions","text":"Name Summary parseLongOpt Parse a single long option and its value. fun parseLongOpt(option: Option , name: String , argv: List < String >, index: Int , explicitValue: String ?): ParseResult parseShortOpt Parse a single short option and its value. fun parseShortOpt(option: Option , name: String , argv: List < String >, index: Int , optionIndex: Int ): ParseResult","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-with-values-parser/parse-long-opt/","text":"clikt / com.github.ajalt.clikt.parsers / OptionWithValuesParser / parseLongOpt parseLongOpt \u00b6 fun parseLongOpt(option: Option , name: String , argv: List < String >, index: Int , explicitValue: String ?): ParseResult Parse a single long option and its value. Parameters \u00b6 name - The name of the flag used to invoke this option argv - The entire list of command line arguments for the command index - The index of the option flag in argv , which may contain an \u2018=\u2019 with the first value","title":"Parse long opt"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-with-values-parser/parse-long-opt/#parselongopt","text":"fun parseLongOpt(option: Option , name: String , argv: List < String >, index: Int , explicitValue: String ?): ParseResult Parse a single long option and its value.","title":"parseLongOpt"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-with-values-parser/parse-long-opt/#parameters","text":"name - The name of the flag used to invoke this option argv - The entire list of command line arguments for the command index - The index of the option flag in argv , which may contain an \u2018=\u2019 with the first value","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-with-values-parser/parse-short-opt/","text":"clikt / com.github.ajalt.clikt.parsers / OptionWithValuesParser / parseShortOpt parseShortOpt \u00b6 fun parseShortOpt(option: Option , name: String , argv: List < String >, index: Int , optionIndex: Int ): ParseResult Parse a single short option and its value. Parameters \u00b6 name - The name of the flag used to invoke this option argv - The entire list of command line arguments for the command index - The index of the option flag in argv , which may contain multiple short parameters. optionIndex - The index of the option within argv[index]","title":"Parse short opt"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-with-values-parser/parse-short-opt/#parseshortopt","text":"fun parseShortOpt(option: Option , name: String , argv: List < String >, index: Int , optionIndex: Int ): ParseResult Parse a single short option and its value.","title":"parseShortOpt"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-with-values-parser/parse-short-opt/#parameters","text":"name - The name of the flag used to invoke this option argv - The entire list of command line arguments for the command index - The index of the option flag in argv , which may contain multiple short parameters. optionIndex - The index of the option within argv[index]","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.sources/","text":"clikt / com.github.ajalt.clikt.sources Package com.github.ajalt.clikt.sources \u00b6 Types \u00b6 Name Summary ChainedValueSource A ValueSource that looks for values in multiple other sources. class ChainedValueSource : ValueSource MapValueSource A ValueSource that reads values from a map. class MapValueSource : ValueSource PropertiesValueSource A ValueSource that reads values from a Properties object. object PropertiesValueSource ValueSource interface ValueSource Annotations \u00b6 Name Summary ExperimentalValueSourceApi annotation class ~~ExperimentalValueSourceApi~~","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.sources/#package-comgithubajaltcliktsources","text":"","title":"Package com.github.ajalt.clikt.sources"},{"location":"api/clikt/com.github.ajalt.clikt.sources/#types","text":"Name Summary ChainedValueSource A ValueSource that looks for values in multiple other sources. class ChainedValueSource : ValueSource MapValueSource A ValueSource that reads values from a map. class MapValueSource : ValueSource PropertiesValueSource A ValueSource that reads values from a Properties object. object PropertiesValueSource ValueSource interface ValueSource","title":"Types"},{"location":"api/clikt/com.github.ajalt.clikt.sources/#annotations","text":"Name Summary ExperimentalValueSourceApi annotation class ~~ExperimentalValueSourceApi~~","title":"Annotations"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-chained-value-source/","text":"clikt / com.github.ajalt.clikt.sources / ChainedValueSource ChainedValueSource \u00b6 class ChainedValueSource : ValueSource A ValueSource that looks for values in multiple other sources. Constructors \u00b6 Name Summary <init> A ValueSource that looks for values in multiple other sources. ChainedValueSource(sources: List < ValueSource >) Properties \u00b6 Name Summary sources val sources: List < ValueSource > Functions \u00b6 Name Summary getValues fun getValues(context: Context , option: Option ): List <Invocation>","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-chained-value-source/#chainedvaluesource","text":"class ChainedValueSource : ValueSource A ValueSource that looks for values in multiple other sources.","title":"ChainedValueSource"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-chained-value-source/#constructors","text":"Name Summary <init> A ValueSource that looks for values in multiple other sources. ChainedValueSource(sources: List < ValueSource >)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-chained-value-source/#properties","text":"Name Summary sources val sources: List < ValueSource >","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-chained-value-source/#functions","text":"Name Summary getValues fun getValues(context: Context , option: Option ): List <Invocation>","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-chained-value-source/-init-/","text":"clikt / com.github.ajalt.clikt.sources / ChainedValueSource / <init> <init> \u00b6 ChainedValueSource(sources: List < ValueSource >) A ValueSource that looks for values in multiple other sources.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.sources/-chained-value-source/-init-/#init","text":"ChainedValueSource(sources: List < ValueSource >) A ValueSource that looks for values in multiple other sources.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-chained-value-source/get-values/","text":"clikt / com.github.ajalt.clikt.sources / ChainedValueSource / getValues getValues \u00b6 fun getValues(context: Context , option: Option ): List","title":"Get values"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-chained-value-source/get-values/#getvalues","text":"fun getValues(context: Context , option: Option ): List","title":"getValues"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-chained-value-source/sources/","text":"clikt / com.github.ajalt.clikt.sources / ChainedValueSource / sources sources \u00b6 val sources: List < ValueSource >","title":"Sources"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-chained-value-source/sources/#sources","text":"val sources: List < ValueSource >","title":"sources"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-experimental-value-source-api/","text":"clikt / com.github.ajalt.clikt.sources / ExperimentalValueSourceApi ExperimentalValueSourceApi \u00b6 @Target([AnnotationTarget.CLASS, AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY]) annotation class ~~ExperimentalValueSourceApi~~ Deprecated: This opt-in requirement is not used anymore. Remove its usages from your code. Constructors \u00b6 Name Summary <init> ExperimentalValueSourceApi()","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-experimental-value-source-api/#experimentalvaluesourceapi","text":"@Target([AnnotationTarget.CLASS, AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY]) annotation class ~~ExperimentalValueSourceApi~~ Deprecated: This opt-in requirement is not used anymore. Remove its usages from your code.","title":"ExperimentalValueSourceApi"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-experimental-value-source-api/#constructors","text":"Name Summary <init> ExperimentalValueSourceApi()","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-experimental-value-source-api/-init-/","text":"clikt / com.github.ajalt.clikt.sources / ExperimentalValueSourceApi / <init> <init> \u00b6 ExperimentalValueSourceApi()","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.sources/-experimental-value-source-api/-init-/#init","text":"ExperimentalValueSourceApi()","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-map-value-source/","text":"clikt / com.github.ajalt.clikt.sources / MapValueSource MapValueSource \u00b6 class MapValueSource : ValueSource A ValueSource that reads values from a map. This implementation will only return a single value for each option. If you use conversions like pair or triple , you\u2019ll need to implement a ValueSource yourself. Parameters \u00b6 values - The map of key to value for each option getKey - A function that return the key in values for a given option. By default, it joins the Constructors \u00b6 Name Summary <init> A ValueSource that reads values from a map. MapValueSource(values: Map < String , String >, getKey: ( Context , Option ) -> String = ValueSource.getKey(joinSubcommands = \".\")) Functions \u00b6 Name Summary getValues fun getValues(context: Context , option: Option ): List <Invocation>","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-map-value-source/#mapvaluesource","text":"class MapValueSource : ValueSource A ValueSource that reads values from a map. This implementation will only return a single value for each option. If you use conversions like pair or triple , you\u2019ll need to implement a ValueSource yourself.","title":"MapValueSource"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-map-value-source/#parameters","text":"values - The map of key to value for each option getKey - A function that return the key in values for a given option. By default, it joins the","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-map-value-source/#constructors","text":"Name Summary <init> A ValueSource that reads values from a map. MapValueSource(values: Map < String , String >, getKey: ( Context , Option ) -> String = ValueSource.getKey(joinSubcommands = \".\"))","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-map-value-source/#functions","text":"Name Summary getValues fun getValues(context: Context , option: Option ): List <Invocation>","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-map-value-source/-init-/","text":"clikt / com.github.ajalt.clikt.sources / MapValueSource / <init> <init> \u00b6 MapValueSource(values: Map < String , String >, getKey: ( Context , Option ) -> String = ValueSource.getKey(joinSubcommands = \u201c.\u201d)) A ValueSource that reads values from a map. This implementation will only return a single value for each option. If you use conversions like pair or triple , you\u2019ll need to implement a ValueSource yourself. Parameters \u00b6 values - The map of key to value for each option getKey - A function that return the key in values for a given option. By default, it joins the","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.sources/-map-value-source/-init-/#init","text":"MapValueSource(values: Map < String , String >, getKey: ( Context , Option ) -> String = ValueSource.getKey(joinSubcommands = \u201c.\u201d)) A ValueSource that reads values from a map. This implementation will only return a single value for each option. If you use conversions like pair or triple , you\u2019ll need to implement a ValueSource yourself.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-map-value-source/-init-/#parameters","text":"values - The map of key to value for each option getKey - A function that return the key in values for a given option. By default, it joins the","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-map-value-source/get-values/","text":"clikt / com.github.ajalt.clikt.sources / MapValueSource / getValues getValues \u00b6 fun getValues(context: Context , option: Option ): List","title":"Get values"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-map-value-source/get-values/#getvalues","text":"fun getValues(context: Context , option: Option ): List","title":"getValues"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-properties-value-source/","text":"clikt / com.github.ajalt.clikt.sources / PropertiesValueSource PropertiesValueSource \u00b6 object PropertiesValueSource A ValueSource that reads values from a Properties object. Functions \u00b6 Name Summary from Parse a properties file into a value source. fun from(file: Path, requireValid: Boolean = false, getKey: ( Context , Option ) -> String = ValueSource.getKey(joinSubcommands = \".\")): ValueSource fun from(file: File , requireValid: Boolean = false, getKey: ( Context , Option ) -> String = ValueSource.getKey(joinSubcommands = \".\")): ValueSource fun from(file: String , requireValid: Boolean = false, getKey: ( Context , Option ) -> String = ValueSource.getKey(joinSubcommands = \".\")): ValueSource Return a ValueSource that reads values from a properties object. fun from(properties: Properties , getKey: ( Context , Option ) -> String = ValueSource.getKey(joinSubcommands = \".\")): ValueSource","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-properties-value-source/#propertiesvaluesource","text":"object PropertiesValueSource A ValueSource that reads values from a Properties object.","title":"PropertiesValueSource"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-properties-value-source/#functions","text":"Name Summary from Parse a properties file into a value source. fun from(file: Path, requireValid: Boolean = false, getKey: ( Context , Option ) -> String = ValueSource.getKey(joinSubcommands = \".\")): ValueSource fun from(file: File , requireValid: Boolean = false, getKey: ( Context , Option ) -> String = ValueSource.getKey(joinSubcommands = \".\")): ValueSource fun from(file: String , requireValid: Boolean = false, getKey: ( Context , Option ) -> String = ValueSource.getKey(joinSubcommands = \".\")): ValueSource Return a ValueSource that reads values from a properties object. fun from(properties: Properties , getKey: ( Context , Option ) -> String = ValueSource.getKey(joinSubcommands = \".\")): ValueSource","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-properties-value-source/from/","text":"clikt / com.github.ajalt.clikt.sources / PropertiesValueSource / from from \u00b6 fun from(file: Path, requireValid: Boolean = false, getKey: ( Context , Option ) -> String = ValueSource.getKey(joinSubcommands = \u201c.\u201d)): ValueSource fun from(file: File , requireValid: Boolean = false, getKey: ( Context , Option ) -> String = ValueSource.getKey(joinSubcommands = \u201c.\u201d)): ValueSource fun from(file: String , requireValid: Boolean = false, getKey: ( Context , Option ) -> String = ValueSource.getKey(joinSubcommands = \u201c.\u201d)): ValueSource Parse a properties file into a value source. If the file does not exist, an empty value source will be returned. Parameters \u00b6 file - The file to read from. requireValid - If true, a InvalidFileFormat will be thrown if the file doesn\u2019t parse correctly. getKey - A function that will return the property key for a given option. You can use ValueSource.getKey for most use cases. fun from(properties: Properties , getKey: ( Context , Option ) -> String = ValueSource.getKey(joinSubcommands = \".\")): ValueSource Return a ValueSource that reads values from a properties object. The properties object is copied when this function is called; changes to the object will not be reflected in the value source. Parameters \u00b6 properties - The properties to read from. getKey - A function that will return the property key for a given option.","title":"From"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-properties-value-source/from/#from","text":"fun from(file: Path, requireValid: Boolean = false, getKey: ( Context , Option ) -> String = ValueSource.getKey(joinSubcommands = \u201c.\u201d)): ValueSource fun from(file: File , requireValid: Boolean = false, getKey: ( Context , Option ) -> String = ValueSource.getKey(joinSubcommands = \u201c.\u201d)): ValueSource fun from(file: String , requireValid: Boolean = false, getKey: ( Context , Option ) -> String = ValueSource.getKey(joinSubcommands = \u201c.\u201d)): ValueSource Parse a properties file into a value source. If the file does not exist, an empty value source will be returned.","title":"from"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-properties-value-source/from/#parameters","text":"file - The file to read from. requireValid - If true, a InvalidFileFormat will be thrown if the file doesn\u2019t parse correctly. getKey - A function that will return the property key for a given option. You can use ValueSource.getKey for most use cases. fun from(properties: Properties , getKey: ( Context , Option ) -> String = ValueSource.getKey(joinSubcommands = \".\")): ValueSource Return a ValueSource that reads values from a properties object. The properties object is copied when this function is called; changes to the object will not be reflected in the value source.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-properties-value-source/from/#parameters_1","text":"properties - The properties to read from. getKey - A function that will return the property key for a given option.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-value-source/","text":"clikt / com.github.ajalt.clikt.sources / ValueSource ValueSource \u00b6 interface ValueSource Types \u00b6 Name Summary Invocation data class Invocation Functions \u00b6 Name Summary getValues abstract fun getValues(context: Context , option: Option ): List <Invocation> Companion Object Functions \u00b6 Name Summary envvarKey Create a function that will return string keys that match the key used for environment variables. fun envvarKey(): ( Context , Option ) -> String getKey Create a function that will return string keys for options. fun getKey(prefix: String = \"\", joinSubcommands: String ? = null, uppercase: Boolean = false, replaceDashes: String = \"-\"): ( Context , Option ) -> String name Get a name for an option that can be useful as a key for a value source. fun name(option: Option ): String Inheritors \u00b6 Name Summary ChainedValueSource A ValueSource that looks for values in multiple other sources. class ChainedValueSource : ValueSource MapValueSource A ValueSource that reads values from a map. class MapValueSource : ValueSource","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-value-source/#valuesource","text":"interface ValueSource","title":"ValueSource"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-value-source/#types","text":"Name Summary Invocation data class Invocation","title":"Types"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-value-source/#functions","text":"Name Summary getValues abstract fun getValues(context: Context , option: Option ): List <Invocation>","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-value-source/#companion-object-functions","text":"Name Summary envvarKey Create a function that will return string keys that match the key used for environment variables. fun envvarKey(): ( Context , Option ) -> String getKey Create a function that will return string keys for options. fun getKey(prefix: String = \"\", joinSubcommands: String ? = null, uppercase: Boolean = false, replaceDashes: String = \"-\"): ( Context , Option ) -> String name Get a name for an option that can be useful as a key for a value source. fun name(option: Option ): String","title":"Companion Object Functions"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-value-source/#inheritors","text":"Name Summary ChainedValueSource A ValueSource that looks for values in multiple other sources. class ChainedValueSource : ValueSource MapValueSource A ValueSource that reads values from a map. class MapValueSource : ValueSource","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-value-source/envvar-key/","text":"clikt / com.github.ajalt.clikt.sources / ValueSource / envvarKey envvarKey \u00b6 fun envvarKey(): ( Context , Option ) -> String Create a function that will return string keys that match the key used for environment variables.","title":"Envvar key"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-value-source/envvar-key/#envvarkey","text":"fun envvarKey(): ( Context , Option ) -> String Create a function that will return string keys that match the key used for environment variables.","title":"envvarKey"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-value-source/get-key/","text":"clikt / com.github.ajalt.clikt.sources / ValueSource / getKey getKey \u00b6 fun getKey(prefix: String = \u201c\u201d, joinSubcommands: String ? = null, uppercase: Boolean = false, replaceDashes: String = \u201c-\u201c): ( Context , Option ) -> String Create a function that will return string keys for options. By default, keys will be equal to the value returned by name . Parameters \u00b6 prefix - A static string prepended to all keys joinSubcommands - If null, keys will not include names of subcommands. If given, this string be used will join subcommand names to the beginning of keys. For options that are in a root command, this has no effect. For option in subcommands, the subcommand name will joined. The root command name is never included. uppercase - If true, returned keys will be entirely uppercase. replaceDashes - - characters in option names will be replaced with this character.","title":"Get key"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-value-source/get-key/#getkey","text":"fun getKey(prefix: String = \u201c\u201d, joinSubcommands: String ? = null, uppercase: Boolean = false, replaceDashes: String = \u201c-\u201c): ( Context , Option ) -> String Create a function that will return string keys for options. By default, keys will be equal to the value returned by name .","title":"getKey"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-value-source/get-key/#parameters","text":"prefix - A static string prepended to all keys joinSubcommands - If null, keys will not include names of subcommands. If given, this string be used will join subcommand names to the beginning of keys. For options that are in a root command, this has no effect. For option in subcommands, the subcommand name will joined. The root command name is never included. uppercase - If true, returned keys will be entirely uppercase. replaceDashes - - characters in option names will be replaced with this character.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-value-source/get-values/","text":"clikt / com.github.ajalt.clikt.sources / ValueSource / getValues getValues \u00b6 abstract fun getValues(context: Context , option: Option ): List","title":"Get values"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-value-source/get-values/#getvalues","text":"abstract fun getValues(context: Context , option: Option ): List","title":"getValues"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-value-source/name/","text":"clikt / com.github.ajalt.clikt.sources / ValueSource / name name \u00b6 fun name(option: Option ): String Get a name for an option that can be useful as a key for a value source. The returned value is the longest option name with its prefix removed Examples \u00b6 name(option(\u201c-h\u201d, \u201c\u2013help\u201d)) == \u201chelp\u201d name(option(\u201c/INPUT\u201d)) == \u201cINPUT\u201d name(option(\u201c\u2013new-name\u201d, \u201c\u2013name\u201d)) == \u201cnew-name","title":"Name"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-value-source/name/#name","text":"fun name(option: Option ): String Get a name for an option that can be useful as a key for a value source. The returned value is the longest option name with its prefix removed","title":"name"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-value-source/name/#examples","text":"name(option(\u201c-h\u201d, \u201c\u2013help\u201d)) == \u201chelp\u201d name(option(\u201c/INPUT\u201d)) == \u201cINPUT\u201d name(option(\u201c\u2013new-name\u201d, \u201c\u2013name\u201d)) == \u201cnew-name","title":"Examples"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-value-source/-invocation/","text":"clikt / com.github.ajalt.clikt.sources / ValueSource / Invocation Invocation \u00b6 data class Invocation Constructors \u00b6 Name Summary <init> Invocation(values: List < String >) Properties \u00b6 Name Summary values val values: List < String > Companion Object Functions \u00b6 Name Summary just Create a list of a single Invocation with a single value fun just(value: Any ?): List <Invocation> value Create an Invocation with a single value fun value(value: Any ?): Invocation","title":"Index"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-value-source/-invocation/#invocation","text":"data class Invocation","title":"Invocation"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-value-source/-invocation/#constructors","text":"Name Summary <init> Invocation(values: List < String >)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-value-source/-invocation/#properties","text":"Name Summary values val values: List < String >","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-value-source/-invocation/#companion-object-functions","text":"Name Summary just Create a list of a single Invocation with a single value fun just(value: Any ?): List <Invocation> value Create an Invocation with a single value fun value(value: Any ?): Invocation","title":"Companion Object Functions"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-value-source/-invocation/-init-/","text":"clikt / com.github.ajalt.clikt.sources / ValueSource / Invocation / <init> <init> \u00b6 Invocation(values: List < String >)","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.sources/-value-source/-invocation/-init-/#init","text":"Invocation(values: List < String >)","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-value-source/-invocation/just/","text":"clikt / com.github.ajalt.clikt.sources / ValueSource / Invocation / just just \u00b6 fun just(value: Any ?): List Create a list of a single Invocation with a single value","title":"Just"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-value-source/-invocation/just/#just","text":"fun just(value: Any ?): List Create a list of a single Invocation with a single value","title":"just"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-value-source/-invocation/value/","text":"clikt / com.github.ajalt.clikt.sources / ValueSource / Invocation / value value \u00b6 fun value(value: Any ?): Invocation Create an Invocation with a single value","title":"Value"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-value-source/-invocation/value/#value","text":"fun value(value: Any ?): Invocation Create an Invocation with a single value","title":"value"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-value-source/-invocation/values/","text":"clikt / com.github.ajalt.clikt.sources / ValueSource / Invocation / values values \u00b6 val values: List < String >","title":"Values"},{"location":"api/clikt/com.github.ajalt.clikt.sources/-value-source/-invocation/values/#values","text":"val values: List < String >","title":"values"}]}