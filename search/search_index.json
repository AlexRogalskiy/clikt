{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Clikt (pronounced \u201cclicked\u201d) is a Kotlin library that makes writing command line interfaces simple and intuitive. It is the \u201cCommand Line Interface for Kotlin\u201d. It is designed to make the process of writing command line tools effortless while supporting a wide variety of use cases and allowing advanced customization when needed. Clikt has: arbitrary nesting of commands composable, type safe parameter values support for a wide variety of command line interface styles What does it look like? Here\u2019s a complete example of a simple Clikt program: class Hello : CliktCommand () { val count : Int by option ( help = \"Number of greetings\" ). int (). default ( 1 ) val name : String by option ( help = \"The person to greet\" ). prompt ( \"Your name\" ) override fun run () { for ( i in 1. . count ) { echo ( \"Hello $name!\" ) } } } fun main ( args : Array < String >) = Hello (). main ( args ) And here\u2019s what it looks like when run: $ ./hello --count=3 Your name: John Hello John! Hello John! Hello John! The help page is generated for you: $ ./hello --help Usage: hello [OPTIONS] Options: --count INT Number of greetings --name TEXT The person to greet -h, --help Show this message and exit Errors are also taken care of: $ ./hello --whoops Usage: hello [OPTIONS] Error: no such option: \"--whoops\". API Reference \u00b6 Commands and Exceptions Options Arguments Parameter Type Conversions Output Formatting License \u00b6 Copyright 2018-2019 AJ Alt Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Clikt: Simple, powerful command line parser for Kotlin"},{"location":"#api-reference","text":"Commands and Exceptions Options Arguments Parameter Type Conversions Output Formatting","title":"API Reference"},{"location":"#license","text":"Copyright 2018-2019 AJ Alt Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"advanced/","text":"Advanced Patters \u00b6 Clikt has reasonable behavior by default, but is also very customizable for advanced use cases. Command Aliases \u00b6 Clikt allows commands to alias command names to sequences of tokens. This allows you to implement common patterns like allowing the user to invoke a command by typing a prefix of its name, or user-defined aliases like the way you can configure git to accept git ci as an alias for git commit . To implement command aliases, override CliktCommand.aliases in your command. This function is called once at the start of parsing, and returns a map of aliases to the tokens that they alias to. To implement git-style aliases: Example class Repo : NoRunCliktCommand () { // You could load the aliases from a config file etc. override fun aliases (): Map < String , List < String >> = mapOf ( \"ci\" to listOf ( \"commit\" ), \"cm\" to listOf ( \"commit\" , \"-m\" ) ) } class Commit : CliktCommand () { val message by option ( \"-m\" ). default ( \"\" ) override fun run () { echo ( \"Committing with message: $message\" ) } } fun main ( args : Array < String >) = Repo (). subcommands ( Commit ()). main ( args ) Usage 1 $ ./repo ci -m 'my message' Committing with message: my message Usage 2 $ ./repo cm 'my message' Committing with message: my message Note that aliases are not expanded recursively: none of the tokens that an alias expands to will be expanded again, even if they match another alias. You also use this functionality to implement command prefixes: class Tool : CliktCommand () { override fun aliases (): Map < String , List < String >> { val prefixCounts = mutableMapOf < String , Int >(). withDefault { 0 } val prefixes = mutableMapOf < String , List < String >>() for ( name in registeredSubcommandNames ()) { if ( name . length < 3 ) continue for ( i in 1. . name . lastIndex ) { val prefix = name . substring ( 0. . i ) prefixCounts [ prefix ] = prefixCounts . getValue ( prefix ) + 1 prefixes [ prefix ] = listOf ( name ) } } return prefixes . filterKeys { prefixCounts . getValue ( it ) == 1 } } override fun run () = Unit } class Foo : CliktCommand () { override fun run () { echo ( \"Running Foo\" ) } } class Bar : CliktCommand () { override fun run () { echo ( \"Running Bar\" ) } } fun main ( args : Array < String >) = Tool (). subcommands ( Foo (), Bar ()). main ( args ) Which allows you to call the subcommands like this: $ ./tool ba Running Bar Token Normalization \u00b6 To prevent ambiguities in parsing, aliases are only supported for command names. However, there\u2019s another way to modify user input that works on more types of tokens. You can set a tokenTransformer on the command\u2019s context that will be called for each option and command name that is input. This can be used to implement case-insensitive parsing, for example: Example class Hello : CliktCommand () { init { context { tokenTransformer = { it . toLowerCase () } } } val name by option () override fun run () = echo ( \"Hello $name!\" ) } Usage $ ./hello --NAME=Foo Hello Foo! Replacing stdin and stdout \u00b6 By default, functions like CliktCommand.main and option().prompt() read from System.in and write to System.out . If you want to use clikt in an environment where the standard streams aren\u2019t available, you can set your own implementation of CliktConsole when customizing the command context . object MyConsole : CliktConsole { override fun promptForLine ( prompt : String , hideInput : Boolean ): String ? { MyOutputStream . write ( prompt ) return if ( hideInput ) MyInputStream . readPassword () else MyInputStream . readLine () } override fun print ( text : String , error : Boolean ) { if ( error ) MyOutputStream . writeError ( prompt ) else MyOutputStream . write ( prompt ) } override val lineSeparator : String get () = \"\\n\" } class CustomCLI : CliktCommand () { init { context { this . console = MyConsole } } override fun run () {} } If you are using TermUI directly, you can also pass your custom console as an argument. Command Line Argument Files \u00b6 Similar to javac , Clikt supports loading command line parameters from a file using the \u201c@-file\u201d syntax. You can pass any file path to a command prefixed with @ , and the file will be expanded into the command line parameters. This can be useful on operating systems like Windows that have command line length limits. If you create a file named cliargs with content like this: --number 1 --name='jane doe' --age=30 ./file.txt You can call your command with the contents of the file like this: $ ./tool @cliargs Which is equivalent to calling it like this: $ ./tool --number 1 --name='jane doe' --age=30 ./file.txt You can use any file path after the @ , and can specify multiple @-files: $ ./tool @../config/args @C:\\\\Program\\ Files\\\\Tool\\\\argfile If you have any options with names that start with @ , you can still use @-files , but values on the command line that match an option will be parsed as that option, rather than an @-file , so you\u2019ll have to give your files a different name. File format \u00b6 In argument files, normal shell quoting and escaping rules apply. Line breaks are treated as word separators, and can be used where you would normally use a space to separate parameters. Line breaks cannot occur within quotes. @-files can contain other @-file arguments, which will be expanded recursively. An unescaped # character outside of quotes is treated as a line comment: it and the rest of the line are skipped. You can pass a literal # by escaping it with \\# or quoting it with '#' .","title":"Command Aliases"},{"location":"advanced/#advanced-patters","text":"Clikt has reasonable behavior by default, but is also very customizable for advanced use cases.","title":"Advanced Patters"},{"location":"advanced/#command-aliases","text":"Clikt allows commands to alias command names to sequences of tokens. This allows you to implement common patterns like allowing the user to invoke a command by typing a prefix of its name, or user-defined aliases like the way you can configure git to accept git ci as an alias for git commit . To implement command aliases, override CliktCommand.aliases in your command. This function is called once at the start of parsing, and returns a map of aliases to the tokens that they alias to. To implement git-style aliases: Example class Repo : NoRunCliktCommand () { // You could load the aliases from a config file etc. override fun aliases (): Map < String , List < String >> = mapOf ( \"ci\" to listOf ( \"commit\" ), \"cm\" to listOf ( \"commit\" , \"-m\" ) ) } class Commit : CliktCommand () { val message by option ( \"-m\" ). default ( \"\" ) override fun run () { echo ( \"Committing with message: $message\" ) } } fun main ( args : Array < String >) = Repo (). subcommands ( Commit ()). main ( args ) Usage 1 $ ./repo ci -m 'my message' Committing with message: my message Usage 2 $ ./repo cm 'my message' Committing with message: my message Note that aliases are not expanded recursively: none of the tokens that an alias expands to will be expanded again, even if they match another alias. You also use this functionality to implement command prefixes: class Tool : CliktCommand () { override fun aliases (): Map < String , List < String >> { val prefixCounts = mutableMapOf < String , Int >(). withDefault { 0 } val prefixes = mutableMapOf < String , List < String >>() for ( name in registeredSubcommandNames ()) { if ( name . length < 3 ) continue for ( i in 1. . name . lastIndex ) { val prefix = name . substring ( 0. . i ) prefixCounts [ prefix ] = prefixCounts . getValue ( prefix ) + 1 prefixes [ prefix ] = listOf ( name ) } } return prefixes . filterKeys { prefixCounts . getValue ( it ) == 1 } } override fun run () = Unit } class Foo : CliktCommand () { override fun run () { echo ( \"Running Foo\" ) } } class Bar : CliktCommand () { override fun run () { echo ( \"Running Bar\" ) } } fun main ( args : Array < String >) = Tool (). subcommands ( Foo (), Bar ()). main ( args ) Which allows you to call the subcommands like this: $ ./tool ba Running Bar","title":"Command Aliases"},{"location":"advanced/#token-normalization","text":"To prevent ambiguities in parsing, aliases are only supported for command names. However, there\u2019s another way to modify user input that works on more types of tokens. You can set a tokenTransformer on the command\u2019s context that will be called for each option and command name that is input. This can be used to implement case-insensitive parsing, for example: Example class Hello : CliktCommand () { init { context { tokenTransformer = { it . toLowerCase () } } } val name by option () override fun run () = echo ( \"Hello $name!\" ) } Usage $ ./hello --NAME=Foo Hello Foo!","title":"Token Normalization"},{"location":"advanced/#replacing-stdin-and-stdout","text":"By default, functions like CliktCommand.main and option().prompt() read from System.in and write to System.out . If you want to use clikt in an environment where the standard streams aren\u2019t available, you can set your own implementation of CliktConsole when customizing the command context . object MyConsole : CliktConsole { override fun promptForLine ( prompt : String , hideInput : Boolean ): String ? { MyOutputStream . write ( prompt ) return if ( hideInput ) MyInputStream . readPassword () else MyInputStream . readLine () } override fun print ( text : String , error : Boolean ) { if ( error ) MyOutputStream . writeError ( prompt ) else MyOutputStream . write ( prompt ) } override val lineSeparator : String get () = \"\\n\" } class CustomCLI : CliktCommand () { init { context { this . console = MyConsole } } override fun run () {} } If you are using TermUI directly, you can also pass your custom console as an argument.","title":"Replacing stdin and stdout"},{"location":"advanced/#command-line-argument-files","text":"Similar to javac , Clikt supports loading command line parameters from a file using the \u201c@-file\u201d syntax. You can pass any file path to a command prefixed with @ , and the file will be expanded into the command line parameters. This can be useful on operating systems like Windows that have command line length limits. If you create a file named cliargs with content like this: --number 1 --name='jane doe' --age=30 ./file.txt You can call your command with the contents of the file like this: $ ./tool @cliargs Which is equivalent to calling it like this: $ ./tool --number 1 --name='jane doe' --age=30 ./file.txt You can use any file path after the @ , and can specify multiple @-files: $ ./tool @../config/args @C:\\\\Program\\ Files\\\\Tool\\\\argfile If you have any options with names that start with @ , you can still use @-files , but values on the command line that match an option will be parsed as that option, rather than an @-file , so you\u2019ll have to give your files a different name.","title":"Command Line Argument Files"},{"location":"advanced/#file-format","text":"In argument files, normal shell quoting and escaping rules apply. Line breaks are treated as word separators, and can be used where you would normally use a space to separate parameters. Line breaks cannot occur within quotes. @-files can contain other @-file arguments, which will be expanded recursively. An unescaped # character outside of quotes is treated as a line comment: it and the rest of the line are skipped. You can pass a literal # by escaping it with \\# or quoting it with '#' .","title":"File format"},{"location":"arguments/","text":"Arguments \u00b6 Arguments are declared and customized similarly to options , but are provided on the command line positionally instead of by name. Arguments are declared with argument() , and the order that they are declared defines the order that they must be provided on the command line. Basic Arguments \u00b6 By default, argument takes a single String value which is required to be provided on the command line. Example class Hello : CliktCommand () { val name by argument () override fun run () { echo ( \"Hello $name!\" ) } } Usage $ ./hello Foo Hello Foo! Arguments appear in the usage string, but normally aren\u2019t listed in the help page. It\u2019s usually more clear to document arguments in the command help. Example class Cp : CliktCommand ( help = \"Copy SOURCE to DEST, or multiple SOURCE(s) to directory DEST.\" ) { private val source by argument (). file ( exists = true ). multiple () private val dest by argument (). file () override fun run () { // ... } } Help Output Usage: cp [OPTIONS] [SOURCE]... DEST Copy SOURCE to DEST, or multiple SOURCE(s) to directory DEST. Options: -h, --help Show this message and exit Variadic Arguments \u00b6 Like options , arguments can take any fixed number of values, which you can change with functions like pair and triple . Unlike options, arguments can take a variable (or unlimited) number of values. This is especially common when taking file paths, since they are frequently expanded with a glob pattern on the command line. You can declare any number of arguments with fixed numbers of values, but only one variadic argument. Example class Copy : CliktCommand () { val source by argument (). file ( exists = true ). multiple () val dest by argument (). file ( fileOkay = false ) override fun run () { echo ( \"Copying files $source to $dest\" ) } } Usage $ ./copy file.* out/ Copying files [file.txt, file.md] to out/ Option-Like Arguments \u00b6 Clikt normally parses any value that starts with punctuation as an option, which allows users to intermix options and arguments. However, sometimes you need to pass a value that starts with punctuation to an argument. For example, you might have a file named -file.txt that you want to use as an argument. Clikt supports the POSIX convention of using -- to force all following values to be treated as arguments. Any values before the -- will be parsed normally. Example class Touch : CliktCommand () { val verbose by option (). flag () val files by argument (). multiple () override fun run () { if ( verbose ) echo ( files . joinToString ( \"\\n\" )) } } Usage 1 $ ./touch --foo.txt Usage: touch [OPTIONS] [FILES]... Error: no such option: \"--foo.txt\". Usage 2 $ ./touch --verbose -- --foo.txt bar.txt --foo.txt bar.txt","title":"Basic Arguments"},{"location":"arguments/#arguments","text":"Arguments are declared and customized similarly to options , but are provided on the command line positionally instead of by name. Arguments are declared with argument() , and the order that they are declared defines the order that they must be provided on the command line.","title":"Arguments"},{"location":"arguments/#basic-arguments","text":"By default, argument takes a single String value which is required to be provided on the command line. Example class Hello : CliktCommand () { val name by argument () override fun run () { echo ( \"Hello $name!\" ) } } Usage $ ./hello Foo Hello Foo! Arguments appear in the usage string, but normally aren\u2019t listed in the help page. It\u2019s usually more clear to document arguments in the command help. Example class Cp : CliktCommand ( help = \"Copy SOURCE to DEST, or multiple SOURCE(s) to directory DEST.\" ) { private val source by argument (). file ( exists = true ). multiple () private val dest by argument (). file () override fun run () { // ... } } Help Output Usage: cp [OPTIONS] [SOURCE]... DEST Copy SOURCE to DEST, or multiple SOURCE(s) to directory DEST. Options: -h, --help Show this message and exit","title":"Basic Arguments"},{"location":"arguments/#variadic-arguments","text":"Like options , arguments can take any fixed number of values, which you can change with functions like pair and triple . Unlike options, arguments can take a variable (or unlimited) number of values. This is especially common when taking file paths, since they are frequently expanded with a glob pattern on the command line. You can declare any number of arguments with fixed numbers of values, but only one variadic argument. Example class Copy : CliktCommand () { val source by argument (). file ( exists = true ). multiple () val dest by argument (). file ( fileOkay = false ) override fun run () { echo ( \"Copying files $source to $dest\" ) } } Usage $ ./copy file.* out/ Copying files [file.txt, file.md] to out/","title":"Variadic Arguments"},{"location":"arguments/#option-like-arguments","text":"Clikt normally parses any value that starts with punctuation as an option, which allows users to intermix options and arguments. However, sometimes you need to pass a value that starts with punctuation to an argument. For example, you might have a file named -file.txt that you want to use as an argument. Clikt supports the POSIX convention of using -- to force all following values to be treated as arguments. Any values before the -- will be parsed normally. Example class Touch : CliktCommand () { val verbose by option (). flag () val files by argument (). multiple () override fun run () { if ( verbose ) echo ( files . joinToString ( \"\\n\" )) } } Usage 1 $ ./touch --foo.txt Usage: touch [OPTIONS] [FILES]... Error: no such option: \"--foo.txt\". Usage 2 $ ./touch --verbose -- --foo.txt bar.txt --foo.txt bar.txt","title":"Option-Like Arguments"},{"location":"autocomplete/","text":"Bash Autocomplete \u00b6 Clikt includes built-in support for generating autocomplete scripts for bash and zsh. Supported Functionality \u00b6 Currently subcommand, option, and command alias names can be completed, as well as values for options and arguments. choice parameters are completed with their possible values. Other parameter types are completed as file or directory names. Context.allowInterspersedArgs is supported. For example: $ ./repo <TAB><TAB> commit clone pull $ ./repo -<TAB> --config -h --help --repo-home --verbose $./repo --repo-home ./g<TAB> ./git ./got ./good Enabling Completion \u00b6 Clikt handles autocomplete by generating a shell script that defines the completion. You generate the script once each time your CLI changes, and load it each time your start your shell. To generate the shell script, you need to invoke your program with a special environment variable. You can set the variable name manually with the autoCompleteEnvvar parameter in the CliktCommand constructor . By default it\u2019s your command\u2019s name capitalized, with - replaced with _ , and prefixed with another _ . So if your command name is my-command , the variable would be _MY_COMMAND_COMPLETE=bash or _MY_COMMAND_COMPLETE=zsh , depending on your current shell. For example to activate bash autocomplete for this command: class MyProgram : CliktCommand () { // ... } You can generate the completion script and save it to a file like this: $ _MY_PROGRAM_COMPLETE = bash ./my-program > ~/my-program-completion.sh Finally, source the file to activate completion: $ source ~/hello-completion.sh You can add that source command to your .bashrc so that completion is always available: $ echo source ~/hello-completion.sh >> ~/.bashrc You\u2019ll need to regenerate the completion script any time your command structure changes. Customizing Completions \u00b6 There is built-in completion for values for choice parameters, and for parameters converted with file and path . You can add completion for other parameters with the completionCandidates parameter to option() and argument() . The value can be one of the following: None : The default. The parameter\u2019s values will not be completed. Path : Completions will be filesystem paths. Hostname : Completions will be read from the system\u2019s hosts file. Username : Completions will be taken from the system\u2019s users. Fixed : Completions are given as a fixed set of strings. Limitations \u00b6 Token Normalization is not supported. If you have arguments that occur after a multiple argument, those arguments won\u2019t be autocompleted. Partial command lines are ambiguous in those situations, and Clikt assumes that you\u2019re trying to complete the multiple argument rather than the later ones. Bash must be at least version 3, or Zsh must be at least version 4.1.","title":"Supported Functionality"},{"location":"autocomplete/#bash-autocomplete","text":"Clikt includes built-in support for generating autocomplete scripts for bash and zsh.","title":"Bash Autocomplete"},{"location":"autocomplete/#supported-functionality","text":"Currently subcommand, option, and command alias names can be completed, as well as values for options and arguments. choice parameters are completed with their possible values. Other parameter types are completed as file or directory names. Context.allowInterspersedArgs is supported. For example: $ ./repo <TAB><TAB> commit clone pull $ ./repo -<TAB> --config -h --help --repo-home --verbose $./repo --repo-home ./g<TAB> ./git ./got ./good","title":"Supported Functionality"},{"location":"autocomplete/#enabling-completion","text":"Clikt handles autocomplete by generating a shell script that defines the completion. You generate the script once each time your CLI changes, and load it each time your start your shell. To generate the shell script, you need to invoke your program with a special environment variable. You can set the variable name manually with the autoCompleteEnvvar parameter in the CliktCommand constructor . By default it\u2019s your command\u2019s name capitalized, with - replaced with _ , and prefixed with another _ . So if your command name is my-command , the variable would be _MY_COMMAND_COMPLETE=bash or _MY_COMMAND_COMPLETE=zsh , depending on your current shell. For example to activate bash autocomplete for this command: class MyProgram : CliktCommand () { // ... } You can generate the completion script and save it to a file like this: $ _MY_PROGRAM_COMPLETE = bash ./my-program > ~/my-program-completion.sh Finally, source the file to activate completion: $ source ~/hello-completion.sh You can add that source command to your .bashrc so that completion is always available: $ echo source ~/hello-completion.sh >> ~/.bashrc You\u2019ll need to regenerate the completion script any time your command structure changes.","title":"Enabling Completion"},{"location":"autocomplete/#customizing-completions","text":"There is built-in completion for values for choice parameters, and for parameters converted with file and path . You can add completion for other parameters with the completionCandidates parameter to option() and argument() . The value can be one of the following: None : The default. The parameter\u2019s values will not be completed. Path : Completions will be filesystem paths. Hostname : Completions will be read from the system\u2019s hosts file. Username : Completions will be taken from the system\u2019s users. Fixed : Completions are given as a fixed set of strings.","title":"Customizing Completions"},{"location":"autocomplete/#limitations","text":"Token Normalization is not supported. If you have arguments that occur after a multiple argument, those arguments won\u2019t be autocompleted. Partial command lines are ambiguous in those situations, and Clikt assumes that you\u2019re trying to complete the multiple argument rather than the later ones. Bash must be at least version 3, or Zsh must be at least version 4.1.","title":"Limitations"},{"location":"commands/","text":"Commands \u00b6 Clikt supports arbitrarily nested commands. You can add one command as a child of another with the subcommands function, which can be called either in an init block, or on an existing instance. Executing Nested Commands \u00b6 For commands with no children, run is called whenever the command line is parsed (unless parsing is aborted from an error or an option like --help ). If a command has children, this isn\u2019t the case. Instead, its run is called only if a child command is invoked, just before the subcommand\u2019s run . If a parent command is called without specifying a subcommand, the help page is printed and run is not called. Example class Tool : CliktCommand () { val verbose by option (). flag ( \"--no-verbose\" ) override fun run () { echo ( \"Verbose mode is ${if (verbose) \" on \" else \" off \"}\" ) } } class Execute : CliktCommand () { override fun run () { echo ( \"executing\" ) } } fun main ( args : Array < String >) = Tool (). subcommands ( Execute ()). main ( args ) Usage 1 $ ./tool Usage: tool [OPTIONS] COMMAND [ARGS]... Options: --verbose / --no-verbose -h, --help Show this message and exit Commands: execute Usage 2 $ ./tool --verbose execute Verbose mode is on executing Customizing Command Name \u00b6 The default name for subcommands is inferred as a lowercase name from the command class name. You can also set a name manually in the CliktCommand constructor. Example class Tool : CliktCommand () { override fun run ()= Unit } class Execute : CliktCommand ( name = \"RUN-ME\" ) { override fun run () { echo ( \"executing\" ) } } fun main ( args : Array < String >) = Tool (). subcommands ( Execute ()). main ( args ) Usage 1 $ ./tool RUN-ME executing Usage 2 $ ./tool -h Usage: tool [OPTIONS] COMMAND [ARGS]... Options: -h, --help Show this message and exit Commands: RUN-ME Passing Parameters \u00b6 When calling subcommands, the position of options and arguments on the command line affect which command will parse them. A parameter is parsed by a command if is occurs after the command name, but before any other command names. Example class Tool : CliktCommand ( help = \"A tool that runs\" ) { val verbose by option (). flag ( \"--no-verbose\" ) override fun run () = Unit } class Execute : CliktCommand ( help = \"Execute the command\" ) { val name by option () override fun run () = Unit } fun main ( args : Array < String >) = Tool (). subcommands ( Execute ()). main ( args ) Usage $ ./tool --help Usage: tool [OPTIONS] COMMAND [ARGS]... A tool that runs Options: --verbose / --no-verbose -h, --help Show this message and exit Commands: execute Execute the command If you instead execute --help after the subcommand, the subcommand\u2019s help is printed: $ ./tool execute --help Usage: execute [OPTIONS] Execute the command Options: --name TEXT -h, --help Show this message and exit But executing ./tool --help execute , with the option before the subcommand, will cause the parent\u2019s help option to be invoked, printing out Tool \u2018s help page as if you just typed ./tool --help . Nested Handling And Contexts \u00b6 Normally nested command are independent of each other: a child can\u2019t access its parent\u2019s parameters. This makes composing commands much easier, but what if you want to pass information to a child command? You can do so with the command\u2019s Context . Every time the command line is parsed, each command creates a new context object for itself that is liked to its parent\u2019s context. Context objects have a number of properties that can be used to customize command line parsing. Although each command creates its own context, the configuration is inherited from the parent context. Context objects also have an obj property that can hold any user defined data. You can use the obj to create interfaces like this: Example class Tool : CliktCommand () { val verbose by option (). flag ( \"--no-verbose\" ) val config by findObject { mutableMapOf < String , String >() } override fun run () { config [ \"VERBOSE\" ] = if ( verbose ) \"on\" else \"off\" } } class Execute : CliktCommand () { val config by requireObject < Map < String , String >>() override fun run () { echo ( \"Verbose mode is ${config[\" VERBOSE \"]}\" ) } } fun main ( args : Array < String >) = Tool (). subcommands ( Execute ()). main ( args ) Usage $ ./tool --verbose execute Verbose mode is on The findObject and requireObject functions will walk up the context tree until they find an object with the given type. If no such object exists, they will either return null , throw an exception, or create an instance of the object and store it on the command\u2019s context, depending on which overload you call. Running Parent Command Without Children \u00b6 Normally, if a command has children, run is not called unless a child command is invoked on the command line. Instead, --help is called on the parent. If you want to change this behavior to always call run() on the parent, you can do so by setting invokeWithoutSubcommand to true . The Context will then have information on the subcommand that is about to be invoked, if there is one. Example class Tool : CliktCommand ( invokeWithoutSubcommand = true ) { override fun run () { if ( context . invokedSubcommand == null ) { echo ( \"invoked without a subcommand\" ) } else { echo ( \"about to run ${context.invokedSubcommand!!.commandName}\" ) } } } class Execute : CliktCommand () { override fun run () { echo ( \"running subcommand\" ) } } fun main ( args : Array < String >) = Tool (). subcommands ( Execute ()). main ( args ) Usage 1 $ ./tool invoked without a subcommand Usage 2 $./tool execute about to run execute running subcommand Customizing Contexts \u00b6 Contexts have a number of properties that can be customized, and which are inherited by child commands. You can change these properties with the context builder function, which can be called in an init block, or on a command instance. For example, you can change the default help message for the --help option. These definitions are equivalent: class Cli : NoRunCliktCommand () { init { context { helpOptionMessage = \"print the help\" } } } and class Cli : NoRunCliktCommand () fun main ( args : Array < String >) = Cli () . context { helpOptionMessage = \"print the help\" } . main ( args ) Any they work like: $ ./cli --help Usage: cli [OPTIONS] Options: -h, --help print the help Printing the Help Message When No Arguments Are Given \u00b6 Normally, if a command is called with no values on the command line, a usage error is printed if there are required parameters, or run is called if there aren\u2019t any. You can change this behavior by passing printHelpOnEmptyArgs = true to your command\u2019s constructor. This will cause a help message to be printed when to values are provided on the command line, regardless of the parameters in your command. class Cli : CliktCommand () { override fun run () { echo ( \"Command ran\" ) } } Which will print the help message, even without --help : $ ./cli Usage: cli [OPTIONS] Options: -h, --help print the help Warnings and Other Messages \u00b6 When you want to show information to the user, you\u2019ll probably use the functions for printing to stdout directly. However, there\u2019s another mechanism that can be more useful when writing reusable parameter code: command messages. These messages are buffered during parsing and printed all at once immediately before a command\u2019s run is called. They are not printed if there are any errors in parsing. This type of message is used by Clikt for deprecating options . You can issue a command message by calling CliktCommand.message or with the message function available in the context of parameter transformers. Example class Cli : CliktCommand () { // This will print the warning when the option is given, but not if there are errors val opt by option (). validate { if ( it . isEmpty ()) message ( \"Empty strings are not recommended\" ) } override fun run () {} } Usage 1 $ ./cli --opt='' Empty strings are not recommended Usage 2 $ ./cli --opt='' --oops Error: no such option: \"--oops\". You can disable automatic message printing on the command\u2019s context : Example class Cli : CliktCommand () { init { context { printExtraMessages = false } } val opt by option (). validate { if ( it . isEmpty ()) message ( \"Empty strings are not recommended\" ) } override fun run () { echo ( \"command run\" ) } } Usage $ ./cli --opt='' command run","title":"Executing Nested Commands"},{"location":"commands/#commands","text":"Clikt supports arbitrarily nested commands. You can add one command as a child of another with the subcommands function, which can be called either in an init block, or on an existing instance.","title":"Commands"},{"location":"commands/#executing-nested-commands","text":"For commands with no children, run is called whenever the command line is parsed (unless parsing is aborted from an error or an option like --help ). If a command has children, this isn\u2019t the case. Instead, its run is called only if a child command is invoked, just before the subcommand\u2019s run . If a parent command is called without specifying a subcommand, the help page is printed and run is not called. Example class Tool : CliktCommand () { val verbose by option (). flag ( \"--no-verbose\" ) override fun run () { echo ( \"Verbose mode is ${if (verbose) \" on \" else \" off \"}\" ) } } class Execute : CliktCommand () { override fun run () { echo ( \"executing\" ) } } fun main ( args : Array < String >) = Tool (). subcommands ( Execute ()). main ( args ) Usage 1 $ ./tool Usage: tool [OPTIONS] COMMAND [ARGS]... Options: --verbose / --no-verbose -h, --help Show this message and exit Commands: execute Usage 2 $ ./tool --verbose execute Verbose mode is on executing","title":"Executing Nested Commands"},{"location":"commands/#customizing-command-name","text":"The default name for subcommands is inferred as a lowercase name from the command class name. You can also set a name manually in the CliktCommand constructor. Example class Tool : CliktCommand () { override fun run ()= Unit } class Execute : CliktCommand ( name = \"RUN-ME\" ) { override fun run () { echo ( \"executing\" ) } } fun main ( args : Array < String >) = Tool (). subcommands ( Execute ()). main ( args ) Usage 1 $ ./tool RUN-ME executing Usage 2 $ ./tool -h Usage: tool [OPTIONS] COMMAND [ARGS]... Options: -h, --help Show this message and exit Commands: RUN-ME","title":"Customizing Command Name"},{"location":"commands/#passing-parameters","text":"When calling subcommands, the position of options and arguments on the command line affect which command will parse them. A parameter is parsed by a command if is occurs after the command name, but before any other command names. Example class Tool : CliktCommand ( help = \"A tool that runs\" ) { val verbose by option (). flag ( \"--no-verbose\" ) override fun run () = Unit } class Execute : CliktCommand ( help = \"Execute the command\" ) { val name by option () override fun run () = Unit } fun main ( args : Array < String >) = Tool (). subcommands ( Execute ()). main ( args ) Usage $ ./tool --help Usage: tool [OPTIONS] COMMAND [ARGS]... A tool that runs Options: --verbose / --no-verbose -h, --help Show this message and exit Commands: execute Execute the command If you instead execute --help after the subcommand, the subcommand\u2019s help is printed: $ ./tool execute --help Usage: execute [OPTIONS] Execute the command Options: --name TEXT -h, --help Show this message and exit But executing ./tool --help execute , with the option before the subcommand, will cause the parent\u2019s help option to be invoked, printing out Tool \u2018s help page as if you just typed ./tool --help .","title":"Passing Parameters"},{"location":"commands/#nested-handling-and-contexts","text":"Normally nested command are independent of each other: a child can\u2019t access its parent\u2019s parameters. This makes composing commands much easier, but what if you want to pass information to a child command? You can do so with the command\u2019s Context . Every time the command line is parsed, each command creates a new context object for itself that is liked to its parent\u2019s context. Context objects have a number of properties that can be used to customize command line parsing. Although each command creates its own context, the configuration is inherited from the parent context. Context objects also have an obj property that can hold any user defined data. You can use the obj to create interfaces like this: Example class Tool : CliktCommand () { val verbose by option (). flag ( \"--no-verbose\" ) val config by findObject { mutableMapOf < String , String >() } override fun run () { config [ \"VERBOSE\" ] = if ( verbose ) \"on\" else \"off\" } } class Execute : CliktCommand () { val config by requireObject < Map < String , String >>() override fun run () { echo ( \"Verbose mode is ${config[\" VERBOSE \"]}\" ) } } fun main ( args : Array < String >) = Tool (). subcommands ( Execute ()). main ( args ) Usage $ ./tool --verbose execute Verbose mode is on The findObject and requireObject functions will walk up the context tree until they find an object with the given type. If no such object exists, they will either return null , throw an exception, or create an instance of the object and store it on the command\u2019s context, depending on which overload you call.","title":"Nested Handling And Contexts"},{"location":"commands/#running-parent-command-without-children","text":"Normally, if a command has children, run is not called unless a child command is invoked on the command line. Instead, --help is called on the parent. If you want to change this behavior to always call run() on the parent, you can do so by setting invokeWithoutSubcommand to true . The Context will then have information on the subcommand that is about to be invoked, if there is one. Example class Tool : CliktCommand ( invokeWithoutSubcommand = true ) { override fun run () { if ( context . invokedSubcommand == null ) { echo ( \"invoked without a subcommand\" ) } else { echo ( \"about to run ${context.invokedSubcommand!!.commandName}\" ) } } } class Execute : CliktCommand () { override fun run () { echo ( \"running subcommand\" ) } } fun main ( args : Array < String >) = Tool (). subcommands ( Execute ()). main ( args ) Usage 1 $ ./tool invoked without a subcommand Usage 2 $./tool execute about to run execute running subcommand","title":"Running Parent Command Without Children"},{"location":"commands/#customizing-contexts","text":"Contexts have a number of properties that can be customized, and which are inherited by child commands. You can change these properties with the context builder function, which can be called in an init block, or on a command instance. For example, you can change the default help message for the --help option. These definitions are equivalent: class Cli : NoRunCliktCommand () { init { context { helpOptionMessage = \"print the help\" } } } and class Cli : NoRunCliktCommand () fun main ( args : Array < String >) = Cli () . context { helpOptionMessage = \"print the help\" } . main ( args ) Any they work like: $ ./cli --help Usage: cli [OPTIONS] Options: -h, --help print the help","title":"Customizing Contexts"},{"location":"commands/#printing-the-help-message-when-no-arguments-are-given","text":"Normally, if a command is called with no values on the command line, a usage error is printed if there are required parameters, or run is called if there aren\u2019t any. You can change this behavior by passing printHelpOnEmptyArgs = true to your command\u2019s constructor. This will cause a help message to be printed when to values are provided on the command line, regardless of the parameters in your command. class Cli : CliktCommand () { override fun run () { echo ( \"Command ran\" ) } } Which will print the help message, even without --help : $ ./cli Usage: cli [OPTIONS] Options: -h, --help print the help","title":"Printing the Help Message When No Arguments Are Given"},{"location":"commands/#warnings-and-other-messages","text":"When you want to show information to the user, you\u2019ll probably use the functions for printing to stdout directly. However, there\u2019s another mechanism that can be more useful when writing reusable parameter code: command messages. These messages are buffered during parsing and printed all at once immediately before a command\u2019s run is called. They are not printed if there are any errors in parsing. This type of message is used by Clikt for deprecating options . You can issue a command message by calling CliktCommand.message or with the message function available in the context of parameter transformers. Example class Cli : CliktCommand () { // This will print the warning when the option is given, but not if there are errors val opt by option (). validate { if ( it . isEmpty ()) message ( \"Empty strings are not recommended\" ) } override fun run () {} } Usage 1 $ ./cli --opt='' Empty strings are not recommended Usage 2 $ ./cli --opt='' --oops Error: no such option: \"--oops\". You can disable automatic message printing on the command\u2019s context : Example class Cli : CliktCommand () { init { context { printExtraMessages = false } } val opt by option (). validate { if ( it . isEmpty ()) message ( \"Empty strings are not recommended\" ) } override fun run () { echo ( \"command run\" ) } } Usage $ ./cli --opt='' command run","title":"Warnings and Other Messages"},{"location":"documenting/","text":"Documenting Scripts \u00b6 Clikt takes care of creating formatted help messages for commands. There are a number of ways to customize the default behavior. You can also implement your own HelpFormatter and set it on the command\u2019s context . Help Texts \u00b6 Commands and parameters accept a help argument. Commands also accept an epilog argument, which is printed after the parameters and commands on the help page. All text is automatically re-wrapped to the terminal width. Example class Hello : CliktCommand ( help = \"\"\" This script prints NAME COUNT times . COUNT must be a positive number , and defaults to 1. \"\"\") { val count by option ( \"-c\" , \"--count\" , help = \"number of greetings\" ). int (). default ( 1 ) val name by argument () override fun run () = repeat ( count ) { echo ( \"Hello $name!\" ) } } Usage $ ./hello --help Usage: hello [OPTIONS] NAME This script prints NAME COUNT times. COUNT must be a positive number, and defaults to 1. Options: -c, --count INT number of greetings -h, --help Show this message and exit Option names and metavars will appear in help output even if no help string is specified for them. On the other hand, arguments only appear in the usage string. It is possible to add a help string to arguments which will be added to the help page, but the Unix convention is to just describe arguments in the command help. Subcommand Short Help \u00b6 Subcommands are listed in the help page based on their name . They have a short help string which is the first line of their help. Example class Tool : NoRunCliktCommand () class Execute : NoRunCliktCommand ( help = \"\"\" Execute the command . The command will be executed . \"\"\") class Abort : NoRunCliktCommand ( help = \"Kill any running commands.\" ) Usage $ ./tool --help Usage: tool [OPTIONS] COMMAND [ARGS]... Options: -h, --help Show this message and exit Commands: execute Execute the command. abort Kill any running commands. Help Option Customization \u00b6 Clikt handles the help option is specially. It is added automatically to every command. Any help option name that conflicts with another option is not used for the help option. If the help option has no unique names, it is not added. You can change the help option\u2019s name and help message on the command\u2019s context : Example class Tool : NoRunCliktCommand () { init { context { helpOptionNames = setOf ( \"/help\" ) helpOptionMessage = \"show the help\" } } } Usage $ ./tool /help Usage: tool [OPTIONS] Options: /help show the help If you don\u2019t want a help option to be added, you can set helpOptionNames = emptySet() Default Values in Help \u00b6 You can configure the help formatter to show default values in the help output by passing showRequiredTag = true to the CliktHelpFormatter . By default, the string value of the default value will be shown. You can show a different value by passing the value you want to show to the defaultForHelp parameter of default . Example class Tool : NoRunCliktCommand () { init { context { helpFormatter = CliktHelpFormatter ( showDefaultValues = true ) } } val a by option ( help = \"this is optional\" ). default ( \"value\" ) val b by option ( help = \"this is also optional\" ). default ( \"value\" , defaultForHelp = \"chosen for you\" ) } Usage $ ./tool --help Usage: tool [OPTIONS] Options: --a TEXT this is optional (default: value) --b TEXT this is also optional (default: chosen for you) Required Options in Help \u00b6 By default, required options are displayed the same way as other options. The help formatter includes two different ways to show that an option is required. Required Option Marker \u00b6 You can pass a character to the requiredOptionMarker argument of the CliktHelpFormatter . Example class Tool : NoRunCliktCommand () { init { context { helpFormatter = CliktHelpFormatter ( requiredOptionMarker = \"*\" ) } } val option by option ( help = \"this is optional\" ) val required by option ( help = \"this is required\" ). required () } Usage $ ./tool --help Usage: tool [OPTIONS] Options: --option TEXT this is optional * --required TEXT this is required -h, --help Show this message and exit Required Option Tag \u00b6 You can also show a tag for required options by passing showRequiredTag = true to the CliktHelpFormatter . Example class Tool : CliktCommand () { init { context { helpFormatter = CliktHelpFormatter ( showRequiredTag = true ) } } val option by option ( help = \"this is optional\" ) val required by option ( help = \"this is required\" ). required () } Usage $ ./tool --help Usage: tool [OPTIONS] Options: --option TEXT this is optional --required TEXT this is required (required) -h, --help Show this message and exit Grouping Options in Help \u00b6 You can group options into separate help sections by using OptionGroup . The name of the group will be shown in the output. You can also add an extra help message to be shown with the group. Groups can\u2019t be nested. Example class UserOptions : OptionGroup ( name = \"User Options\" , help = \"Options controlling the user\" ) { val name by option ( help = \"user name\" ) val age by option ( help = \"user age\" ). int () } class Tool : NoRunCliktCommand () { val userOptions by UserOptions () } Usage $ ./tool --help Usage: cli [OPTIONS] User Options: Options controlling the user --name TEXT user name --age INT user age Options: -h, --help Show this message and exit Note for IntelliJ users: \u00b6 If you\u2019re using IntelliJ, there is a bug in the Kotlin plugin for versions 1.2.31 and under that prevents provideDelegate from being imported automatically, so you might need to add this import manually: import com.github.ajalt.clikt.parameters.groups.provideDelegate","title":"Help Texts"},{"location":"documenting/#documenting-scripts","text":"Clikt takes care of creating formatted help messages for commands. There are a number of ways to customize the default behavior. You can also implement your own HelpFormatter and set it on the command\u2019s context .","title":"Documenting Scripts"},{"location":"documenting/#help-texts","text":"Commands and parameters accept a help argument. Commands also accept an epilog argument, which is printed after the parameters and commands on the help page. All text is automatically re-wrapped to the terminal width. Example class Hello : CliktCommand ( help = \"\"\" This script prints NAME COUNT times . COUNT must be a positive number , and defaults to 1. \"\"\") { val count by option ( \"-c\" , \"--count\" , help = \"number of greetings\" ). int (). default ( 1 ) val name by argument () override fun run () = repeat ( count ) { echo ( \"Hello $name!\" ) } } Usage $ ./hello --help Usage: hello [OPTIONS] NAME This script prints NAME COUNT times. COUNT must be a positive number, and defaults to 1. Options: -c, --count INT number of greetings -h, --help Show this message and exit Option names and metavars will appear in help output even if no help string is specified for them. On the other hand, arguments only appear in the usage string. It is possible to add a help string to arguments which will be added to the help page, but the Unix convention is to just describe arguments in the command help.","title":"Help Texts"},{"location":"documenting/#subcommand-short-help","text":"Subcommands are listed in the help page based on their name . They have a short help string which is the first line of their help. Example class Tool : NoRunCliktCommand () class Execute : NoRunCliktCommand ( help = \"\"\" Execute the command . The command will be executed . \"\"\") class Abort : NoRunCliktCommand ( help = \"Kill any running commands.\" ) Usage $ ./tool --help Usage: tool [OPTIONS] COMMAND [ARGS]... Options: -h, --help Show this message and exit Commands: execute Execute the command. abort Kill any running commands.","title":"Subcommand Short Help"},{"location":"documenting/#help-option-customization","text":"Clikt handles the help option is specially. It is added automatically to every command. Any help option name that conflicts with another option is not used for the help option. If the help option has no unique names, it is not added. You can change the help option\u2019s name and help message on the command\u2019s context : Example class Tool : NoRunCliktCommand () { init { context { helpOptionNames = setOf ( \"/help\" ) helpOptionMessage = \"show the help\" } } } Usage $ ./tool /help Usage: tool [OPTIONS] Options: /help show the help If you don\u2019t want a help option to be added, you can set helpOptionNames = emptySet()","title":"Help Option Customization"},{"location":"documenting/#default-values-in-help","text":"You can configure the help formatter to show default values in the help output by passing showRequiredTag = true to the CliktHelpFormatter . By default, the string value of the default value will be shown. You can show a different value by passing the value you want to show to the defaultForHelp parameter of default . Example class Tool : NoRunCliktCommand () { init { context { helpFormatter = CliktHelpFormatter ( showDefaultValues = true ) } } val a by option ( help = \"this is optional\" ). default ( \"value\" ) val b by option ( help = \"this is also optional\" ). default ( \"value\" , defaultForHelp = \"chosen for you\" ) } Usage $ ./tool --help Usage: tool [OPTIONS] Options: --a TEXT this is optional (default: value) --b TEXT this is also optional (default: chosen for you)","title":"Default Values in Help"},{"location":"documenting/#required-options-in-help","text":"By default, required options are displayed the same way as other options. The help formatter includes two different ways to show that an option is required.","title":"Required Options in Help"},{"location":"documenting/#required-option-marker","text":"You can pass a character to the requiredOptionMarker argument of the CliktHelpFormatter . Example class Tool : NoRunCliktCommand () { init { context { helpFormatter = CliktHelpFormatter ( requiredOptionMarker = \"*\" ) } } val option by option ( help = \"this is optional\" ) val required by option ( help = \"this is required\" ). required () } Usage $ ./tool --help Usage: tool [OPTIONS] Options: --option TEXT this is optional * --required TEXT this is required -h, --help Show this message and exit","title":"Required Option Marker"},{"location":"documenting/#required-option-tag","text":"You can also show a tag for required options by passing showRequiredTag = true to the CliktHelpFormatter . Example class Tool : CliktCommand () { init { context { helpFormatter = CliktHelpFormatter ( showRequiredTag = true ) } } val option by option ( help = \"this is optional\" ) val required by option ( help = \"this is required\" ). required () } Usage $ ./tool --help Usage: tool [OPTIONS] Options: --option TEXT this is optional --required TEXT this is required (required) -h, --help Show this message and exit","title":"Required Option Tag"},{"location":"documenting/#grouping-options-in-help","text":"You can group options into separate help sections by using OptionGroup . The name of the group will be shown in the output. You can also add an extra help message to be shown with the group. Groups can\u2019t be nested. Example class UserOptions : OptionGroup ( name = \"User Options\" , help = \"Options controlling the user\" ) { val name by option ( help = \"user name\" ) val age by option ( help = \"user age\" ). int () } class Tool : NoRunCliktCommand () { val userOptions by UserOptions () } Usage $ ./tool --help Usage: cli [OPTIONS] User Options: Options controlling the user --name TEXT user name --age INT user age Options: -h, --help Show this message and exit","title":"Grouping Options in Help"},{"location":"documenting/#note-for-intellij-users","text":"If you\u2019re using IntelliJ, there is a bug in the Kotlin plugin for versions 1.2.31 and under that prevents provideDelegate from being imported automatically, so you might need to add this import manually: import com.github.ajalt.clikt.parameters.groups.provideDelegate","title":"Note for IntelliJ users:"},{"location":"exceptions/","text":"Exception Handling \u00b6 Clikt uses exceptions internally to signal that processing has ended early for any reason. This includes incorrect command line usage, or printing a help page. Where are Exceptions Handled? {#handling} \u00b6 When you call CliktCommand.main , it will parse the command line and catch any CliktError and Abort exceptions. If it catches one, it will then print out the appropriate information and exit the process. If the caught exception is a PrintMessage or PrintHelpMessage , the process exit status will be 0 and the message will be printed to stdout. Otherwise it will exit with status 1 and print the message to stderr. Any other types of exceptions indicate a programming error, and are not caught by main . However, convert and the other parameter transformations will wrap exceptions thrown inside them in a UsageError , so if you define a custom transformation, you don\u2019t have to worry about an exception escaping to the user. Handling Exceptions Manually \u00b6 CliktCommand.main is just a try / catch block surrounding CliktCommand.parse , so if don\u2019t want exceptions to be caught, you can call parse wherever you would normally call main . fun main ( args : Array < String >) = Cli (). parse ( args ) Which Exceptions Exist? \u00b6 Clikt will throw Abort if it needs to halt execution immediately without a specific message. All other exceptions are subclasses of UsageError . The following subclasses exist: PrintMessage : The exception\u2019s message should be printed. PrintHelpMessage : The help page for the exception\u2019s command should be printed. UsageError : The command line was incorrect in some way. All other exceptions subclass from this. These exceptions are automatically augmented with extra information about the current parameter, if possible. BadParameterValue : A parameter was given the correct number of values, but of invalid format or type. MissingParameter : A required parameter was not provided. NoSuchOption : An option was provided that does not exist. IncorrectOptionValueCount : An option was supplied but the number of values supplied to the option was incorrect. IncorrectArgumentValueCount : An argument was supplied but the number of values supplied was incorrect. MutuallyExclusiveGroupException : Multiple options in a mutually exclusive group were supplied when the group is restricted to a single value.","title":"Where are Exceptions Handled?"},{"location":"exceptions/#exception-handling","text":"Clikt uses exceptions internally to signal that processing has ended early for any reason. This includes incorrect command line usage, or printing a help page.","title":"Exception Handling"},{"location":"exceptions/#where-are-exceptions-handled-handling","text":"When you call CliktCommand.main , it will parse the command line and catch any CliktError and Abort exceptions. If it catches one, it will then print out the appropriate information and exit the process. If the caught exception is a PrintMessage or PrintHelpMessage , the process exit status will be 0 and the message will be printed to stdout. Otherwise it will exit with status 1 and print the message to stderr. Any other types of exceptions indicate a programming error, and are not caught by main . However, convert and the other parameter transformations will wrap exceptions thrown inside them in a UsageError , so if you define a custom transformation, you don\u2019t have to worry about an exception escaping to the user.","title":"Where are Exceptions Handled? {#handling}"},{"location":"exceptions/#handling-exceptions-manually","text":"CliktCommand.main is just a try / catch block surrounding CliktCommand.parse , so if don\u2019t want exceptions to be caught, you can call parse wherever you would normally call main . fun main ( args : Array < String >) = Cli (). parse ( args )","title":"Handling Exceptions Manually"},{"location":"exceptions/#which-exceptions-exist","text":"Clikt will throw Abort if it needs to halt execution immediately without a specific message. All other exceptions are subclasses of UsageError . The following subclasses exist: PrintMessage : The exception\u2019s message should be printed. PrintHelpMessage : The help page for the exception\u2019s command should be printed. UsageError : The command line was incorrect in some way. All other exceptions subclass from this. These exceptions are automatically augmented with extra information about the current parameter, if possible. BadParameterValue : A parameter was given the correct number of values, but of invalid format or type. MissingParameter : A required parameter was not provided. NoSuchOption : An option was provided that does not exist. IncorrectOptionValueCount : An option was supplied but the number of values supplied to the option was incorrect. IncorrectArgumentValueCount : An argument was supplied but the number of values supplied was incorrect. MutuallyExclusiveGroupException : Multiple options in a mutually exclusive group were supplied when the group is restricted to a single value.","title":"Which Exceptions Exist?"},{"location":"options/","text":"Options \u00b6 Options are added to commands by defining a property delegate with the option function. Basic Options \u00b6 The default option takes one value of type String . The property is nullable. If the option is not given on the command line, the property value will be null. If the option is given at least once, the property will return the value of the last occurrence of the option. Example class Hello : CliktCommand () { val name by option ( help = \"your name\" ) override fun run () { echo ( \"Hello, $name!\" ) } } Usage $ ./hello --name=Foo Hello, Foo! Option Names \u00b6 If you don\u2019t specify names for an option, a lowercase hyphen-separated name is automatically inferred from the property. For example, val myOpt by option() will create an option that can be called with --my-opt . You can also specify any number of names for an option manually: class Hello : CliktCommand () { val name by option ( \"-n\" , \"--name\" , help = \"your name\" ) override fun run () { echo ( \"Hello, $name!\" ) } } Option names that are two characters long (like -n ) are treated as POSIX-style short options. You call them with a value like this: Usage 1 $ ./hello -nfoo Hello, foo! Usage 2 $ ./hello -n foo Hello, foo! All other option names are considered long options, and can be called like this: Usage 1 $ ./hello --name=foo Hello, foo! Usage 2 $ ./hello --name foo Hello, foo! Customizing Options \u00b6 The option behavior and delegate type can be customized by calling extension functions on the option call. For example, here are some different option declarations: val a : String ? by option () val b : Int ? by option (). int () val c : Pair < Int , Int >? by option (). int (). pair () val d : Pair < Int , Int > by option (). int (). pair (). default ( 0 to 0 ) val e : Pair < Float , Float > by option (). float (). pair (). default ( 0f to 0f ) There are three main types of behavior that can be customized independently: The type of each value in the option. The value type is String by default, but can be customized with built-in functions like int or choice , or manually with convert . This is detailed in the parameters page. The number of values that the option requires. Options take one value by default, but this can be changed with built-in functions like pair and triple , or manually with transformValues . How to handle all calls to the option (i.e. if the option is not given, or is given more than once). By default, the option delegate value is the null if the option is not given on the command line, but you can change this behavior with functions like default and multiple . Since the three types of customizations are orthogonal, you can choose which ones you want to use, and if you implement a new customization, it can be used with all of the existing functions without any repeated code. Default Values \u00b6 By default, option delegates return null if the option wasn\u2019t provided on the command line. You can instead return a default value with default . Example class Pow : CliktCommand () { val exp by option ( \"-e\" , \"--exp\" ). double (). default ( 1.0 ) override fun run () { echo ( \"2 ^ $exp = ${(2.0).pow(exp)}\" ) } } Usage 1 $ ./pow -e 8 2 ^ 8.0 = 256.0 Usage 2 $ ./pow 2 ^ 1.0 = 2.0 If the default value is expensive to compute, you can use defaultLazy instead of default . It has the same effect, but you give it a lambda returning the default value, and the lambda will only be called if the default value is used. Multi Value Options \u00b6 Options can take any fixed number of values separated by whitespace, or a variable number of values separated by a non-whitespace delimiter you specify. If you want a variable number of values separated by whitespace, you need to use an argument instead. Options With Fixed Number of Values \u00b6 There are built in functions for options that take two values ( pair , which uses a Pair ), or three values ( triple , which uses a Triple ). You can change the type of each value as normal with functions like int . If you need more values, you can provide your own container with transformValues . You give that function the number of values you want, and a lambda that will transform a list of values into the output container. The list will always have a size equal to the number you specify. If the user provides a different number of values, Clikt will inform the user and your lambda won\u2019t be called. Example data class Quad < out T >( val a : T , val b : T , val c : T , val d : T ) fun < T > Quad < T >. toList (): List < T > = listOf ( a , b , c , d ) class Geometry : CliktCommand () { val square by option (). int (). pair () val cube by option (). int (). triple () val tesseract by option (). int (). transformValues ( 4 ) { Quad ( it [ 0 ], it [ 1 ], it [ 2 ], it [ 3 ]) } override fun run () { echo ( \"Square has dimensions ${square?.toList()?.joinToString(\" x \")}\" ) echo ( \"Cube has dimensions ${cube?.toList()?.joinToString(\" x \")}\" ) echo ( \"Tesseract has dimensions ${tesseract?.toList()?.joinToString(\" x \")}\" ) } } Usage $ ./geometry --square 1 2 --cube 3 4 5 --tesseract 6 7 8 9 Square has dimensions 1x2 Cube has dimensions 3x4x5 Tesseract has dimensions 6x7x8x9 Options With a Variable Number of Values \u00b6 You can use split to allow a variable number of values to a single option invocation by separating the values with non-whitespace delimiters. Example class C : CliktCommand () { val profiles by option ( \"-P\" ). split ( \",\" ) override fun run () { for ( profile in profiles ) { echo ( profile ) } } } Usage $ ./split -P profile-1,profile-2 profile-1 profile-2 Multiple Options \u00b6 Normally, when an option is provided on the command line more than once, only the values from the last occurrence are used. But sometimes you want to keep all values provided. For example, git commit -m foo -m bar would create a commit message with two lines: foo and bar . To get this behavior with Clikt, you can use multiple . This will cause the property delegate value to be a list, where each item in the list is the value of from one occurrence of the option. If the option is never given, the list will be empty (or you can specify a list to use). Example class Commit : CliktCommand () { val message by option ( \"-m\" ). multiple () override fun run () { echo ( message . joinToString ( \"\\n\" )) } } Usage $ ./commit -m foo -m bar foo bar You can combine multiple with item type conversions and multiple values. For example: val opt : List < Pair < Int , Int >> by option (). int (). pair (). multiple () Boolean Flag Options \u00b6 Flags are options that don\u2019t take a value. Boolean flags can be enabled or disabled, depending on the name used to invoke the option. You can turn an option into a boolean flag with flag . That function takes an optional list of secondary names that will be added to any existing or inferred names for the option. If the option is invoked with one of the secondary names, the delegate will return false. It\u2019s a good idea to always set secondary names so that a user can disable the flag if it was enabled previously. Example class Cli : CliktCommand () { val flag by option ( \"--on\" , \"-o\" ). flag ( \"--off\" , \"-O\" , default = false ) override fun run () { echo ( flag ) } } Usage 1 $ ./cli -o true Usage 2 $ ./cli --on --off false Multiple short flag options can be combined when called on the command line: Example class Cli : CliktCommand () { val flagA by option ( \"-a\" ). flag () val flagB by option ( \"-b\" ). flag () val foo by option ( \"-f\" ) override fun run () { echo ( \"$flagA $flagB $foo\" ) } } Usage $ ./cli -abfFoo true true Foo Counted Flag Options \u00b6 You might want a flag option that counts the number of times it occurs on the command line. You can use counted for this. Example class Log : CliktCommand () { val verbosity by option ( \"-v\" ). counted () override fun run () { echo ( \"Verbosity level: $verbosity\" ) } } Usage $ ./log -vvv Verbosity level: 3 Feature Switch Flags \u00b6 Another way to use flags is to assign a value to each option name. You can do this with switch , which takes a map of option names to values. Note that the names in the map replace any previously specified or inferred names. Example class Size : CliktCommand () { val size by option (). switch ( \"--large\" to \"large\" , \"--small\" to \"small\" ). default ( \"unknown\" ) override fun run () { echo ( \"You picked size $size\" ) } } And on the command line: Usage $ ./size --small You picked size small Choice Options \u00b6 You can restrict the values that a regular option can take to a set of values using choice . You can also map the input values to new types. Example class Digest : CliktCommand () { val hash by option (). choice ( \"md5\" , \"sha1\" ) override fun run () { echo ( hash ) } } Usage 1 $ ./digest --hash=md5 md5 Usage 2 $ ./digest --hash=sha256 Usage: digest [OPTIONS] Error: Invalid value for \"--hash\": invalid choice: sha256. (choose from md5, sha1) Usage 3 $ ./digest --help Usage: digest [OPTIONS] Options: --hash [md5|sha1] -h, --help Show this message and exit Mutually Exclusive Option Groups \u00b6 If choice or switch options aren\u2019t flexible enough, you can use mutuallyExclusiveOptions to group any nullable options into a mutually exclusive group. If more than one of the options in the group is given on the command line, the last value is used. If you want different types for each option, you can wrap them in a sealed class. Example sealed class Fruit { data class Oranges ( val size : String ): Fruit () data class Apples ( val count : Int ): Fruit () } class Order : CliktCommand () { val fruit : Fruit ? by mutuallyExclusiveOptions < Fruit >( option ( \"--apples\" ). convert { Apples ( it . toInt ()) }, option ( \"--oranges\" ). convert { Oranges ( it ) } ) override fun run () = echo ( fruit ) } Usage 1 $ ./order --apples=10 Apples(count=10) Usage 2 $ ./order --oranges=small Oranges(size=small) Usage 3 $ ./order --apples=10 --oranges=large Oranges(size=large) Usage: order [OPTIONS] Error: option --apples cannot be used with --oranges You can enforce that only one of the options is given with single : Example val fruit : Fruit ? by mutuallyExclusiveOptions < Fruit >( option ( \"--apples\" ). convert { Apples ( it . toInt ()) }, option ( \"--oranges\" ). convert { Oranges ( it ) } ). single () Usage $ ./order --apples=10 --oranges=small Usage: order [OPTIONS] Error: option --apples cannot be used with --oranges Like regular options, you can make the entire group required , or give it a default value. Like other option groups , you can specify a name and help text for the group if you want to set the group apart in the help output. Co-Occurring Option Groups \u00b6 Sometimes you have a set of options that only make sense when specified together. To enforce this, you can make an option group cooccurring . Co-occurring groups must have at least one required option, and may also have non-required options. The required constraint is enforced if any of the options in the group are given on the command line. If none if the options are given, the value of the group is null. Example class UserOptions : OptionGroup () { val name by option (). required () val age by option (). int () } class Tool : CliktCommand () { val userOptions by UserOptions (). cooccurring () override fun run () { userOptions ?. let { echo ( it . name ) echo ( it . age ) } ?: echo ( \"No user options\" ) } } Usage 1 $ ./tool No user options Usage 2 $ ./tool --name=jane --age=30 jane 30 Usage 3 $ ./tool --age=30 Usage: tool [OPTIONS] Error: Missing option \"--name\". Like other option groups , you can specify a name and help text for the group if you want to set the group apart in the help output. Choice Options With Groups \u00b6 If you have different groups of options that only make sense when another option has a certain value, you can use groupChoice . These options are similar to choice options , but instead of mapping a value to a single new type, they map a value to a co-occurring OptionGroup . Options for groups other than the selected one are ignored, and only the selected group\u2019s required constraints are enforced. Example sealed class LoadConfig ( name : String ): OptionGroup ( name ) class FromDisk : LoadConfig ( \"Options for loading from disk\" ) { val path by option (). file (). required () val followSymlinks by option (). flag () } class FromNetwork : LoadConfig ( \"Option for loading from network\" ) { val url by option (). required () val username by option (). prompt () val password by option (). prompt ( hideInput = true ) } class Tool : CliktCommand ( help = \"An example of a custom help formatter that uses ansi colors\" ) { val load by option (). groupChoice ( \"disk\" to FromDisk (), \"network\" to FromNetwork () ) override fun run () { when ( val it = load ) { is FromDisk -> echo ( \"Loading from disk: ${it.path}\" ) is FromNetwork -> echo ( \"Loading from network: ${it.url}\" ) null -> echo ( \"Not loading\" ) } } } Usage 1 $ ./tool --load=disk --path=./config --follow-symlinks Loading from disk: .\\config Usage 2 $ ./tool --load=network --url=www.example.com --username=admin Password: ******* Loading from network: www.example.com Usage 3 $ ./tool --load=disk Usage: cli [OPTIONS] Error: Missing option \"--path\". Usage 4 $ ./tool --load=whoops Usage: cli [OPTIONS] Error: Invalid value for \"--load\": invalid choice: whoops. (choose from disk, network) Prompting For Input \u00b6 In some cases, you might want to create an option that uses the value given on the command line if there is one, but prompt the user for input if one is not provided. Clikt can take care of this for you with the prompt function. Example class Hello : CliktCommand () { val name by option (). prompt () override fun run () { echo ( \"Hello $name\" ) } } Usage 1 ./hello --name=foo Hello foo Usage 2 ./hello Name: foo Hello foo The default prompt string is based on the option name, but prompt takes a number of parameters to customize the output. Password Prompts \u00b6 You can also create a option that uses a hidden prompt and asks for confirmation. This combination of behavior is commonly used for passwords. Example class Login : CliktCommand () { val password by option (). prompt ( requireConfirmation = true , hideInput = true ) override fun run () { echo ( \"Your hidden password: $password\" ) } } Usage $ ./login Password: Repeat for confirmation: Your hidden password: hunter2 Eager Options \u00b6 Sometimes you want an option to halt execution immediately and print a message. For example, the built-on --help option, or the --version option that many programs have. Neither of these options have any value associated with them, and they stop command line parsing as soon as they\u2019re encountered. The --help option is added automatically to commands, and --version can be added using versionOption . Since the option doesn\u2019t have a value, you can\u2019t define it using a property delegate. Instead, call the function on a command directly, either in an init block, or on a command instance. These definitions are equivalent: class Cli : NoRunCliktCommand () { init { versionOption ( \"1.0\" ) } } fun main ( args : Array < String >) = Cli (). main ( args ) and class Cli : NoRunCliktCommand () fun main ( args : Array < String >) = Cli (). versionOption ( \"1.0\" ). main ( args ) And they work like: $ ./cli --version cli version 1.0 If you want to define your own option with a similar behavior, you can do so by creating an instance of EagerOption and passing it to CliktCommand.registerOption . EagerOption s have a callback that is called when the option is encountered on the command line. To print a message and halt execution normally from the callback, you can throw a PrintMessage exception, and CliktCommand.main will take care of printing the message. You can define your own version option like this: class Cli : CliktCommand () { init { registerOption ( EagerOption ( \"--version\" ) { throw PrintMessage ( \"$commandName version 1.0\" ) }) } // ... } Deprecating Options \u00b6 You can communicate to users that an option is deprecated with option().deprecated() . By default, this function will add a tag to the option\u2019s help message, and print a warning to stderr if the option is used. You can customize or omit the warning message and help tags, or change the warning into an error. Example class Cli : CliktCommand () { val opt by option ( help = \"option 1\" ). deprecated () val opt2 by option ( help = \"option 2\" ). deprecated ( \"WARNING: --opt2 is deprecated, use --new-opt instead\" , tagName = null ) val opt3 by option ( help = \"option 3\" ). deprecated ( tagName = \"pending deprecation\" , tagValue = \"use --new-opt instead\" ) val opt4 by option ( help = \"option 4\" ). deprecated ( error = true ) override fun run () = echo ( \"command run\" ) } Usage 1 $ ./cli --opt=x WARNING: option --opt is deprecated command run Usage 2 $ ./cli --opt2=x WARNING: --op2 is deprecated, use --new-opt instead command run Usage 3 $ ./cli --opt3=x WARNING: option --opt3 is deprecated command run Usage 4 $ ./cli --opt4=x ERROR: option --opt4 is deprecated Help Output $ ./cli --help Usage: cli [OPTIONS] Options: --opt TEXT option 1 (deprecated) --opt2 TEXT option 2 --opt3 TEXT option 3 (pending deprecation: use --new-opt instead) --opt4 TEXT option 4 (deprecated) Values From Environment Variables \u00b6 Clikt supports reading option values from environment variables if they aren\u2019t given on the command line. This feature is helpful when automating tools. For example, when using git commit , you can set the author date with a command line parameter: git commit --date=10/21/2015 . But you can also set it with an environment variable: GIT_AUTHOR_DATE=10/21/2015 git commit . Clikt will read option values from environment variables as long as it has an envvar name for the option. There are two ways to set that name: you can set the name manually for an option, or you can enable automatic envvar name inference. To set the envvar name manually, pass the name to option : Example class Hello : CliktCommand () { val name by option ( envvar = \"MY_NAME\" ) override fun run () { echo ( \"Hello $name\" ) } } Usage 1 $ export MY_NAME=Foo $ ./hello Hello Foo Usage 2 $ export MY_NAME=Foo $ ./hello --name=Bar Hello Bar You can enable automatic envvar name inference by setting the autoEnvvarPrefix on a command\u2019s context . This will cause all options without an explicit envvar name to be given an uppercase underscore-separated envvar name. Since the prefix is set on the context , it is propagated to subcommands. If you have a a subcommand called foo with an option --bar , and your prefix is MY_TOOL , the option\u2019s envvar name will be MY_TOOL_FOO_BAR . Example class Hello : CliktCommand () { init { context { autoEnvvarPrefix = \"HELLO\" } } val name by option () override fun run () { echo ( \"Hello $name\" ) } } Usage $ export HELLO_NAME=Foo $ ./hello Hello Foo Multiple Values from Environment Variables \u00b6 You might need to allow users to specify multiple values for an option in a single environment variable. You can do this by creating an option with multiple . The environment variable\u2019s value will be split according a regex, which defaults to split on whitespace for most types. file will change the pattern to split according to the operating system\u2019s path splitting rules. On Windows, it will split on semicolons ( ; ). On other systems, it will split on colons ( : ). You can also specify a split pattern by passing it to the envvarSplit parameter of option . Example class Hello : CliktCommand () { val names by option ( envvar = \"NAMES\" ). multiple () override fun run () { for ( name in names ) echo ( \"Hello $name\" ) } } Usage $ export NAMES=Foo Bar $ ./hello Hello Foo Hello Bar Windows and Java-Style Option Prefixes \u00b6 When specifying option names manually, you can use any prefix (as long as it\u2019s entirely punctuation). For example, you can make a Windows-style interface with slashes: Example class Hello : CliktCommand () { val name by option ( \"/name\" , help = \"your name\" ) override fun run () { echo ( \"Hello, $name!\" ) } } Usage $ ./hello /name Foo Hello, Foo! Or you can make a Java-style interface that uses single-dashes for long options: Example class Hello : CliktCommand () { val name by option ( \"-name\" , help = \"your name\" ) override fun run () { echo ( \"Hello, $name!\" ) } } Usage $ ./hello -name Foo Hello, Foo! Note that inferred names will always have a POSIX-style prefix like --name . If you want to use a different prefix, you should specify all option names manually. Option Transformation Order \u00b6 Clikt has a large number of extension functions that can modify options. When applying multiple functions to the same option, there\u2019s only one valid order for the functions to be applied. For example, option().default(3).int() will not compile, because default must be applied after the value type conversion. Similarly, you can only apply one transform of each type. So option().int().float() is invalid since int and float both change the value type, as is option().default(\"\").multiple() since default and multiple both transform the call list (if you need a custom default value for multiple , you can pass it one as an argument). Here\u2019s an integer option with one of each available transform in a valid order: val opt : Pair < Int , Int > by option ( \"-o\" , \"--opt\" ) . int () . restrictTo ( 1. . 100 ) . pair () . default ( 1 to 2 ) . validate { require ( it . second % 2 == 0 ) }","title":"Basic Options"},{"location":"options/#options","text":"Options are added to commands by defining a property delegate with the option function.","title":"Options"},{"location":"options/#basic-options","text":"The default option takes one value of type String . The property is nullable. If the option is not given on the command line, the property value will be null. If the option is given at least once, the property will return the value of the last occurrence of the option. Example class Hello : CliktCommand () { val name by option ( help = \"your name\" ) override fun run () { echo ( \"Hello, $name!\" ) } } Usage $ ./hello --name=Foo Hello, Foo!","title":"Basic Options"},{"location":"options/#option-names","text":"If you don\u2019t specify names for an option, a lowercase hyphen-separated name is automatically inferred from the property. For example, val myOpt by option() will create an option that can be called with --my-opt . You can also specify any number of names for an option manually: class Hello : CliktCommand () { val name by option ( \"-n\" , \"--name\" , help = \"your name\" ) override fun run () { echo ( \"Hello, $name!\" ) } } Option names that are two characters long (like -n ) are treated as POSIX-style short options. You call them with a value like this: Usage 1 $ ./hello -nfoo Hello, foo! Usage 2 $ ./hello -n foo Hello, foo! All other option names are considered long options, and can be called like this: Usage 1 $ ./hello --name=foo Hello, foo! Usage 2 $ ./hello --name foo Hello, foo!","title":"Option Names"},{"location":"options/#customizing-options","text":"The option behavior and delegate type can be customized by calling extension functions on the option call. For example, here are some different option declarations: val a : String ? by option () val b : Int ? by option (). int () val c : Pair < Int , Int >? by option (). int (). pair () val d : Pair < Int , Int > by option (). int (). pair (). default ( 0 to 0 ) val e : Pair < Float , Float > by option (). float (). pair (). default ( 0f to 0f ) There are three main types of behavior that can be customized independently: The type of each value in the option. The value type is String by default, but can be customized with built-in functions like int or choice , or manually with convert . This is detailed in the parameters page. The number of values that the option requires. Options take one value by default, but this can be changed with built-in functions like pair and triple , or manually with transformValues . How to handle all calls to the option (i.e. if the option is not given, or is given more than once). By default, the option delegate value is the null if the option is not given on the command line, but you can change this behavior with functions like default and multiple . Since the three types of customizations are orthogonal, you can choose which ones you want to use, and if you implement a new customization, it can be used with all of the existing functions without any repeated code.","title":"Customizing Options"},{"location":"options/#default-values","text":"By default, option delegates return null if the option wasn\u2019t provided on the command line. You can instead return a default value with default . Example class Pow : CliktCommand () { val exp by option ( \"-e\" , \"--exp\" ). double (). default ( 1.0 ) override fun run () { echo ( \"2 ^ $exp = ${(2.0).pow(exp)}\" ) } } Usage 1 $ ./pow -e 8 2 ^ 8.0 = 256.0 Usage 2 $ ./pow 2 ^ 1.0 = 2.0 If the default value is expensive to compute, you can use defaultLazy instead of default . It has the same effect, but you give it a lambda returning the default value, and the lambda will only be called if the default value is used.","title":"Default Values"},{"location":"options/#multi-value-options","text":"Options can take any fixed number of values separated by whitespace, or a variable number of values separated by a non-whitespace delimiter you specify. If you want a variable number of values separated by whitespace, you need to use an argument instead.","title":"Multi Value Options"},{"location":"options/#options-with-fixed-number-of-values","text":"There are built in functions for options that take two values ( pair , which uses a Pair ), or three values ( triple , which uses a Triple ). You can change the type of each value as normal with functions like int . If you need more values, you can provide your own container with transformValues . You give that function the number of values you want, and a lambda that will transform a list of values into the output container. The list will always have a size equal to the number you specify. If the user provides a different number of values, Clikt will inform the user and your lambda won\u2019t be called. Example data class Quad < out T >( val a : T , val b : T , val c : T , val d : T ) fun < T > Quad < T >. toList (): List < T > = listOf ( a , b , c , d ) class Geometry : CliktCommand () { val square by option (). int (). pair () val cube by option (). int (). triple () val tesseract by option (). int (). transformValues ( 4 ) { Quad ( it [ 0 ], it [ 1 ], it [ 2 ], it [ 3 ]) } override fun run () { echo ( \"Square has dimensions ${square?.toList()?.joinToString(\" x \")}\" ) echo ( \"Cube has dimensions ${cube?.toList()?.joinToString(\" x \")}\" ) echo ( \"Tesseract has dimensions ${tesseract?.toList()?.joinToString(\" x \")}\" ) } } Usage $ ./geometry --square 1 2 --cube 3 4 5 --tesseract 6 7 8 9 Square has dimensions 1x2 Cube has dimensions 3x4x5 Tesseract has dimensions 6x7x8x9","title":"Options With Fixed Number of Values"},{"location":"options/#options-with-a-variable-number-of-values","text":"You can use split to allow a variable number of values to a single option invocation by separating the values with non-whitespace delimiters. Example class C : CliktCommand () { val profiles by option ( \"-P\" ). split ( \",\" ) override fun run () { for ( profile in profiles ) { echo ( profile ) } } } Usage $ ./split -P profile-1,profile-2 profile-1 profile-2","title":"Options With a Variable Number of Values"},{"location":"options/#multiple-options","text":"Normally, when an option is provided on the command line more than once, only the values from the last occurrence are used. But sometimes you want to keep all values provided. For example, git commit -m foo -m bar would create a commit message with two lines: foo and bar . To get this behavior with Clikt, you can use multiple . This will cause the property delegate value to be a list, where each item in the list is the value of from one occurrence of the option. If the option is never given, the list will be empty (or you can specify a list to use). Example class Commit : CliktCommand () { val message by option ( \"-m\" ). multiple () override fun run () { echo ( message . joinToString ( \"\\n\" )) } } Usage $ ./commit -m foo -m bar foo bar You can combine multiple with item type conversions and multiple values. For example: val opt : List < Pair < Int , Int >> by option (). int (). pair (). multiple ()","title":"Multiple Options"},{"location":"options/#boolean-flag-options","text":"Flags are options that don\u2019t take a value. Boolean flags can be enabled or disabled, depending on the name used to invoke the option. You can turn an option into a boolean flag with flag . That function takes an optional list of secondary names that will be added to any existing or inferred names for the option. If the option is invoked with one of the secondary names, the delegate will return false. It\u2019s a good idea to always set secondary names so that a user can disable the flag if it was enabled previously. Example class Cli : CliktCommand () { val flag by option ( \"--on\" , \"-o\" ). flag ( \"--off\" , \"-O\" , default = false ) override fun run () { echo ( flag ) } } Usage 1 $ ./cli -o true Usage 2 $ ./cli --on --off false Multiple short flag options can be combined when called on the command line: Example class Cli : CliktCommand () { val flagA by option ( \"-a\" ). flag () val flagB by option ( \"-b\" ). flag () val foo by option ( \"-f\" ) override fun run () { echo ( \"$flagA $flagB $foo\" ) } } Usage $ ./cli -abfFoo true true Foo","title":"Boolean Flag Options"},{"location":"options/#counted-flag-options","text":"You might want a flag option that counts the number of times it occurs on the command line. You can use counted for this. Example class Log : CliktCommand () { val verbosity by option ( \"-v\" ). counted () override fun run () { echo ( \"Verbosity level: $verbosity\" ) } } Usage $ ./log -vvv Verbosity level: 3","title":"Counted Flag Options"},{"location":"options/#feature-switch-flags","text":"Another way to use flags is to assign a value to each option name. You can do this with switch , which takes a map of option names to values. Note that the names in the map replace any previously specified or inferred names. Example class Size : CliktCommand () { val size by option (). switch ( \"--large\" to \"large\" , \"--small\" to \"small\" ). default ( \"unknown\" ) override fun run () { echo ( \"You picked size $size\" ) } } And on the command line: Usage $ ./size --small You picked size small","title":"Feature Switch Flags"},{"location":"options/#choice-options","text":"You can restrict the values that a regular option can take to a set of values using choice . You can also map the input values to new types. Example class Digest : CliktCommand () { val hash by option (). choice ( \"md5\" , \"sha1\" ) override fun run () { echo ( hash ) } } Usage 1 $ ./digest --hash=md5 md5 Usage 2 $ ./digest --hash=sha256 Usage: digest [OPTIONS] Error: Invalid value for \"--hash\": invalid choice: sha256. (choose from md5, sha1) Usage 3 $ ./digest --help Usage: digest [OPTIONS] Options: --hash [md5|sha1] -h, --help Show this message and exit","title":"Choice Options"},{"location":"options/#mutually-exclusive-option-groups","text":"If choice or switch options aren\u2019t flexible enough, you can use mutuallyExclusiveOptions to group any nullable options into a mutually exclusive group. If more than one of the options in the group is given on the command line, the last value is used. If you want different types for each option, you can wrap them in a sealed class. Example sealed class Fruit { data class Oranges ( val size : String ): Fruit () data class Apples ( val count : Int ): Fruit () } class Order : CliktCommand () { val fruit : Fruit ? by mutuallyExclusiveOptions < Fruit >( option ( \"--apples\" ). convert { Apples ( it . toInt ()) }, option ( \"--oranges\" ). convert { Oranges ( it ) } ) override fun run () = echo ( fruit ) } Usage 1 $ ./order --apples=10 Apples(count=10) Usage 2 $ ./order --oranges=small Oranges(size=small) Usage 3 $ ./order --apples=10 --oranges=large Oranges(size=large) Usage: order [OPTIONS] Error: option --apples cannot be used with --oranges You can enforce that only one of the options is given with single : Example val fruit : Fruit ? by mutuallyExclusiveOptions < Fruit >( option ( \"--apples\" ). convert { Apples ( it . toInt ()) }, option ( \"--oranges\" ). convert { Oranges ( it ) } ). single () Usage $ ./order --apples=10 --oranges=small Usage: order [OPTIONS] Error: option --apples cannot be used with --oranges Like regular options, you can make the entire group required , or give it a default value. Like other option groups , you can specify a name and help text for the group if you want to set the group apart in the help output.","title":"Mutually Exclusive Option Groups"},{"location":"options/#co-occurring-option-groups","text":"Sometimes you have a set of options that only make sense when specified together. To enforce this, you can make an option group cooccurring . Co-occurring groups must have at least one required option, and may also have non-required options. The required constraint is enforced if any of the options in the group are given on the command line. If none if the options are given, the value of the group is null. Example class UserOptions : OptionGroup () { val name by option (). required () val age by option (). int () } class Tool : CliktCommand () { val userOptions by UserOptions (). cooccurring () override fun run () { userOptions ?. let { echo ( it . name ) echo ( it . age ) } ?: echo ( \"No user options\" ) } } Usage 1 $ ./tool No user options Usage 2 $ ./tool --name=jane --age=30 jane 30 Usage 3 $ ./tool --age=30 Usage: tool [OPTIONS] Error: Missing option \"--name\". Like other option groups , you can specify a name and help text for the group if you want to set the group apart in the help output.","title":"Co-Occurring Option Groups"},{"location":"options/#choice-options-with-groups","text":"If you have different groups of options that only make sense when another option has a certain value, you can use groupChoice . These options are similar to choice options , but instead of mapping a value to a single new type, they map a value to a co-occurring OptionGroup . Options for groups other than the selected one are ignored, and only the selected group\u2019s required constraints are enforced. Example sealed class LoadConfig ( name : String ): OptionGroup ( name ) class FromDisk : LoadConfig ( \"Options for loading from disk\" ) { val path by option (). file (). required () val followSymlinks by option (). flag () } class FromNetwork : LoadConfig ( \"Option for loading from network\" ) { val url by option (). required () val username by option (). prompt () val password by option (). prompt ( hideInput = true ) } class Tool : CliktCommand ( help = \"An example of a custom help formatter that uses ansi colors\" ) { val load by option (). groupChoice ( \"disk\" to FromDisk (), \"network\" to FromNetwork () ) override fun run () { when ( val it = load ) { is FromDisk -> echo ( \"Loading from disk: ${it.path}\" ) is FromNetwork -> echo ( \"Loading from network: ${it.url}\" ) null -> echo ( \"Not loading\" ) } } } Usage 1 $ ./tool --load=disk --path=./config --follow-symlinks Loading from disk: .\\config Usage 2 $ ./tool --load=network --url=www.example.com --username=admin Password: ******* Loading from network: www.example.com Usage 3 $ ./tool --load=disk Usage: cli [OPTIONS] Error: Missing option \"--path\". Usage 4 $ ./tool --load=whoops Usage: cli [OPTIONS] Error: Invalid value for \"--load\": invalid choice: whoops. (choose from disk, network)","title":"Choice Options With Groups"},{"location":"options/#prompting-for-input","text":"In some cases, you might want to create an option that uses the value given on the command line if there is one, but prompt the user for input if one is not provided. Clikt can take care of this for you with the prompt function. Example class Hello : CliktCommand () { val name by option (). prompt () override fun run () { echo ( \"Hello $name\" ) } } Usage 1 ./hello --name=foo Hello foo Usage 2 ./hello Name: foo Hello foo The default prompt string is based on the option name, but prompt takes a number of parameters to customize the output.","title":"Prompting For Input"},{"location":"options/#password-prompts","text":"You can also create a option that uses a hidden prompt and asks for confirmation. This combination of behavior is commonly used for passwords. Example class Login : CliktCommand () { val password by option (). prompt ( requireConfirmation = true , hideInput = true ) override fun run () { echo ( \"Your hidden password: $password\" ) } } Usage $ ./login Password: Repeat for confirmation: Your hidden password: hunter2","title":"Password Prompts"},{"location":"options/#eager-options","text":"Sometimes you want an option to halt execution immediately and print a message. For example, the built-on --help option, or the --version option that many programs have. Neither of these options have any value associated with them, and they stop command line parsing as soon as they\u2019re encountered. The --help option is added automatically to commands, and --version can be added using versionOption . Since the option doesn\u2019t have a value, you can\u2019t define it using a property delegate. Instead, call the function on a command directly, either in an init block, or on a command instance. These definitions are equivalent: class Cli : NoRunCliktCommand () { init { versionOption ( \"1.0\" ) } } fun main ( args : Array < String >) = Cli (). main ( args ) and class Cli : NoRunCliktCommand () fun main ( args : Array < String >) = Cli (). versionOption ( \"1.0\" ). main ( args ) And they work like: $ ./cli --version cli version 1.0 If you want to define your own option with a similar behavior, you can do so by creating an instance of EagerOption and passing it to CliktCommand.registerOption . EagerOption s have a callback that is called when the option is encountered on the command line. To print a message and halt execution normally from the callback, you can throw a PrintMessage exception, and CliktCommand.main will take care of printing the message. You can define your own version option like this: class Cli : CliktCommand () { init { registerOption ( EagerOption ( \"--version\" ) { throw PrintMessage ( \"$commandName version 1.0\" ) }) } // ... }","title":"Eager Options"},{"location":"options/#deprecating-options","text":"You can communicate to users that an option is deprecated with option().deprecated() . By default, this function will add a tag to the option\u2019s help message, and print a warning to stderr if the option is used. You can customize or omit the warning message and help tags, or change the warning into an error. Example class Cli : CliktCommand () { val opt by option ( help = \"option 1\" ). deprecated () val opt2 by option ( help = \"option 2\" ). deprecated ( \"WARNING: --opt2 is deprecated, use --new-opt instead\" , tagName = null ) val opt3 by option ( help = \"option 3\" ). deprecated ( tagName = \"pending deprecation\" , tagValue = \"use --new-opt instead\" ) val opt4 by option ( help = \"option 4\" ). deprecated ( error = true ) override fun run () = echo ( \"command run\" ) } Usage 1 $ ./cli --opt=x WARNING: option --opt is deprecated command run Usage 2 $ ./cli --opt2=x WARNING: --op2 is deprecated, use --new-opt instead command run Usage 3 $ ./cli --opt3=x WARNING: option --opt3 is deprecated command run Usage 4 $ ./cli --opt4=x ERROR: option --opt4 is deprecated Help Output $ ./cli --help Usage: cli [OPTIONS] Options: --opt TEXT option 1 (deprecated) --opt2 TEXT option 2 --opt3 TEXT option 3 (pending deprecation: use --new-opt instead) --opt4 TEXT option 4 (deprecated)","title":"Deprecating Options"},{"location":"options/#values-from-environment-variables","text":"Clikt supports reading option values from environment variables if they aren\u2019t given on the command line. This feature is helpful when automating tools. For example, when using git commit , you can set the author date with a command line parameter: git commit --date=10/21/2015 . But you can also set it with an environment variable: GIT_AUTHOR_DATE=10/21/2015 git commit . Clikt will read option values from environment variables as long as it has an envvar name for the option. There are two ways to set that name: you can set the name manually for an option, or you can enable automatic envvar name inference. To set the envvar name manually, pass the name to option : Example class Hello : CliktCommand () { val name by option ( envvar = \"MY_NAME\" ) override fun run () { echo ( \"Hello $name\" ) } } Usage 1 $ export MY_NAME=Foo $ ./hello Hello Foo Usage 2 $ export MY_NAME=Foo $ ./hello --name=Bar Hello Bar You can enable automatic envvar name inference by setting the autoEnvvarPrefix on a command\u2019s context . This will cause all options without an explicit envvar name to be given an uppercase underscore-separated envvar name. Since the prefix is set on the context , it is propagated to subcommands. If you have a a subcommand called foo with an option --bar , and your prefix is MY_TOOL , the option\u2019s envvar name will be MY_TOOL_FOO_BAR . Example class Hello : CliktCommand () { init { context { autoEnvvarPrefix = \"HELLO\" } } val name by option () override fun run () { echo ( \"Hello $name\" ) } } Usage $ export HELLO_NAME=Foo $ ./hello Hello Foo","title":"Values From Environment Variables"},{"location":"options/#multiple-values-from-environment-variables","text":"You might need to allow users to specify multiple values for an option in a single environment variable. You can do this by creating an option with multiple . The environment variable\u2019s value will be split according a regex, which defaults to split on whitespace for most types. file will change the pattern to split according to the operating system\u2019s path splitting rules. On Windows, it will split on semicolons ( ; ). On other systems, it will split on colons ( : ). You can also specify a split pattern by passing it to the envvarSplit parameter of option . Example class Hello : CliktCommand () { val names by option ( envvar = \"NAMES\" ). multiple () override fun run () { for ( name in names ) echo ( \"Hello $name\" ) } } Usage $ export NAMES=Foo Bar $ ./hello Hello Foo Hello Bar","title":"Multiple Values from Environment Variables"},{"location":"options/#windows-and-java-style-option-prefixes","text":"When specifying option names manually, you can use any prefix (as long as it\u2019s entirely punctuation). For example, you can make a Windows-style interface with slashes: Example class Hello : CliktCommand () { val name by option ( \"/name\" , help = \"your name\" ) override fun run () { echo ( \"Hello, $name!\" ) } } Usage $ ./hello /name Foo Hello, Foo! Or you can make a Java-style interface that uses single-dashes for long options: Example class Hello : CliktCommand () { val name by option ( \"-name\" , help = \"your name\" ) override fun run () { echo ( \"Hello, $name!\" ) } } Usage $ ./hello -name Foo Hello, Foo! Note that inferred names will always have a POSIX-style prefix like --name . If you want to use a different prefix, you should specify all option names manually.","title":"Windows and Java-Style Option Prefixes"},{"location":"options/#option-transformation-order","text":"Clikt has a large number of extension functions that can modify options. When applying multiple functions to the same option, there\u2019s only one valid order for the functions to be applied. For example, option().default(3).int() will not compile, because default must be applied after the value type conversion. Similarly, you can only apply one transform of each type. So option().int().float() is invalid since int and float both change the value type, as is option().default(\"\").multiple() since default and multiple both transform the call list (if you need a custom default value for multiple , you can pass it one as an argument). Here\u2019s an integer option with one of each available transform in a valid order: val opt : Pair < Int , Int > by option ( \"-o\" , \"--opt\" ) . int () . restrictTo ( 1. . 100 ) . pair () . default ( 1 to 2 ) . validate { require ( it . second % 2 == 0 ) }","title":"Option Transformation Order"},{"location":"parameters/","text":"Parameters \u00b6 Clikt supports two types of parameters: options and positional arguments. If you\u2019re following Unix conventions with your interface, you should use options for most parameters. Options are usually optional, and arguments are frequently required. Differences \u00b6 Arguments have the advantage of being able to accept a variable number of values, while Options are limited to a fixed number of values. Other than that restriction, options have more capabilities than arguments. Options can: Act as flags (options don\u2019t have to take values) Prompt for missing input Load values from environment variables In general, arguments are usually used for values like file paths or URLs, or for required values, and options are used for everything else. Parameter Names \u00b6 Both options and arguments can infer their names (or the metavar in the case of arguments) from the name of the property. You can also specify the names manually. Options can have any number of names, where arguments only have a single metavar. Example class Cli : CliktCommand () { val inferredOpt by option () val inferred by argument () val explicitOpt by option ( \"-e\" , \"--explicit\" ) val explicitArg by argument ( \"<explicit>\" ) override fun run () = Unit } Help Output Usage: cli [OPTIONS] INFERRED <explicit> Options: --inferred-opt TEXT -e, --explicit TEXT -h, --help Show this message and exit Parameter Types \u00b6 Both options and arguments can convert the String that the user inputs to other types. Types work by transforming the return value of the property delegate. By default parameters have a string type: val opt : String ? by option ( help = \"an option\" ) val arg : String by argument ( help = \"an argument\" ) To convert the input to an integer, for example, use the int() extension function: val opt : Int ? by option ( help = \"an option\" ). int () val arg : Int by argument ( help = \"an argument\" ). int () Built-In Types \u00b6 There are a number of built in types that can be applied to options and arguments. Int : option().int() and argument().int() Long : option().long() and argument().long() By default, any value that fits in the integer type is accepted. You can restrict the values to a range with restrictTo() , which allows you to either clamp the input to the range, or fail with an error if the input is outside the range. Float : option().float() and argument().float() Double : option().double() and argument().double() As with integers, you can restrict the input to a range with restrictTo() . option().choice() and argument().choice() You can restrict the values to a set of values, and optionally map the input to a new value. For example, to create an option that only accepts the value \u201cA\u201d or \u201cB\u201d: val opt : String ? by option (). choice ( \"A\" , \"B\" ) To create an argument that requires the user to choose from the values of an enum: enum class Color { RED , GREEN } val color : Color by argument (). choice ( \"RED\" to Color . RED , \"GREEN\" to Color . GREEN ) File : option().file() and argument().file() Path : option().path() and argument().path() These conversion functions take extra parameters that allow you to require that values are file paths that have certain attributes, such as that they are directories, or they are writable files. Custom Types \u00b6 You can convert parameter values to a custom type by using argument().convert() and option().convert() . These functions take a lambda that converts the input String to any type. If the parameter takes multiple values, or an option appears multiple times in argv , the conversion lambda is called once for each value. Any errors that are thrown from the lambda are automatically caught and a usage message is printed to the user. If you need to trigger conversion failure, you can use fail(\"error message\") instead of raising an exception. For example, you can create an option of type BigDecimal like this: Example class Cli : CliktCommand () { val opt by option (). convert { it . toBigDecimal () } override fun run () = echo ( \"opt=$opt\" ) } Usage 1 $ ./cli --opt=1.5 opt=1.5 Usage 2 $ ./cli --opt=foo Usage: cli [OPTIONS] Error: Invalid value for \"--opt\": For input string: \"foo\" You can also pass option().convert() a metavar that will be printed in the help page instead of the default of VALUE . We can modify the above example to use a metavar and an explicit error message: Example class Cli : CliktCommand () { val opt by option ( help = \"a real number\" ). convert ( \"FLOAT\" ) { it . toBigDecimalOrNull () ?: fail ( \"A real number is required\" ) } override fun run () = echo ( \"opt=$opt\" ) } Usage 1 $ ./cli --opt=foo Usage: cli [OPTIONS] Error: Invalid value for \"--opt\": A real number is required Usage 2 $ ./cli --help Usage: cli [OPTIONS] Options: --opt FLOAT a real number -h, --help Show this message and exit Parameter Validation \u00b6 After converting a value to a new type, you can perform additional validation on the converted value with option().validate() and argument().validate() . validate takes a lambda that returns nothing, but can call fail(\"error message\") if the value is invalid. You can also call require() , which will fail if the provided expression is false. The lambda is only called if the value is non-null. val opt by option (). int (). validate { require ( it % 2 == 0 ) { \"value must be even\" } } The lambdas you pass to validate are called after the values for all options and arguments have been set, so (unlike in transforms) you can reference other parameters: Example class Tool : CliktCommand () { val number by option (). int (). default ( 0 ) val biggerNumber by option (). int (). validate { require ( it > number ) { \"--bigger-number must be bigger than --number\" } } override fun run () { echo ( \"number=$number, biggerNumber=$biggerNumber\" ) } } Usage 1 $ ./tool --number=1 number=1, biggerNumber=null Usage 2 $ ./tool --number=1 --bigger-number=0 Usage: tool [OPTIONS] Error: --bigger-number must be bigger than --number","title":"Differences"},{"location":"parameters/#parameters","text":"Clikt supports two types of parameters: options and positional arguments. If you\u2019re following Unix conventions with your interface, you should use options for most parameters. Options are usually optional, and arguments are frequently required.","title":"Parameters"},{"location":"parameters/#differences","text":"Arguments have the advantage of being able to accept a variable number of values, while Options are limited to a fixed number of values. Other than that restriction, options have more capabilities than arguments. Options can: Act as flags (options don\u2019t have to take values) Prompt for missing input Load values from environment variables In general, arguments are usually used for values like file paths or URLs, or for required values, and options are used for everything else.","title":"Differences"},{"location":"parameters/#parameter-names","text":"Both options and arguments can infer their names (or the metavar in the case of arguments) from the name of the property. You can also specify the names manually. Options can have any number of names, where arguments only have a single metavar. Example class Cli : CliktCommand () { val inferredOpt by option () val inferred by argument () val explicitOpt by option ( \"-e\" , \"--explicit\" ) val explicitArg by argument ( \"<explicit>\" ) override fun run () = Unit } Help Output Usage: cli [OPTIONS] INFERRED <explicit> Options: --inferred-opt TEXT -e, --explicit TEXT -h, --help Show this message and exit","title":"Parameter Names"},{"location":"parameters/#parameter-types","text":"Both options and arguments can convert the String that the user inputs to other types. Types work by transforming the return value of the property delegate. By default parameters have a string type: val opt : String ? by option ( help = \"an option\" ) val arg : String by argument ( help = \"an argument\" ) To convert the input to an integer, for example, use the int() extension function: val opt : Int ? by option ( help = \"an option\" ). int () val arg : Int by argument ( help = \"an argument\" ). int ()","title":"Parameter Types"},{"location":"parameters/#built-in-types","text":"There are a number of built in types that can be applied to options and arguments. Int : option().int() and argument().int() Long : option().long() and argument().long() By default, any value that fits in the integer type is accepted. You can restrict the values to a range with restrictTo() , which allows you to either clamp the input to the range, or fail with an error if the input is outside the range. Float : option().float() and argument().float() Double : option().double() and argument().double() As with integers, you can restrict the input to a range with restrictTo() . option().choice() and argument().choice() You can restrict the values to a set of values, and optionally map the input to a new value. For example, to create an option that only accepts the value \u201cA\u201d or \u201cB\u201d: val opt : String ? by option (). choice ( \"A\" , \"B\" ) To create an argument that requires the user to choose from the values of an enum: enum class Color { RED , GREEN } val color : Color by argument (). choice ( \"RED\" to Color . RED , \"GREEN\" to Color . GREEN ) File : option().file() and argument().file() Path : option().path() and argument().path() These conversion functions take extra parameters that allow you to require that values are file paths that have certain attributes, such as that they are directories, or they are writable files.","title":"Built-In Types"},{"location":"parameters/#custom-types","text":"You can convert parameter values to a custom type by using argument().convert() and option().convert() . These functions take a lambda that converts the input String to any type. If the parameter takes multiple values, or an option appears multiple times in argv , the conversion lambda is called once for each value. Any errors that are thrown from the lambda are automatically caught and a usage message is printed to the user. If you need to trigger conversion failure, you can use fail(\"error message\") instead of raising an exception. For example, you can create an option of type BigDecimal like this: Example class Cli : CliktCommand () { val opt by option (). convert { it . toBigDecimal () } override fun run () = echo ( \"opt=$opt\" ) } Usage 1 $ ./cli --opt=1.5 opt=1.5 Usage 2 $ ./cli --opt=foo Usage: cli [OPTIONS] Error: Invalid value for \"--opt\": For input string: \"foo\" You can also pass option().convert() a metavar that will be printed in the help page instead of the default of VALUE . We can modify the above example to use a metavar and an explicit error message: Example class Cli : CliktCommand () { val opt by option ( help = \"a real number\" ). convert ( \"FLOAT\" ) { it . toBigDecimalOrNull () ?: fail ( \"A real number is required\" ) } override fun run () = echo ( \"opt=$opt\" ) } Usage 1 $ ./cli --opt=foo Usage: cli [OPTIONS] Error: Invalid value for \"--opt\": A real number is required Usage 2 $ ./cli --help Usage: cli [OPTIONS] Options: --opt FLOAT a real number -h, --help Show this message and exit","title":"Custom Types"},{"location":"parameters/#parameter-validation","text":"After converting a value to a new type, you can perform additional validation on the converted value with option().validate() and argument().validate() . validate takes a lambda that returns nothing, but can call fail(\"error message\") if the value is invalid. You can also call require() , which will fail if the provided expression is false. The lambda is only called if the value is non-null. val opt by option (). int (). validate { require ( it % 2 == 0 ) { \"value must be even\" } } The lambdas you pass to validate are called after the values for all options and arguments have been set, so (unlike in transforms) you can reference other parameters: Example class Tool : CliktCommand () { val number by option (). int (). default ( 0 ) val biggerNumber by option (). int (). validate { require ( it > number ) { \"--bigger-number must be bigger than --number\" } } override fun run () { echo ( \"number=$number, biggerNumber=$biggerNumber\" ) } } Usage 1 $ ./tool --number=1 number=1, biggerNumber=null Usage 2 $ ./tool --number=1 --bigger-number=0 Usage: tool [OPTIONS] Error: --bigger-number must be bigger than --number","title":"Parameter Validation"},{"location":"quickstart/","text":"Quick Start \u00b6 You can get the library using any maven-compatible build system. Installation instructions can be found in the README . Basic Concepts \u00b6 Clikt command line interfaces are created by using property delegates inside of a CliktCommmand . The normal way to use Clikt is to forward argv from your main function to ClktCommand.main . The simplest command with no parameters would look like this: class Hello : CliktCommand () { override fun run () { echo ( \"Hello World!\" ) } } fun main ( args : Array < String >) = Hello (). main ( args ) And what it looks like to use: $ ./hello Hello World! A help page is generated automatically: $ ./hello --help Usage: hello [OPTIONS] Options: -h, --help Show this message and exit Printing to Stdout and Stderr \u00b6 Why does this example use echo instead of println ? Although println works, it can cause problems with multi-platform support. echo automatically translates line breaks into the line separator for the current platform. So you don\u2019t have to worry that some of your users will see mangled output because you didn\u2019t test on Windows. You can also pass err=true to echo to print to stderr instead of stdout. Nesting Commands \u00b6 Instances of any command can be attached to other commands, allowing arbitrary nesting of commands. For example, you could write a script to manage a database: Example class Database : CliktCommand () { override fun run () = Unit } class Init : CliktCommand ( help = \"Initialize the database\" ) { override fun run () { echo ( \"Initialized the database.\" ) } } class Drop : CliktCommand ( help = \"Drop the database\" ) { override fun run () { echo ( \"Dropped the database.\" ) } } fun main ( args : Array < String >) = Database () . subcommands ( Init (), Drop ()) . main ( args ) Usage $ ./db init Initialized the database. Help Output $ ./db --help Usage: database [OPTIONS] COMMAND [ARGS]... Options: -h, --help Show this message and exit Commands: init Initialize the database drop Drop the database Adding Parameters \u00b6 To add parameters, use the option and argument property delegates: Example class Hello : CliktCommand () { val count by option ( help = \"Number of greetings\" ). int (). default ( 1 ) val name by argument () override fun run () { for ( i in 1. . count ) { echo ( \"Hello $name!\" ) } } } Help Output $ ./hello --help Usage: hello [OPTIONS] USERNAME Options: --count INT Number of greetings -h, --help Show this message and exit Developing Command Line Applications With Gradle \u00b6 When you write a command line application, you probably want to be able to run it without invoking java -jar ... every time. If you\u2019re using Gradle, the application plugin provides a gradle task that bundles your program jars and scripts to launch them. It makes it easy to build a zip or tarball that you can distribute to your users without them needing to perform any incatations like setting up a classpath. You can see this plugin in use the in Clikt samples . The application plugin also creates tasks that will build then run your main function directly from within gradle. Although it seems like these tasks would make development easier, they are not recommended for use with command line programs. Unfortunately, due to the way gradle is designed, command line arguments are not visible to the task. Although you can hack the task to split up a gradle property and pass it in to your argv, this approach is limited. Additionally, stdin, stdout, and environment variables are all captured by gradle. All these limitations make the run task mostly useless for command line applications. An easier way to do development is to used the installDist task provided by the plugin. This builds all the distribution scripts in your build folder, which you can then execute normally. See Clikt\u2019s runsample script for an example of this approach.","title":"Basic Concepts"},{"location":"quickstart/#quick-start","text":"You can get the library using any maven-compatible build system. Installation instructions can be found in the README .","title":"Quick Start"},{"location":"quickstart/#basic-concepts","text":"Clikt command line interfaces are created by using property delegates inside of a CliktCommmand . The normal way to use Clikt is to forward argv from your main function to ClktCommand.main . The simplest command with no parameters would look like this: class Hello : CliktCommand () { override fun run () { echo ( \"Hello World!\" ) } } fun main ( args : Array < String >) = Hello (). main ( args ) And what it looks like to use: $ ./hello Hello World! A help page is generated automatically: $ ./hello --help Usage: hello [OPTIONS] Options: -h, --help Show this message and exit","title":"Basic Concepts"},{"location":"quickstart/#printing-to-stdout-and-stderr","text":"Why does this example use echo instead of println ? Although println works, it can cause problems with multi-platform support. echo automatically translates line breaks into the line separator for the current platform. So you don\u2019t have to worry that some of your users will see mangled output because you didn\u2019t test on Windows. You can also pass err=true to echo to print to stderr instead of stdout.","title":"Printing to Stdout and Stderr"},{"location":"quickstart/#nesting-commands","text":"Instances of any command can be attached to other commands, allowing arbitrary nesting of commands. For example, you could write a script to manage a database: Example class Database : CliktCommand () { override fun run () = Unit } class Init : CliktCommand ( help = \"Initialize the database\" ) { override fun run () { echo ( \"Initialized the database.\" ) } } class Drop : CliktCommand ( help = \"Drop the database\" ) { override fun run () { echo ( \"Dropped the database.\" ) } } fun main ( args : Array < String >) = Database () . subcommands ( Init (), Drop ()) . main ( args ) Usage $ ./db init Initialized the database. Help Output $ ./db --help Usage: database [OPTIONS] COMMAND [ARGS]... Options: -h, --help Show this message and exit Commands: init Initialize the database drop Drop the database","title":"Nesting Commands"},{"location":"quickstart/#adding-parameters","text":"To add parameters, use the option and argument property delegates: Example class Hello : CliktCommand () { val count by option ( help = \"Number of greetings\" ). int (). default ( 1 ) val name by argument () override fun run () { for ( i in 1. . count ) { echo ( \"Hello $name!\" ) } } } Help Output $ ./hello --help Usage: hello [OPTIONS] USERNAME Options: --count INT Number of greetings -h, --help Show this message and exit","title":"Adding Parameters"},{"location":"quickstart/#developing-command-line-applications-with-gradle","text":"When you write a command line application, you probably want to be able to run it without invoking java -jar ... every time. If you\u2019re using Gradle, the application plugin provides a gradle task that bundles your program jars and scripts to launch them. It makes it easy to build a zip or tarball that you can distribute to your users without them needing to perform any incatations like setting up a classpath. You can see this plugin in use the in Clikt samples . The application plugin also creates tasks that will build then run your main function directly from within gradle. Although it seems like these tasks would make development easier, they are not recommended for use with command line programs. Unfortunately, due to the way gradle is designed, command line arguments are not visible to the task. Although you can hack the task to split up a gradle property and pass it in to your argv, this approach is limited. Additionally, stdin, stdout, and environment variables are all captured by gradle. All these limitations make the run task mostly useless for command line applications. An easier way to do development is to used the installDist task provided by the plugin. This builds all the distribution scripts in your build folder, which you can then execute normally. See Clikt\u2019s runsample script for an example of this approach.","title":"Developing Command Line Applications With Gradle"},{"location":"utilities/","text":"Utilities \u00b6 Writing command line interfaces often involves more than just parsing the command line. Clikt also provides functions to perform actions commonly used in command line programs. Launching Editors \u00b6 If you need to ask users for multi-line input, or need to have the user edit a file, you can do so through TermUi.editText and TermUi.editFile . These functions open the program defined in the VISUAL or EDITOR environment variables, or a sensible default if neither are defined. The functions return the edited text if the user saved their changes. For example: fun getCommitMessage (): String ? { return TermUi . editText ( \"\\n\" + \"\\n# Enter your message. \" + \"\\n# Lines starting with # are ignored\" , requireSave = true ) ?. replace ( Regex ( \"#[^\\n]*\\n\" ), \"\" ) } Input Prompts \u00b6 Options can prompt for values automatically , but you can also do so manually with TermUi.prompt . By default, it accepts any input string, but you can also pass in a conversion function. If the conversion raises a UsageError , the prompt will ask the user to enter a different value. val input = TermUi . prompt ( \"Enter a number\" ) { it . toIntOrNull () ?: throw UsageError ( \"$it is not a valid integer\" ) } TermUi . echo ( \"Twice your number is ${input * 2}\" ) Which will produce interactive sessions like this: Enter a number: foo Error: foo is not a valid integer Enter a number: 11 Twice your number is 22 Confirmation Prompts \u00b6 You can also ask the user for a yes or no response with TermUi.confirm : if ( TermUi . confirm ( \"Continue?\" ) == true ) { TermUi . echo ( \"OK!\" ) } If you simply want to abort the program in the user gives a negative response, you can pass abort=true : TermUi . confirm ( \"Continue?\" , abort = true )","title":"Launching Editors"},{"location":"utilities/#utilities","text":"Writing command line interfaces often involves more than just parsing the command line. Clikt also provides functions to perform actions commonly used in command line programs.","title":"Utilities"},{"location":"utilities/#launching-editors","text":"If you need to ask users for multi-line input, or need to have the user edit a file, you can do so through TermUi.editText and TermUi.editFile . These functions open the program defined in the VISUAL or EDITOR environment variables, or a sensible default if neither are defined. The functions return the edited text if the user saved their changes. For example: fun getCommitMessage (): String ? { return TermUi . editText ( \"\\n\" + \"\\n# Enter your message. \" + \"\\n# Lines starting with # are ignored\" , requireSave = true ) ?. replace ( Regex ( \"#[^\\n]*\\n\" ), \"\" ) }","title":"Launching Editors"},{"location":"utilities/#input-prompts","text":"Options can prompt for values automatically , but you can also do so manually with TermUi.prompt . By default, it accepts any input string, but you can also pass in a conversion function. If the conversion raises a UsageError , the prompt will ask the user to enter a different value. val input = TermUi . prompt ( \"Enter a number\" ) { it . toIntOrNull () ?: throw UsageError ( \"$it is not a valid integer\" ) } TermUi . echo ( \"Twice your number is ${input * 2}\" ) Which will produce interactive sessions like this: Enter a number: foo Error: foo is not a valid integer Enter a number: 11 Twice your number is 22","title":"Input Prompts"},{"location":"utilities/#confirmation-prompts","text":"You can also ask the user for a yes or no response with TermUi.confirm : if ( TermUi . confirm ( \"Continue?\" ) == true ) { TermUi . echo ( \"OK!\" ) } If you simply want to abort the program in the user gives a negative response, you can pass abort=true : TermUi . confirm ( \"Continue?\" , abort = true )","title":"Confirmation Prompts"},{"location":"whyclikt/","text":"Why Clikt? \u00b6 There are existing Kotlin libraries for creating command line interfaces, and many Java libraries work in Kotlin as well. However, none of them had all of the following features: Unrestricted composability of commands Fully static type safety for parameters Composable parameter customization that doesn\u2019t require registering converter objects. Full support for Unix command line conventions Capable of reading parameter values from environment variables out of the box Included support for common functionality (keyboard interactivity, line ending normalization, launching editors, etc.) Built-in support for multi-token command aliases Clikt is focused on making writing robust, posix-compliant command line interfaces as easy as possible. A good CLI does more than just parse argv . It allows users to specify values in environment variables, and in some cases prompts for additional input, or opens an editor. Clikt supports all of this out of the box. Some times you need to make a CLI that doesn\u2019t follow Unix conventions. You might be writing for windows, or you want to use the Java style of long options with a single dash. Maybe you need to use a bunch of required options instead of arguments, or you want the help page formatted differently. \u201cBest practices\u201d might not be the best for you, so Clikt tries to make implementing uncommon use-cases as easy as possible. Why not a Kotlin library like kotlin-argparse or kotlinx.cli? \u00b6 Clikt didn\u2019t invent the idea of a property delegate-based cli parser. JetBrains made kotlinx.cli , which is functional, but is more of a proof-of-concept than a production ready library. kotlin-argparser builds off of kotlinx.cli , and works well for simple cases. It\u2019s missing a lot of features that Clikt has, but features can be added. Its real drawback is that it fundamentally does not support composition of commands or parameter values. The lack of subcommand support was already a non-starter, but there are other design decisions that make it unsuitable. In the simple cases, the two libraries are similar. Here\u2019s an example from its README: class MyArgs ( parser : ArgParser ) { val v : Boolean by parser . flagging ( help = \"enable verbose mode\" ) val username : String ? by parser . storing ( help = \"name of the user\" ) val count : Int ? by parser . storing ( help = \"number of the widgets\" ) { toInt () } val source : List < String > by parser . positionalList ( help = \"source filenames\" ) val destination : String by parser . positional ( help = \"destination\" ) } fun main ( args : Array < String >) = mainBody { ArgParser ( args ). parseInto ( :: MyArgs ). run { println ( \"Hello, $username!\" ) println ( \"Moving $count widgets from $source to $destination.\" ) } } Here\u2019s the same thing with Clikt: class Cli : CliktCommand () { val v : Boolean by option ( help = \"enable verbose mode\" ). flag () val username : String ? by option ( help = \"name of the user\" ) val count : Int ? by option ( help = \"number of the widgets\" ). int () val source : List < String > by argument ( help = \"source filenames\" ). multiple () val destination : String by argument ( help = \"destination\" ) override fun run () { println ( \"Hello, $name!\" ) println ( \"Moving $count widgets from $source to $destination.\" ) } } fun main ( args : Array < String >) = Cli (). main ( args ) Both work fine, although you may find Clikt more consistent and a bit less verbose. The differences become more pronounced once you try to do anything that isn\u2019t built in to kotlin-argparser . Maybe you need an option to take two values. Here\u2019s another example from the kotlin-argparser README showing how to do that: fun ArgParser . putting ( vararg names : String , help : String ) = option < MutableMap < String , String >>(* names , argNames = listOf ( \"KEY\" , \"VALUE\" ), help = help ) { value . orElse { mutableMapOf < String , String >() }. apply { put ( arguments . first (), arguments . last ()) } } fun ArgParser . putting ( help : String ) = ArgParser . DelegateProvider { identifier -> putting ( identifierToOptionName ( identifier ), help = help ) } class MyArgs ( parser : ArgParser ) { val v by parser . putting ( help = \"this takes two values\" ) } Clikt has that functionality built in as option().pair() , but you could implement it yourself like this: class Cli : CliktCommand () { val v by option ( help = \"this takes two values\" ). transformValues ( 2 ) { it [ 0 ] to it [ 1 ] } } The Clikt version is of course much simpler, but there are more fundamental issues with the kotlin-argparser version that drove the creation of Clikt: Its inheritance-based design means that if you wanted to change the type of each value, you would have to copy all of the code for each type. With Clikt, you could just do option().int().transformValues(2) { it[0] to it[1] } Its inheritance-based design means that supporting types, multiple values, and multiple option occurrences would require a combinatorial number of copies of the above code. With Clikt, these are all orthogonal. You have to do all error checking yourself. The argparser example silently discards extra values, or copies the single value, rather than inform the user of the mistake. You could write more code to do so, but Clikt takes care of it for you. Option name inference is not automatic, requiring you to wrap the delegate with yet another function. Each delegate function has a different name, with no indication of whether its creating an option or positional argument. With Clikt, all options are created with option() , and all arguments with argument() . Some of these problems can be solved by writing more code, and some can\u2019t. On the other hand, Clikt attempts to consistent, intuitive, composable interface that tries to do the right thing without forcing you to think about edge cases. Why not a Java library like JCommander? \u00b6 There are a lot of command line libraries for Java. Most are verbose and not composable. One popular Java library that is usable from Kotlin is JCommander . JCommander uses annotations to define parameters, and reflection to set fields. This is functional for simple types, but defining your own types requires you to register a type adapter with the JCommander builder. This means that type errors are not caught until runtime, and many types of customization are not possible. For example, options that take multiple values cannot be converted to other types. The JCommander docs explain: \u2026 only List is allowed for parameters that define an arity. You will have to convert these values yourself if the parameters you need are of type Integer or other (this limitation is due to Java\u2019s erasure). You also can\u2019t customize many aspect of parsing in JCommander. It can\u2019t infer parameter names. With JCommander, you can\u2019t have an option with multiple values and multiple occurrences at the same time. You can\u2019t have more than one argument, and it can only take one value or an unlimited number of values. You can\u2019t nest subcommands. JCommander is a great library if you\u2019re writing code in Java, but we can do much better with Kotlin.","title":"Why not a Kotlin library like kotlin-argparse or kotlinx.cli?"},{"location":"whyclikt/#why-clikt","text":"There are existing Kotlin libraries for creating command line interfaces, and many Java libraries work in Kotlin as well. However, none of them had all of the following features: Unrestricted composability of commands Fully static type safety for parameters Composable parameter customization that doesn\u2019t require registering converter objects. Full support for Unix command line conventions Capable of reading parameter values from environment variables out of the box Included support for common functionality (keyboard interactivity, line ending normalization, launching editors, etc.) Built-in support for multi-token command aliases Clikt is focused on making writing robust, posix-compliant command line interfaces as easy as possible. A good CLI does more than just parse argv . It allows users to specify values in environment variables, and in some cases prompts for additional input, or opens an editor. Clikt supports all of this out of the box. Some times you need to make a CLI that doesn\u2019t follow Unix conventions. You might be writing for windows, or you want to use the Java style of long options with a single dash. Maybe you need to use a bunch of required options instead of arguments, or you want the help page formatted differently. \u201cBest practices\u201d might not be the best for you, so Clikt tries to make implementing uncommon use-cases as easy as possible.","title":"Why Clikt?"},{"location":"whyclikt/#why-not-a-kotlin-library-like-kotlin-argparse-or-kotlinxcli","text":"Clikt didn\u2019t invent the idea of a property delegate-based cli parser. JetBrains made kotlinx.cli , which is functional, but is more of a proof-of-concept than a production ready library. kotlin-argparser builds off of kotlinx.cli , and works well for simple cases. It\u2019s missing a lot of features that Clikt has, but features can be added. Its real drawback is that it fundamentally does not support composition of commands or parameter values. The lack of subcommand support was already a non-starter, but there are other design decisions that make it unsuitable. In the simple cases, the two libraries are similar. Here\u2019s an example from its README: class MyArgs ( parser : ArgParser ) { val v : Boolean by parser . flagging ( help = \"enable verbose mode\" ) val username : String ? by parser . storing ( help = \"name of the user\" ) val count : Int ? by parser . storing ( help = \"number of the widgets\" ) { toInt () } val source : List < String > by parser . positionalList ( help = \"source filenames\" ) val destination : String by parser . positional ( help = \"destination\" ) } fun main ( args : Array < String >) = mainBody { ArgParser ( args ). parseInto ( :: MyArgs ). run { println ( \"Hello, $username!\" ) println ( \"Moving $count widgets from $source to $destination.\" ) } } Here\u2019s the same thing with Clikt: class Cli : CliktCommand () { val v : Boolean by option ( help = \"enable verbose mode\" ). flag () val username : String ? by option ( help = \"name of the user\" ) val count : Int ? by option ( help = \"number of the widgets\" ). int () val source : List < String > by argument ( help = \"source filenames\" ). multiple () val destination : String by argument ( help = \"destination\" ) override fun run () { println ( \"Hello, $name!\" ) println ( \"Moving $count widgets from $source to $destination.\" ) } } fun main ( args : Array < String >) = Cli (). main ( args ) Both work fine, although you may find Clikt more consistent and a bit less verbose. The differences become more pronounced once you try to do anything that isn\u2019t built in to kotlin-argparser . Maybe you need an option to take two values. Here\u2019s another example from the kotlin-argparser README showing how to do that: fun ArgParser . putting ( vararg names : String , help : String ) = option < MutableMap < String , String >>(* names , argNames = listOf ( \"KEY\" , \"VALUE\" ), help = help ) { value . orElse { mutableMapOf < String , String >() }. apply { put ( arguments . first (), arguments . last ()) } } fun ArgParser . putting ( help : String ) = ArgParser . DelegateProvider { identifier -> putting ( identifierToOptionName ( identifier ), help = help ) } class MyArgs ( parser : ArgParser ) { val v by parser . putting ( help = \"this takes two values\" ) } Clikt has that functionality built in as option().pair() , but you could implement it yourself like this: class Cli : CliktCommand () { val v by option ( help = \"this takes two values\" ). transformValues ( 2 ) { it [ 0 ] to it [ 1 ] } } The Clikt version is of course much simpler, but there are more fundamental issues with the kotlin-argparser version that drove the creation of Clikt: Its inheritance-based design means that if you wanted to change the type of each value, you would have to copy all of the code for each type. With Clikt, you could just do option().int().transformValues(2) { it[0] to it[1] } Its inheritance-based design means that supporting types, multiple values, and multiple option occurrences would require a combinatorial number of copies of the above code. With Clikt, these are all orthogonal. You have to do all error checking yourself. The argparser example silently discards extra values, or copies the single value, rather than inform the user of the mistake. You could write more code to do so, but Clikt takes care of it for you. Option name inference is not automatic, requiring you to wrap the delegate with yet another function. Each delegate function has a different name, with no indication of whether its creating an option or positional argument. With Clikt, all options are created with option() , and all arguments with argument() . Some of these problems can be solved by writing more code, and some can\u2019t. On the other hand, Clikt attempts to consistent, intuitive, composable interface that tries to do the right thing without forcing you to think about edge cases.","title":"Why not a Kotlin library like kotlin-argparse or kotlinx.cli?"},{"location":"whyclikt/#why-not-a-java-library-like-jcommander","text":"There are a lot of command line libraries for Java. Most are verbose and not composable. One popular Java library that is usable from Kotlin is JCommander . JCommander uses annotations to define parameters, and reflection to set fields. This is functional for simple types, but defining your own types requires you to register a type adapter with the JCommander builder. This means that type errors are not caught until runtime, and many types of customization are not possible. For example, options that take multiple values cannot be converted to other types. The JCommander docs explain: \u2026 only List is allowed for parameters that define an arity. You will have to convert these values yourself if the parameters you need are of type Integer or other (this limitation is due to Java\u2019s erasure). You also can\u2019t customize many aspect of parsing in JCommander. It can\u2019t infer parameter names. With JCommander, you can\u2019t have an option with multiple values and multiple occurrences at the same time. You can\u2019t have more than one argument, and it can only take one value or an unlimited number of values. You can\u2019t nest subcommands. JCommander is a great library if you\u2019re writing code in Java, but we can do much better with Kotlin.","title":"Why not a Java library like JCommander?"},{"location":"api/clikt/","text":"clikt Packages \u00b6 Name Summary com.github.ajalt.clikt.completion com.github.ajalt.clikt.core com.github.ajalt.clikt.output com.github.ajalt.clikt.parameters.arguments com.github.ajalt.clikt.parameters.groups com.github.ajalt.clikt.parameters.options com.github.ajalt.clikt.parameters.types com.github.ajalt.clikt.parsers Index \u00b6 All Types","title":"Home"},{"location":"api/clikt/#packages","text":"Name Summary com.github.ajalt.clikt.completion com.github.ajalt.clikt.core com.github.ajalt.clikt.output com.github.ajalt.clikt.parameters.arguments com.github.ajalt.clikt.parameters.groups com.github.ajalt.clikt.parameters.options com.github.ajalt.clikt.parameters.types com.github.ajalt.clikt.parsers","title":"Packages"},{"location":"api/clikt/#index","text":"All Types","title":"Index"},{"location":"api/clikt/alltypes/","text":"All Types \u00b6 Name Summary com.github.ajalt.clikt.core.Abort An internal error that signals Clikt to abort. com.github.ajalt.clikt.parameters.arguments.ArgCallsTransformer A callback that transforms all the values into the final argument type com.github.ajalt.clikt.parameters.options.ArgsTransformer A callback that transforms all the values for a call to the call type. com.github.ajalt.clikt.parameters.arguments.Argument A positional parameter to a command. com.github.ajalt.clikt.parameters.arguments.ArgumentDelegate An argument that functions as a property delegate com.github.ajalt.clikt.parameters.arguments.ArgumentTransformContext A receiver for argument transformers. com.github.ajalt.clikt.parameters.arguments.ArgValidator A callback validates the final argument type com.github.ajalt.clikt.parameters.arguments.ArgValueTransformer A callback that transforms a single value from a string to the value type com.github.ajalt.clikt.core.BadParameterValue A parameter was given the correct number of values, but of invalid format or type. com.github.ajalt.clikt.parameters.options.CallsTransformer A callback that transforms all of the calls to the final option type. com.github.ajalt.clikt.parameters.groups.ChoiceGroup com.github.ajalt.clikt.core.CliktCommand The CliktCommand is the core of command line interfaces in Clikt. com.github.ajalt.clikt.output.CliktConsole An object that is used by commands and parameters to show text to the user and read input. com.github.ajalt.clikt.core.CliktError An exception during command line processing that should be shown to the user. com.github.ajalt.clikt.output.CliktHelpFormatter com.github.ajalt.clikt.completion.CompletionCandidates Configurations for generating shell autocomplete suggestions com.github.ajalt.clikt.core.Context A object used to control command line parsing and pass data between commands. com.github.ajalt.clikt.parameters.groups.CoOccurringOptionGroup com.github.ajalt.clikt.parameters.options.EagerOption An Option with no values that is finalize d before other types of options. com.github.ajalt.clikt.parameters.options.FlagOption An Option that has no values. com.github.ajalt.clikt.parsers.FlagOptionParser A parser for options that take no values. com.github.ajalt.clikt.core.GroupableOption An option that can be added to a ParameterGroup com.github.ajalt.clikt.output.HelpFormatter Creates help and usage strings for a command. com.github.ajalt.clikt.core.IncorrectArgumentValueCount An argument was supplied but the number of values supplied was incorrect. com.github.ajalt.clikt.core.IncorrectOptionValueCount An option was supplied but the number of values supplied to the option was incorrect. com.github.ajalt.clikt.output.InteractiveCliktConsole com.github.ajalt.clikt.core.MissingParameter A required parameter was not provided com.github.ajalt.clikt.core.MutuallyExclusiveGroupException com.github.ajalt.clikt.parameters.groups.MutuallyExclusiveOptions com.github.ajalt.clikt.output.NonInteractiveCliktConsole com.github.ajalt.clikt.core.NoRunCliktCommand A CliktCommand that has a default implementation of CliktCommand.run that is a no-op. com.github.ajalt.clikt.core.NoSuchOption An option was provided that does not exist. com.github.ajalt.clikt.parameters.options.NullableOption com.github.ajalt.clikt.parameters.options.Option An optional command line parameter that takes a fixed number of values. com.github.ajalt.clikt.parameters.options.OptionCallTransformContext A receiver for options transformers. com.github.ajalt.clikt.parameters.options.OptionDelegate An option that functions as a property delegate com.github.ajalt.clikt.parameters.groups.OptionGroup A group of options that can be shown together in help output, or restricted to be cooccurring . com.github.ajalt.clikt.parsers.OptionParser A parser for Option s. com.github.ajalt.clikt.parameters.options.OptionTransformContext A receiver for options transformers. com.github.ajalt.clikt.parameters.options.OptionValidator A callback validates the final option type com.github.ajalt.clikt.parameters.options.OptionWithValues An Option that takes one or more values. com.github.ajalt.clikt.parsers.OptionWithValuesParser An option that takes one more values com.github.ajalt.clikt.parameters.groups.ParameterGroup com.github.ajalt.clikt.parameters.groups.ParameterGroupDelegate com.github.ajalt.clikt.core.ParameterHolder com.github.ajalt.clikt.core.ParameterHolderDsl com.github.ajalt.clikt.core.PrintHelpMessage An exception that indicates that the command\u2019s help should be printed. com.github.ajalt.clikt.core.PrintMessage An exception that indicates that a message should be printed. com.github.ajalt.clikt.parameters.arguments.ProcessedArgument An Argument delegate implementation that transforms its values . com.github.ajalt.clikt.parameters.options.RawOption com.github.ajalt.clikt.output.TermUi com.github.ajalt.clikt.core.UsageError An internal exception that signals a usage error. com.github.ajalt.clikt.parameters.options.ValueTransformer A callback that transforms a single value from a string to the value type com.github.ajalt.clikt.parameters.options.ValueWithDefault A container for a value that can have a default value and can be manually set","title":"Home"},{"location":"api/clikt/alltypes/#all-types","text":"Name Summary com.github.ajalt.clikt.core.Abort An internal error that signals Clikt to abort. com.github.ajalt.clikt.parameters.arguments.ArgCallsTransformer A callback that transforms all the values into the final argument type com.github.ajalt.clikt.parameters.options.ArgsTransformer A callback that transforms all the values for a call to the call type. com.github.ajalt.clikt.parameters.arguments.Argument A positional parameter to a command. com.github.ajalt.clikt.parameters.arguments.ArgumentDelegate An argument that functions as a property delegate com.github.ajalt.clikt.parameters.arguments.ArgumentTransformContext A receiver for argument transformers. com.github.ajalt.clikt.parameters.arguments.ArgValidator A callback validates the final argument type com.github.ajalt.clikt.parameters.arguments.ArgValueTransformer A callback that transforms a single value from a string to the value type com.github.ajalt.clikt.core.BadParameterValue A parameter was given the correct number of values, but of invalid format or type. com.github.ajalt.clikt.parameters.options.CallsTransformer A callback that transforms all of the calls to the final option type. com.github.ajalt.clikt.parameters.groups.ChoiceGroup com.github.ajalt.clikt.core.CliktCommand The CliktCommand is the core of command line interfaces in Clikt. com.github.ajalt.clikt.output.CliktConsole An object that is used by commands and parameters to show text to the user and read input. com.github.ajalt.clikt.core.CliktError An exception during command line processing that should be shown to the user. com.github.ajalt.clikt.output.CliktHelpFormatter com.github.ajalt.clikt.completion.CompletionCandidates Configurations for generating shell autocomplete suggestions com.github.ajalt.clikt.core.Context A object used to control command line parsing and pass data between commands. com.github.ajalt.clikt.parameters.groups.CoOccurringOptionGroup com.github.ajalt.clikt.parameters.options.EagerOption An Option with no values that is finalize d before other types of options. com.github.ajalt.clikt.parameters.options.FlagOption An Option that has no values. com.github.ajalt.clikt.parsers.FlagOptionParser A parser for options that take no values. com.github.ajalt.clikt.core.GroupableOption An option that can be added to a ParameterGroup com.github.ajalt.clikt.output.HelpFormatter Creates help and usage strings for a command. com.github.ajalt.clikt.core.IncorrectArgumentValueCount An argument was supplied but the number of values supplied was incorrect. com.github.ajalt.clikt.core.IncorrectOptionValueCount An option was supplied but the number of values supplied to the option was incorrect. com.github.ajalt.clikt.output.InteractiveCliktConsole com.github.ajalt.clikt.core.MissingParameter A required parameter was not provided com.github.ajalt.clikt.core.MutuallyExclusiveGroupException com.github.ajalt.clikt.parameters.groups.MutuallyExclusiveOptions com.github.ajalt.clikt.output.NonInteractiveCliktConsole com.github.ajalt.clikt.core.NoRunCliktCommand A CliktCommand that has a default implementation of CliktCommand.run that is a no-op. com.github.ajalt.clikt.core.NoSuchOption An option was provided that does not exist. com.github.ajalt.clikt.parameters.options.NullableOption com.github.ajalt.clikt.parameters.options.Option An optional command line parameter that takes a fixed number of values. com.github.ajalt.clikt.parameters.options.OptionCallTransformContext A receiver for options transformers. com.github.ajalt.clikt.parameters.options.OptionDelegate An option that functions as a property delegate com.github.ajalt.clikt.parameters.groups.OptionGroup A group of options that can be shown together in help output, or restricted to be cooccurring . com.github.ajalt.clikt.parsers.OptionParser A parser for Option s. com.github.ajalt.clikt.parameters.options.OptionTransformContext A receiver for options transformers. com.github.ajalt.clikt.parameters.options.OptionValidator A callback validates the final option type com.github.ajalt.clikt.parameters.options.OptionWithValues An Option that takes one or more values. com.github.ajalt.clikt.parsers.OptionWithValuesParser An option that takes one more values com.github.ajalt.clikt.parameters.groups.ParameterGroup com.github.ajalt.clikt.parameters.groups.ParameterGroupDelegate com.github.ajalt.clikt.core.ParameterHolder com.github.ajalt.clikt.core.ParameterHolderDsl com.github.ajalt.clikt.core.PrintHelpMessage An exception that indicates that the command\u2019s help should be printed. com.github.ajalt.clikt.core.PrintMessage An exception that indicates that a message should be printed. com.github.ajalt.clikt.parameters.arguments.ProcessedArgument An Argument delegate implementation that transforms its values . com.github.ajalt.clikt.parameters.options.RawOption com.github.ajalt.clikt.output.TermUi com.github.ajalt.clikt.core.UsageError An internal exception that signals a usage error. com.github.ajalt.clikt.parameters.options.ValueTransformer A callback that transforms a single value from a string to the value type com.github.ajalt.clikt.parameters.options.ValueWithDefault A container for a value that can have a default value and can be manually set","title":"All Types"},{"location":"api/clikt/com.github.ajalt.clikt.completion/","text":"clikt / com.github.ajalt.clikt.completion Package com.github.ajalt.clikt.completion \u00b6 Types \u00b6 Name Summary CompletionCandidates sealed class CompletionCandidates Configurations for generating shell autocomplete suggestions","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.completion/#package-comgithubajaltcliktcompletion","text":"","title":"Package com.github.ajalt.clikt.completion"},{"location":"api/clikt/com.github.ajalt.clikt.completion/#types","text":"Name Summary CompletionCandidates sealed class CompletionCandidates Configurations for generating shell autocomplete suggestions","title":"Types"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/","text":"clikt / com.github.ajalt.clikt.completion / CompletionCandidates CompletionCandidates \u00b6 sealed class CompletionCandidates Configurations for generating shell autocomplete suggestions Types \u00b6 Name Summary Fixed data class Fixed : CompletionCandidates Complete the parameter with a fixed set of string Hostname object Hostname : CompletionCandidates Complete with entries in the system\u2019s hostfile None object None : CompletionCandidates Do not autocomplete this parameter Path object Path : CompletionCandidates Complete with filesystem paths Username object Username : CompletionCandidates Complete with usernames from the current system Inheritors \u00b6 Name Summary Fixed data class Fixed : CompletionCandidates Complete the parameter with a fixed set of string Hostname object Hostname : CompletionCandidates Complete with entries in the system\u2019s hostfile None object None : CompletionCandidates Do not autocomplete this parameter Path object Path : CompletionCandidates Complete with filesystem paths Username object Username : CompletionCandidates Complete with usernames from the current system","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/#completioncandidates","text":"sealed class CompletionCandidates Configurations for generating shell autocomplete suggestions","title":"CompletionCandidates"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/#types","text":"Name Summary Fixed data class Fixed : CompletionCandidates Complete the parameter with a fixed set of string Hostname object Hostname : CompletionCandidates Complete with entries in the system\u2019s hostfile None object None : CompletionCandidates Do not autocomplete this parameter Path object Path : CompletionCandidates Complete with filesystem paths Username object Username : CompletionCandidates Complete with usernames from the current system","title":"Types"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/#inheritors","text":"Name Summary Fixed data class Fixed : CompletionCandidates Complete the parameter with a fixed set of string Hostname object Hostname : CompletionCandidates Complete with entries in the system\u2019s hostfile None object None : CompletionCandidates Do not autocomplete this parameter Path object Path : CompletionCandidates Complete with filesystem paths Username object Username : CompletionCandidates Complete with usernames from the current system","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-hostname/","text":"clikt / com.github.ajalt.clikt.completion / CompletionCandidates / Hostname Hostname \u00b6 object Hostname : CompletionCandidates Complete with entries in the system\u2019s hostfile","title":" hostname"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-hostname/#hostname","text":"object Hostname : CompletionCandidates Complete with entries in the system\u2019s hostfile","title":"Hostname"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-none/","text":"clikt / com.github.ajalt.clikt.completion / CompletionCandidates / None None \u00b6 object None : CompletionCandidates Do not autocomplete this parameter","title":" none"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-none/#none","text":"object None : CompletionCandidates Do not autocomplete this parameter","title":"None"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-path/","text":"clikt / com.github.ajalt.clikt.completion / CompletionCandidates / Path Path \u00b6 object Path : CompletionCandidates Complete with filesystem paths","title":" path"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-path/#path","text":"object Path : CompletionCandidates Complete with filesystem paths","title":"Path"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-username/","text":"clikt / com.github.ajalt.clikt.completion / CompletionCandidates / Username Username \u00b6 object Username : CompletionCandidates Complete with usernames from the current system","title":" username"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-username/#username","text":"object Username : CompletionCandidates Complete with usernames from the current system","title":"Username"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-fixed/","text":"clikt / com.github.ajalt.clikt.completion / CompletionCandidates / Fixed Fixed \u00b6 data class Fixed : CompletionCandidates Complete the parameter with a fixed set of string Constructors \u00b6 Name Summary <init> Fixed(candidates: Set < String >) Complete the parameter with a fixed set of string Properties \u00b6 Name Summary candidates val candidates: Set < String >","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-fixed/#fixed","text":"data class Fixed : CompletionCandidates Complete the parameter with a fixed set of string","title":"Fixed"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-fixed/#constructors","text":"Name Summary <init> Fixed(candidates: Set < String >) Complete the parameter with a fixed set of string","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-fixed/#properties","text":"Name Summary candidates val candidates: Set < String >","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-fixed/-init-/","text":"clikt / com.github.ajalt.clikt.completion / CompletionCandidates / Fixed / <init> <init> \u00b6 Fixed(candidates: Set < String >) Complete the parameter with a fixed set of string","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-fixed/-init-/#init","text":"Fixed(candidates: Set < String >) Complete the parameter with a fixed set of string","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-fixed/candidates/","text":"clikt / com.github.ajalt.clikt.completion / CompletionCandidates / Fixed / candidates candidates \u00b6 val candidates: Set < String >","title":"Candidates"},{"location":"api/clikt/com.github.ajalt.clikt.completion/-completion-candidates/-fixed/candidates/#candidates","text":"val candidates: Set < String >","title":"candidates"},{"location":"api/clikt/com.github.ajalt.clikt.core/","text":"clikt / com.github.ajalt.clikt.core Package com.github.ajalt.clikt.core \u00b6 Types \u00b6 Name Summary CliktCommand abstract class CliktCommand : ParameterHolder The CliktCommand is the core of command line interfaces in Clikt. Context class Context A object used to control command line parsing and pass data between commands. GroupableOption interface GroupableOption : Option An option that can be added to a ParameterGroup NoRunCliktCommand open class NoRunCliktCommand : CliktCommand A CliktCommand that has a default implementation of CliktCommand.run that is a no-op. ParameterHolder interface ParameterHolder Annotations \u00b6 Name Summary ParameterHolderDsl annotation class ParameterHolderDsl Exceptions \u00b6 Name Summary Abort class Abort : RuntimeException An internal error that signals Clikt to abort. BadParameterValue open class BadParameterValue : UsageError A parameter was given the correct number of values, but of invalid format or type. CliktError open class CliktError : RuntimeException An exception during command line processing that should be shown to the user. IncorrectArgumentValueCount open class IncorrectArgumentValueCount : UsageError An argument was supplied but the number of values supplied was incorrect. IncorrectOptionValueCount open class IncorrectOptionValueCount : UsageError An option was supplied but the number of values supplied to the option was incorrect. MissingParameter open class MissingParameter : UsageError A required parameter was not provided MutuallyExclusiveGroupException open class MutuallyExclusiveGroupException : UsageError NoSuchOption open class NoSuchOption : UsageError An option was provided that does not exist. PrintHelpMessage class PrintHelpMessage : CliktError An exception that indicates that the command\u2019s help should be printed. PrintMessage class PrintMessage : CliktError An exception that indicates that a message should be printed. UsageError open class UsageError : CliktError An internal exception that signals a usage error. Functions \u00b6 Name Summary context fun <T : CliktCommand > T .context(block: Context.Builder .() -> Unit ): T Configure this command\u2019s Context . findObject fun <T : Any > CliktCommand .findObject(): ReadOnlyProperty < CliktCommand , T ?> Find the closest object of type T , or null fun <T : Any > CliktCommand .findObject(default: () -> T ): ReadOnlyProperty < CliktCommand , T > Find the closest object of type T , setting context.obj if one is not found. requireObject fun <T : Any > CliktCommand .requireObject(): ReadOnlyProperty < CliktCommand , T > Find the closest object of type T , or throw a NullPointerException subcommands fun <T : CliktCommand > T .subcommands(commands: Iterable < CliktCommand >): T fun <T : CliktCommand > T .subcommands(vararg commands: CliktCommand ): T Add the given commands as a subcommand of this command.","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.core/#package-comgithubajaltcliktcore","text":"","title":"Package com.github.ajalt.clikt.core"},{"location":"api/clikt/com.github.ajalt.clikt.core/#types","text":"Name Summary CliktCommand abstract class CliktCommand : ParameterHolder The CliktCommand is the core of command line interfaces in Clikt. Context class Context A object used to control command line parsing and pass data between commands. GroupableOption interface GroupableOption : Option An option that can be added to a ParameterGroup NoRunCliktCommand open class NoRunCliktCommand : CliktCommand A CliktCommand that has a default implementation of CliktCommand.run that is a no-op. ParameterHolder interface ParameterHolder","title":"Types"},{"location":"api/clikt/com.github.ajalt.clikt.core/#annotations","text":"Name Summary ParameterHolderDsl annotation class ParameterHolderDsl","title":"Annotations"},{"location":"api/clikt/com.github.ajalt.clikt.core/#exceptions","text":"Name Summary Abort class Abort : RuntimeException An internal error that signals Clikt to abort. BadParameterValue open class BadParameterValue : UsageError A parameter was given the correct number of values, but of invalid format or type. CliktError open class CliktError : RuntimeException An exception during command line processing that should be shown to the user. IncorrectArgumentValueCount open class IncorrectArgumentValueCount : UsageError An argument was supplied but the number of values supplied was incorrect. IncorrectOptionValueCount open class IncorrectOptionValueCount : UsageError An option was supplied but the number of values supplied to the option was incorrect. MissingParameter open class MissingParameter : UsageError A required parameter was not provided MutuallyExclusiveGroupException open class MutuallyExclusiveGroupException : UsageError NoSuchOption open class NoSuchOption : UsageError An option was provided that does not exist. PrintHelpMessage class PrintHelpMessage : CliktError An exception that indicates that the command\u2019s help should be printed. PrintMessage class PrintMessage : CliktError An exception that indicates that a message should be printed. UsageError open class UsageError : CliktError An internal exception that signals a usage error.","title":"Exceptions"},{"location":"api/clikt/com.github.ajalt.clikt.core/#functions","text":"Name Summary context fun <T : CliktCommand > T .context(block: Context.Builder .() -> Unit ): T Configure this command\u2019s Context . findObject fun <T : Any > CliktCommand .findObject(): ReadOnlyProperty < CliktCommand , T ?> Find the closest object of type T , or null fun <T : Any > CliktCommand .findObject(default: () -> T ): ReadOnlyProperty < CliktCommand , T > Find the closest object of type T , setting context.obj if one is not found. requireObject fun <T : Any > CliktCommand .requireObject(): ReadOnlyProperty < CliktCommand , T > Find the closest object of type T , or throw a NullPointerException subcommands fun <T : CliktCommand > T .subcommands(commands: Iterable < CliktCommand >): T fun <T : CliktCommand > T .subcommands(vararg commands: CliktCommand ): T Add the given commands as a subcommand of this command.","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/context/","text":"clikt / com.github.ajalt.clikt.core / context context \u00b6 fun <T : CliktCommand > T .context(block: Context.Builder .() -> Unit ): T Configure this command\u2019s Context . Context property values are normally inherited from the parent context, but you can override any of them here.","title":"Context"},{"location":"api/clikt/com.github.ajalt.clikt.core/context/#context","text":"fun <T : CliktCommand > T .context(block: Context.Builder .() -> Unit ): T Configure this command\u2019s Context . Context property values are normally inherited from the parent context, but you can override any of them here.","title":"context"},{"location":"api/clikt/com.github.ajalt.clikt.core/find-object/","text":"clikt / com.github.ajalt.clikt.core / findObject findObject \u00b6 inline fun <reified T : Any > CliktCommand .findObject(): ReadOnlyProperty < CliktCommand , T ?> Find the closest object of type T , or null inline fun <reified T : Any > CliktCommand .findObject(crossinline default: () -> T ): ReadOnlyProperty < CliktCommand , T > Find the closest object of type T , setting context.obj if one is not found.","title":"Find object"},{"location":"api/clikt/com.github.ajalt.clikt.core/find-object/#findobject","text":"inline fun <reified T : Any > CliktCommand .findObject(): ReadOnlyProperty < CliktCommand , T ?> Find the closest object of type T , or null inline fun <reified T : Any > CliktCommand .findObject(crossinline default: () -> T ): ReadOnlyProperty < CliktCommand , T > Find the closest object of type T , setting context.obj if one is not found.","title":"findObject"},{"location":"api/clikt/com.github.ajalt.clikt.core/require-object/","text":"clikt / com.github.ajalt.clikt.core / requireObject requireObject \u00b6 inline fun <reified T : Any > CliktCommand .requireObject(): ReadOnlyProperty < CliktCommand , T > Find the closest object of type T , or throw a NullPointerException","title":"Require object"},{"location":"api/clikt/com.github.ajalt.clikt.core/require-object/#requireobject","text":"inline fun <reified T : Any > CliktCommand .requireObject(): ReadOnlyProperty < CliktCommand , T > Find the closest object of type T , or throw a NullPointerException","title":"requireObject"},{"location":"api/clikt/com.github.ajalt.clikt.core/subcommands/","text":"clikt / com.github.ajalt.clikt.core / subcommands subcommands \u00b6 fun <T : CliktCommand > T .subcommands(commands: Iterable < CliktCommand >): T fun <T : CliktCommand > T .subcommands(vararg commands: CliktCommand ): T Add the given commands as a subcommand of this command.","title":"Subcommands"},{"location":"api/clikt/com.github.ajalt.clikt.core/subcommands/#subcommands","text":"fun <T : CliktCommand > T .subcommands(commands: Iterable < CliktCommand >): T fun <T : CliktCommand > T .subcommands(vararg commands: CliktCommand ): T Add the given commands as a subcommand of this command.","title":"subcommands"},{"location":"api/clikt/com.github.ajalt.clikt.core/-abort/","text":"clikt / com.github.ajalt.clikt.core / Abort Abort \u00b6 class Abort : RuntimeException An internal error that signals Clikt to abort. Constructors \u00b6 Name Summary <init> Abort(error: Boolean = true) An internal error that signals Clikt to abort. Properties \u00b6 Name Summary error val error: Boolean If true, print \u201cAborted\u201d and exit with an error code. Otherwise, exit with no error code.","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.core/-abort/#abort","text":"class Abort : RuntimeException An internal error that signals Clikt to abort.","title":"Abort"},{"location":"api/clikt/com.github.ajalt.clikt.core/-abort/#constructors","text":"Name Summary <init> Abort(error: Boolean = true) An internal error that signals Clikt to abort.","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-abort/#properties","text":"Name Summary error val error: Boolean If true, print \u201cAborted\u201d and exit with an error code. Otherwise, exit with no error code.","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.core/-abort/-init-/","text":"clikt / com.github.ajalt.clikt.core / Abort / <init> <init> \u00b6 Abort(error: Boolean = true) An internal error that signals Clikt to abort.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-abort/-init-/#init","text":"Abort(error: Boolean = true) An internal error that signals Clikt to abort.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-abort/error/","text":"clikt / com.github.ajalt.clikt.core / Abort / error error \u00b6 val error: Boolean If true, print \u201cAborted\u201d and exit with an error code. Otherwise, exit with no error code. Property \u00b6 error - If true, print \u201cAborted\u201d and exit with an error code. Otherwise, exit with no error code.","title":"Error"},{"location":"api/clikt/com.github.ajalt.clikt.core/-abort/error/#error","text":"val error: Boolean If true, print \u201cAborted\u201d and exit with an error code. Otherwise, exit with no error code.","title":"error"},{"location":"api/clikt/com.github.ajalt.clikt.core/-abort/error/#property","text":"error - If true, print \u201cAborted\u201d and exit with an error code. Otherwise, exit with no error code.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-bad-parameter-value/","text":"clikt / com.github.ajalt.clikt.core / BadParameterValue BadParameterValue \u00b6 open class BadParameterValue : UsageError A parameter was given the correct number of values, but of invalid format or type. Constructors \u00b6 Name Summary <init> BadParameterValue(text: String , context: Context ? = null) BadParameterValue(text: String , paramName: String , context: Context ? = null) BadParameterValue(text: String , argument: Argument , context: Context ? = null) BadParameterValue(text: String , option: Option , context: Context ? = null) Inherited Properties \u00b6 Name Summary argument var argument: Argument ? The argument that caused this error. This may be set after the error is thrown. context var context: Context ? message open val message: String ? option var option: Option ? The option that caused this error. This may be set after the error is thrown. paramName var paramName: String ? The name of the parameter that caused the error. If possible, this should be set to the actual name used. If not set, it will be inferred from argument or option if either is set. text val text: String ? Extra text to add to the message. Not all subclasses uses this. Functions \u00b6 Name Summary formatMessage open fun formatMessage(): String Inherited Functions \u00b6 Name Summary helpMessage fun helpMessage(): String inferParamName fun inferParamName(): String","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.core/-bad-parameter-value/#badparametervalue","text":"open class BadParameterValue : UsageError A parameter was given the correct number of values, but of invalid format or type.","title":"BadParameterValue"},{"location":"api/clikt/com.github.ajalt.clikt.core/-bad-parameter-value/#constructors","text":"Name Summary <init> BadParameterValue(text: String , context: Context ? = null) BadParameterValue(text: String , paramName: String , context: Context ? = null) BadParameterValue(text: String , argument: Argument , context: Context ? = null) BadParameterValue(text: String , option: Option , context: Context ? = null)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-bad-parameter-value/#inherited-properties","text":"Name Summary argument var argument: Argument ? The argument that caused this error. This may be set after the error is thrown. context var context: Context ? message open val message: String ? option var option: Option ? The option that caused this error. This may be set after the error is thrown. paramName var paramName: String ? The name of the parameter that caused the error. If possible, this should be set to the actual name used. If not set, it will be inferred from argument or option if either is set. text val text: String ? Extra text to add to the message. Not all subclasses uses this.","title":"Inherited Properties"},{"location":"api/clikt/com.github.ajalt.clikt.core/-bad-parameter-value/#functions","text":"Name Summary formatMessage open fun formatMessage(): String","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-bad-parameter-value/#inherited-functions","text":"Name Summary helpMessage fun helpMessage(): String inferParamName fun inferParamName(): String","title":"Inherited Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-bad-parameter-value/-init-/","text":"clikt / com.github.ajalt.clikt.core / BadParameterValue / <init> <init> \u00b6 BadParameterValue(text: String , context: Context ? = null) BadParameterValue(text: String , paramName: String , context: Context ? = null) BadParameterValue(text: String , argument: Argument , context: Context ? = null) BadParameterValue(text: String , option: Option , context: Context ? = null)","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-bad-parameter-value/-init-/#init","text":"BadParameterValue(text: String , context: Context ? = null) BadParameterValue(text: String , paramName: String , context: Context ? = null) BadParameterValue(text: String , argument: Argument , context: Context ? = null) BadParameterValue(text: String , option: Option , context: Context ? = null)","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-bad-parameter-value/format-message/","text":"clikt / com.github.ajalt.clikt.core / BadParameterValue / formatMessage formatMessage \u00b6 protected open fun formatMessage(): String Overrides UsageError.formatMessage","title":"Format message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-bad-parameter-value/format-message/#formatmessage","text":"protected open fun formatMessage(): String Overrides UsageError.formatMessage","title":"formatMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand CliktCommand \u00b6 abstract class CliktCommand : ParameterHolder The CliktCommand is the core of command line interfaces in Clikt. Command line interfaces created by creating a subclass of CliktCommand with properties defined with option and argument . You can then parse argv by calling main , which will take care of printing errors and help to the user. If you want to handle output yourself, you can use parse instead. Once the command line has been parsed and all of the parameters are populated, run is called. Parameters \u00b6 help - The help for this command. The first line is used in the usage string, and the entire string is used in the help output. Paragraphs are automatically re-wrapped to the terminal width. epilog - Text to display at the end of the full help output. It is automatically re-wrapped to the terminal width. name - The name of the program to use in the help output. If not given, it is inferred from the class name. invokeWithoutSubcommand - Used when this command has subcommands, and this command is called without a subcommand. If true, run will be called. By default, a PrintHelpMessage is thrown instead. printHelpOnEmptyArgs - If this command is called with no values on the command line, print a help message (by throwing PrintHelpMessage ) if this is true, otherwise run normally. helpTags - Extra information about this option to pass to the help formatter. autoCompleteEnvvar - The envvar to use to enable shell autocomplete script generation. Set to null to disable generation. Constructors \u00b6 Name Summary <init> CliktCommand(help: String = \"\", epilog: String = \"\", name: String ? = null, invokeWithoutSubcommand: Boolean = false, printHelpOnEmptyArgs: Boolean = false, helpTags: Map < String , String > = emptyMap(), autoCompleteEnvvar: String ? = \"\") The CliktCommand is the core of command line interfaces in Clikt. Properties \u00b6 Name Summary commandHelp val commandHelp: String commandHelpEpilog val commandHelpEpilog: String commandName val commandName: String context val context: Context This command\u2019s context. helpTags val helpTags: Map < String , String > Extra information about this option to pass to the help formatter. invokeWithoutSubcommand val invokeWithoutSubcommand: Boolean Used when this command has subcommands, and this command is called without a subcommand. If true, run will be called. By default, a PrintHelpMessage is thrown instead. messages val messages: List < String > All messages issued during parsing. printHelpOnEmptyArgs val printHelpOnEmptyArgs: Boolean If this command is called with no values on the command line, print a help message (by throwing PrintHelpMessage ) if this is true, otherwise run normally. Functions \u00b6 Name Summary aliases open fun aliases(): Map < String , List < String >> A list of command aliases. echo fun echo(message: Any ?, trailingNewline: Boolean = true, err: Boolean = false, lineSeparator: String = context.console.lineSeparator): Unit Print the message to the screen. getFormattedHelp open fun getFormattedHelp(): String Return the full help string for this command. getFormattedUsage open fun getFormattedUsage(): String Return the usage string for this command. issueMessage fun issueMessage(message: String ): Unit Add a message to be printed after parsing main fun main(argv: List < String >): Unit Parse the command line and print helpful output if any errors occur. fun main(argv: Array < String >): Unit parse fun parse(argv: List < String >, parentContext: Context ? = null): Unit Parse the command line and throw an exception if parsing fails. fun parse(argv: Array < String >, parentContext: Context ? = null): Unit registerArgument fun registerArgument(argument: Argument ): Unit Register an argument with this command. registeredSubcommandNames fun registeredSubcommandNames(): List < String > The names of all direct children of this command registerOption fun registerOption(option: Option ): Unit Register an option with this command. open fun registerOption(option: GroupableOption ): Unit Register an option with this command or group. registerOptionGroup fun registerOptionGroup(group: ParameterGroup ): Unit Register a group with this command. run abstract fun run(): Unit Perform actions after parsing is complete and this command is invoked. shortHelp fun shortHelp(): String The help displayed in the commands list when this command is used as a subcommand. Extension Functions \u00b6 Name Summary argument fun CliktCommand .argument(name: String = \"\", help: String = \"\", helpTags: Map < String , String > = emptyMap()): RawArgument Create a property delegate argument. context fun <T : CliktCommand > T .context(block: Context.Builder .() -> Unit ): T Configure this command\u2019s Context . findObject fun <T : Any > CliktCommand .findObject(): ReadOnlyProperty < CliktCommand , T ?> Find the closest object of type T , or null fun <T : Any > CliktCommand .findObject(default: () -> T ): ReadOnlyProperty < CliktCommand , T > Find the closest object of type T , setting context.obj if one is not found. mutuallyExclusiveOptions fun <T : Any > ParameterHolder .mutuallyExclusiveOptions(option1: OptionDelegate < T ?>, option2: OptionDelegate < T ?>, vararg options: OptionDelegate < T ?>, name: String ? = null, help: String ? = null): MutuallyExclusiveOptions < T , T ?> Declare a set of two or more mutually exclusive options. option fun ParameterHolder .option(vararg names: String , help: String = \"\", metavar: String ? = null, hidden: Boolean = false, envvar: String ? = null, envvarSplit: Regex ? = null, helpTags: Map < String , String > = emptyMap()): RawOption Create a property delegate option. requireObject fun <T : Any > CliktCommand .requireObject(): ReadOnlyProperty < CliktCommand , T > Find the closest object of type T , or throw a NullPointerException subcommands fun <T : CliktCommand > T .subcommands(commands: Iterable < CliktCommand >): T fun <T : CliktCommand > T .subcommands(vararg commands: CliktCommand ): T Add the given commands as a subcommand of this command. versionOption fun <T : CliktCommand > T .versionOption(version: String , help: String = \"Show the version and exit\", names: Set < String > = setOf(\"--version\"), message: ( String ) -> String = { \"$commandName version $it\" }): T Add an eager option to this command that, when invoked, prints a version message and exits. Inheritors \u00b6 Name Summary NoRunCliktCommand open class NoRunCliktCommand : CliktCommand A CliktCommand that has a default implementation of CliktCommand.run that is a no-op.","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/#cliktcommand","text":"abstract class CliktCommand : ParameterHolder The CliktCommand is the core of command line interfaces in Clikt. Command line interfaces created by creating a subclass of CliktCommand with properties defined with option and argument . You can then parse argv by calling main , which will take care of printing errors and help to the user. If you want to handle output yourself, you can use parse instead. Once the command line has been parsed and all of the parameters are populated, run is called.","title":"CliktCommand"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/#parameters","text":"help - The help for this command. The first line is used in the usage string, and the entire string is used in the help output. Paragraphs are automatically re-wrapped to the terminal width. epilog - Text to display at the end of the full help output. It is automatically re-wrapped to the terminal width. name - The name of the program to use in the help output. If not given, it is inferred from the class name. invokeWithoutSubcommand - Used when this command has subcommands, and this command is called without a subcommand. If true, run will be called. By default, a PrintHelpMessage is thrown instead. printHelpOnEmptyArgs - If this command is called with no values on the command line, print a help message (by throwing PrintHelpMessage ) if this is true, otherwise run normally. helpTags - Extra information about this option to pass to the help formatter. autoCompleteEnvvar - The envvar to use to enable shell autocomplete script generation. Set to null to disable generation.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/#constructors","text":"Name Summary <init> CliktCommand(help: String = \"\", epilog: String = \"\", name: String ? = null, invokeWithoutSubcommand: Boolean = false, printHelpOnEmptyArgs: Boolean = false, helpTags: Map < String , String > = emptyMap(), autoCompleteEnvvar: String ? = \"\") The CliktCommand is the core of command line interfaces in Clikt.","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/#properties","text":"Name Summary commandHelp val commandHelp: String commandHelpEpilog val commandHelpEpilog: String commandName val commandName: String context val context: Context This command\u2019s context. helpTags val helpTags: Map < String , String > Extra information about this option to pass to the help formatter. invokeWithoutSubcommand val invokeWithoutSubcommand: Boolean Used when this command has subcommands, and this command is called without a subcommand. If true, run will be called. By default, a PrintHelpMessage is thrown instead. messages val messages: List < String > All messages issued during parsing. printHelpOnEmptyArgs val printHelpOnEmptyArgs: Boolean If this command is called with no values on the command line, print a help message (by throwing PrintHelpMessage ) if this is true, otherwise run normally.","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/#functions","text":"Name Summary aliases open fun aliases(): Map < String , List < String >> A list of command aliases. echo fun echo(message: Any ?, trailingNewline: Boolean = true, err: Boolean = false, lineSeparator: String = context.console.lineSeparator): Unit Print the message to the screen. getFormattedHelp open fun getFormattedHelp(): String Return the full help string for this command. getFormattedUsage open fun getFormattedUsage(): String Return the usage string for this command. issueMessage fun issueMessage(message: String ): Unit Add a message to be printed after parsing main fun main(argv: List < String >): Unit Parse the command line and print helpful output if any errors occur. fun main(argv: Array < String >): Unit parse fun parse(argv: List < String >, parentContext: Context ? = null): Unit Parse the command line and throw an exception if parsing fails. fun parse(argv: Array < String >, parentContext: Context ? = null): Unit registerArgument fun registerArgument(argument: Argument ): Unit Register an argument with this command. registeredSubcommandNames fun registeredSubcommandNames(): List < String > The names of all direct children of this command registerOption fun registerOption(option: Option ): Unit Register an option with this command. open fun registerOption(option: GroupableOption ): Unit Register an option with this command or group. registerOptionGroup fun registerOptionGroup(group: ParameterGroup ): Unit Register a group with this command. run abstract fun run(): Unit Perform actions after parsing is complete and this command is invoked. shortHelp fun shortHelp(): String The help displayed in the commands list when this command is used as a subcommand.","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/#extension-functions","text":"Name Summary argument fun CliktCommand .argument(name: String = \"\", help: String = \"\", helpTags: Map < String , String > = emptyMap()): RawArgument Create a property delegate argument. context fun <T : CliktCommand > T .context(block: Context.Builder .() -> Unit ): T Configure this command\u2019s Context . findObject fun <T : Any > CliktCommand .findObject(): ReadOnlyProperty < CliktCommand , T ?> Find the closest object of type T , or null fun <T : Any > CliktCommand .findObject(default: () -> T ): ReadOnlyProperty < CliktCommand , T > Find the closest object of type T , setting context.obj if one is not found. mutuallyExclusiveOptions fun <T : Any > ParameterHolder .mutuallyExclusiveOptions(option1: OptionDelegate < T ?>, option2: OptionDelegate < T ?>, vararg options: OptionDelegate < T ?>, name: String ? = null, help: String ? = null): MutuallyExclusiveOptions < T , T ?> Declare a set of two or more mutually exclusive options. option fun ParameterHolder .option(vararg names: String , help: String = \"\", metavar: String ? = null, hidden: Boolean = false, envvar: String ? = null, envvarSplit: Regex ? = null, helpTags: Map < String , String > = emptyMap()): RawOption Create a property delegate option. requireObject fun <T : Any > CliktCommand .requireObject(): ReadOnlyProperty < CliktCommand , T > Find the closest object of type T , or throw a NullPointerException subcommands fun <T : CliktCommand > T .subcommands(commands: Iterable < CliktCommand >): T fun <T : CliktCommand > T .subcommands(vararg commands: CliktCommand ): T Add the given commands as a subcommand of this command. versionOption fun <T : CliktCommand > T .versionOption(version: String , help: String = \"Show the version and exit\", names: Set < String > = setOf(\"--version\"), message: ( String ) -> String = { \"$commandName version $it\" }): T Add an eager option to this command that, when invoked, prints a version message and exits.","title":"Extension Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/#inheritors","text":"Name Summary NoRunCliktCommand open class NoRunCliktCommand : CliktCommand A CliktCommand that has a default implementation of CliktCommand.run that is a no-op.","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/-init-/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / <init> <init> \u00b6 CliktCommand(help: String = \"\", epilog: String = \"\", name: String ? = null, invokeWithoutSubcommand: Boolean = false, printHelpOnEmptyArgs: Boolean = false, helpTags: Map < String , String > = emptyMap(), autoCompleteEnvvar: String ? = \"\") The CliktCommand is the core of command line interfaces in Clikt. Command line interfaces created by creating a subclass of CliktCommand with properties defined with option and argument . You can then parse argv by calling main , which will take care of printing errors and help to the user. If you want to handle output yourself, you can use parse instead. Once the command line has been parsed and all of the parameters are populated, run is called. Parameters \u00b6 help - The help for this command. The first line is used in the usage string, and the entire string is used in the help output. Paragraphs are automatically re-wrapped to the terminal width. epilog - Text to display at the end of the full help output. It is automatically re-wrapped to the terminal width. name - The name of the program to use in the help output. If not given, it is inferred from the class name. invokeWithoutSubcommand - Used when this command has subcommands, and this command is called without a subcommand. If true, run will be called. By default, a PrintHelpMessage is thrown instead. printHelpOnEmptyArgs - If this command is called with no values on the command line, print a help message (by throwing PrintHelpMessage ) if this is true, otherwise run normally. helpTags - Extra information about this option to pass to the help formatter. autoCompleteEnvvar - The envvar to use to enable shell autocomplete script generation. Set to null to disable generation.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/-init-/#init","text":"CliktCommand(help: String = \"\", epilog: String = \"\", name: String ? = null, invokeWithoutSubcommand: Boolean = false, printHelpOnEmptyArgs: Boolean = false, helpTags: Map < String , String > = emptyMap(), autoCompleteEnvvar: String ? = \"\") The CliktCommand is the core of command line interfaces in Clikt. Command line interfaces created by creating a subclass of CliktCommand with properties defined with option and argument . You can then parse argv by calling main , which will take care of printing errors and help to the user. If you want to handle output yourself, you can use parse instead. Once the command line has been parsed and all of the parameters are populated, run is called.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/-init-/#parameters","text":"help - The help for this command. The first line is used in the usage string, and the entire string is used in the help output. Paragraphs are automatically re-wrapped to the terminal width. epilog - Text to display at the end of the full help output. It is automatically re-wrapped to the terminal width. name - The name of the program to use in the help output. If not given, it is inferred from the class name. invokeWithoutSubcommand - Used when this command has subcommands, and this command is called without a subcommand. If true, run will be called. By default, a PrintHelpMessage is thrown instead. printHelpOnEmptyArgs - If this command is called with no values on the command line, print a help message (by throwing PrintHelpMessage ) if this is true, otherwise run normally. helpTags - Extra information about this option to pass to the help formatter. autoCompleteEnvvar - The envvar to use to enable shell autocomplete script generation. Set to null to disable generation.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/aliases/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / aliases aliases \u00b6 open fun aliases(): Map < String , List < String >> A list of command aliases. If the user enters a command that matches the a key in this map, the command is replaced with the corresponding value in in map. The aliases aren\u2019t recursive, so aliases won\u2019t be looked up again while tokens from an existing alias are being parsed.","title":"Aliases"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/aliases/#aliases","text":"open fun aliases(): Map < String , List < String >> A list of command aliases. If the user enters a command that matches the a key in this map, the command is replaced with the corresponding value in in map. The aliases aren\u2019t recursive, so aliases won\u2019t be looked up again while tokens from an existing alias are being parsed.","title":"aliases"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/command-help-epilog/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / commandHelpEpilog commandHelpEpilog \u00b6 val commandHelpEpilog: String","title":"Command help epilog"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/command-help-epilog/#commandhelpepilog","text":"val commandHelpEpilog: String","title":"commandHelpEpilog"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/command-help/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / commandHelp commandHelp \u00b6 val commandHelp: String","title":"Command help"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/command-help/#commandhelp","text":"val commandHelp: String","title":"commandHelp"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/command-name/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / commandName commandName \u00b6 val commandName: String","title":"Command name"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/command-name/#commandname","text":"val commandName: String","title":"commandName"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/context/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / context context \u00b6 val context: Context This command\u2019s context. Exceptions \u00b6 NullPointerException - if accessed before parse or main are called.","title":"Context"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/context/#context","text":"val context: Context This command\u2019s context.","title":"context"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/context/#exceptions","text":"NullPointerException - if accessed before parse or main are called.","title":"Exceptions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/echo/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / echo echo \u00b6 protected fun echo(message: Any ?, trailingNewline: Boolean = true, err: Boolean = false, lineSeparator: String = context.console.lineSeparator): Unit Print the message to the screen. This is similar to print or println , but converts newlines to the system line separator. This is equivalent to calling TermUi.echo with the console from the current context. Parameters \u00b6 message - The message to print. trailingNewline - If true, behave like println , otherwise behave like print err - If true, print to stderr instead of stdout","title":"Echo"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/echo/#echo","text":"protected fun echo(message: Any ?, trailingNewline: Boolean = true, err: Boolean = false, lineSeparator: String = context.console.lineSeparator): Unit Print the message to the screen. This is similar to print or println , but converts newlines to the system line separator. This is equivalent to calling TermUi.echo with the console from the current context.","title":"echo"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/echo/#parameters","text":"message - The message to print. trailingNewline - If true, behave like println , otherwise behave like print err - If true, print to stderr instead of stdout","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/get-formatted-help/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / getFormattedHelp getFormattedHelp \u00b6 open fun getFormattedHelp(): String Return the full help string for this command.","title":"Get formatted help"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/get-formatted-help/#getformattedhelp","text":"open fun getFormattedHelp(): String Return the full help string for this command.","title":"getFormattedHelp"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/get-formatted-usage/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / getFormattedUsage getFormattedUsage \u00b6 open fun getFormattedUsage(): String Return the usage string for this command.","title":"Get formatted usage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/get-formatted-usage/#getformattedusage","text":"open fun getFormattedUsage(): String Return the usage string for this command.","title":"getFormattedUsage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/help-tags/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / helpTags helpTags \u00b6 val helpTags: Map < String , String > Extra information about this option to pass to the help formatter.","title":"Help tags"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/help-tags/#helptags","text":"val helpTags: Map < String , String > Extra information about this option to pass to the help formatter.","title":"helpTags"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/invoke-without-subcommand/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / invokeWithoutSubcommand invokeWithoutSubcommand \u00b6 val invokeWithoutSubcommand: Boolean Used when this command has subcommands, and this command is called without a subcommand. If true, run will be called. By default, a PrintHelpMessage is thrown instead.","title":"Invoke without subcommand"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/invoke-without-subcommand/#invokewithoutsubcommand","text":"val invokeWithoutSubcommand: Boolean Used when this command has subcommands, and this command is called without a subcommand. If true, run will be called. By default, a PrintHelpMessage is thrown instead.","title":"invokeWithoutSubcommand"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/issue-message/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / issueMessage issueMessage \u00b6 fun issueMessage(message: String ): Unit Add a message to be printed after parsing","title":"Issue message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/issue-message/#issuemessage","text":"fun issueMessage(message: String ): Unit Add a message to be printed after parsing","title":"issueMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/main/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / main main \u00b6 fun main(argv: List < String >): Unit Parse the command line and print helpful output if any errors occur. This function calls parse and catches and CliktError s that are thrown. Other error are allowed to pass through. fun main(argv: Array < String >): Unit","title":"Main"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/main/#main","text":"fun main(argv: List < String >): Unit Parse the command line and print helpful output if any errors occur. This function calls parse and catches and CliktError s that are thrown. Other error are allowed to pass through. fun main(argv: Array < String >): Unit","title":"main"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/messages/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / messages messages \u00b6 val messages: List < String > All messages issued during parsing.","title":"Messages"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/messages/#messages","text":"val messages: List < String > All messages issued during parsing.","title":"messages"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/parse/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / parse parse \u00b6 fun parse(argv: List < String >, parentContext: Context ? = null): Unit Parse the command line and throw an exception if parsing fails. You should use main instead unless you want to handle output yourself. fun parse(argv: Array < String >, parentContext: Context ? = null): Unit","title":"Parse"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/parse/#parse","text":"fun parse(argv: List < String >, parentContext: Context ? = null): Unit Parse the command line and throw an exception if parsing fails. You should use main instead unless you want to handle output yourself. fun parse(argv: Array < String >, parentContext: Context ? = null): Unit","title":"parse"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/print-help-on-empty-args/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / printHelpOnEmptyArgs printHelpOnEmptyArgs \u00b6 val printHelpOnEmptyArgs: Boolean If this command is called with no values on the command line, print a help message (by throwing PrintHelpMessage ) if this is true, otherwise run normally.","title":"Print help on empty args"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/print-help-on-empty-args/#printhelponemptyargs","text":"val printHelpOnEmptyArgs: Boolean If this command is called with no values on the command line, print a help message (by throwing PrintHelpMessage ) if this is true, otherwise run normally.","title":"printHelpOnEmptyArgs"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/register-argument/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / registerArgument registerArgument \u00b6 fun registerArgument(argument: Argument ): Unit Register an argument with this command. This is called automatically for the built in arguments, but you need to call this if you want to add a custom argument.","title":"Register argument"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/register-argument/#registerargument","text":"fun registerArgument(argument: Argument ): Unit Register an argument with this command. This is called automatically for the built in arguments, but you need to call this if you want to add a custom argument.","title":"registerArgument"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/register-option-group/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / registerOptionGroup registerOptionGroup \u00b6 fun registerOptionGroup(group: ParameterGroup ): Unit Register a group with this command. This is called automatically for built in groups, but you need to call this if you want to add a custom group.","title":"Register option group"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/register-option-group/#registeroptiongroup","text":"fun registerOptionGroup(group: ParameterGroup ): Unit Register a group with this command. This is called automatically for built in groups, but you need to call this if you want to add a custom group.","title":"registerOptionGroup"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/register-option/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / registerOption registerOption \u00b6 fun registerOption(option: Option ): Unit Register an option with this command. This is called automatically for the built in options, but you need to call this if you want to add a custom option. open fun registerOption(option: GroupableOption ): Unit Overrides ParameterHolder.registerOption Register an option with this command or group. This is called automatically for the built in options, but you need to call this if you want to add a custom option.","title":"Register option"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/register-option/#registeroption","text":"fun registerOption(option: Option ): Unit Register an option with this command. This is called automatically for the built in options, but you need to call this if you want to add a custom option. open fun registerOption(option: GroupableOption ): Unit Overrides ParameterHolder.registerOption Register an option with this command or group. This is called automatically for the built in options, but you need to call this if you want to add a custom option.","title":"registerOption"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/registered-subcommand-names/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / registeredSubcommandNames registeredSubcommandNames \u00b6 fun registeredSubcommandNames(): List < String > The names of all direct children of this command","title":"Registered subcommand names"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/registered-subcommand-names/#registeredsubcommandnames","text":"fun registeredSubcommandNames(): List < String > The names of all direct children of this command","title":"registeredSubcommandNames"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/run/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / run run \u00b6 abstract fun run(): Unit Perform actions after parsing is complete and this command is invoked. This is called after command line parsing is complete. If this command is a subcommand, this will only be called if the subcommand is invoked. If one of this command\u2019s subcommands is invoked, this is called before the subcommand\u2019s arguments are parsed.","title":"Run"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/run/#run","text":"abstract fun run(): Unit Perform actions after parsing is complete and this command is invoked. This is called after command line parsing is complete. If this command is a subcommand, this will only be called if the subcommand is invoked. If one of this command\u2019s subcommands is invoked, this is called before the subcommand\u2019s arguments are parsed.","title":"run"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/short-help/","text":"clikt / com.github.ajalt.clikt.core / CliktCommand / shortHelp shortHelp \u00b6 protected fun shortHelp(): String The help displayed in the commands list when this command is used as a subcommand.","title":"Short help"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-command/short-help/#shorthelp","text":"protected fun shortHelp(): String The help displayed in the commands list when this command is used as a subcommand.","title":"shortHelp"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-error/","text":"clikt / com.github.ajalt.clikt.core / CliktError CliktError \u00b6 open class CliktError : RuntimeException An exception during command line processing that should be shown to the user. If calling CliktCommand.main , these exceptions will be caught and the appropriate info will be printed. Constructors \u00b6 Name Summary <init> CliktError(message: String ? = null, cause: Exception ? = null) An exception during command line processing that should be shown to the user. Inheritors \u00b6 Name Summary PrintHelpMessage class PrintHelpMessage : CliktError An exception that indicates that the command\u2019s help should be printed. PrintMessage class PrintMessage : CliktError An exception that indicates that a message should be printed. UsageError open class UsageError : CliktError An internal exception that signals a usage error.","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-error/#clikterror","text":"open class CliktError : RuntimeException An exception during command line processing that should be shown to the user. If calling CliktCommand.main , these exceptions will be caught and the appropriate info will be printed.","title":"CliktError"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-error/#constructors","text":"Name Summary <init> CliktError(message: String ? = null, cause: Exception ? = null) An exception during command line processing that should be shown to the user.","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-error/#inheritors","text":"Name Summary PrintHelpMessage class PrintHelpMessage : CliktError An exception that indicates that the command\u2019s help should be printed. PrintMessage class PrintMessage : CliktError An exception that indicates that a message should be printed. UsageError open class UsageError : CliktError An internal exception that signals a usage error.","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-error/-init-/","text":"clikt / com.github.ajalt.clikt.core / CliktError / <init> <init> \u00b6 CliktError(message: String ? = null, cause: Exception ? = null) An exception during command line processing that should be shown to the user. If calling CliktCommand.main , these exceptions will be caught and the appropriate info will be printed.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-clikt-error/-init-/#init","text":"CliktError(message: String ? = null, cause: Exception ? = null) An exception during command line processing that should be shown to the user. If calling CliktCommand.main , these exceptions will be caught and the appropriate info will be printed.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/","text":"clikt / com.github.ajalt.clikt.core / Context Context \u00b6 class Context A object used to control command line parsing and pass data between commands. A new Context instance is created for each command each time the command line is parsed. Types \u00b6 Name Summary Builder class Builder Constructors \u00b6 Name Summary <init> Context(parent: Context ?, command: CliktCommand , allowInterspersedArgs: Boolean , autoEnvvarPrefix: String ?, printExtraMessages: Boolean , helpOptionNames: Set < String >, helpOptionMessage: String , helpFormatter: HelpFormatter , tokenTransformer: Context .( String ) -> String , console: CliktConsole ) A object used to control command line parsing and pass data between commands. Properties \u00b6 Name Summary allowInterspersedArgs val allowInterspersedArgs: Boolean If false, options and arguments cannot be mixed; the first time an argument is encountered, all remaining tokens are parsed as arguments. autoEnvvarPrefix val autoEnvvarPrefix: String ? The prefix to add to inferred envvar names. If null, the prefix is based on the parent\u2019s prefix, if there is one. If no command specifies, a prefix, envvar lookup is disabled. command val command: CliktCommand The command that this context associated with. console val console: CliktConsole The console to use to print messages. helpFormatter val helpFormatter: HelpFormatter The help formatter for this command. helpOptionMessage val helpOptionMessage: String The description of the help option. helpOptionNames val helpOptionNames: Set < String > The names to use for the help option. If any names in the set conflict with other options, the conflicting name will not be used for the help option. If the set is empty, or contains no unique names, no help option will be added. invokedSubcommand var invokedSubcommand: CliktCommand ? obj var obj: Any ? parent val parent: Context ? If this context is the child of another command, parent is the parent command\u2019s context. printExtraMessages val printExtraMessages: Boolean Set this to false to prevent extra messages from being printed automatically. You can still access them at CliktCommand.messages inside of CliktCommand.run . tokenTransformer val tokenTransformer: Context .( String ) -> String An optional transformation function that is called to transform command line tokens (options and commands) before parsing. This can be used to implement e.g. case insensitive behavior. Functions \u00b6 Name Summary fail fun fail(message: String = \"\"): Nothing Throw a UsageError with the given message findObject fun <T> findObject(): T ? Find the closest object of type T fun <T> findObject(defaultValue: () -> T ): T Find the closest object of type T , setting this. obj if one is not found. findRoot fun findRoot(): Context Find the outermost context Companion Object Functions \u00b6 Name Summary build fun build(command: CliktCommand , parent: Context ? = null, block: Context.Builder .() -> Unit ): Context","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/#context","text":"class Context A object used to control command line parsing and pass data between commands. A new Context instance is created for each command each time the command line is parsed.","title":"Context"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/#types","text":"Name Summary Builder class Builder","title":"Types"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/#constructors","text":"Name Summary <init> Context(parent: Context ?, command: CliktCommand , allowInterspersedArgs: Boolean , autoEnvvarPrefix: String ?, printExtraMessages: Boolean , helpOptionNames: Set < String >, helpOptionMessage: String , helpFormatter: HelpFormatter , tokenTransformer: Context .( String ) -> String , console: CliktConsole ) A object used to control command line parsing and pass data between commands.","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/#properties","text":"Name Summary allowInterspersedArgs val allowInterspersedArgs: Boolean If false, options and arguments cannot be mixed; the first time an argument is encountered, all remaining tokens are parsed as arguments. autoEnvvarPrefix val autoEnvvarPrefix: String ? The prefix to add to inferred envvar names. If null, the prefix is based on the parent\u2019s prefix, if there is one. If no command specifies, a prefix, envvar lookup is disabled. command val command: CliktCommand The command that this context associated with. console val console: CliktConsole The console to use to print messages. helpFormatter val helpFormatter: HelpFormatter The help formatter for this command. helpOptionMessage val helpOptionMessage: String The description of the help option. helpOptionNames val helpOptionNames: Set < String > The names to use for the help option. If any names in the set conflict with other options, the conflicting name will not be used for the help option. If the set is empty, or contains no unique names, no help option will be added. invokedSubcommand var invokedSubcommand: CliktCommand ? obj var obj: Any ? parent val parent: Context ? If this context is the child of another command, parent is the parent command\u2019s context. printExtraMessages val printExtraMessages: Boolean Set this to false to prevent extra messages from being printed automatically. You can still access them at CliktCommand.messages inside of CliktCommand.run . tokenTransformer val tokenTransformer: Context .( String ) -> String An optional transformation function that is called to transform command line tokens (options and commands) before parsing. This can be used to implement e.g. case insensitive behavior.","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/#functions","text":"Name Summary fail fun fail(message: String = \"\"): Nothing Throw a UsageError with the given message findObject fun <T> findObject(): T ? Find the closest object of type T fun <T> findObject(defaultValue: () -> T ): T Find the closest object of type T , setting this. obj if one is not found. findRoot fun findRoot(): Context Find the outermost context","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/#companion-object-functions","text":"Name Summary build fun build(command: CliktCommand , parent: Context ? = null, block: Context.Builder .() -> Unit ): Context","title":"Companion Object Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-init-/","text":"clikt / com.github.ajalt.clikt.core / Context / <init> <init> \u00b6 Context(parent: Context ?, command: CliktCommand , allowInterspersedArgs: Boolean , autoEnvvarPrefix: String ?, printExtraMessages: Boolean , helpOptionNames: Set < String >, helpOptionMessage: String , helpFormatter: HelpFormatter , tokenTransformer: Context .( String ) -> String , console: CliktConsole ) A object used to control command line parsing and pass data between commands. A new Context instance is created for each command each time the command line is parsed.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-init-/#init","text":"Context(parent: Context ?, command: CliktCommand , allowInterspersedArgs: Boolean , autoEnvvarPrefix: String ?, printExtraMessages: Boolean , helpOptionNames: Set < String >, helpOptionMessage: String , helpFormatter: HelpFormatter , tokenTransformer: Context .( String ) -> String , console: CliktConsole ) A object used to control command line parsing and pass data between commands. A new Context instance is created for each command each time the command line is parsed.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/allow-interspersed-args/","text":"clikt / com.github.ajalt.clikt.core / Context / allowInterspersedArgs allowInterspersedArgs \u00b6 val allowInterspersedArgs: Boolean If false, options and arguments cannot be mixed; the first time an argument is encountered, all remaining tokens are parsed as arguments. Property \u00b6 allowInterspersedArgs - If false, options and arguments cannot be mixed; the first time an argument is encountered, all remaining tokens are parsed as arguments.","title":"Allow interspersed args"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/allow-interspersed-args/#allowinterspersedargs","text":"val allowInterspersedArgs: Boolean If false, options and arguments cannot be mixed; the first time an argument is encountered, all remaining tokens are parsed as arguments.","title":"allowInterspersedArgs"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/allow-interspersed-args/#property","text":"allowInterspersedArgs - If false, options and arguments cannot be mixed; the first time an argument is encountered, all remaining tokens are parsed as arguments.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/auto-envvar-prefix/","text":"clikt / com.github.ajalt.clikt.core / Context / autoEnvvarPrefix autoEnvvarPrefix \u00b6 val autoEnvvarPrefix: String ? The prefix to add to inferred envvar names. If null, the prefix is based on the parent\u2019s prefix, if there is one. If no command specifies, a prefix, envvar lookup is disabled. Property \u00b6 autoEnvvarPrefix - The prefix to add to inferred envvar names. If null, the prefix is based on the parent\u2019s prefix, if there is one. If no command specifies, a prefix, envvar lookup is disabled.","title":"Auto envvar prefix"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/auto-envvar-prefix/#autoenvvarprefix","text":"val autoEnvvarPrefix: String ? The prefix to add to inferred envvar names. If null, the prefix is based on the parent\u2019s prefix, if there is one. If no command specifies, a prefix, envvar lookup is disabled.","title":"autoEnvvarPrefix"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/auto-envvar-prefix/#property","text":"autoEnvvarPrefix - The prefix to add to inferred envvar names. If null, the prefix is based on the parent\u2019s prefix, if there is one. If no command specifies, a prefix, envvar lookup is disabled.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/build/","text":"clikt / com.github.ajalt.clikt.core / Context / build build \u00b6 inline fun build(command: CliktCommand , parent: Context ? = null, block: Context.Builder .() -> Unit ): Context","title":"Build"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/build/#build","text":"inline fun build(command: CliktCommand , parent: Context ? = null, block: Context.Builder .() -> Unit ): Context","title":"build"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/command/","text":"clikt / com.github.ajalt.clikt.core / Context / command command \u00b6 val command: CliktCommand The command that this context associated with. Property \u00b6 command - The command that this context associated with.","title":"Command"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/command/#command","text":"val command: CliktCommand The command that this context associated with.","title":"command"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/command/#property","text":"command - The command that this context associated with.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/console/","text":"clikt / com.github.ajalt.clikt.core / Context / console console \u00b6 val console: CliktConsole The console to use to print messages. Property \u00b6 console - The console to use to print messages.","title":"Console"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/console/#console","text":"val console: CliktConsole The console to use to print messages.","title":"console"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/console/#property","text":"console - The console to use to print messages.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/fail/","text":"clikt / com.github.ajalt.clikt.core / Context / fail fail \u00b6 fun fail(message: String = \"\"): Nothing Throw a UsageError with the given message","title":"Fail"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/fail/#fail","text":"fun fail(message: String = \"\"): Nothing Throw a UsageError with the given message","title":"fail"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/find-object/","text":"clikt / com.github.ajalt.clikt.core / Context / findObject findObject \u00b6 inline fun <reified T> findObject(): T ? Find the closest object of type T inline fun <reified T> findObject(defaultValue: () -> T ): T Find the closest object of type T , setting this. obj if one is not found.","title":"Find object"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/find-object/#findobject","text":"inline fun <reified T> findObject(): T ? Find the closest object of type T inline fun <reified T> findObject(defaultValue: () -> T ): T Find the closest object of type T , setting this. obj if one is not found.","title":"findObject"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/find-root/","text":"clikt / com.github.ajalt.clikt.core / Context / findRoot findRoot \u00b6 fun findRoot(): Context Find the outermost context","title":"Find root"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/find-root/#findroot","text":"fun findRoot(): Context Find the outermost context","title":"findRoot"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/help-formatter/","text":"clikt / com.github.ajalt.clikt.core / Context / helpFormatter helpFormatter \u00b6 val helpFormatter: HelpFormatter The help formatter for this command. Property \u00b6 helpFormatter - The help formatter for this command.","title":"Help formatter"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/help-formatter/#helpformatter","text":"val helpFormatter: HelpFormatter The help formatter for this command.","title":"helpFormatter"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/help-formatter/#property","text":"helpFormatter - The help formatter for this command.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/help-option-message/","text":"clikt / com.github.ajalt.clikt.core / Context / helpOptionMessage helpOptionMessage \u00b6 val helpOptionMessage: String The description of the help option. Property \u00b6 helpOptionMessage - The description of the help option.","title":"Help option message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/help-option-message/#helpoptionmessage","text":"val helpOptionMessage: String The description of the help option.","title":"helpOptionMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/help-option-message/#property","text":"helpOptionMessage - The description of the help option.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/help-option-names/","text":"clikt / com.github.ajalt.clikt.core / Context / helpOptionNames helpOptionNames \u00b6 val helpOptionNames: Set < String > The names to use for the help option. If any names in the set conflict with other options, the conflicting name will not be used for the help option. If the set is empty, or contains no unique names, no help option will be added. Property \u00b6 helpOptionNames - The names to use for the help option. If any names in the set conflict with other options, the conflicting name will not be used for the help option. If the set is empty, or contains no unique names, no help option will be added.","title":"Help option names"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/help-option-names/#helpoptionnames","text":"val helpOptionNames: Set < String > The names to use for the help option. If any names in the set conflict with other options, the conflicting name will not be used for the help option. If the set is empty, or contains no unique names, no help option will be added.","title":"helpOptionNames"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/help-option-names/#property","text":"helpOptionNames - The names to use for the help option. If any names in the set conflict with other options, the conflicting name will not be used for the help option. If the set is empty, or contains no unique names, no help option will be added.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/invoked-subcommand/","text":"clikt / com.github.ajalt.clikt.core / Context / invokedSubcommand invokedSubcommand \u00b6 var invokedSubcommand: CliktCommand ?","title":"Invoked subcommand"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/invoked-subcommand/#invokedsubcommand","text":"var invokedSubcommand: CliktCommand ?","title":"invokedSubcommand"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/obj/","text":"clikt / com.github.ajalt.clikt.core / Context / obj obj \u00b6 var obj: Any ?","title":"Obj"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/obj/#obj","text":"var obj: Any ?","title":"obj"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/parent/","text":"clikt / com.github.ajalt.clikt.core / Context / parent parent \u00b6 val parent: Context ? If this context is the child of another command, parent is the parent command\u2019s context. Property \u00b6 parent - If this context is the child of another command, parent is the parent command\u2019s context.","title":"Parent"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/parent/#parent","text":"val parent: Context ? If this context is the child of another command, parent is the parent command\u2019s context.","title":"parent"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/parent/#property","text":"parent - If this context is the child of another command, parent is the parent command\u2019s context.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/print-extra-messages/","text":"clikt / com.github.ajalt.clikt.core / Context / printExtraMessages printExtraMessages \u00b6 val printExtraMessages: Boolean Set this to false to prevent extra messages from being printed automatically. You can still access them at CliktCommand.messages inside of CliktCommand.run . Property \u00b6 printExtraMessages - Set this to false to prevent extra messages from being printed automatically. You can still access them at CliktCommand.messages inside of CliktCommand.run .","title":"Print extra messages"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/print-extra-messages/#printextramessages","text":"val printExtraMessages: Boolean Set this to false to prevent extra messages from being printed automatically. You can still access them at CliktCommand.messages inside of CliktCommand.run .","title":"printExtraMessages"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/print-extra-messages/#property","text":"printExtraMessages - Set this to false to prevent extra messages from being printed automatically. You can still access them at CliktCommand.messages inside of CliktCommand.run .","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/token-transformer/","text":"clikt / com.github.ajalt.clikt.core / Context / tokenTransformer tokenTransformer \u00b6 val tokenTransformer: Context .( String ) -> String An optional transformation function that is called to transform command line tokens (options and commands) before parsing. This can be used to implement e.g. case insensitive behavior. Property \u00b6 tokenTransformer - An optional transformation function that is called to transform command line tokens (options and commands) before parsing. This can be used to implement e.g. case insensitive behavior.","title":"Token transformer"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/token-transformer/#tokentransformer","text":"val tokenTransformer: Context .( String ) -> String An optional transformation function that is called to transform command line tokens (options and commands) before parsing. This can be used to implement e.g. case insensitive behavior.","title":"tokenTransformer"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/token-transformer/#property","text":"tokenTransformer - An optional transformation function that is called to transform command line tokens (options and commands) before parsing. This can be used to implement e.g. case insensitive behavior.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/","text":"clikt / com.github.ajalt.clikt.core / Context / Builder Builder \u00b6 class Builder Constructors \u00b6 Name Summary <init> Builder(command: CliktCommand , parent: Context ? = null) Properties \u00b6 Name Summary allowInterspersedArgs var allowInterspersedArgs: Boolean If false, options and arguments cannot be mixed; the first time an argument is encountered, all remaining tokens are parsed as arguments. autoEnvvarPrefix var autoEnvvarPrefix: String ? The prefix to add to inferred envvar names. console var console: CliktConsole The console that will handle reading and writing text. helpFormatter var helpFormatter: HelpFormatter The help formatter for this command helpOptionMessage var helpOptionMessage: String The description of the help option. helpOptionNames var helpOptionNames: Set < String > The names to use for the help option. printExtraMessages var printExtraMessages: Boolean Set this to false to prevent extra messages from being printed automatically. tokenTransformer var tokenTransformer: Context .( String ) -> String An optional transformation function that is called to transform command line","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/#builder","text":"class Builder","title":"Builder"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/#constructors","text":"Name Summary <init> Builder(command: CliktCommand , parent: Context ? = null)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/#properties","text":"Name Summary allowInterspersedArgs var allowInterspersedArgs: Boolean If false, options and arguments cannot be mixed; the first time an argument is encountered, all remaining tokens are parsed as arguments. autoEnvvarPrefix var autoEnvvarPrefix: String ? The prefix to add to inferred envvar names. console var console: CliktConsole The console that will handle reading and writing text. helpFormatter var helpFormatter: HelpFormatter The help formatter for this command helpOptionMessage var helpOptionMessage: String The description of the help option. helpOptionNames var helpOptionNames: Set < String > The names to use for the help option. printExtraMessages var printExtraMessages: Boolean Set this to false to prevent extra messages from being printed automatically. tokenTransformer var tokenTransformer: Context .( String ) -> String An optional transformation function that is called to transform command line","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/-init-/","text":"clikt / com.github.ajalt.clikt.core / Context / Builder / <init> <init> \u00b6 Builder(command: CliktCommand , parent: Context ? = null)","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/-init-/#init","text":"Builder(command: CliktCommand , parent: Context ? = null)","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/allow-interspersed-args/","text":"clikt / com.github.ajalt.clikt.core / Context / Builder / allowInterspersedArgs allowInterspersedArgs \u00b6 var allowInterspersedArgs: Boolean If false, options and arguments cannot be mixed; the first time an argument is encountered, all remaining tokens are parsed as arguments.","title":"Allow interspersed args"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/allow-interspersed-args/#allowinterspersedargs","text":"var allowInterspersedArgs: Boolean If false, options and arguments cannot be mixed; the first time an argument is encountered, all remaining tokens are parsed as arguments.","title":"allowInterspersedArgs"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/auto-envvar-prefix/","text":"clikt / com.github.ajalt.clikt.core / Context / Builder / autoEnvvarPrefix autoEnvvarPrefix \u00b6 var autoEnvvarPrefix: String ? The prefix to add to inferred envvar names. If null, the prefix is based on the parent\u2019s prefix, if there is one. If no command specifies, a prefix, envvar lookup is disabled.","title":"Auto envvar prefix"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/auto-envvar-prefix/#autoenvvarprefix","text":"var autoEnvvarPrefix: String ? The prefix to add to inferred envvar names. If null, the prefix is based on the parent\u2019s prefix, if there is one. If no command specifies, a prefix, envvar lookup is disabled.","title":"autoEnvvarPrefix"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/console/","text":"clikt / com.github.ajalt.clikt.core / Context / Builder / console console \u00b6 var console: CliktConsole The console that will handle reading and writing text. The default uses System.in and System.out .","title":"Console"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/console/#console","text":"var console: CliktConsole The console that will handle reading and writing text. The default uses System.in and System.out .","title":"console"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/help-formatter/","text":"clikt / com.github.ajalt.clikt.core / Context / Builder / helpFormatter helpFormatter \u00b6 var helpFormatter: HelpFormatter The help formatter for this command","title":"Help formatter"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/help-formatter/#helpformatter","text":"var helpFormatter: HelpFormatter The help formatter for this command","title":"helpFormatter"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/help-option-message/","text":"clikt / com.github.ajalt.clikt.core / Context / Builder / helpOptionMessage helpOptionMessage \u00b6 var helpOptionMessage: String The description of the help option.","title":"Help option message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/help-option-message/#helpoptionmessage","text":"var helpOptionMessage: String The description of the help option.","title":"helpOptionMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/help-option-names/","text":"clikt / com.github.ajalt.clikt.core / Context / Builder / helpOptionNames helpOptionNames \u00b6 var helpOptionNames: Set < String > The names to use for the help option. If any names in the set conflict with other options, the conflicting name will not be used for the help option. If the set is empty, or contains no unique names, no help option will be added.","title":"Help option names"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/help-option-names/#helpoptionnames","text":"var helpOptionNames: Set < String > The names to use for the help option. If any names in the set conflict with other options, the conflicting name will not be used for the help option. If the set is empty, or contains no unique names, no help option will be added.","title":"helpOptionNames"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/print-extra-messages/","text":"clikt / com.github.ajalt.clikt.core / Context / Builder / printExtraMessages printExtraMessages \u00b6 var printExtraMessages: Boolean Set this to false to prevent extra messages from being printed automatically. You can still access them at CliktCommand.messages inside of CliktCommand.run .","title":"Print extra messages"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/print-extra-messages/#printextramessages","text":"var printExtraMessages: Boolean Set this to false to prevent extra messages from being printed automatically. You can still access them at CliktCommand.messages inside of CliktCommand.run .","title":"printExtraMessages"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/token-transformer/","text":"clikt / com.github.ajalt.clikt.core / Context / Builder / tokenTransformer tokenTransformer \u00b6 var tokenTransformer: Context .( String ) -> String An optional transformation function that is called to transform command line","title":"Token transformer"},{"location":"api/clikt/com.github.ajalt.clikt.core/-context/-builder/token-transformer/#tokentransformer","text":"var tokenTransformer: Context .( String ) -> String An optional transformation function that is called to transform command line","title":"tokenTransformer"},{"location":"api/clikt/com.github.ajalt.clikt.core/-groupable-option/","text":"clikt / com.github.ajalt.clikt.core / GroupableOption GroupableOption \u00b6 interface GroupableOption : Option An option that can be added to a ParameterGroup Properties \u00b6 Name Summary groupName abstract var groupName: String ? The name of the group, or null if this option should not be grouped in the help output. parameterGroup abstract var parameterGroup: ParameterGroup ? The group that this option belongs to, or null. Set by the group. Inherited Properties \u00b6 Name Summary completionCandidates open val completionCandidates: CompletionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this option. help abstract val help: String The description of this option, usually a single line. helpTags abstract val helpTags: Map < String , String > Extra information about this option to pass to the help formatter. hidden abstract val hidden: Boolean If true, this option should not appear in help output. metavar abstract val metavar: String ? A name representing the values for this option that can be displayed to the user. names abstract val names: Set < String > The names that can be used to invoke this option. They must start with a punctuation character. nvalues abstract val nvalues: Int The number of values that must be given to this option. parameterHelp open val parameterHelp: HelpFormatter.ParameterHelp.Option ? Information about this option for the help output. parser abstract val parser: OptionParser The parser for this option\u2019s values. secondaryNames abstract val secondaryNames: Set < String > Names that can be used for a secondary purpose, like disabling flag options. Inherited Functions \u00b6 Name Summary finalize abstract fun finalize(context: Context , invocations: List < OptionParser.Invocation >): Unit Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. postValidate abstract fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value. Inheritors \u00b6 Name Summary OptionDelegate interface OptionDelegate<T> : GroupableOption , ReadOnlyProperty < ParameterHolder , T > An option that functions as a property delegate OptionWithValues class OptionWithValues<AllT, EachT, ValueT> : OptionDelegate < AllT >, GroupableOption An Option that takes one or more values.","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.core/-groupable-option/#groupableoption","text":"interface GroupableOption : Option An option that can be added to a ParameterGroup","title":"GroupableOption"},{"location":"api/clikt/com.github.ajalt.clikt.core/-groupable-option/#properties","text":"Name Summary groupName abstract var groupName: String ? The name of the group, or null if this option should not be grouped in the help output. parameterGroup abstract var parameterGroup: ParameterGroup ? The group that this option belongs to, or null. Set by the group.","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.core/-groupable-option/#inherited-properties","text":"Name Summary completionCandidates open val completionCandidates: CompletionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this option. help abstract val help: String The description of this option, usually a single line. helpTags abstract val helpTags: Map < String , String > Extra information about this option to pass to the help formatter. hidden abstract val hidden: Boolean If true, this option should not appear in help output. metavar abstract val metavar: String ? A name representing the values for this option that can be displayed to the user. names abstract val names: Set < String > The names that can be used to invoke this option. They must start with a punctuation character. nvalues abstract val nvalues: Int The number of values that must be given to this option. parameterHelp open val parameterHelp: HelpFormatter.ParameterHelp.Option ? Information about this option for the help output. parser abstract val parser: OptionParser The parser for this option\u2019s values. secondaryNames abstract val secondaryNames: Set < String > Names that can be used for a secondary purpose, like disabling flag options.","title":"Inherited Properties"},{"location":"api/clikt/com.github.ajalt.clikt.core/-groupable-option/#inherited-functions","text":"Name Summary finalize abstract fun finalize(context: Context , invocations: List < OptionParser.Invocation >): Unit Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. postValidate abstract fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"Inherited Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-groupable-option/#inheritors","text":"Name Summary OptionDelegate interface OptionDelegate<T> : GroupableOption , ReadOnlyProperty < ParameterHolder , T > An option that functions as a property delegate OptionWithValues class OptionWithValues<AllT, EachT, ValueT> : OptionDelegate < AllT >, GroupableOption An Option that takes one or more values.","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-groupable-option/group-name/","text":"clikt / com.github.ajalt.clikt.core / GroupableOption / groupName groupName \u00b6 abstract var groupName: String ? The name of the group, or null if this option should not be grouped in the help output.","title":"Group name"},{"location":"api/clikt/com.github.ajalt.clikt.core/-groupable-option/group-name/#groupname","text":"abstract var groupName: String ? The name of the group, or null if this option should not be grouped in the help output.","title":"groupName"},{"location":"api/clikt/com.github.ajalt.clikt.core/-groupable-option/parameter-group/","text":"clikt / com.github.ajalt.clikt.core / GroupableOption / parameterGroup parameterGroup \u00b6 abstract var parameterGroup: ParameterGroup ? The group that this option belongs to, or null. Set by the group.","title":"Parameter group"},{"location":"api/clikt/com.github.ajalt.clikt.core/-groupable-option/parameter-group/#parametergroup","text":"abstract var parameterGroup: ParameterGroup ? The group that this option belongs to, or null. Set by the group.","title":"parameterGroup"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-argument-value-count/","text":"clikt / com.github.ajalt.clikt.core / IncorrectArgumentValueCount IncorrectArgumentValueCount \u00b6 open class IncorrectArgumentValueCount : UsageError An argument was supplied but the number of values supplied was incorrect. Constructors \u00b6 Name Summary <init> IncorrectArgumentValueCount(argument: Argument , context: Context ? = null) An argument was supplied but the number of values supplied was incorrect. Inherited Properties \u00b6 Name Summary argument var argument: Argument ? The argument that caused this error. This may be set after the error is thrown. context var context: Context ? message open val message: String ? option var option: Option ? The option that caused this error. This may be set after the error is thrown. paramName var paramName: String ? The name of the parameter that caused the error. If possible, this should be set to the actual name used. If not set, it will be inferred from argument or option if either is set. text val text: String ? Extra text to add to the message. Not all subclasses uses this. Functions \u00b6 Name Summary formatMessage open fun formatMessage(): String Inherited Functions \u00b6 Name Summary helpMessage fun helpMessage(): String inferParamName fun inferParamName(): String","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-argument-value-count/#incorrectargumentvaluecount","text":"open class IncorrectArgumentValueCount : UsageError An argument was supplied but the number of values supplied was incorrect.","title":"IncorrectArgumentValueCount"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-argument-value-count/#constructors","text":"Name Summary <init> IncorrectArgumentValueCount(argument: Argument , context: Context ? = null) An argument was supplied but the number of values supplied was incorrect.","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-argument-value-count/#inherited-properties","text":"Name Summary argument var argument: Argument ? The argument that caused this error. This may be set after the error is thrown. context var context: Context ? message open val message: String ? option var option: Option ? The option that caused this error. This may be set after the error is thrown. paramName var paramName: String ? The name of the parameter that caused the error. If possible, this should be set to the actual name used. If not set, it will be inferred from argument or option if either is set. text val text: String ? Extra text to add to the message. Not all subclasses uses this.","title":"Inherited Properties"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-argument-value-count/#functions","text":"Name Summary formatMessage open fun formatMessage(): String","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-argument-value-count/#inherited-functions","text":"Name Summary helpMessage fun helpMessage(): String inferParamName fun inferParamName(): String","title":"Inherited Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-argument-value-count/-init-/","text":"clikt / com.github.ajalt.clikt.core / IncorrectArgumentValueCount / <init> <init> \u00b6 IncorrectArgumentValueCount(argument: Argument , context: Context ? = null) An argument was supplied but the number of values supplied was incorrect.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-argument-value-count/-init-/#init","text":"IncorrectArgumentValueCount(argument: Argument , context: Context ? = null) An argument was supplied but the number of values supplied was incorrect.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-argument-value-count/format-message/","text":"clikt / com.github.ajalt.clikt.core / IncorrectArgumentValueCount / formatMessage formatMessage \u00b6 protected open fun formatMessage(): String Overrides UsageError.formatMessage","title":"Format message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-argument-value-count/format-message/#formatmessage","text":"protected open fun formatMessage(): String Overrides UsageError.formatMessage","title":"formatMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-option-value-count/","text":"clikt / com.github.ajalt.clikt.core / IncorrectOptionValueCount IncorrectOptionValueCount \u00b6 open class IncorrectOptionValueCount : UsageError An option was supplied but the number of values supplied to the option was incorrect. Constructors \u00b6 Name Summary <init> IncorrectOptionValueCount(option: Option , givenName: String , context: Context ? = null) An option was supplied but the number of values supplied to the option was incorrect. Inherited Properties \u00b6 Name Summary argument var argument: Argument ? The argument that caused this error. This may be set after the error is thrown. context var context: Context ? message open val message: String ? option var option: Option ? The option that caused this error. This may be set after the error is thrown. paramName var paramName: String ? The name of the parameter that caused the error. If possible, this should be set to the actual name used. If not set, it will be inferred from argument or option if either is set. text val text: String ? Extra text to add to the message. Not all subclasses uses this. Functions \u00b6 Name Summary formatMessage open fun formatMessage(): String Inherited Functions \u00b6 Name Summary helpMessage fun helpMessage(): String inferParamName fun inferParamName(): String","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-option-value-count/#incorrectoptionvaluecount","text":"open class IncorrectOptionValueCount : UsageError An option was supplied but the number of values supplied to the option was incorrect.","title":"IncorrectOptionValueCount"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-option-value-count/#constructors","text":"Name Summary <init> IncorrectOptionValueCount(option: Option , givenName: String , context: Context ? = null) An option was supplied but the number of values supplied to the option was incorrect.","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-option-value-count/#inherited-properties","text":"Name Summary argument var argument: Argument ? The argument that caused this error. This may be set after the error is thrown. context var context: Context ? message open val message: String ? option var option: Option ? The option that caused this error. This may be set after the error is thrown. paramName var paramName: String ? The name of the parameter that caused the error. If possible, this should be set to the actual name used. If not set, it will be inferred from argument or option if either is set. text val text: String ? Extra text to add to the message. Not all subclasses uses this.","title":"Inherited Properties"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-option-value-count/#functions","text":"Name Summary formatMessage open fun formatMessage(): String","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-option-value-count/#inherited-functions","text":"Name Summary helpMessage fun helpMessage(): String inferParamName fun inferParamName(): String","title":"Inherited Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-option-value-count/-init-/","text":"clikt / com.github.ajalt.clikt.core / IncorrectOptionValueCount / <init> <init> \u00b6 IncorrectOptionValueCount(option: Option , givenName: String , context: Context ? = null) An option was supplied but the number of values supplied to the option was incorrect.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-option-value-count/-init-/#init","text":"IncorrectOptionValueCount(option: Option , givenName: String , context: Context ? = null) An option was supplied but the number of values supplied to the option was incorrect.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-option-value-count/format-message/","text":"clikt / com.github.ajalt.clikt.core / IncorrectOptionValueCount / formatMessage formatMessage \u00b6 protected open fun formatMessage(): String Overrides UsageError.formatMessage","title":"Format message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-incorrect-option-value-count/format-message/#formatmessage","text":"protected open fun formatMessage(): String Overrides UsageError.formatMessage","title":"formatMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-missing-parameter/","text":"clikt / com.github.ajalt.clikt.core / MissingParameter MissingParameter \u00b6 open class MissingParameter : UsageError A required parameter was not provided Constructors \u00b6 Name Summary <init> MissingParameter(argument: Argument , context: Context ? = null) MissingParameter(option: Option , context: Context ? = null) Inherited Properties \u00b6 Name Summary argument var argument: Argument ? The argument that caused this error. This may be set after the error is thrown. context var context: Context ? message open val message: String ? option var option: Option ? The option that caused this error. This may be set after the error is thrown. paramName var paramName: String ? The name of the parameter that caused the error. If possible, this should be set to the actual name used. If not set, it will be inferred from argument or option if either is set. text val text: String ? Extra text to add to the message. Not all subclasses uses this. Functions \u00b6 Name Summary formatMessage open fun formatMessage(): String Inherited Functions \u00b6 Name Summary helpMessage fun helpMessage(): String inferParamName fun inferParamName(): String","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.core/-missing-parameter/#missingparameter","text":"open class MissingParameter : UsageError A required parameter was not provided","title":"MissingParameter"},{"location":"api/clikt/com.github.ajalt.clikt.core/-missing-parameter/#constructors","text":"Name Summary <init> MissingParameter(argument: Argument , context: Context ? = null) MissingParameter(option: Option , context: Context ? = null)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-missing-parameter/#inherited-properties","text":"Name Summary argument var argument: Argument ? The argument that caused this error. This may be set after the error is thrown. context var context: Context ? message open val message: String ? option var option: Option ? The option that caused this error. This may be set after the error is thrown. paramName var paramName: String ? The name of the parameter that caused the error. If possible, this should be set to the actual name used. If not set, it will be inferred from argument or option if either is set. text val text: String ? Extra text to add to the message. Not all subclasses uses this.","title":"Inherited Properties"},{"location":"api/clikt/com.github.ajalt.clikt.core/-missing-parameter/#functions","text":"Name Summary formatMessage open fun formatMessage(): String","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-missing-parameter/#inherited-functions","text":"Name Summary helpMessage fun helpMessage(): String inferParamName fun inferParamName(): String","title":"Inherited Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-missing-parameter/-init-/","text":"clikt / com.github.ajalt.clikt.core / MissingParameter / <init> <init> \u00b6 MissingParameter(argument: Argument , context: Context ? = null) MissingParameter(option: Option , context: Context ? = null)","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-missing-parameter/-init-/#init","text":"MissingParameter(argument: Argument , context: Context ? = null) MissingParameter(option: Option , context: Context ? = null)","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-missing-parameter/format-message/","text":"clikt / com.github.ajalt.clikt.core / MissingParameter / formatMessage formatMessage \u00b6 protected open fun formatMessage(): String Overrides UsageError.formatMessage","title":"Format message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-missing-parameter/format-message/#formatmessage","text":"protected open fun formatMessage(): String Overrides UsageError.formatMessage","title":"formatMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-mutually-exclusive-group-exception/","text":"clikt / com.github.ajalt.clikt.core / MutuallyExclusiveGroupException MutuallyExclusiveGroupException \u00b6 open class MutuallyExclusiveGroupException : UsageError Constructors \u00b6 Name Summary <init> MutuallyExclusiveGroupException(names: List < String >, context: Context ? = null) Properties \u00b6 Name Summary names val names: List < String > Inherited Properties \u00b6 Name Summary argument var argument: Argument ? The argument that caused this error. This may be set after the error is thrown. context var context: Context ? message open val message: String ? option var option: Option ? The option that caused this error. This may be set after the error is thrown. paramName var paramName: String ? The name of the parameter that caused the error. If possible, this should be set to the actual name used. If not set, it will be inferred from argument or option if either is set. text val text: String ? Extra text to add to the message. Not all subclasses uses this. Functions \u00b6 Name Summary formatMessage open fun formatMessage(): String Inherited Functions \u00b6 Name Summary helpMessage fun helpMessage(): String inferParamName fun inferParamName(): String","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.core/-mutually-exclusive-group-exception/#mutuallyexclusivegroupexception","text":"open class MutuallyExclusiveGroupException : UsageError","title":"MutuallyExclusiveGroupException"},{"location":"api/clikt/com.github.ajalt.clikt.core/-mutually-exclusive-group-exception/#constructors","text":"Name Summary <init> MutuallyExclusiveGroupException(names: List < String >, context: Context ? = null)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-mutually-exclusive-group-exception/#properties","text":"Name Summary names val names: List < String >","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.core/-mutually-exclusive-group-exception/#inherited-properties","text":"Name Summary argument var argument: Argument ? The argument that caused this error. This may be set after the error is thrown. context var context: Context ? message open val message: String ? option var option: Option ? The option that caused this error. This may be set after the error is thrown. paramName var paramName: String ? The name of the parameter that caused the error. If possible, this should be set to the actual name used. If not set, it will be inferred from argument or option if either is set. text val text: String ? Extra text to add to the message. Not all subclasses uses this.","title":"Inherited Properties"},{"location":"api/clikt/com.github.ajalt.clikt.core/-mutually-exclusive-group-exception/#functions","text":"Name Summary formatMessage open fun formatMessage(): String","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-mutually-exclusive-group-exception/#inherited-functions","text":"Name Summary helpMessage fun helpMessage(): String inferParamName fun inferParamName(): String","title":"Inherited Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-mutually-exclusive-group-exception/-init-/","text":"clikt / com.github.ajalt.clikt.core / MutuallyExclusiveGroupException / <init> <init> \u00b6 MutuallyExclusiveGroupException(names: List < String >, context: Context ? = null)","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-mutually-exclusive-group-exception/-init-/#init","text":"MutuallyExclusiveGroupException(names: List < String >, context: Context ? = null)","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-mutually-exclusive-group-exception/format-message/","text":"clikt / com.github.ajalt.clikt.core / MutuallyExclusiveGroupException / formatMessage formatMessage \u00b6 protected open fun formatMessage(): String Overrides UsageError.formatMessage","title":"Format message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-mutually-exclusive-group-exception/format-message/#formatmessage","text":"protected open fun formatMessage(): String Overrides UsageError.formatMessage","title":"formatMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-mutually-exclusive-group-exception/names/","text":"clikt / com.github.ajalt.clikt.core / MutuallyExclusiveGroupException / names names \u00b6 protected val names: List < String >","title":"Names"},{"location":"api/clikt/com.github.ajalt.clikt.core/-mutually-exclusive-group-exception/names/#names","text":"protected val names: List < String >","title":"names"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-run-clikt-command/","text":"clikt / com.github.ajalt.clikt.core / NoRunCliktCommand NoRunCliktCommand \u00b6 open class NoRunCliktCommand : CliktCommand A CliktCommand that has a default implementation of CliktCommand.run that is a no-op. Constructors \u00b6 Name Summary <init> NoRunCliktCommand(help: String = \"\", epilog: String = \"\", name: String ? = null, invokeWithoutSubcommand: Boolean = false, printHelpOnEmptyArgs: Boolean = false, helpTags: Map < String , String > = emptyMap(), autoCompleteEnvvar: String ? = \"\") A CliktCommand that has a default implementation of CliktCommand.run that is a no-op. Inherited Properties \u00b6 Name Summary commandHelp val commandHelp: String commandHelpEpilog val commandHelpEpilog: String commandName val commandName: String context val context: Context This command\u2019s context. helpTags val helpTags: Map < String , String > Extra information about this option to pass to the help formatter. invokeWithoutSubcommand val invokeWithoutSubcommand: Boolean Used when this command has subcommands, and this command is called without a subcommand. If true, run will be called. By default, a PrintHelpMessage is thrown instead. messages val messages: List < String > All messages issued during parsing. printHelpOnEmptyArgs val printHelpOnEmptyArgs: Boolean If this command is called with no values on the command line, print a help message (by throwing PrintHelpMessage ) if this is true, otherwise run normally. Functions \u00b6 Name Summary run open fun run(): Unit Perform actions after parsing is complete and this command is invoked. Inherited Functions \u00b6 Name Summary aliases open fun aliases(): Map < String , List < String >> A list of command aliases. echo fun echo(message: Any ?, trailingNewline: Boolean = true, err: Boolean = false, lineSeparator: String = context.console.lineSeparator): Unit Print the message to the screen. getFormattedHelp open fun getFormattedHelp(): String Return the full help string for this command. getFormattedUsage open fun getFormattedUsage(): String Return the usage string for this command. issueMessage fun issueMessage(message: String ): Unit Add a message to be printed after parsing main fun main(argv: List < String >): Unit Parse the command line and print helpful output if any errors occur. fun main(argv: Array < String >): Unit parse fun parse(argv: List < String >, parentContext: Context ? = null): Unit Parse the command line and throw an exception if parsing fails. fun parse(argv: Array < String >, parentContext: Context ? = null): Unit registerArgument fun registerArgument(argument: Argument ): Unit Register an argument with this command. registeredSubcommandNames fun registeredSubcommandNames(): List < String > The names of all direct children of this command registerOption fun registerOption(option: Option ): Unit Register an option with this command. open fun registerOption(option: GroupableOption ): Unit Register an option with this command or group. registerOptionGroup fun registerOptionGroup(group: ParameterGroup ): Unit Register a group with this command. shortHelp fun shortHelp(): String The help displayed in the commands list when this command is used as a subcommand. Extension Functions \u00b6 Name Summary argument fun CliktCommand .argument(name: String = \"\", help: String = \"\", helpTags: Map < String , String > = emptyMap()): RawArgument Create a property delegate argument. context fun <T : CliktCommand > T .context(block: Context.Builder .() -> Unit ): T Configure this command\u2019s Context . findObject fun <T : Any > CliktCommand .findObject(): ReadOnlyProperty < CliktCommand , T ?> Find the closest object of type T , or null fun <T : Any > CliktCommand .findObject(default: () -> T ): ReadOnlyProperty < CliktCommand , T > Find the closest object of type T , setting context.obj if one is not found. mutuallyExclusiveOptions fun <T : Any > ParameterHolder .mutuallyExclusiveOptions(option1: OptionDelegate < T ?>, option2: OptionDelegate < T ?>, vararg options: OptionDelegate < T ?>, name: String ? = null, help: String ? = null): MutuallyExclusiveOptions < T , T ?> Declare a set of two or more mutually exclusive options. option fun ParameterHolder .option(vararg names: String , help: String = \"\", metavar: String ? = null, hidden: Boolean = false, envvar: String ? = null, envvarSplit: Regex ? = null, helpTags: Map < String , String > = emptyMap()): RawOption Create a property delegate option. requireObject fun <T : Any > CliktCommand .requireObject(): ReadOnlyProperty < CliktCommand , T > Find the closest object of type T , or throw a NullPointerException subcommands fun <T : CliktCommand > T .subcommands(commands: Iterable < CliktCommand >): T fun <T : CliktCommand > T .subcommands(vararg commands: CliktCommand ): T Add the given commands as a subcommand of this command. versionOption fun <T : CliktCommand > T .versionOption(version: String , help: String = \"Show the version and exit\", names: Set < String > = setOf(\"--version\"), message: ( String ) -> String = { \"$commandName version $it\" }): T Add an eager option to this command that, when invoked, prints a version message and exits.","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-run-clikt-command/#noruncliktcommand","text":"open class NoRunCliktCommand : CliktCommand A CliktCommand that has a default implementation of CliktCommand.run that is a no-op.","title":"NoRunCliktCommand"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-run-clikt-command/#constructors","text":"Name Summary <init> NoRunCliktCommand(help: String = \"\", epilog: String = \"\", name: String ? = null, invokeWithoutSubcommand: Boolean = false, printHelpOnEmptyArgs: Boolean = false, helpTags: Map < String , String > = emptyMap(), autoCompleteEnvvar: String ? = \"\") A CliktCommand that has a default implementation of CliktCommand.run that is a no-op.","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-run-clikt-command/#inherited-properties","text":"Name Summary commandHelp val commandHelp: String commandHelpEpilog val commandHelpEpilog: String commandName val commandName: String context val context: Context This command\u2019s context. helpTags val helpTags: Map < String , String > Extra information about this option to pass to the help formatter. invokeWithoutSubcommand val invokeWithoutSubcommand: Boolean Used when this command has subcommands, and this command is called without a subcommand. If true, run will be called. By default, a PrintHelpMessage is thrown instead. messages val messages: List < String > All messages issued during parsing. printHelpOnEmptyArgs val printHelpOnEmptyArgs: Boolean If this command is called with no values on the command line, print a help message (by throwing PrintHelpMessage ) if this is true, otherwise run normally.","title":"Inherited Properties"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-run-clikt-command/#functions","text":"Name Summary run open fun run(): Unit Perform actions after parsing is complete and this command is invoked.","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-run-clikt-command/#inherited-functions","text":"Name Summary aliases open fun aliases(): Map < String , List < String >> A list of command aliases. echo fun echo(message: Any ?, trailingNewline: Boolean = true, err: Boolean = false, lineSeparator: String = context.console.lineSeparator): Unit Print the message to the screen. getFormattedHelp open fun getFormattedHelp(): String Return the full help string for this command. getFormattedUsage open fun getFormattedUsage(): String Return the usage string for this command. issueMessage fun issueMessage(message: String ): Unit Add a message to be printed after parsing main fun main(argv: List < String >): Unit Parse the command line and print helpful output if any errors occur. fun main(argv: Array < String >): Unit parse fun parse(argv: List < String >, parentContext: Context ? = null): Unit Parse the command line and throw an exception if parsing fails. fun parse(argv: Array < String >, parentContext: Context ? = null): Unit registerArgument fun registerArgument(argument: Argument ): Unit Register an argument with this command. registeredSubcommandNames fun registeredSubcommandNames(): List < String > The names of all direct children of this command registerOption fun registerOption(option: Option ): Unit Register an option with this command. open fun registerOption(option: GroupableOption ): Unit Register an option with this command or group. registerOptionGroup fun registerOptionGroup(group: ParameterGroup ): Unit Register a group with this command. shortHelp fun shortHelp(): String The help displayed in the commands list when this command is used as a subcommand.","title":"Inherited Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-run-clikt-command/#extension-functions","text":"Name Summary argument fun CliktCommand .argument(name: String = \"\", help: String = \"\", helpTags: Map < String , String > = emptyMap()): RawArgument Create a property delegate argument. context fun <T : CliktCommand > T .context(block: Context.Builder .() -> Unit ): T Configure this command\u2019s Context . findObject fun <T : Any > CliktCommand .findObject(): ReadOnlyProperty < CliktCommand , T ?> Find the closest object of type T , or null fun <T : Any > CliktCommand .findObject(default: () -> T ): ReadOnlyProperty < CliktCommand , T > Find the closest object of type T , setting context.obj if one is not found. mutuallyExclusiveOptions fun <T : Any > ParameterHolder .mutuallyExclusiveOptions(option1: OptionDelegate < T ?>, option2: OptionDelegate < T ?>, vararg options: OptionDelegate < T ?>, name: String ? = null, help: String ? = null): MutuallyExclusiveOptions < T , T ?> Declare a set of two or more mutually exclusive options. option fun ParameterHolder .option(vararg names: String , help: String = \"\", metavar: String ? = null, hidden: Boolean = false, envvar: String ? = null, envvarSplit: Regex ? = null, helpTags: Map < String , String > = emptyMap()): RawOption Create a property delegate option. requireObject fun <T : Any > CliktCommand .requireObject(): ReadOnlyProperty < CliktCommand , T > Find the closest object of type T , or throw a NullPointerException subcommands fun <T : CliktCommand > T .subcommands(commands: Iterable < CliktCommand >): T fun <T : CliktCommand > T .subcommands(vararg commands: CliktCommand ): T Add the given commands as a subcommand of this command. versionOption fun <T : CliktCommand > T .versionOption(version: String , help: String = \"Show the version and exit\", names: Set < String > = setOf(\"--version\"), message: ( String ) -> String = { \"$commandName version $it\" }): T Add an eager option to this command that, when invoked, prints a version message and exits.","title":"Extension Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-run-clikt-command/-init-/","text":"clikt / com.github.ajalt.clikt.core / NoRunCliktCommand / <init> <init> \u00b6 NoRunCliktCommand(help: String = \"\", epilog: String = \"\", name: String ? = null, invokeWithoutSubcommand: Boolean = false, printHelpOnEmptyArgs: Boolean = false, helpTags: Map < String , String > = emptyMap(), autoCompleteEnvvar: String ? = \"\") A CliktCommand that has a default implementation of CliktCommand.run that is a no-op.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-run-clikt-command/-init-/#init","text":"NoRunCliktCommand(help: String = \"\", epilog: String = \"\", name: String ? = null, invokeWithoutSubcommand: Boolean = false, printHelpOnEmptyArgs: Boolean = false, helpTags: Map < String , String > = emptyMap(), autoCompleteEnvvar: String ? = \"\") A CliktCommand that has a default implementation of CliktCommand.run that is a no-op.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-run-clikt-command/run/","text":"clikt / com.github.ajalt.clikt.core / NoRunCliktCommand / run run \u00b6 open fun run(): Unit Overrides CliktCommand.run Perform actions after parsing is complete and this command is invoked. This is called after command line parsing is complete. If this command is a subcommand, this will only be called if the subcommand is invoked. If one of this command\u2019s subcommands is invoked, this is called before the subcommand\u2019s arguments are parsed.","title":"Run"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-run-clikt-command/run/#run","text":"open fun run(): Unit Overrides CliktCommand.run Perform actions after parsing is complete and this command is invoked. This is called after command line parsing is complete. If this command is a subcommand, this will only be called if the subcommand is invoked. If one of this command\u2019s subcommands is invoked, this is called before the subcommand\u2019s arguments are parsed.","title":"run"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-option/","text":"clikt / com.github.ajalt.clikt.core / NoSuchOption NoSuchOption \u00b6 open class NoSuchOption : UsageError An option was provided that does not exist. Constructors \u00b6 Name Summary <init> NoSuchOption(givenName: String , possibilities: List < String > = emptyList(), context: Context ? = null) An option was provided that does not exist. Properties \u00b6 Name Summary givenName val givenName: String possibilities val possibilities: List < String > Inherited Properties \u00b6 Name Summary argument var argument: Argument ? The argument that caused this error. This may be set after the error is thrown. context var context: Context ? message open val message: String ? option var option: Option ? The option that caused this error. This may be set after the error is thrown. paramName var paramName: String ? The name of the parameter that caused the error. If possible, this should be set to the actual name used. If not set, it will be inferred from argument or option if either is set. text val text: String ? Extra text to add to the message. Not all subclasses uses this. Functions \u00b6 Name Summary formatMessage open fun formatMessage(): String Inherited Functions \u00b6 Name Summary helpMessage fun helpMessage(): String inferParamName fun inferParamName(): String","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-option/#nosuchoption","text":"open class NoSuchOption : UsageError An option was provided that does not exist.","title":"NoSuchOption"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-option/#constructors","text":"Name Summary <init> NoSuchOption(givenName: String , possibilities: List < String > = emptyList(), context: Context ? = null) An option was provided that does not exist.","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-option/#properties","text":"Name Summary givenName val givenName: String possibilities val possibilities: List < String >","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-option/#inherited-properties","text":"Name Summary argument var argument: Argument ? The argument that caused this error. This may be set after the error is thrown. context var context: Context ? message open val message: String ? option var option: Option ? The option that caused this error. This may be set after the error is thrown. paramName var paramName: String ? The name of the parameter that caused the error. If possible, this should be set to the actual name used. If not set, it will be inferred from argument or option if either is set. text val text: String ? Extra text to add to the message. Not all subclasses uses this.","title":"Inherited Properties"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-option/#functions","text":"Name Summary formatMessage open fun formatMessage(): String","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-option/#inherited-functions","text":"Name Summary helpMessage fun helpMessage(): String inferParamName fun inferParamName(): String","title":"Inherited Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-option/-init-/","text":"clikt / com.github.ajalt.clikt.core / NoSuchOption / <init> <init> \u00b6 NoSuchOption(givenName: String , possibilities: List < String > = emptyList(), context: Context ? = null) An option was provided that does not exist.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-option/-init-/#init","text":"NoSuchOption(givenName: String , possibilities: List < String > = emptyList(), context: Context ? = null) An option was provided that does not exist.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-option/format-message/","text":"clikt / com.github.ajalt.clikt.core / NoSuchOption / formatMessage formatMessage \u00b6 protected open fun formatMessage(): String Overrides UsageError.formatMessage","title":"Format message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-option/format-message/#formatmessage","text":"protected open fun formatMessage(): String Overrides UsageError.formatMessage","title":"formatMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-option/given-name/","text":"clikt / com.github.ajalt.clikt.core / NoSuchOption / givenName givenName \u00b6 protected val givenName: String","title":"Given name"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-option/given-name/#givenname","text":"protected val givenName: String","title":"givenName"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-option/possibilities/","text":"clikt / com.github.ajalt.clikt.core / NoSuchOption / possibilities possibilities \u00b6 protected val possibilities: List < String >","title":"Possibilities"},{"location":"api/clikt/com.github.ajalt.clikt.core/-no-such-option/possibilities/#possibilities","text":"protected val possibilities: List < String >","title":"possibilities"},{"location":"api/clikt/com.github.ajalt.clikt.core/-parameter-holder/","text":"clikt / com.github.ajalt.clikt.core / ParameterHolder ParameterHolder \u00b6 interface ParameterHolder Functions \u00b6 Name Summary registerOption abstract fun registerOption(option: GroupableOption ): Unit Register an option with this command or group. Extension Functions \u00b6 Name Summary mutuallyExclusiveOptions fun <T : Any > ParameterHolder .mutuallyExclusiveOptions(option1: OptionDelegate < T ?>, option2: OptionDelegate < T ?>, vararg options: OptionDelegate < T ?>, name: String ? = null, help: String ? = null): MutuallyExclusiveOptions < T , T ?> Declare a set of two or more mutually exclusive options. option fun ParameterHolder .option(vararg names: String , help: String = \"\", metavar: String ? = null, hidden: Boolean = false, envvar: String ? = null, envvarSplit: Regex ? = null, helpTags: Map < String , String > = emptyMap()): RawOption Create a property delegate option. Inheritors \u00b6 Name Summary CliktCommand abstract class CliktCommand : ParameterHolder The CliktCommand is the core of command line interfaces in Clikt. OptionGroup open class OptionGroup : ParameterGroup , ParameterHolder A group of options that can be shown together in help output, or restricted to be cooccurring .","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.core/-parameter-holder/#parameterholder","text":"interface ParameterHolder","title":"ParameterHolder"},{"location":"api/clikt/com.github.ajalt.clikt.core/-parameter-holder/#functions","text":"Name Summary registerOption abstract fun registerOption(option: GroupableOption ): Unit Register an option with this command or group.","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-parameter-holder/#extension-functions","text":"Name Summary mutuallyExclusiveOptions fun <T : Any > ParameterHolder .mutuallyExclusiveOptions(option1: OptionDelegate < T ?>, option2: OptionDelegate < T ?>, vararg options: OptionDelegate < T ?>, name: String ? = null, help: String ? = null): MutuallyExclusiveOptions < T , T ?> Declare a set of two or more mutually exclusive options. option fun ParameterHolder .option(vararg names: String , help: String = \"\", metavar: String ? = null, hidden: Boolean = false, envvar: String ? = null, envvarSplit: Regex ? = null, helpTags: Map < String , String > = emptyMap()): RawOption Create a property delegate option.","title":"Extension Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-parameter-holder/#inheritors","text":"Name Summary CliktCommand abstract class CliktCommand : ParameterHolder The CliktCommand is the core of command line interfaces in Clikt. OptionGroup open class OptionGroup : ParameterGroup , ParameterHolder A group of options that can be shown together in help output, or restricted to be cooccurring .","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-parameter-holder/register-option/","text":"clikt / com.github.ajalt.clikt.core / ParameterHolder / registerOption registerOption \u00b6 abstract fun registerOption(option: GroupableOption ): Unit Register an option with this command or group. This is called automatically for the built in options, but you need to call this if you want to add a custom option.","title":"Register option"},{"location":"api/clikt/com.github.ajalt.clikt.core/-parameter-holder/register-option/#registeroption","text":"abstract fun registerOption(option: GroupableOption ): Unit Register an option with this command or group. This is called automatically for the built in options, but you need to call this if you want to add a custom option.","title":"registerOption"},{"location":"api/clikt/com.github.ajalt.clikt.core/-parameter-holder-dsl/","text":"clikt / com.github.ajalt.clikt.core / ParameterHolderDsl ParameterHolderDsl \u00b6 @DslMarker annotation class ParameterHolderDsl Constructors \u00b6 Name Summary <init> ParameterHolderDsl()","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.core/-parameter-holder-dsl/#parameterholderdsl","text":"@DslMarker annotation class ParameterHolderDsl","title":"ParameterHolderDsl"},{"location":"api/clikt/com.github.ajalt.clikt.core/-parameter-holder-dsl/#constructors","text":"Name Summary <init> ParameterHolderDsl()","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-parameter-holder-dsl/-init-/","text":"clikt / com.github.ajalt.clikt.core / ParameterHolderDsl / <init> <init> \u00b6 ParameterHolderDsl()","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-parameter-holder-dsl/-init-/#init","text":"ParameterHolderDsl()","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-help-message/","text":"clikt / com.github.ajalt.clikt.core / PrintHelpMessage PrintHelpMessage \u00b6 class PrintHelpMessage : CliktError An exception that indicates that the command\u2019s help should be printed. Execution should be immediately halted with an error. Constructors \u00b6 Name Summary <init> PrintHelpMessage(command: CliktCommand ) An exception that indicates that the command\u2019s help should be printed. Properties \u00b6 Name Summary command val command: CliktCommand","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-help-message/#printhelpmessage","text":"class PrintHelpMessage : CliktError An exception that indicates that the command\u2019s help should be printed. Execution should be immediately halted with an error.","title":"PrintHelpMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-help-message/#constructors","text":"Name Summary <init> PrintHelpMessage(command: CliktCommand ) An exception that indicates that the command\u2019s help should be printed.","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-help-message/#properties","text":"Name Summary command val command: CliktCommand","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-help-message/-init-/","text":"clikt / com.github.ajalt.clikt.core / PrintHelpMessage / <init> <init> \u00b6 PrintHelpMessage(command: CliktCommand ) An exception that indicates that the command\u2019s help should be printed. Execution should be immediately halted with an error.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-help-message/-init-/#init","text":"PrintHelpMessage(command: CliktCommand ) An exception that indicates that the command\u2019s help should be printed. Execution should be immediately halted with an error.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-help-message/command/","text":"clikt / com.github.ajalt.clikt.core / PrintHelpMessage / command command \u00b6 val command: CliktCommand","title":"Command"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-help-message/command/#command","text":"val command: CliktCommand","title":"command"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-message/","text":"clikt / com.github.ajalt.clikt.core / PrintMessage PrintMessage \u00b6 class PrintMessage : CliktError An exception that indicates that a message should be printed. Execution should be immediately halted without an error. Constructors \u00b6 Name Summary <init> PrintMessage(message: String ) An exception that indicates that a message should be printed.","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-message/#printmessage","text":"class PrintMessage : CliktError An exception that indicates that a message should be printed. Execution should be immediately halted without an error.","title":"PrintMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-message/#constructors","text":"Name Summary <init> PrintMessage(message: String ) An exception that indicates that a message should be printed.","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-message/-init-/","text":"clikt / com.github.ajalt.clikt.core / PrintMessage / <init> <init> \u00b6 PrintMessage(message: String ) An exception that indicates that a message should be printed. Execution should be immediately halted without an error.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-print-message/-init-/#init","text":"PrintMessage(message: String ) An exception that indicates that a message should be printed. Execution should be immediately halted without an error.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/","text":"clikt / com.github.ajalt.clikt.core / UsageError UsageError \u00b6 open class UsageError : CliktError An internal exception that signals a usage error. The option and argument properties are used in message formatting, and can be set after the exception is created. If this is thrown inside a call to convert , the argument or option value will be set automatically Constructors \u00b6 Name Summary <init> UsageError(text: String , paramName: String ? = null, context: Context ? = null) UsageError(text: String , argument: Argument , context: Context ? = null) UsageError(text: String , option: Option , context: Context ? = null) Properties \u00b6 Name Summary argument var argument: Argument ? The argument that caused this error. This may be set after the error is thrown. context var context: Context ? message open val message: String ? option var option: Option ? The option that caused this error. This may be set after the error is thrown. paramName var paramName: String ? The name of the parameter that caused the error. If possible, this should be set to the actual name used. If not set, it will be inferred from argument or option if either is set. text val text: String ? Extra text to add to the message. Not all subclasses uses this. Functions \u00b6 Name Summary formatMessage open fun formatMessage(): String helpMessage fun helpMessage(): String inferParamName fun inferParamName(): String Inheritors \u00b6 Name Summary BadParameterValue open class BadParameterValue : UsageError A parameter was given the correct number of values, but of invalid format or type. IncorrectArgumentValueCount open class IncorrectArgumentValueCount : UsageError An argument was supplied but the number of values supplied was incorrect. IncorrectOptionValueCount open class IncorrectOptionValueCount : UsageError An option was supplied but the number of values supplied to the option was incorrect. MissingParameter open class MissingParameter : UsageError A required parameter was not provided MutuallyExclusiveGroupException open class MutuallyExclusiveGroupException : UsageError NoSuchOption open class NoSuchOption : UsageError An option was provided that does not exist.","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/#usageerror","text":"open class UsageError : CliktError An internal exception that signals a usage error. The option and argument properties are used in message formatting, and can be set after the exception is created. If this is thrown inside a call to convert , the argument or option value will be set automatically","title":"UsageError"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/#constructors","text":"Name Summary <init> UsageError(text: String , paramName: String ? = null, context: Context ? = null) UsageError(text: String , argument: Argument , context: Context ? = null) UsageError(text: String , option: Option , context: Context ? = null)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/#properties","text":"Name Summary argument var argument: Argument ? The argument that caused this error. This may be set after the error is thrown. context var context: Context ? message open val message: String ? option var option: Option ? The option that caused this error. This may be set after the error is thrown. paramName var paramName: String ? The name of the parameter that caused the error. If possible, this should be set to the actual name used. If not set, it will be inferred from argument or option if either is set. text val text: String ? Extra text to add to the message. Not all subclasses uses this.","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/#functions","text":"Name Summary formatMessage open fun formatMessage(): String helpMessage fun helpMessage(): String inferParamName fun inferParamName(): String","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/#inheritors","text":"Name Summary BadParameterValue open class BadParameterValue : UsageError A parameter was given the correct number of values, but of invalid format or type. IncorrectArgumentValueCount open class IncorrectArgumentValueCount : UsageError An argument was supplied but the number of values supplied was incorrect. IncorrectOptionValueCount open class IncorrectOptionValueCount : UsageError An option was supplied but the number of values supplied to the option was incorrect. MissingParameter open class MissingParameter : UsageError A required parameter was not provided MutuallyExclusiveGroupException open class MutuallyExclusiveGroupException : UsageError NoSuchOption open class NoSuchOption : UsageError An option was provided that does not exist.","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/-init-/","text":"clikt / com.github.ajalt.clikt.core / UsageError / <init> <init> \u00b6 UsageError(text: String , paramName: String ? = null, context: Context ? = null) UsageError(text: String , argument: Argument , context: Context ? = null) UsageError(text: String , option: Option , context: Context ? = null)","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/-init-/#init","text":"UsageError(text: String , paramName: String ? = null, context: Context ? = null) UsageError(text: String , argument: Argument , context: Context ? = null) UsageError(text: String , option: Option , context: Context ? = null)","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/argument/","text":"clikt / com.github.ajalt.clikt.core / UsageError / argument argument \u00b6 var argument: Argument ? The argument that caused this error. This may be set after the error is thrown. Property \u00b6 argument - The argument that caused this error. This may be set after the error is thrown.","title":"Argument"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/argument/#argument","text":"var argument: Argument ? The argument that caused this error. This may be set after the error is thrown.","title":"argument"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/argument/#property","text":"argument - The argument that caused this error. This may be set after the error is thrown.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/context/","text":"clikt / com.github.ajalt.clikt.core / UsageError / context context \u00b6 var context: Context ?","title":"Context"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/context/#context","text":"var context: Context ?","title":"context"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/format-message/","text":"clikt / com.github.ajalt.clikt.core / UsageError / formatMessage formatMessage \u00b6 protected open fun formatMessage(): String","title":"Format message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/format-message/#formatmessage","text":"protected open fun formatMessage(): String","title":"formatMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/help-message/","text":"clikt / com.github.ajalt.clikt.core / UsageError / helpMessage helpMessage \u00b6 fun helpMessage(): String","title":"Help message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/help-message/#helpmessage","text":"fun helpMessage(): String","title":"helpMessage"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/infer-param-name/","text":"clikt / com.github.ajalt.clikt.core / UsageError / inferParamName inferParamName \u00b6 protected fun inferParamName(): String","title":"Infer param name"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/infer-param-name/#inferparamname","text":"protected fun inferParamName(): String","title":"inferParamName"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/message/","text":"clikt / com.github.ajalt.clikt.core / UsageError / message message \u00b6 open val message: String ?","title":"Message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/message/#message","text":"open val message: String ?","title":"message"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/option/","text":"clikt / com.github.ajalt.clikt.core / UsageError / option option \u00b6 var option: Option ? The option that caused this error. This may be set after the error is thrown. Property \u00b6 option - The option that caused this error. This may be set after the error is thrown.","title":"Option"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/option/#option","text":"var option: Option ? The option that caused this error. This may be set after the error is thrown.","title":"option"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/option/#property","text":"option - The option that caused this error. This may be set after the error is thrown.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/param-name/","text":"clikt / com.github.ajalt.clikt.core / UsageError / paramName paramName \u00b6 var paramName: String ? The name of the parameter that caused the error. If possible, this should be set to the actual name used. If not set, it will be inferred from argument or option if either is set. Property \u00b6 paramName - The name of the parameter that caused the error. If possible, this should be set to the actual name used. If not set, it will be inferred from argument or option if either is set.","title":"Param name"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/param-name/#paramname","text":"var paramName: String ? The name of the parameter that caused the error. If possible, this should be set to the actual name used. If not set, it will be inferred from argument or option if either is set.","title":"paramName"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/param-name/#property","text":"paramName - The name of the parameter that caused the error. If possible, this should be set to the actual name used. If not set, it will be inferred from argument or option if either is set.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/text/","text":"clikt / com.github.ajalt.clikt.core / UsageError / text text \u00b6 val text: String ? Extra text to add to the message. Not all subclasses uses this. Property \u00b6 text - Extra text to add to the message. Not all subclasses uses this.","title":"Text"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/text/#text","text":"val text: String ? Extra text to add to the message. Not all subclasses uses this.","title":"text"},{"location":"api/clikt/com.github.ajalt.clikt.core/-usage-error/text/#property","text":"text - Extra text to add to the message. Not all subclasses uses this.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.output/","text":"clikt / com.github.ajalt.clikt.output Package com.github.ajalt.clikt.output \u00b6 Types \u00b6 Name Summary CliktConsole interface CliktConsole An object that is used by commands and parameters to show text to the user and read input. CliktHelpFormatter open class CliktHelpFormatter : HelpFormatter HelpFormatter interface HelpFormatter Creates help and usage strings for a command. InteractiveCliktConsole class InteractiveCliktConsole : CliktConsole NonInteractiveCliktConsole class NonInteractiveCliktConsole : CliktConsole TermUi object TermUi Functions \u00b6 Name Summary defaultCliktConsole fun defaultCliktConsole(): CliktConsole","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.output/#package-comgithubajaltcliktoutput","text":"","title":"Package com.github.ajalt.clikt.output"},{"location":"api/clikt/com.github.ajalt.clikt.output/#types","text":"Name Summary CliktConsole interface CliktConsole An object that is used by commands and parameters to show text to the user and read input. CliktHelpFormatter open class CliktHelpFormatter : HelpFormatter HelpFormatter interface HelpFormatter Creates help and usage strings for a command. InteractiveCliktConsole class InteractiveCliktConsole : CliktConsole NonInteractiveCliktConsole class NonInteractiveCliktConsole : CliktConsole TermUi object TermUi","title":"Types"},{"location":"api/clikt/com.github.ajalt.clikt.output/#functions","text":"Name Summary defaultCliktConsole fun defaultCliktConsole(): CliktConsole","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.output/default-clikt-console/","text":"clikt / com.github.ajalt.clikt.output / defaultCliktConsole defaultCliktConsole \u00b6 fun defaultCliktConsole(): CliktConsole","title":"Default clikt console"},{"location":"api/clikt/com.github.ajalt.clikt.output/default-clikt-console/#defaultcliktconsole","text":"fun defaultCliktConsole(): CliktConsole","title":"defaultCliktConsole"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-console/","text":"clikt / com.github.ajalt.clikt.output / CliktConsole CliktConsole \u00b6 interface CliktConsole An object that is used by commands and parameters to show text to the user and read input. By default, stdin and stdout are used, but you can provide an implementation of this interface to Context.console to customize the behavior. Properties \u00b6 Name Summary lineSeparator abstract val lineSeparator: String The line separator to use. (Either \u201c\\n\u201d or \u201c\\r\\n\u201d) Functions \u00b6 Name Summary print abstract fun print(text: String , error: Boolean ): Unit Show some text to the user. promptForLine abstract fun promptForLine(prompt: String , hideInput: Boolean ): String ? Show the prompt to the user, and return a line of their response. Inheritors \u00b6 Name Summary InteractiveCliktConsole class InteractiveCliktConsole : CliktConsole NonInteractiveCliktConsole class NonInteractiveCliktConsole : CliktConsole","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-console/#cliktconsole","text":"interface CliktConsole An object that is used by commands and parameters to show text to the user and read input. By default, stdin and stdout are used, but you can provide an implementation of this interface to Context.console to customize the behavior.","title":"CliktConsole"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-console/#properties","text":"Name Summary lineSeparator abstract val lineSeparator: String The line separator to use. (Either \u201c\\n\u201d or \u201c\\r\\n\u201d)","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-console/#functions","text":"Name Summary print abstract fun print(text: String , error: Boolean ): Unit Show some text to the user. promptForLine abstract fun promptForLine(prompt: String , hideInput: Boolean ): String ? Show the prompt to the user, and return a line of their response.","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-console/#inheritors","text":"Name Summary InteractiveCliktConsole class InteractiveCliktConsole : CliktConsole NonInteractiveCliktConsole class NonInteractiveCliktConsole : CliktConsole","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-console/line-separator/","text":"clikt / com.github.ajalt.clikt.output / CliktConsole / lineSeparator lineSeparator \u00b6 abstract val lineSeparator: String The line separator to use. (Either \u201c\\n\u201d or \u201c\\r\\n\u201d)","title":"Line separator"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-console/line-separator/#lineseparator","text":"abstract val lineSeparator: String The line separator to use. (Either \u201c\\n\u201d or \u201c\\r\\n\u201d)","title":"lineSeparator"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-console/print/","text":"clikt / com.github.ajalt.clikt.output / CliktConsole / print print \u00b6 abstract fun print(text: String , error: Boolean ): Unit Show some text to the user. Parameters \u00b6 text - The text to display. May or may not contain a tailing newline. error - If true, the text is an error message, and should be printed in an alternate stream or format, if applicable.","title":"Print"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-console/print/#print","text":"abstract fun print(text: String , error: Boolean ): Unit Show some text to the user.","title":"print"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-console/print/#parameters","text":"text - The text to display. May or may not contain a tailing newline. error - If true, the text is an error message, and should be printed in an alternate stream or format, if applicable.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-console/prompt-for-line/","text":"clikt / com.github.ajalt.clikt.output / CliktConsole / promptForLine promptForLine \u00b6 abstract fun promptForLine(prompt: String , hideInput: Boolean ): String ? Show the prompt to the user, and return a line of their response. This function will block until a line of input has been read. Parameters \u00b6 prompt - The text to display to the user hideInput - If true, the user\u2019s input should not be echoed to the screen. If the current console does not support hidden input, this argument may be ignored.. Return A line of user input, or null if an error occurred.","title":"Prompt for line"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-console/prompt-for-line/#promptforline","text":"abstract fun promptForLine(prompt: String , hideInput: Boolean ): String ? Show the prompt to the user, and return a line of their response. This function will block until a line of input has been read.","title":"promptForLine"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-console/prompt-for-line/#parameters","text":"prompt - The text to display to the user hideInput - If true, the user\u2019s input should not be echoed to the screen. If the current console does not support hidden input, this argument may be ignored.. Return A line of user input, or null if an error occurred.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter CliktHelpFormatter \u00b6 open class CliktHelpFormatter : HelpFormatter Types \u00b6 Name Summary DefinitionRow data class DefinitionRow Constructors \u00b6 Name Summary <init> CliktHelpFormatter(indent: String = \" \", width: Int ? = null, maxWidth: Int = 78, maxColWidth: Int ? = null, usageTitle: String = \"Usage:\", optionsTitle: String = \"Options:\", argumentsTitle: String = \"Arguments:\", commandsTitle: String = \"Commands:\", optionsMetavar: String = \"[OPTIONS]\", commandMetavar: String = \"COMMAND [ARGS]...\", colSpacing: Int = 2, requiredOptionMarker: String ? = null, showDefaultValues: Boolean = false, showRequiredTag: Boolean = false) Properties \u00b6 Name Summary argumentsTitle val argumentsTitle: String colSpacing val colSpacing: Int commandMetavar val commandMetavar: String commandsTitle val commandsTitle: String graphemeLength val String .graphemeLength: Int The number of visible characters in a string indent val indent: String maxColWidth val maxColWidth: Int optionsMetavar val optionsMetavar: String optionsTitle val optionsTitle: String requiredOptionMarker val requiredOptionMarker: String ? showDefaultValues val showDefaultValues: Boolean showRequiredTag val showRequiredTag: Boolean usageTitle val usageTitle: String width val width: Int Functions \u00b6 Name Summary addArguments open fun StringBuilder .addArguments(parameters: List < HelpFormatter.ParameterHelp >): Unit addCommands open fun StringBuilder .addCommands(parameters: List < HelpFormatter.ParameterHelp >): Unit addEpilog open fun StringBuilder .addEpilog(epilog: String ): Unit addOptionGroup open fun StringBuilder .addOptionGroup(title: String , help: String ?, parameters: List < HelpFormatter.ParameterHelp.Option >): Unit addOptions open fun StringBuilder .addOptions(parameters: List < HelpFormatter.ParameterHelp >): Unit addProlog open fun StringBuilder .addProlog(prolog: String ): Unit addUsage open fun StringBuilder .addUsage(parameters: List < HelpFormatter.ParameterHelp >, programName: String ): Unit appendDefinitionList fun StringBuilder .appendDefinitionList(rows: List < CliktHelpFormatter.DefinitionRow >): Unit formatHelp open fun formatHelp(prolog: String , epilog: String , parameters: List < HelpFormatter.ParameterHelp >, programName: String ): String Create the full help string. formatUsage open fun formatUsage(parameters: List < HelpFormatter.ParameterHelp >, programName: String ): String Create the one-line usage information for a command. joinNamesForOption open fun joinNamesForOption(names: Set < String >): String optionMetavar open fun optionMetavar(option: HelpFormatter.ParameterHelp.Option ): String renderArgumentName open fun renderArgumentName(name: String ): String renderHelpText open fun renderHelpText(help: String , tags: Map < String , String >): String renderOptionName open fun renderOptionName(name: String ): String renderSectionTitle open fun renderSectionTitle(title: String ): String renderSubcommandName open fun renderSubcommandName(name: String ): String renderTag open fun renderTag(tag: String , value: String ): String shouldShowTag open fun shouldShowTag(tag: String , value: String ): Boolean","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/#clikthelpformatter","text":"open class CliktHelpFormatter : HelpFormatter","title":"CliktHelpFormatter"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/#types","text":"Name Summary DefinitionRow data class DefinitionRow","title":"Types"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/#constructors","text":"Name Summary <init> CliktHelpFormatter(indent: String = \" \", width: Int ? = null, maxWidth: Int = 78, maxColWidth: Int ? = null, usageTitle: String = \"Usage:\", optionsTitle: String = \"Options:\", argumentsTitle: String = \"Arguments:\", commandsTitle: String = \"Commands:\", optionsMetavar: String = \"[OPTIONS]\", commandMetavar: String = \"COMMAND [ARGS]...\", colSpacing: Int = 2, requiredOptionMarker: String ? = null, showDefaultValues: Boolean = false, showRequiredTag: Boolean = false)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/#properties","text":"Name Summary argumentsTitle val argumentsTitle: String colSpacing val colSpacing: Int commandMetavar val commandMetavar: String commandsTitle val commandsTitle: String graphemeLength val String .graphemeLength: Int The number of visible characters in a string indent val indent: String maxColWidth val maxColWidth: Int optionsMetavar val optionsMetavar: String optionsTitle val optionsTitle: String requiredOptionMarker val requiredOptionMarker: String ? showDefaultValues val showDefaultValues: Boolean showRequiredTag val showRequiredTag: Boolean usageTitle val usageTitle: String width val width: Int","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/#functions","text":"Name Summary addArguments open fun StringBuilder .addArguments(parameters: List < HelpFormatter.ParameterHelp >): Unit addCommands open fun StringBuilder .addCommands(parameters: List < HelpFormatter.ParameterHelp >): Unit addEpilog open fun StringBuilder .addEpilog(epilog: String ): Unit addOptionGroup open fun StringBuilder .addOptionGroup(title: String , help: String ?, parameters: List < HelpFormatter.ParameterHelp.Option >): Unit addOptions open fun StringBuilder .addOptions(parameters: List < HelpFormatter.ParameterHelp >): Unit addProlog open fun StringBuilder .addProlog(prolog: String ): Unit addUsage open fun StringBuilder .addUsage(parameters: List < HelpFormatter.ParameterHelp >, programName: String ): Unit appendDefinitionList fun StringBuilder .appendDefinitionList(rows: List < CliktHelpFormatter.DefinitionRow >): Unit formatHelp open fun formatHelp(prolog: String , epilog: String , parameters: List < HelpFormatter.ParameterHelp >, programName: String ): String Create the full help string. formatUsage open fun formatUsage(parameters: List < HelpFormatter.ParameterHelp >, programName: String ): String Create the one-line usage information for a command. joinNamesForOption open fun joinNamesForOption(names: Set < String >): String optionMetavar open fun optionMetavar(option: HelpFormatter.ParameterHelp.Option ): String renderArgumentName open fun renderArgumentName(name: String ): String renderHelpText open fun renderHelpText(help: String , tags: Map < String , String >): String renderOptionName open fun renderOptionName(name: String ): String renderSectionTitle open fun renderSectionTitle(title: String ): String renderSubcommandName open fun renderSubcommandName(name: String ): String renderTag open fun renderTag(tag: String , value: String ): String shouldShowTag open fun shouldShowTag(tag: String , value: String ): Boolean","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/-init-/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / <init> <init> \u00b6 CliktHelpFormatter(indent: String = \" \", width: Int ? = null, maxWidth: Int = 78, maxColWidth: Int ? = null, usageTitle: String = \"Usage:\", optionsTitle: String = \"Options:\", argumentsTitle: String = \"Arguments:\", commandsTitle: String = \"Commands:\", optionsMetavar: String = \"[OPTIONS]\", commandMetavar: String = \"COMMAND [ARGS]...\", colSpacing: Int = 2, requiredOptionMarker: String ? = null, showDefaultValues: Boolean = false, showRequiredTag: Boolean = false)","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/-init-/#init","text":"CliktHelpFormatter(indent: String = \" \", width: Int ? = null, maxWidth: Int = 78, maxColWidth: Int ? = null, usageTitle: String = \"Usage:\", optionsTitle: String = \"Options:\", argumentsTitle: String = \"Arguments:\", commandsTitle: String = \"Commands:\", optionsMetavar: String = \"[OPTIONS]\", commandMetavar: String = \"COMMAND [ARGS]...\", colSpacing: Int = 2, requiredOptionMarker: String ? = null, showDefaultValues: Boolean = false, showRequiredTag: Boolean = false)","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/add-arguments/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / addArguments addArguments \u00b6 protected open fun StringBuilder .addArguments(parameters: List < HelpFormatter.ParameterHelp >): Unit","title":"Add arguments"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/add-arguments/#addarguments","text":"protected open fun StringBuilder .addArguments(parameters: List < HelpFormatter.ParameterHelp >): Unit","title":"addArguments"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/add-commands/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / addCommands addCommands \u00b6 protected open fun StringBuilder .addCommands(parameters: List < HelpFormatter.ParameterHelp >): Unit","title":"Add commands"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/add-commands/#addcommands","text":"protected open fun StringBuilder .addCommands(parameters: List < HelpFormatter.ParameterHelp >): Unit","title":"addCommands"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/add-epilog/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / addEpilog addEpilog \u00b6 protected open fun StringBuilder .addEpilog(epilog: String ): Unit","title":"Add epilog"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/add-epilog/#addepilog","text":"protected open fun StringBuilder .addEpilog(epilog: String ): Unit","title":"addEpilog"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/add-option-group/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / addOptionGroup addOptionGroup \u00b6 protected open fun StringBuilder .addOptionGroup(title: String , help: String ?, parameters: List < HelpFormatter.ParameterHelp.Option >): Unit","title":"Add option group"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/add-option-group/#addoptiongroup","text":"protected open fun StringBuilder .addOptionGroup(title: String , help: String ?, parameters: List < HelpFormatter.ParameterHelp.Option >): Unit","title":"addOptionGroup"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/add-options/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / addOptions addOptions \u00b6 protected open fun StringBuilder .addOptions(parameters: List < HelpFormatter.ParameterHelp >): Unit","title":"Add options"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/add-options/#addoptions","text":"protected open fun StringBuilder .addOptions(parameters: List < HelpFormatter.ParameterHelp >): Unit","title":"addOptions"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/add-prolog/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / addProlog addProlog \u00b6 protected open fun StringBuilder .addProlog(prolog: String ): Unit","title":"Add prolog"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/add-prolog/#addprolog","text":"protected open fun StringBuilder .addProlog(prolog: String ): Unit","title":"addProlog"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/add-usage/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / addUsage addUsage \u00b6 protected open fun StringBuilder .addUsage(parameters: List < HelpFormatter.ParameterHelp >, programName: String ): Unit","title":"Add usage"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/add-usage/#addusage","text":"protected open fun StringBuilder .addUsage(parameters: List < HelpFormatter.ParameterHelp >, programName: String ): Unit","title":"addUsage"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/append-definition-list/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / appendDefinitionList appendDefinitionList \u00b6 protected fun StringBuilder .appendDefinitionList(rows: List < CliktHelpFormatter.DefinitionRow >): Unit","title":"Append definition list"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/append-definition-list/#appenddefinitionlist","text":"protected fun StringBuilder .appendDefinitionList(rows: List < CliktHelpFormatter.DefinitionRow >): Unit","title":"appendDefinitionList"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/arguments-title/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / argumentsTitle argumentsTitle \u00b6 protected val argumentsTitle: String","title":"Arguments title"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/arguments-title/#argumentstitle","text":"protected val argumentsTitle: String","title":"argumentsTitle"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/col-spacing/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / colSpacing colSpacing \u00b6 protected val colSpacing: Int","title":"Col spacing"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/col-spacing/#colspacing","text":"protected val colSpacing: Int","title":"colSpacing"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/command-metavar/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / commandMetavar commandMetavar \u00b6 protected val commandMetavar: String","title":"Command metavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/command-metavar/#commandmetavar","text":"protected val commandMetavar: String","title":"commandMetavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/commands-title/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / commandsTitle commandsTitle \u00b6 protected val commandsTitle: String","title":"Commands title"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/commands-title/#commandstitle","text":"protected val commandsTitle: String","title":"commandsTitle"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/format-help/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / formatHelp formatHelp \u00b6 open fun formatHelp(prolog: String , epilog: String , parameters: List < HelpFormatter.ParameterHelp >, programName: String ): String Overrides HelpFormatter.formatHelp Create the full help string. Parameters \u00b6 prolog - Text to display before any parameter information epilog - Text to display after any parameter information parameters - Information about the command\u2019s parameters programName - The name of the currently executing program","title":"Format help"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/format-help/#formathelp","text":"open fun formatHelp(prolog: String , epilog: String , parameters: List < HelpFormatter.ParameterHelp >, programName: String ): String Overrides HelpFormatter.formatHelp Create the full help string.","title":"formatHelp"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/format-help/#parameters","text":"prolog - Text to display before any parameter information epilog - Text to display after any parameter information parameters - Information about the command\u2019s parameters programName - The name of the currently executing program","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/format-usage/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / formatUsage formatUsage \u00b6 open fun formatUsage(parameters: List < HelpFormatter.ParameterHelp >, programName: String ): String Overrides HelpFormatter.formatUsage Create the one-line usage information for a command. This is usually displayed when incorrect input is encountered, and as the first line of the full help.","title":"Format usage"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/format-usage/#formatusage","text":"open fun formatUsage(parameters: List < HelpFormatter.ParameterHelp >, programName: String ): String Overrides HelpFormatter.formatUsage Create the one-line usage information for a command. This is usually displayed when incorrect input is encountered, and as the first line of the full help.","title":"formatUsage"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/grapheme-length/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / graphemeLength graphemeLength \u00b6 protected val String .graphemeLength: Int The number of visible characters in a string","title":"Grapheme length"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/grapheme-length/#graphemelength","text":"protected val String .graphemeLength: Int The number of visible characters in a string","title":"graphemeLength"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/indent/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / indent indent \u00b6 protected val indent: String","title":"Indent"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/indent/#indent","text":"protected val indent: String","title":"indent"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/join-names-for-option/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / joinNamesForOption joinNamesForOption \u00b6 protected open fun joinNamesForOption(names: Set < String >): String","title":"Join names for option"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/join-names-for-option/#joinnamesforoption","text":"protected open fun joinNamesForOption(names: Set < String >): String","title":"joinNamesForOption"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/max-col-width/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / maxColWidth maxColWidth \u00b6 protected val maxColWidth: Int","title":"Max col width"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/max-col-width/#maxcolwidth","text":"protected val maxColWidth: Int","title":"maxColWidth"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/option-metavar/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / optionMetavar optionMetavar \u00b6 protected open fun optionMetavar(option: HelpFormatter.ParameterHelp.Option ): String","title":"Option metavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/option-metavar/#optionmetavar","text":"protected open fun optionMetavar(option: HelpFormatter.ParameterHelp.Option ): String","title":"optionMetavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/options-metavar/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / optionsMetavar optionsMetavar \u00b6 protected val optionsMetavar: String","title":"Options metavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/options-metavar/#optionsmetavar","text":"protected val optionsMetavar: String","title":"optionsMetavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/options-title/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / optionsTitle optionsTitle \u00b6 protected val optionsTitle: String","title":"Options title"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/options-title/#optionstitle","text":"protected val optionsTitle: String","title":"optionsTitle"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/render-argument-name/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / renderArgumentName renderArgumentName \u00b6 protected open fun renderArgumentName(name: String ): String","title":"Render argument name"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/render-argument-name/#renderargumentname","text":"protected open fun renderArgumentName(name: String ): String","title":"renderArgumentName"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/render-help-text/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / renderHelpText renderHelpText \u00b6 protected open fun renderHelpText(help: String , tags: Map < String , String >): String","title":"Render help text"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/render-help-text/#renderhelptext","text":"protected open fun renderHelpText(help: String , tags: Map < String , String >): String","title":"renderHelpText"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/render-option-name/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / renderOptionName renderOptionName \u00b6 protected open fun renderOptionName(name: String ): String","title":"Render option name"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/render-option-name/#renderoptionname","text":"protected open fun renderOptionName(name: String ): String","title":"renderOptionName"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/render-section-title/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / renderSectionTitle renderSectionTitle \u00b6 protected open fun renderSectionTitle(title: String ): String","title":"Render section title"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/render-section-title/#rendersectiontitle","text":"protected open fun renderSectionTitle(title: String ): String","title":"renderSectionTitle"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/render-subcommand-name/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / renderSubcommandName renderSubcommandName \u00b6 protected open fun renderSubcommandName(name: String ): String","title":"Render subcommand name"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/render-subcommand-name/#rendersubcommandname","text":"protected open fun renderSubcommandName(name: String ): String","title":"renderSubcommandName"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/render-tag/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / renderTag renderTag \u00b6 protected open fun renderTag(tag: String , value: String ): String","title":"Render tag"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/render-tag/#rendertag","text":"protected open fun renderTag(tag: String , value: String ): String","title":"renderTag"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/required-option-marker/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / requiredOptionMarker requiredOptionMarker \u00b6 protected val requiredOptionMarker: String ?","title":"Required option marker"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/required-option-marker/#requiredoptionmarker","text":"protected val requiredOptionMarker: String ?","title":"requiredOptionMarker"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/should-show-tag/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / shouldShowTag shouldShowTag \u00b6 protected open fun shouldShowTag(tag: String , value: String ): Boolean","title":"Should show tag"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/should-show-tag/#shouldshowtag","text":"protected open fun shouldShowTag(tag: String , value: String ): Boolean","title":"shouldShowTag"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/show-default-values/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / showDefaultValues showDefaultValues \u00b6 protected val showDefaultValues: Boolean","title":"Show default values"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/show-default-values/#showdefaultvalues","text":"protected val showDefaultValues: Boolean","title":"showDefaultValues"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/show-required-tag/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / showRequiredTag showRequiredTag \u00b6 protected val showRequiredTag: Boolean","title":"Show required tag"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/show-required-tag/#showrequiredtag","text":"protected val showRequiredTag: Boolean","title":"showRequiredTag"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/usage-title/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / usageTitle usageTitle \u00b6 protected val usageTitle: String","title":"Usage title"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/usage-title/#usagetitle","text":"protected val usageTitle: String","title":"usageTitle"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/width/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / width width \u00b6 protected val width: Int","title":"Width"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/width/#width","text":"protected val width: Int","title":"width"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/-definition-row/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / DefinitionRow DefinitionRow \u00b6 protected data class DefinitionRow Constructors \u00b6 Name Summary <init> DefinitionRow(col1: String , col2: String , marker: String ? = null) Properties \u00b6 Name Summary col1 val col1: String col2 val col2: String marker val marker: String ?","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/-definition-row/#definitionrow","text":"protected data class DefinitionRow","title":"DefinitionRow"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/-definition-row/#constructors","text":"Name Summary <init> DefinitionRow(col1: String , col2: String , marker: String ? = null)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/-definition-row/#properties","text":"Name Summary col1 val col1: String col2 val col2: String marker val marker: String ?","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/-definition-row/-init-/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / DefinitionRow / <init> <init> \u00b6 DefinitionRow(col1: String , col2: String , marker: String ? = null)","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/-definition-row/-init-/#init","text":"DefinitionRow(col1: String , col2: String , marker: String ? = null)","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/-definition-row/col1/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / DefinitionRow / col1 col1 \u00b6 val col1: String","title":"Col1"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/-definition-row/col1/#col1","text":"val col1: String","title":"col1"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/-definition-row/col2/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / DefinitionRow / col2 col2 \u00b6 val col2: String","title":"Col2"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/-definition-row/col2/#col2","text":"val col2: String","title":"col2"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/-definition-row/marker/","text":"clikt / com.github.ajalt.clikt.output / CliktHelpFormatter / DefinitionRow / marker marker \u00b6 val marker: String ?","title":"Marker"},{"location":"api/clikt/com.github.ajalt.clikt.output/-clikt-help-formatter/-definition-row/marker/#marker","text":"val marker: String ?","title":"marker"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter HelpFormatter \u00b6 interface HelpFormatter Creates help and usage strings for a command. You can set the formatter for a command when configuring the context. Types \u00b6 Name Summary ParameterHelp sealed class ParameterHelp Tags object Tags Standard tag names for parameter help Functions \u00b6 Name Summary formatHelp abstract fun formatHelp(prolog: String , epilog: String , parameters: List < HelpFormatter.ParameterHelp >, programName: String = \"\"): String Create the full help string. formatUsage abstract fun formatUsage(parameters: List < HelpFormatter.ParameterHelp >, programName: String = \"\"): String Create the one-line usage information for a command. Inheritors \u00b6 Name Summary CliktHelpFormatter open class CliktHelpFormatter : HelpFormatter","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/#helpformatter","text":"interface HelpFormatter Creates help and usage strings for a command. You can set the formatter for a command when configuring the context.","title":"HelpFormatter"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/#types","text":"Name Summary ParameterHelp sealed class ParameterHelp Tags object Tags Standard tag names for parameter help","title":"Types"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/#functions","text":"Name Summary formatHelp abstract fun formatHelp(prolog: String , epilog: String , parameters: List < HelpFormatter.ParameterHelp >, programName: String = \"\"): String Create the full help string. formatUsage abstract fun formatUsage(parameters: List < HelpFormatter.ParameterHelp >, programName: String = \"\"): String Create the one-line usage information for a command.","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/#inheritors","text":"Name Summary CliktHelpFormatter open class CliktHelpFormatter : HelpFormatter","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/format-help/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / formatHelp formatHelp \u00b6 abstract fun formatHelp(prolog: String , epilog: String , parameters: List < HelpFormatter.ParameterHelp >, programName: String = \"\"): String Create the full help string. Parameters \u00b6 prolog - Text to display before any parameter information epilog - Text to display after any parameter information parameters - Information about the command\u2019s parameters programName - The name of the currently executing program","title":"Format help"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/format-help/#formathelp","text":"abstract fun formatHelp(prolog: String , epilog: String , parameters: List < HelpFormatter.ParameterHelp >, programName: String = \"\"): String Create the full help string.","title":"formatHelp"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/format-help/#parameters","text":"prolog - Text to display before any parameter information epilog - Text to display after any parameter information parameters - Information about the command\u2019s parameters programName - The name of the currently executing program","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/format-usage/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / formatUsage formatUsage \u00b6 abstract fun formatUsage(parameters: List < HelpFormatter.ParameterHelp >, programName: String = \"\"): String Create the one-line usage information for a command. This is usually displayed when incorrect input is encountered, and as the first line of the full help.","title":"Format usage"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/format-usage/#formatusage","text":"abstract fun formatUsage(parameters: List < HelpFormatter.ParameterHelp >, programName: String = \"\"): String Create the one-line usage information for a command. This is usually displayed when incorrect input is encountered, and as the first line of the full help.","title":"formatUsage"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp ParameterHelp \u00b6 sealed class ParameterHelp Types \u00b6 Name Summary Argument data class Argument : HelpFormatter.ParameterHelp Group data class Group : HelpFormatter.ParameterHelp Help for an option group. If the group doesn\u2019t have a name or help, you don\u2019t need to create an instance of this class for it. Option data class Option : HelpFormatter.ParameterHelp Subcommand data class Subcommand : HelpFormatter.ParameterHelp Inheritors \u00b6 Name Summary Argument data class Argument : HelpFormatter.ParameterHelp Group data class Group : HelpFormatter.ParameterHelp Help for an option group. If the group doesn\u2019t have a name or help, you don\u2019t need to create an instance of this class for it. Option data class Option : HelpFormatter.ParameterHelp Subcommand data class Subcommand : HelpFormatter.ParameterHelp","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/#parameterhelp","text":"sealed class ParameterHelp","title":"ParameterHelp"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/#types","text":"Name Summary Argument data class Argument : HelpFormatter.ParameterHelp Group data class Group : HelpFormatter.ParameterHelp Help for an option group. If the group doesn\u2019t have a name or help, you don\u2019t need to create an instance of this class for it. Option data class Option : HelpFormatter.ParameterHelp Subcommand data class Subcommand : HelpFormatter.ParameterHelp","title":"Types"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/#inheritors","text":"Name Summary Argument data class Argument : HelpFormatter.ParameterHelp Group data class Group : HelpFormatter.ParameterHelp Help for an option group. If the group doesn\u2019t have a name or help, you don\u2019t need to create an instance of this class for it. Option data class Option : HelpFormatter.ParameterHelp Subcommand data class Subcommand : HelpFormatter.ParameterHelp","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Argument Argument \u00b6 data class Argument : HelpFormatter.ParameterHelp Parameters \u00b6 name - The name / metavar for this argument help - The arguments\u2019s description required - True if this argument must be specified repeatable - True if this argument takes an unlimited number of values Constructors \u00b6 Name Summary <init> Argument(name: String , help: String , required: Boolean , repeatable: Boolean , tags: Map < String , String >) Properties \u00b6 Name Summary help val help: String The arguments\u2019s description name val name: String The name / metavar for this argument repeatable val repeatable: Boolean True if this argument takes an unlimited number of values required val required: Boolean True if this argument must be specified tags val tags: Map < String , String >","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/#argument","text":"data class Argument : HelpFormatter.ParameterHelp","title":"Argument"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/#parameters","text":"name - The name / metavar for this argument help - The arguments\u2019s description required - True if this argument must be specified repeatable - True if this argument takes an unlimited number of values","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/#constructors","text":"Name Summary <init> Argument(name: String , help: String , required: Boolean , repeatable: Boolean , tags: Map < String , String >)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/#properties","text":"Name Summary help val help: String The arguments\u2019s description name val name: String The name / metavar for this argument repeatable val repeatable: Boolean True if this argument takes an unlimited number of values required val required: Boolean True if this argument must be specified tags val tags: Map < String , String >","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/-init-/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Argument / <init> <init> \u00b6 Argument(name: String , help: String , required: Boolean , repeatable: Boolean , tags: Map < String , String >) Parameters \u00b6 name - The name / metavar for this argument help - The arguments\u2019s description required - True if this argument must be specified repeatable - True if this argument takes an unlimited number of values","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/-init-/#init","text":"Argument(name: String , help: String , required: Boolean , repeatable: Boolean , tags: Map < String , String >)","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/-init-/#parameters","text":"name - The name / metavar for this argument help - The arguments\u2019s description required - True if this argument must be specified repeatable - True if this argument takes an unlimited number of values","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/help/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Argument / help help \u00b6 val help: String The arguments\u2019s description","title":"Help"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/help/#help","text":"val help: String The arguments\u2019s description","title":"help"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/name/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Argument / name name \u00b6 val name: String The name / metavar for this argument","title":"Name"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/name/#name","text":"val name: String The name / metavar for this argument","title":"name"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/repeatable/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Argument / repeatable repeatable \u00b6 val repeatable: Boolean True if this argument takes an unlimited number of values","title":"Repeatable"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/repeatable/#repeatable","text":"val repeatable: Boolean True if this argument takes an unlimited number of values","title":"repeatable"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/required/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Argument / required required \u00b6 val required: Boolean True if this argument must be specified","title":"Required"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/required/#required","text":"val required: Boolean True if this argument must be specified","title":"required"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/tags/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Argument / tags tags \u00b6 val tags: Map < String , String >","title":"Tags"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-argument/tags/#tags","text":"val tags: Map < String , String >","title":"tags"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-group/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Group Group \u00b6 data class Group : HelpFormatter.ParameterHelp Help for an option group. If the group doesn\u2019t have a name or help, you don\u2019t need to create an instance of this class for it. Constructors \u00b6 Name Summary <init> Group(name: String , help: String ) Help for an option group. If the group doesn\u2019t have a name or help, you don\u2019t need to create an instance of this class for it. Properties \u00b6 Name Summary help val help: String The help text for this group name val name: String The group name","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-group/#group","text":"data class Group : HelpFormatter.ParameterHelp Help for an option group. If the group doesn\u2019t have a name or help, you don\u2019t need to create an instance of this class for it.","title":"Group"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-group/#constructors","text":"Name Summary <init> Group(name: String , help: String ) Help for an option group. If the group doesn\u2019t have a name or help, you don\u2019t need to create an instance of this class for it.","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-group/#properties","text":"Name Summary help val help: String The help text for this group name val name: String The group name","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-group/-init-/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Group / <init> <init> \u00b6 Group(name: String , help: String ) Help for an option group. If the group doesn\u2019t have a name or help, you don\u2019t need to create an instance of this class for it.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-group/-init-/#init","text":"Group(name: String , help: String ) Help for an option group. If the group doesn\u2019t have a name or help, you don\u2019t need to create an instance of this class for it.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-group/help/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Group / help help \u00b6 val help: String The help text for this group Property \u00b6 help - The help text for this group","title":"Help"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-group/help/#help","text":"val help: String The help text for this group","title":"help"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-group/help/#property","text":"help - The help text for this group","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-group/name/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Group / name name \u00b6 val name: String The group name Property \u00b6 name - The group name","title":"Name"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-group/name/#name","text":"val name: String The group name","title":"name"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-group/name/#property","text":"name - The group name","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Option Option \u00b6 data class Option : HelpFormatter.ParameterHelp Parameters \u00b6 names - The names that can be used to invoke this option secondaryNames - Secondary names that can be used to e.g. disable the option metavar - The metavar to display for the option if it takes values help - The option\u2019s description nvalues - The number of values that this option takes tags - Any extra tags to display with the help message for this option groupName - The name of the group this option belongs to, if there is one and its name should be shown in the help message Constructors \u00b6 Name Summary <init> Option(names: Set < String >, secondaryNames: Set < String >, metavar: String ?, help: String , nvalues: Int , tags: Map < String , String >, groupName: String ?) Properties \u00b6 Name Summary groupName val groupName: String ? The name of the group this option belongs to, if there is one and its name should be shown in the help message help val help: String The option\u2019s description metavar val metavar: String ? The metavar to display for the option if it takes values names val names: Set < String > The names that can be used to invoke this option nvalues val nvalues: Int The number of values that this option takes secondaryNames val secondaryNames: Set < String > Secondary names that can be used to e.g. disable the option tags val tags: Map < String , String > Any extra tags to display with the help message for this option","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/#option","text":"data class Option : HelpFormatter.ParameterHelp","title":"Option"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/#parameters","text":"names - The names that can be used to invoke this option secondaryNames - Secondary names that can be used to e.g. disable the option metavar - The metavar to display for the option if it takes values help - The option\u2019s description nvalues - The number of values that this option takes tags - Any extra tags to display with the help message for this option groupName - The name of the group this option belongs to, if there is one and its name should be shown in the help message","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/#constructors","text":"Name Summary <init> Option(names: Set < String >, secondaryNames: Set < String >, metavar: String ?, help: String , nvalues: Int , tags: Map < String , String >, groupName: String ?)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/#properties","text":"Name Summary groupName val groupName: String ? The name of the group this option belongs to, if there is one and its name should be shown in the help message help val help: String The option\u2019s description metavar val metavar: String ? The metavar to display for the option if it takes values names val names: Set < String > The names that can be used to invoke this option nvalues val nvalues: Int The number of values that this option takes secondaryNames val secondaryNames: Set < String > Secondary names that can be used to e.g. disable the option tags val tags: Map < String , String > Any extra tags to display with the help message for this option","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/-init-/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Option / <init> <init> \u00b6 Option(names: Set < String >, secondaryNames: Set < String >, metavar: String ?, help: String , nvalues: Int , tags: Map < String , String >, groupName: String ?) Parameters \u00b6 names - The names that can be used to invoke this option secondaryNames - Secondary names that can be used to e.g. disable the option metavar - The metavar to display for the option if it takes values help - The option\u2019s description nvalues - The number of values that this option takes tags - Any extra tags to display with the help message for this option groupName - The name of the group this option belongs to, if there is one and its name should be shown in the help message","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/-init-/#init","text":"Option(names: Set < String >, secondaryNames: Set < String >, metavar: String ?, help: String , nvalues: Int , tags: Map < String , String >, groupName: String ?)","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/-init-/#parameters","text":"names - The names that can be used to invoke this option secondaryNames - Secondary names that can be used to e.g. disable the option metavar - The metavar to display for the option if it takes values help - The option\u2019s description nvalues - The number of values that this option takes tags - Any extra tags to display with the help message for this option groupName - The name of the group this option belongs to, if there is one and its name should be shown in the help message","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/group-name/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Option / groupName groupName \u00b6 val groupName: String ? The name of the group this option belongs to, if there is one and its name should be shown in the help message","title":"Group name"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/group-name/#groupname","text":"val groupName: String ? The name of the group this option belongs to, if there is one and its name should be shown in the help message","title":"groupName"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/help/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Option / help help \u00b6 val help: String The option\u2019s description","title":"Help"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/help/#help","text":"val help: String The option\u2019s description","title":"help"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/metavar/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Option / metavar metavar \u00b6 val metavar: String ? The metavar to display for the option if it takes values","title":"Metavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/metavar/#metavar","text":"val metavar: String ? The metavar to display for the option if it takes values","title":"metavar"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/names/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Option / names names \u00b6 val names: Set < String > The names that can be used to invoke this option","title":"Names"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/names/#names","text":"val names: Set < String > The names that can be used to invoke this option","title":"names"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/nvalues/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Option / nvalues nvalues \u00b6 val nvalues: Int The number of values that this option takes","title":"Nvalues"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/nvalues/#nvalues","text":"val nvalues: Int The number of values that this option takes","title":"nvalues"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/secondary-names/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Option / secondaryNames secondaryNames \u00b6 val secondaryNames: Set < String > Secondary names that can be used to e.g. disable the option","title":"Secondary names"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/secondary-names/#secondarynames","text":"val secondaryNames: Set < String > Secondary names that can be used to e.g. disable the option","title":"secondaryNames"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/tags/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Option / tags tags \u00b6 val tags: Map < String , String > Any extra tags to display with the help message for this option","title":"Tags"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-option/tags/#tags","text":"val tags: Map < String , String > Any extra tags to display with the help message for this option","title":"tags"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-subcommand/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Subcommand Subcommand \u00b6 data class Subcommand : HelpFormatter.ParameterHelp Parameters \u00b6 name - The name for this command help - The command\u2019s description Constructors \u00b6 Name Summary <init> Subcommand(name: String , help: String , tags: Map < String , String >) Properties \u00b6 Name Summary help val help: String The command\u2019s description name val name: String The name for this command tags val tags: Map < String , String >","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-subcommand/#subcommand","text":"data class Subcommand : HelpFormatter.ParameterHelp","title":"Subcommand"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-subcommand/#parameters","text":"name - The name for this command help - The command\u2019s description","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-subcommand/#constructors","text":"Name Summary <init> Subcommand(name: String , help: String , tags: Map < String , String >)","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-subcommand/#properties","text":"Name Summary help val help: String The command\u2019s description name val name: String The name for this command tags val tags: Map < String , String >","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-subcommand/-init-/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Subcommand / <init> <init> \u00b6 Subcommand(name: String , help: String , tags: Map < String , String >) Parameters \u00b6 name - The name for this command help - The command\u2019s description","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-subcommand/-init-/#init","text":"Subcommand(name: String , help: String , tags: Map < String , String >)","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-subcommand/-init-/#parameters","text":"name - The name for this command help - The command\u2019s description","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-subcommand/help/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Subcommand / help help \u00b6 val help: String The command\u2019s description","title":"Help"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-subcommand/help/#help","text":"val help: String The command\u2019s description","title":"help"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-subcommand/name/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Subcommand / name name \u00b6 val name: String The name for this command","title":"Name"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-subcommand/name/#name","text":"val name: String The name for this command","title":"name"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-subcommand/tags/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / ParameterHelp / Subcommand / tags tags \u00b6 val tags: Map < String , String >","title":"Tags"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-parameter-help/-subcommand/tags/#tags","text":"val tags: Map < String , String >","title":"tags"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-tags/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / Tags Tags \u00b6 object Tags Standard tag names for parameter help Properties \u00b6 Name Summary DEFAULT const val DEFAULT: String A value that can be displayed to the user as the default for this option, or null if there is no default. REQUIRED const val REQUIRED: String If true, this option is required. Only used for help output.","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-tags/#tags","text":"object Tags Standard tag names for parameter help","title":"Tags"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-tags/#properties","text":"Name Summary DEFAULT const val DEFAULT: String A value that can be displayed to the user as the default for this option, or null if there is no default. REQUIRED const val REQUIRED: String If true, this option is required. Only used for help output.","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-tags/-d-e-f-a-u-l-t/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / Tags / DEFAULT DEFAULT \u00b6 const val DEFAULT: String A value that can be displayed to the user as the default for this option, or null if there is no default.","title":" d e f a u l t"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-tags/-d-e-f-a-u-l-t/#default","text":"const val DEFAULT: String A value that can be displayed to the user as the default for this option, or null if there is no default.","title":"DEFAULT"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-tags/-r-e-q-u-i-r-e-d/","text":"clikt / com.github.ajalt.clikt.output / HelpFormatter / Tags / REQUIRED REQUIRED \u00b6 const val REQUIRED: String If true, this option is required. Only used for help output.","title":" r e q u i r e d"},{"location":"api/clikt/com.github.ajalt.clikt.output/-help-formatter/-tags/-r-e-q-u-i-r-e-d/#required","text":"const val REQUIRED: String If true, this option is required. Only used for help output.","title":"REQUIRED"},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/","text":"clikt / com.github.ajalt.clikt.output / InteractiveCliktConsole InteractiveCliktConsole \u00b6 class InteractiveCliktConsole : CliktConsole Constructors \u00b6 Name Summary <init> InteractiveCliktConsole(console: Console ) Properties \u00b6 Name Summary lineSeparator val lineSeparator: String The line separator to use. (Either \u201c\\n\u201d or \u201c\\r\\n\u201d) Functions \u00b6 Name Summary print fun print(text: String , error: Boolean ): Unit Show some text to the user. promptForLine fun promptForLine(prompt: String , hideInput: Boolean ): String ? Show the prompt to the user, and return a line of their response.","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/#interactivecliktconsole","text":"class InteractiveCliktConsole : CliktConsole","title":"InteractiveCliktConsole"},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/#constructors","text":"Name Summary <init> InteractiveCliktConsole(console: Console )","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/#properties","text":"Name Summary lineSeparator val lineSeparator: String The line separator to use. (Either \u201c\\n\u201d or \u201c\\r\\n\u201d)","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/#functions","text":"Name Summary print fun print(text: String , error: Boolean ): Unit Show some text to the user. promptForLine fun promptForLine(prompt: String , hideInput: Boolean ): String ? Show the prompt to the user, and return a line of their response.","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/-init-/","text":"clikt / com.github.ajalt.clikt.output / InteractiveCliktConsole / <init> <init> \u00b6 InteractiveCliktConsole(console: Console )","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/-init-/#init","text":"InteractiveCliktConsole(console: Console )","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/line-separator/","text":"clikt / com.github.ajalt.clikt.output / InteractiveCliktConsole / lineSeparator lineSeparator \u00b6 val lineSeparator: String Overrides CliktConsole.lineSeparator The line separator to use. (Either \u201c\\n\u201d or \u201c\\r\\n\u201d)","title":"Line separator"},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/line-separator/#lineseparator","text":"val lineSeparator: String Overrides CliktConsole.lineSeparator The line separator to use. (Either \u201c\\n\u201d or \u201c\\r\\n\u201d)","title":"lineSeparator"},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/print/","text":"clikt / com.github.ajalt.clikt.output / InteractiveCliktConsole / print print \u00b6 fun print(text: String , error: Boolean ): Unit Overrides CliktConsole.print Show some text to the user. Parameters \u00b6 text - The text to display. May or may not contain a tailing newline. error - If true, the text is an error message, and should be printed in an alternate stream or format, if applicable.","title":"Print"},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/print/#print","text":"fun print(text: String , error: Boolean ): Unit Overrides CliktConsole.print Show some text to the user.","title":"print"},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/print/#parameters","text":"text - The text to display. May or may not contain a tailing newline. error - If true, the text is an error message, and should be printed in an alternate stream or format, if applicable.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/prompt-for-line/","text":"clikt / com.github.ajalt.clikt.output / InteractiveCliktConsole / promptForLine promptForLine \u00b6 fun promptForLine(prompt: String , hideInput: Boolean ): String ? Overrides CliktConsole.promptForLine Show the prompt to the user, and return a line of their response. This function will block until a line of input has been read. Parameters \u00b6 prompt - The text to display to the user hideInput - If true, the user\u2019s input should not be echoed to the screen. If the current console does not support hidden input, this argument may be ignored.. Return A line of user input, or null if an error occurred.","title":"Prompt for line"},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/prompt-for-line/#promptforline","text":"fun promptForLine(prompt: String , hideInput: Boolean ): String ? Overrides CliktConsole.promptForLine Show the prompt to the user, and return a line of their response. This function will block until a line of input has been read.","title":"promptForLine"},{"location":"api/clikt/com.github.ajalt.clikt.output/-interactive-clikt-console/prompt-for-line/#parameters","text":"prompt - The text to display to the user hideInput - If true, the user\u2019s input should not be echoed to the screen. If the current console does not support hidden input, this argument may be ignored.. Return A line of user input, or null if an error occurred.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/","text":"clikt / com.github.ajalt.clikt.output / NonInteractiveCliktConsole NonInteractiveCliktConsole \u00b6 class NonInteractiveCliktConsole : CliktConsole Constructors \u00b6 Name Summary <init> NonInteractiveCliktConsole() Properties \u00b6 Name Summary lineSeparator val lineSeparator: String The line separator to use. (Either \u201c\\n\u201d or \u201c\\r\\n\u201d) Functions \u00b6 Name Summary print fun print(text: String , error: Boolean ): Unit Show some text to the user. promptForLine fun promptForLine(prompt: String , hideInput: Boolean ): String Show the prompt to the user, and return a line of their response.","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/#noninteractivecliktconsole","text":"class NonInteractiveCliktConsole : CliktConsole","title":"NonInteractiveCliktConsole"},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/#constructors","text":"Name Summary <init> NonInteractiveCliktConsole()","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/#properties","text":"Name Summary lineSeparator val lineSeparator: String The line separator to use. (Either \u201c\\n\u201d or \u201c\\r\\n\u201d)","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/#functions","text":"Name Summary print fun print(text: String , error: Boolean ): Unit Show some text to the user. promptForLine fun promptForLine(prompt: String , hideInput: Boolean ): String Show the prompt to the user, and return a line of their response.","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/-init-/","text":"clikt / com.github.ajalt.clikt.output / NonInteractiveCliktConsole / <init> <init> \u00b6 NonInteractiveCliktConsole()","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/-init-/#init","text":"NonInteractiveCliktConsole()","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/line-separator/","text":"clikt / com.github.ajalt.clikt.output / NonInteractiveCliktConsole / lineSeparator lineSeparator \u00b6 val lineSeparator: String Overrides CliktConsole.lineSeparator The line separator to use. (Either \u201c\\n\u201d or \u201c\\r\\n\u201d)","title":"Line separator"},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/line-separator/#lineseparator","text":"val lineSeparator: String Overrides CliktConsole.lineSeparator The line separator to use. (Either \u201c\\n\u201d or \u201c\\r\\n\u201d)","title":"lineSeparator"},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/print/","text":"clikt / com.github.ajalt.clikt.output / NonInteractiveCliktConsole / print print \u00b6 fun print(text: String , error: Boolean ): Unit Overrides CliktConsole.print Show some text to the user. Parameters \u00b6 text - The text to display. May or may not contain a tailing newline. error - If true, the text is an error message, and should be printed in an alternate stream or format, if applicable.","title":"Print"},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/print/#print","text":"fun print(text: String , error: Boolean ): Unit Overrides CliktConsole.print Show some text to the user.","title":"print"},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/print/#parameters","text":"text - The text to display. May or may not contain a tailing newline. error - If true, the text is an error message, and should be printed in an alternate stream or format, if applicable.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/prompt-for-line/","text":"clikt / com.github.ajalt.clikt.output / NonInteractiveCliktConsole / promptForLine promptForLine \u00b6 fun promptForLine(prompt: String , hideInput: Boolean ): String Overrides CliktConsole.promptForLine Show the prompt to the user, and return a line of their response. This function will block until a line of input has been read. Parameters \u00b6 prompt - The text to display to the user hideInput - If true, the user\u2019s input should not be echoed to the screen. If the current console does not support hidden input, this argument may be ignored.. Return A line of user input, or null if an error occurred.","title":"Prompt for line"},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/prompt-for-line/#promptforline","text":"fun promptForLine(prompt: String , hideInput: Boolean ): String Overrides CliktConsole.promptForLine Show the prompt to the user, and return a line of their response. This function will block until a line of input has been read.","title":"promptForLine"},{"location":"api/clikt/com.github.ajalt.clikt.output/-non-interactive-clikt-console/prompt-for-line/#parameters","text":"prompt - The text to display to the user hideInput - If true, the user\u2019s input should not be echoed to the screen. If the current console does not support hidden input, this argument may be ignored.. Return A line of user input, or null if an error occurred.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/","text":"clikt / com.github.ajalt.clikt.output / TermUi TermUi \u00b6 object TermUi Properties \u00b6 Name Summary isWindows val isWindows: Boolean True if the current platform is a version of windows. Functions \u00b6 Name Summary confirm fun confirm(text: String , default: Boolean = false, abort: Boolean = false, promptSuffix: String = \": \", showDefault: Boolean = true, console: CliktConsole = defaultCliktConsole()): Boolean ? Prompt for user confirmation. echo fun echo(message: Any ?, trailingNewline: Boolean = true, err: Boolean = false, console: CliktConsole = defaultCliktConsole(), lineSeparator: String = console.lineSeparator): Unit Print the message to the screen. editFile fun editFile(filename: String , editor: String ? = null, env: Map < String , String > = emptyMap(), requireSave: Boolean = false, extension: String = \".txt\"): Unit Edit the file with filename , kotlin.Boolean, kotlin.String)/filename) in the editor , kotlin.Boolean, kotlin.String)/editor). editText fun editText(text: String , editor: String ? = null, env: Map < String , String > = emptyMap(), requireSave: Boolean = false, extension: String = \".txt\"): String ? Edit text , kotlin.Boolean, kotlin.String)/text) in the editor , kotlin.Boolean, kotlin.String)/editor). prompt fun <T> prompt(text: String , default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \"Repeat for confirmation: \", promptSuffix: String = \": \", showDefault: Boolean = true, console: CliktConsole = defaultCliktConsole(), convert: ( String ) -> T ): T ? Prompt a user for text input. fun prompt(text: String , default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \"Repeat for confirmation: \", promptSuffix: String = \": \", showDefault: Boolean = true): String ?","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/#termui","text":"object TermUi","title":"TermUi"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/#properties","text":"Name Summary isWindows val isWindows: Boolean True if the current platform is a version of windows.","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/#functions","text":"Name Summary confirm fun confirm(text: String , default: Boolean = false, abort: Boolean = false, promptSuffix: String = \": \", showDefault: Boolean = true, console: CliktConsole = defaultCliktConsole()): Boolean ? Prompt for user confirmation. echo fun echo(message: Any ?, trailingNewline: Boolean = true, err: Boolean = false, console: CliktConsole = defaultCliktConsole(), lineSeparator: String = console.lineSeparator): Unit Print the message to the screen. editFile fun editFile(filename: String , editor: String ? = null, env: Map < String , String > = emptyMap(), requireSave: Boolean = false, extension: String = \".txt\"): Unit Edit the file with filename , kotlin.Boolean, kotlin.String)/filename) in the editor , kotlin.Boolean, kotlin.String)/editor). editText fun editText(text: String , editor: String ? = null, env: Map < String , String > = emptyMap(), requireSave: Boolean = false, extension: String = \".txt\"): String ? Edit text , kotlin.Boolean, kotlin.String)/text) in the editor , kotlin.Boolean, kotlin.String)/editor). prompt fun <T> prompt(text: String , default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \"Repeat for confirmation: \", promptSuffix: String = \": \", showDefault: Boolean = true, console: CliktConsole = defaultCliktConsole(), convert: ( String ) -> T ): T ? Prompt a user for text input. fun prompt(text: String , default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \"Repeat for confirmation: \", promptSuffix: String = \": \", showDefault: Boolean = true): String ?","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/confirm/","text":"clikt / com.github.ajalt.clikt.output / TermUi / confirm confirm \u00b6 fun confirm(text: String , default: Boolean = false, abort: Boolean = false, promptSuffix: String = \": \", showDefault: Boolean = true, console: CliktConsole = defaultCliktConsole()): Boolean ? Prompt for user confirmation. Responses will be read from stdin, even if it\u2019s redirected to a file. Parameters \u00b6 text - the question to ask default - the default, used if stdin is empty abort - if true , a negative answer aborts the program by raising Abort promptSuffix - a string added after the question and choices showDefault - if false, the choices will not be shown in the prompt. Return the user\u2019s response, or null if stdin is not interactive and EOF was encountered.","title":"Confirm"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/confirm/#confirm","text":"fun confirm(text: String , default: Boolean = false, abort: Boolean = false, promptSuffix: String = \": \", showDefault: Boolean = true, console: CliktConsole = defaultCliktConsole()): Boolean ? Prompt for user confirmation. Responses will be read from stdin, even if it\u2019s redirected to a file.","title":"confirm"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/confirm/#parameters","text":"text - the question to ask default - the default, used if stdin is empty abort - if true , a negative answer aborts the program by raising Abort promptSuffix - a string added after the question and choices showDefault - if false, the choices will not be shown in the prompt. Return the user\u2019s response, or null if stdin is not interactive and EOF was encountered.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/echo/","text":"clikt / com.github.ajalt.clikt.output / TermUi / echo echo \u00b6 fun echo(message: Any ?, trailingNewline: Boolean = true, err: Boolean = false, console: CliktConsole = defaultCliktConsole(), lineSeparator: String = console.lineSeparator): Unit Print the message to the screen. This is similar to print or println , but converts newlines to the system line separator. Parameters \u00b6 message - The message to print. trailingNewline - If true, behave like println , otherwise behave like print err - If true, print to stderr instead of stdout console - The console to echo to lineSeparator - The line separator to use, defaults to the console \u2018s lineSeparator","title":"Echo"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/echo/#echo","text":"fun echo(message: Any ?, trailingNewline: Boolean = true, err: Boolean = false, console: CliktConsole = defaultCliktConsole(), lineSeparator: String = console.lineSeparator): Unit Print the message to the screen. This is similar to print or println , but converts newlines to the system line separator.","title":"echo"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/echo/#parameters","text":"message - The message to print. trailingNewline - If true, behave like println , otherwise behave like print err - If true, print to stderr instead of stdout console - The console to echo to lineSeparator - The line separator to use, defaults to the console \u2018s lineSeparator","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/edit-file/","text":"clikt / com.github.ajalt.clikt.output / TermUi / editFile editFile \u00b6 fun editFile(filename: String , editor: String ? = null, env: Map < String , String > = emptyMap(), requireSave: Boolean = false, extension: String = \".txt\"): Unit Edit the file with filename , kotlin.Boolean, kotlin.String)/filename) in the editor , kotlin.Boolean, kotlin.String)/editor). See Also editText","title":"Edit file"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/edit-file/#editfile","text":"fun editFile(filename: String , editor: String ? = null, env: Map < String , String > = emptyMap(), requireSave: Boolean = false, extension: String = \".txt\"): Unit Edit the file with filename , kotlin.Boolean, kotlin.String)/filename) in the editor , kotlin.Boolean, kotlin.String)/editor). See Also editText","title":"editFile"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/edit-text/","text":"clikt / com.github.ajalt.clikt.output / TermUi / editText editText \u00b6 fun editText(text: String , editor: String ? = null, env: Map < String , String > = emptyMap(), requireSave: Boolean = false, extension: String = \".txt\"): String ? Edit text , kotlin.Boolean, kotlin.String)/text) in the editor , kotlin.Boolean, kotlin.String)/editor). This blocks until the editor is closed. Parameters \u00b6 text - The text to edit. editor - The path to the editor to use. Defaults to automatic detection. env - Environment variables to forward to the editor. requireSave - If the editor is closed without saving, null will be returned if true, otherwise text , kotlin.Boolean, kotlin.String)/text) will be returned. extension - The extension of the temporary file that the editor will open. This can affect syntax coloring etc. Exceptions \u00b6 CliktError - if the editor cannot be opened. Return The edited text, or null if requireSave , kotlin.Boolean, kotlin.String)/requireSave) is true and the editor was closed without saving.","title":"Edit text"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/edit-text/#edittext","text":"fun editText(text: String , editor: String ? = null, env: Map < String , String > = emptyMap(), requireSave: Boolean = false, extension: String = \".txt\"): String ? Edit text , kotlin.Boolean, kotlin.String)/text) in the editor , kotlin.Boolean, kotlin.String)/editor). This blocks until the editor is closed.","title":"editText"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/edit-text/#parameters","text":"text - The text to edit. editor - The path to the editor to use. Defaults to automatic detection. env - Environment variables to forward to the editor. requireSave - If the editor is closed without saving, null will be returned if true, otherwise text , kotlin.Boolean, kotlin.String)/text) will be returned. extension - The extension of the temporary file that the editor will open. This can affect syntax coloring etc.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/edit-text/#exceptions","text":"CliktError - if the editor cannot be opened. Return The edited text, or null if requireSave , kotlin.Boolean, kotlin.String)/requireSave) is true and the editor was closed without saving.","title":"Exceptions"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/is-windows/","text":"clikt / com.github.ajalt.clikt.output / TermUi / isWindows isWindows \u00b6 val isWindows: Boolean True if the current platform is a version of windows.","title":"Is windows"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/is-windows/#iswindows","text":"val isWindows: Boolean True if the current platform is a version of windows.","title":"isWindows"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/prompt/","text":"clikt / com.github.ajalt.clikt.output / TermUi / prompt prompt \u00b6 fun <T> prompt(text: String , default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \"Repeat for confirmation: \", promptSuffix: String = \": \", showDefault: Boolean = true, console: CliktConsole = defaultCliktConsole(), convert: ( String ) -> T ): T ? Prompt a user for text input. If the user send a terminate signal (e,g, ctrl-c) while the prompt is active, null will be returned. Parameters \u00b6 text - The text to display for the prompt. default - The default value to use for the input. If the user enters a newline without any other value, default )/default) will be returned. This parameter is a String instead of T , since it will be displayed to the user. hideInput - If true, the user\u2019s input will not be echoed back to the screen. This is commonly used for password inputs. requireConfirmation - If true, the user will be required to enter the same value twice before it is accepted. confirmationPrompt - The text to show the user when requireConfirmation )/requireConfirmation) is true. promptSuffix - A delimiter printed between the text )/text) and the user\u2019s input. showDefault - If true, the default )/default) value will be shown as part of the prompt. convert - A callback that will convert the text that the user enters to the return value of the function. If the callback raises a UsageError , its message will be printed and the user will be asked to enter a new value. If default )/default) is not null and the user does not input a value, the value of default )/default) will be passed to this callback. Return the user\u2019s input, or null if the stdin is not interactive and EOF was encountered. fun prompt(text: String , default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \"Repeat for confirmation: \", promptSuffix: String = \": \", showDefault: Boolean = true): String ?","title":"Prompt"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/prompt/#prompt","text":"fun <T> prompt(text: String , default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \"Repeat for confirmation: \", promptSuffix: String = \": \", showDefault: Boolean = true, console: CliktConsole = defaultCliktConsole(), convert: ( String ) -> T ): T ? Prompt a user for text input. If the user send a terminate signal (e,g, ctrl-c) while the prompt is active, null will be returned.","title":"prompt"},{"location":"api/clikt/com.github.ajalt.clikt.output/-term-ui/prompt/#parameters","text":"text - The text to display for the prompt. default - The default value to use for the input. If the user enters a newline without any other value, default )/default) will be returned. This parameter is a String instead of T , since it will be displayed to the user. hideInput - If true, the user\u2019s input will not be echoed back to the screen. This is commonly used for password inputs. requireConfirmation - If true, the user will be required to enter the same value twice before it is accepted. confirmationPrompt - The text to show the user when requireConfirmation )/requireConfirmation) is true. promptSuffix - A delimiter printed between the text )/text) and the user\u2019s input. showDefault - If true, the default )/default) value will be shown as part of the prompt. convert - A callback that will convert the text that the user enters to the return value of the function. If the callback raises a UsageError , its message will be printed and the user will be asked to enter a new value. If default )/default) is not null and the user does not input a value, the value of default )/default) will be passed to this callback. Return the user\u2019s input, or null if the stdin is not interactive and EOF was encountered. fun prompt(text: String , default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \"Repeat for confirmation: \", promptSuffix: String = \": \", showDefault: Boolean = true): String ?","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/","text":"clikt / com.github.ajalt.clikt.parameters.arguments Package com.github.ajalt.clikt.parameters.arguments \u00b6 Types \u00b6 Name Summary Argument interface Argument A positional parameter to a command. ArgumentDelegate interface ArgumentDelegate<out T> : Argument , ReadOnlyProperty < CliktCommand , T > An argument that functions as a property delegate ArgumentTransformContext class ArgumentTransformContext : Argument A receiver for argument transformers. ProcessedArgument class ProcessedArgument<AllT, ValueT> : ArgumentDelegate < AllT > An Argument delegate implementation that transforms its values . Type Aliases \u00b6 Name Summary ArgCallsTransformer typealias ArgCallsTransformer<AllT, EachT> = ArgumentTransformContext .( List < EachT >) -> AllT A callback that transforms all the values into the final argument type ArgValidator typealias ArgValidator<AllT> = ArgumentTransformContext .( AllT ) -> Unit A callback validates the final argument type ArgValueTransformer typealias ArgValueTransformer<T> = ArgumentTransformContext .( String ) -> T A callback that transforms a single value from a string to the value type Functions \u00b6 Name Summary argument fun CliktCommand .argument(name: String = \"\", help: String = \"\", helpTags: Map < String , String > = emptyMap()): RawArgument Create a property delegate argument. convert fun <T : Any > RawArgument.convert(completionCandidates: CompletionCandidates = this.completionCandidates, conversion: ArgValueTransformer < T >): ProcessedArgument < T , T > Convert the argument\u2019s values. default fun <T : Any > ProcessedArgument < T , T >.default(value: T ): ArgumentDelegate < T > If the argument is not given, use value , com.github.ajalt.clikt.parameters.arguments.default.T)/value) instead of throwing an error. defaultLazy fun <T : Any > ProcessedArgument < T , T >.defaultLazy(value: () -> T ): ArgumentDelegate < T > If the argument is not given, call value , kotlin.Function0((com.github.ajalt.clikt.parameters.arguments.defaultLazy.T)))/value) and use its return value instead of throwing an error. multiple fun <T : Any > ProcessedArgument < T , T >.multiple(required: Boolean = false): ProcessedArgument < List < T >, T > Accept any number of values to this argument. optional fun <AllT : Any , ValueT> ProcessedArgument < AllT , ValueT >.optional(): ProcessedArgument < AllT ?, ValueT > Return null instead of throwing an error if no value is given. pair fun <T : Any > ProcessedArgument < T , T >.pair(): ProcessedArgument < Pair < T , T >, T > Require exactly two values to this argument, and store them in a Pair . transformAll fun <AllInT, ValueT, AllOutT> ProcessedArgument < AllInT , ValueT >.transformAll(nvalues: Int ? = null, required: Boolean ? = null, transform: ArgCallsTransformer < AllOutT , ValueT >): ProcessedArgument < AllOutT , ValueT > Transform all values to the final argument type. triple fun <T : Any > ProcessedArgument < T , T >.triple(): ProcessedArgument < Triple < T , T , T >, T > Require exactly three values to this argument, and store them in a Triple unique fun <T : Any > ProcessedArgument < List < T >, T >.unique(): ProcessedArgument < Set < T >, T > Only store unique values for this argument validate fun <AllT : Any , ValueT> ProcessedArgument < AllT , ValueT >.validate(validator: ArgValidator < AllT >): ArgumentDelegate < AllT > Check the final argument value and raise an error if it\u2019s not valid.","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/#package-comgithubajaltcliktparametersarguments","text":"","title":"Package com.github.ajalt.clikt.parameters.arguments"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/#types","text":"Name Summary Argument interface Argument A positional parameter to a command. ArgumentDelegate interface ArgumentDelegate<out T> : Argument , ReadOnlyProperty < CliktCommand , T > An argument that functions as a property delegate ArgumentTransformContext class ArgumentTransformContext : Argument A receiver for argument transformers. ProcessedArgument class ProcessedArgument<AllT, ValueT> : ArgumentDelegate < AllT > An Argument delegate implementation that transforms its values .","title":"Types"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/#type-aliases","text":"Name Summary ArgCallsTransformer typealias ArgCallsTransformer<AllT, EachT> = ArgumentTransformContext .( List < EachT >) -> AllT A callback that transforms all the values into the final argument type ArgValidator typealias ArgValidator<AllT> = ArgumentTransformContext .( AllT ) -> Unit A callback validates the final argument type ArgValueTransformer typealias ArgValueTransformer<T> = ArgumentTransformContext .( String ) -> T A callback that transforms a single value from a string to the value type","title":"Type Aliases"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/#functions","text":"Name Summary argument fun CliktCommand .argument(name: String = \"\", help: String = \"\", helpTags: Map < String , String > = emptyMap()): RawArgument Create a property delegate argument. convert fun <T : Any > RawArgument.convert(completionCandidates: CompletionCandidates = this.completionCandidates, conversion: ArgValueTransformer < T >): ProcessedArgument < T , T > Convert the argument\u2019s values. default fun <T : Any > ProcessedArgument < T , T >.default(value: T ): ArgumentDelegate < T > If the argument is not given, use value , com.github.ajalt.clikt.parameters.arguments.default.T)/value) instead of throwing an error. defaultLazy fun <T : Any > ProcessedArgument < T , T >.defaultLazy(value: () -> T ): ArgumentDelegate < T > If the argument is not given, call value , kotlin.Function0((com.github.ajalt.clikt.parameters.arguments.defaultLazy.T)))/value) and use its return value instead of throwing an error. multiple fun <T : Any > ProcessedArgument < T , T >.multiple(required: Boolean = false): ProcessedArgument < List < T >, T > Accept any number of values to this argument. optional fun <AllT : Any , ValueT> ProcessedArgument < AllT , ValueT >.optional(): ProcessedArgument < AllT ?, ValueT > Return null instead of throwing an error if no value is given. pair fun <T : Any > ProcessedArgument < T , T >.pair(): ProcessedArgument < Pair < T , T >, T > Require exactly two values to this argument, and store them in a Pair . transformAll fun <AllInT, ValueT, AllOutT> ProcessedArgument < AllInT , ValueT >.transformAll(nvalues: Int ? = null, required: Boolean ? = null, transform: ArgCallsTransformer < AllOutT , ValueT >): ProcessedArgument < AllOutT , ValueT > Transform all values to the final argument type. triple fun <T : Any > ProcessedArgument < T , T >.triple(): ProcessedArgument < Triple < T , T , T >, T > Require exactly three values to this argument, and store them in a Triple unique fun <T : Any > ProcessedArgument < List < T >, T >.unique(): ProcessedArgument < Set < T >, T > Only store unique values for this argument validate fun <AllT : Any , ValueT> ProcessedArgument < AllT , ValueT >.validate(validator: ArgValidator < AllT >): ArgumentDelegate < AllT > Check the final argument value and raise an error if it\u2019s not valid.","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-arg-calls-transformer/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ArgCallsTransformer ArgCallsTransformer \u00b6 typealias ArgCallsTransformer<AllT, EachT> = ArgumentTransformContext .( List < EachT >) -> AllT A callback that transforms all the values into the final argument type","title":" arg calls transformer"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-arg-calls-transformer/#argcallstransformer","text":"typealias ArgCallsTransformer<AllT, EachT> = ArgumentTransformContext .( List < EachT >) -> AllT A callback that transforms all the values into the final argument type","title":"ArgCallsTransformer"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-arg-validator/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ArgValidator ArgValidator \u00b6 typealias ArgValidator<AllT> = ArgumentTransformContext .( AllT ) -> Unit A callback validates the final argument type","title":" arg validator"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-arg-validator/#argvalidator","text":"typealias ArgValidator<AllT> = ArgumentTransformContext .( AllT ) -> Unit A callback validates the final argument type","title":"ArgValidator"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-arg-value-transformer/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ArgValueTransformer ArgValueTransformer \u00b6 typealias ArgValueTransformer<T> = ArgumentTransformContext .( String ) -> T A callback that transforms a single value from a string to the value type","title":" arg value transformer"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-arg-value-transformer/#argvaluetransformer","text":"typealias ArgValueTransformer<T> = ArgumentTransformContext .( String ) -> T A callback that transforms a single value from a string to the value type","title":"ArgValueTransformer"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/argument/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / argument argument \u00b6 fun CliktCommand .argument(name: String = \"\", help: String = \"\", helpTags: Map < String , String > = emptyMap()): RawArgument Create a property delegate argument. The order that these delegates are created is the order that arguments must appear. By default, the argument takes one value and throws an error if no value is given. The behavior can be changed with functions like int and optional . Parameters \u00b6 name - The metavar for this argument. If not given, the name is inferred form the property name. help - The description of this argument for help output. helpTags - Extra information about this option to pass to the help formatter","title":"Argument"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/argument/#argument","text":"fun CliktCommand .argument(name: String = \"\", help: String = \"\", helpTags: Map < String , String > = emptyMap()): RawArgument Create a property delegate argument. The order that these delegates are created is the order that arguments must appear. By default, the argument takes one value and throws an error if no value is given. The behavior can be changed with functions like int and optional .","title":"argument"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/argument/#parameters","text":"name - The metavar for this argument. If not given, the name is inferred form the property name. help - The description of this argument for help output. helpTags - Extra information about this option to pass to the help formatter","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/convert/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / convert convert \u00b6 inline fun <T : Any > RawArgument.convert(completionCandidates: CompletionCandidates = this.completionCandidates, crossinline conversion: ArgValueTransformer < T >): ProcessedArgument < T , T > Convert the argument\u2019s values. The conversion , com.github.ajalt.clikt.completion.CompletionCandidates, kotlin.Function2((com.github.ajalt.clikt.parameters.arguments.ArgumentTransformContext, kotlin.String, com.github.ajalt.clikt.parameters.arguments.convert.T)))/conversion) is called once for each value given. If any errors are thrown, they are caught and a BadParameterValue is thrown with the error message. You can call fail to throw a BadParameterValue manually. Parameters \u00b6 completionCandidates - candidates to use when completing this argument in shell autocomplete","title":"Convert"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/convert/#convert","text":"inline fun <T : Any > RawArgument.convert(completionCandidates: CompletionCandidates = this.completionCandidates, crossinline conversion: ArgValueTransformer < T >): ProcessedArgument < T , T > Convert the argument\u2019s values. The conversion , com.github.ajalt.clikt.completion.CompletionCandidates, kotlin.Function2((com.github.ajalt.clikt.parameters.arguments.ArgumentTransformContext, kotlin.String, com.github.ajalt.clikt.parameters.arguments.convert.T)))/conversion) is called once for each value given. If any errors are thrown, they are caught and a BadParameterValue is thrown with the error message. You can call fail to throw a BadParameterValue manually.","title":"convert"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/convert/#parameters","text":"completionCandidates - candidates to use when completing this argument in shell autocomplete","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/default-lazy/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / defaultLazy defaultLazy \u00b6 inline fun <T : Any > ProcessedArgument < T , T >.defaultLazy(crossinline value: () -> T ): ArgumentDelegate < T > If the argument is not given, call value , kotlin.Function0((com.github.ajalt.clikt.parameters.arguments.defaultLazy.T)))/value) and use its return value instead of throwing an error. This must be applied after all other transforms. If the argument is given on the command line, value , kotlin.Function0((com.github.ajalt.clikt.parameters.arguments.defaultLazy.T)))/value) will not be called. Example: \u00b6 val arg : Pair < Int , Int > by argument (). int (). pair (). defaultLazy { expensiveOperation () }","title":"Default lazy"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/default-lazy/#defaultlazy","text":"inline fun <T : Any > ProcessedArgument < T , T >.defaultLazy(crossinline value: () -> T ): ArgumentDelegate < T > If the argument is not given, call value , kotlin.Function0((com.github.ajalt.clikt.parameters.arguments.defaultLazy.T)))/value) and use its return value instead of throwing an error. This must be applied after all other transforms. If the argument is given on the command line, value , kotlin.Function0((com.github.ajalt.clikt.parameters.arguments.defaultLazy.T)))/value) will not be called.","title":"defaultLazy"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/default-lazy/#example","text":"val arg : Pair < Int , Int > by argument (). int (). pair (). defaultLazy { expensiveOperation () }","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/default/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / default default \u00b6 fun <T : Any > ProcessedArgument < T , T >.default(value: T ): ArgumentDelegate < T > If the argument is not given, use value , com.github.ajalt.clikt.parameters.arguments.default.T)/value) instead of throwing an error. This must be applied after all other transforms. Example: \u00b6 val arg : Pair < Int , Int > by argument (). int (). pair (). default ( 1 to 2 )","title":"Default"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/default/#default","text":"fun <T : Any > ProcessedArgument < T , T >.default(value: T ): ArgumentDelegate < T > If the argument is not given, use value , com.github.ajalt.clikt.parameters.arguments.default.T)/value) instead of throwing an error. This must be applied after all other transforms.","title":"default"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/default/#example","text":"val arg : Pair < Int , Int > by argument (). int (). pair (). default ( 1 to 2 )","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/multiple/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / multiple multiple \u00b6 fun <T : Any > ProcessedArgument < T , T >.multiple(required: Boolean = false): ProcessedArgument < List < T >, T > Accept any number of values to this argument. Only one argument in a command may use this function, and the command may not have subcommands. This must be called after all other transforms. Example: \u00b6 val arg : List < Int > by argument (). int (). multiple ()","title":"Multiple"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/multiple/#multiple","text":"fun <T : Any > ProcessedArgument < T , T >.multiple(required: Boolean = false): ProcessedArgument < List < T >, T > Accept any number of values to this argument. Only one argument in a command may use this function, and the command may not have subcommands. This must be called after all other transforms.","title":"multiple"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/multiple/#example","text":"val arg : List < Int > by argument (). int (). multiple ()","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/optional/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / optional optional \u00b6 fun <AllT : Any , ValueT> ProcessedArgument < AllT , ValueT >.optional(): ProcessedArgument < AllT ?, ValueT > Return null instead of throwing an error if no value is given. This must be called after all other transforms. Example: \u00b6 val arg : Int ? by argument (). int (). optional ()","title":"Optional"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/optional/#optional","text":"fun <AllT : Any , ValueT> ProcessedArgument < AllT , ValueT >.optional(): ProcessedArgument < AllT ?, ValueT > Return null instead of throwing an error if no value is given. This must be called after all other transforms.","title":"optional"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/optional/#example","text":"val arg : Int ? by argument (). int (). optional ()","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/pair/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / pair pair \u00b6 fun <T : Any > ProcessedArgument < T , T >.pair(): ProcessedArgument < Pair < T , T >, T > Require exactly two values to this argument, and store them in a Pair . This must be called after converting the value type, and before other transforms. Example: \u00b6 val arg : Pair < Int , Int > by argument (). int (). pair ()","title":"Pair"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/pair/#pair","text":"fun <T : Any > ProcessedArgument < T , T >.pair(): ProcessedArgument < Pair < T , T >, T > Require exactly two values to this argument, and store them in a Pair . This must be called after converting the value type, and before other transforms.","title":"pair"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/pair/#example","text":"val arg : Pair < Int , Int > by argument (). int (). pair ()","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/transform-all/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / transformAll transformAll \u00b6 fun <AllInT, ValueT, AllOutT> ProcessedArgument < AllInT , ValueT >.transformAll(nvalues: Int ? = null, required: Boolean ? = null, transform: ArgCallsTransformer < AllOutT , ValueT >): ProcessedArgument < AllOutT , ValueT > Transform all values to the final argument type. The input is a list of values, one for each value on the command line. The values in the list are the output of calls to convert . The input list will have a size of nvalues , kotlin.Int, kotlin.Boolean, kotlin.Function2((com.github.ajalt.clikt.parameters.arguments.ArgumentTransformContext, kotlin.collections.List((com.github.ajalt.clikt.parameters.arguments.transformAll.ValueT)), com.github.ajalt.clikt.parameters.arguments.transformAll.AllOutT)))/nvalues) if nvalues , kotlin.Int, kotlin.Boolean, kotlin.Function2((com.github.ajalt.clikt.parameters.arguments.ArgumentTransformContext, kotlin.collections.List((com.github.ajalt.clikt.parameters.arguments.transformAll.ValueT)), com.github.ajalt.clikt.parameters.arguments.transformAll.AllOutT)))/nvalues) is > 0. Used to implement functions like pair and multiple . Parameters \u00b6 nvalues - The number of values required by this argument. A negative nvalues , kotlin.Int, kotlin.Boolean, kotlin.Function2((com.github.ajalt.clikt.parameters.arguments.ArgumentTransformContext, kotlin.collections.List((com.github.ajalt.clikt.parameters.arguments.transformAll.ValueT)), com.github.ajalt.clikt.parameters.arguments.transformAll.AllOutT)))/nvalues) indicates a variable number of values. required - If true, an error with be thrown if no values are provided to this argument.","title":"Transform all"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/transform-all/#transformall","text":"fun <AllInT, ValueT, AllOutT> ProcessedArgument < AllInT , ValueT >.transformAll(nvalues: Int ? = null, required: Boolean ? = null, transform: ArgCallsTransformer < AllOutT , ValueT >): ProcessedArgument < AllOutT , ValueT > Transform all values to the final argument type. The input is a list of values, one for each value on the command line. The values in the list are the output of calls to convert . The input list will have a size of nvalues , kotlin.Int, kotlin.Boolean, kotlin.Function2((com.github.ajalt.clikt.parameters.arguments.ArgumentTransformContext, kotlin.collections.List((com.github.ajalt.clikt.parameters.arguments.transformAll.ValueT)), com.github.ajalt.clikt.parameters.arguments.transformAll.AllOutT)))/nvalues) if nvalues , kotlin.Int, kotlin.Boolean, kotlin.Function2((com.github.ajalt.clikt.parameters.arguments.ArgumentTransformContext, kotlin.collections.List((com.github.ajalt.clikt.parameters.arguments.transformAll.ValueT)), com.github.ajalt.clikt.parameters.arguments.transformAll.AllOutT)))/nvalues) is > 0. Used to implement functions like pair and multiple .","title":"transformAll"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/transform-all/#parameters","text":"nvalues - The number of values required by this argument. A negative nvalues , kotlin.Int, kotlin.Boolean, kotlin.Function2((com.github.ajalt.clikt.parameters.arguments.ArgumentTransformContext, kotlin.collections.List((com.github.ajalt.clikt.parameters.arguments.transformAll.ValueT)), com.github.ajalt.clikt.parameters.arguments.transformAll.AllOutT)))/nvalues) indicates a variable number of values. required - If true, an error with be thrown if no values are provided to this argument.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/triple/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / triple triple \u00b6 fun <T : Any > ProcessedArgument < T , T >.triple(): ProcessedArgument < Triple < T , T , T >, T > Require exactly three values to this argument, and store them in a Triple This must be called after converting the value type, and before other transforms. Example: \u00b6 val arg : Triple < Int , Int , Int > by argument (). int (). triple ()","title":"Triple"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/triple/#triple","text":"fun <T : Any > ProcessedArgument < T , T >.triple(): ProcessedArgument < Triple < T , T , T >, T > Require exactly three values to this argument, and store them in a Triple This must be called after converting the value type, and before other transforms.","title":"triple"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/triple/#example","text":"val arg : Triple < Int , Int , Int > by argument (). int (). triple ()","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/unique/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / unique unique \u00b6 fun <T : Any > ProcessedArgument < List < T >, T >.unique(): ProcessedArgument < Set < T >, T > Only store unique values for this argument Example: \u00b6 val arg: Set<Int> by argument().int().multiple().unique()","title":"Unique"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/unique/#unique","text":"fun <T : Any > ProcessedArgument < List < T >, T >.unique(): ProcessedArgument < Set < T >, T > Only store unique values for this argument","title":"unique"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/unique/#example","text":"val arg: Set<Int> by argument().int().multiple().unique()","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/validate/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / validate validate \u00b6 fun <AllT : Any , ValueT> ProcessedArgument < AllT , ValueT >.validate(validator: ArgValidator < AllT >): ArgumentDelegate < AllT > Check the final argument value and raise an error if it\u2019s not valid. The validator , kotlin.Function2((com.github.ajalt.clikt.parameters.arguments.ArgumentTransformContext, com.github.ajalt.clikt.parameters.arguments.validate.AllT, kotlin.Unit)))/validator) is called with the final argument type (the output of transformAll ), and should call fail if the value is not valid. You can also call require to fail automatically if an expression is false. Example: \u00b6 val opt by argument (). int (). validate { require ( it % 2 == 0 ) { \"value must be even\" } }","title":"Validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/validate/#validate","text":"fun <AllT : Any , ValueT> ProcessedArgument < AllT , ValueT >.validate(validator: ArgValidator < AllT >): ArgumentDelegate < AllT > Check the final argument value and raise an error if it\u2019s not valid. The validator , kotlin.Function2((com.github.ajalt.clikt.parameters.arguments.ArgumentTransformContext, com.github.ajalt.clikt.parameters.arguments.validate.AllT, kotlin.Unit)))/validator) is called with the final argument type (the output of transformAll ), and should call fail if the value is not valid. You can also call require to fail automatically if an expression is false.","title":"validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/validate/#example","text":"val opt by argument (). int (). validate { require ( it % 2 == 0 ) { \"value must be even\" } }","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / Argument Argument \u00b6 interface Argument A positional parameter to a command. Arguments can take any number of values. Properties \u00b6 Name Summary completionCandidates open val completionCandidates: CompletionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this argument. help abstract val help: String The description of this argument. helpTags abstract val helpTags: Map < String , String > Extra information about this argument to pass to the help formatter. name abstract val name: String The metavar for this argument. nvalues abstract val nvalues: Int The number of values that this argument takes. parameterHelp abstract val parameterHelp: HelpFormatter.ParameterHelp.Argument ? Information about this argument for the help output. required abstract val required: Boolean If true, an error will be thrown if this argument is not given on the command line. Functions \u00b6 Name Summary finalize abstract fun finalize(context: Context , values: List < String >): Unit Called after this command\u2019s argv is parsed to transform and store the argument\u2019s value. postValidate abstract fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value. Inheritors \u00b6 Name Summary ArgumentDelegate interface ArgumentDelegate<out T> : Argument , ReadOnlyProperty < CliktCommand , T > An argument that functions as a property delegate ArgumentTransformContext class ArgumentTransformContext : Argument A receiver for argument transformers.","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/#argument","text":"interface Argument A positional parameter to a command. Arguments can take any number of values.","title":"Argument"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/#properties","text":"Name Summary completionCandidates open val completionCandidates: CompletionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this argument. help abstract val help: String The description of this argument. helpTags abstract val helpTags: Map < String , String > Extra information about this argument to pass to the help formatter. name abstract val name: String The metavar for this argument. nvalues abstract val nvalues: Int The number of values that this argument takes. parameterHelp abstract val parameterHelp: HelpFormatter.ParameterHelp.Argument ? Information about this argument for the help output. required abstract val required: Boolean If true, an error will be thrown if this argument is not given on the command line.","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/#functions","text":"Name Summary finalize abstract fun finalize(context: Context , values: List < String >): Unit Called after this command\u2019s argv is parsed to transform and store the argument\u2019s value. postValidate abstract fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/#inheritors","text":"Name Summary ArgumentDelegate interface ArgumentDelegate<out T> : Argument , ReadOnlyProperty < CliktCommand , T > An argument that functions as a property delegate ArgumentTransformContext class ArgumentTransformContext : Argument A receiver for argument transformers.","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/completion-candidates/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / Argument / completionCandidates completionCandidates \u00b6 open val completionCandidates: CompletionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this argument.","title":"Completion candidates"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/completion-candidates/#completioncandidates","text":"open val completionCandidates: CompletionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this argument.","title":"completionCandidates"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/finalize/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / Argument / finalize finalize \u00b6 abstract fun finalize(context: Context , values: List < String >): Unit Called after this command\u2019s argv is parsed to transform and store the argument\u2019s value. You cannot refer to other parameter values during this call, since they might not have been finalized yet. Parameters \u00b6 context - The context for this parse values - A possibly empty list of values provided to this argument.","title":"Finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/finalize/#finalize","text":"abstract fun finalize(context: Context , values: List < String >): Unit Called after this command\u2019s argv is parsed to transform and store the argument\u2019s value. You cannot refer to other parameter values during this call, since they might not have been finalized yet.","title":"finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/finalize/#parameters","text":"context - The context for this parse values - A possibly empty list of values provided to this argument.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/help-tags/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / Argument / helpTags helpTags \u00b6 abstract val helpTags: Map < String , String > Extra information about this argument to pass to the help formatter.","title":"Help tags"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/help-tags/#helptags","text":"abstract val helpTags: Map < String , String > Extra information about this argument to pass to the help formatter.","title":"helpTags"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/help/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / Argument / help help \u00b6 abstract val help: String The description of this argument. It\u2019s usually better to leave this null and describe options in the usage line of the command instead.","title":"Help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/help/#help","text":"abstract val help: String The description of this argument. It\u2019s usually better to leave this null and describe options in the usage line of the command instead.","title":"help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/name/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / Argument / name name \u00b6 abstract val name: String The metavar for this argument.","title":"Name"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/name/#name","text":"abstract val name: String The metavar for this argument.","title":"name"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/nvalues/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / Argument / nvalues nvalues \u00b6 abstract val nvalues: Int The number of values that this argument takes. Negative nvalues indicates a variable number of values. Cannot be 0.","title":"Nvalues"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/nvalues/#nvalues","text":"abstract val nvalues: Int The number of values that this argument takes. Negative nvalues indicates a variable number of values. Cannot be 0.","title":"nvalues"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/parameter-help/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / Argument / parameterHelp parameterHelp \u00b6 abstract val parameterHelp: HelpFormatter.ParameterHelp.Argument ? Information about this argument for the help output.","title":"Parameter help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/parameter-help/#parameterhelp","text":"abstract val parameterHelp: HelpFormatter.ParameterHelp.Argument ? Information about this argument for the help output.","title":"parameterHelp"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/post-validate/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / Argument / postValidate postValidate \u00b6 abstract fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"Post validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/post-validate/#postvalidate","text":"abstract fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"postValidate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/required/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / Argument / required required \u00b6 abstract val required: Boolean If true, an error will be thrown if this argument is not given on the command line.","title":"Required"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument/required/#required","text":"abstract val required: Boolean If true, an error will be thrown if this argument is not given on the command line.","title":"required"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-delegate/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ArgumentDelegate ArgumentDelegate \u00b6 interface ArgumentDelegate<out T> : Argument , ReadOnlyProperty < CliktCommand , T > An argument that functions as a property delegate Inherited Properties \u00b6 Name Summary completionCandidates open val completionCandidates: CompletionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this argument. help abstract val help: String The description of this argument. helpTags abstract val helpTags: Map < String , String > Extra information about this argument to pass to the help formatter. name abstract val name: String The metavar for this argument. nvalues abstract val nvalues: Int The number of values that this argument takes. parameterHelp abstract val parameterHelp: HelpFormatter.ParameterHelp.Argument ? Information about this argument for the help output. required abstract val required: Boolean If true, an error will be thrown if this argument is not given on the command line. Functions \u00b6 Name Summary provideDelegate abstract operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , T > Implementations must call CliktCommand.registerArgument Inherited Functions \u00b6 Name Summary finalize abstract fun finalize(context: Context , values: List < String >): Unit Called after this command\u2019s argv is parsed to transform and store the argument\u2019s value. postValidate abstract fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value. Inheritors \u00b6 Name Summary ProcessedArgument class ProcessedArgument<AllT, ValueT> : ArgumentDelegate < AllT > An Argument delegate implementation that transforms its values .","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-delegate/#argumentdelegate","text":"interface ArgumentDelegate<out T> : Argument , ReadOnlyProperty < CliktCommand , T > An argument that functions as a property delegate","title":"ArgumentDelegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-delegate/#inherited-properties","text":"Name Summary completionCandidates open val completionCandidates: CompletionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this argument. help abstract val help: String The description of this argument. helpTags abstract val helpTags: Map < String , String > Extra information about this argument to pass to the help formatter. name abstract val name: String The metavar for this argument. nvalues abstract val nvalues: Int The number of values that this argument takes. parameterHelp abstract val parameterHelp: HelpFormatter.ParameterHelp.Argument ? Information about this argument for the help output. required abstract val required: Boolean If true, an error will be thrown if this argument is not given on the command line.","title":"Inherited Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-delegate/#functions","text":"Name Summary provideDelegate abstract operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , T > Implementations must call CliktCommand.registerArgument","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-delegate/#inherited-functions","text":"Name Summary finalize abstract fun finalize(context: Context , values: List < String >): Unit Called after this command\u2019s argv is parsed to transform and store the argument\u2019s value. postValidate abstract fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"Inherited Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-delegate/#inheritors","text":"Name Summary ProcessedArgument class ProcessedArgument<AllT, ValueT> : ArgumentDelegate < AllT > An Argument delegate implementation that transforms its values .","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-delegate/provide-delegate/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ArgumentDelegate / provideDelegate provideDelegate \u00b6 abstract operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , T > Implementations must call CliktCommand.registerArgument","title":"Provide delegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-delegate/provide-delegate/#providedelegate","text":"abstract operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , T > Implementations must call CliktCommand.registerArgument","title":"provideDelegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ArgumentTransformContext ArgumentTransformContext \u00b6 class ArgumentTransformContext : Argument A receiver for argument transformers. Constructors \u00b6 Name Summary <init> ArgumentTransformContext(argument: Argument , context: Context ) A receiver for argument transformers. Properties \u00b6 Name Summary argument val argument: Argument The argument that was invoked context val context: Context Functions \u00b6 Name Summary fail fun fail(message: String ): Nothing Throw an exception indicating that usage was incorrect. message fun message(message: String ): Unit Issue a message that can be shown to the user require fun require(value: Boolean , lazyMessage: () -> String = { \"invalid value\" }): Unit If value )/value) is false, call fail with the output of lazyMessage )/lazyMessage)","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/#argumenttransformcontext","text":"class ArgumentTransformContext : Argument A receiver for argument transformers.","title":"ArgumentTransformContext"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/#constructors","text":"Name Summary <init> ArgumentTransformContext(argument: Argument , context: Context ) A receiver for argument transformers.","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/#properties","text":"Name Summary argument val argument: Argument The argument that was invoked context val context: Context","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/#functions","text":"Name Summary fail fun fail(message: String ): Nothing Throw an exception indicating that usage was incorrect. message fun message(message: String ): Unit Issue a message that can be shown to the user require fun require(value: Boolean , lazyMessage: () -> String = { \"invalid value\" }): Unit If value )/value) is false, call fail with the output of lazyMessage )/lazyMessage)","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/-init-/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ArgumentTransformContext / <init> <init> \u00b6 ArgumentTransformContext(argument: Argument , context: Context ) A receiver for argument transformers.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/-init-/#init","text":"ArgumentTransformContext(argument: Argument , context: Context ) A receiver for argument transformers.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/argument/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ArgumentTransformContext / argument argument \u00b6 val argument: Argument The argument that was invoked Property \u00b6 argument - The argument that was invoked","title":"Argument"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/argument/#argument","text":"val argument: Argument The argument that was invoked","title":"argument"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/argument/#property","text":"argument - The argument that was invoked","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/context/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ArgumentTransformContext / context context \u00b6 val context: Context","title":"Context"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/context/#context","text":"val context: Context","title":"context"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/fail/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ArgumentTransformContext / fail fail \u00b6 fun fail(message: String ): Nothing Throw an exception indicating that usage was incorrect.","title":"Fail"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/fail/#fail","text":"fun fail(message: String ): Nothing Throw an exception indicating that usage was incorrect.","title":"fail"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/message/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ArgumentTransformContext / message message \u00b6 fun message(message: String ): Unit Issue a message that can be shown to the user","title":"Message"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/message/#message","text":"fun message(message: String ): Unit Issue a message that can be shown to the user","title":"message"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/require/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ArgumentTransformContext / require require \u00b6 inline fun require(value: Boolean , lazyMessage: () -> String = { \"invalid value\" }): Unit If value )/value) is false, call fail with the output of lazyMessage )/lazyMessage)","title":"Require"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-argument-transform-context/require/#require","text":"inline fun require(value: Boolean , lazyMessage: () -> String = { \"invalid value\" }): Unit If value )/value) is false, call fail with the output of lazyMessage )/lazyMessage)","title":"require"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument ProcessedArgument \u00b6 class ProcessedArgument<AllT, ValueT> : ArgumentDelegate < AllT > An Argument delegate implementation that transforms its values . Constructors \u00b6 Name Summary <init> ProcessedArgument(name: String , nvalues: Int , required: Boolean , help: String , helpTags: Map < String , String >, completionCandidates: CompletionCandidates , transformValue: ArgValueTransformer < ValueT >, transformAll: ArgCallsTransformer < AllT , ValueT >, transformValidator: ArgValidator < AllT >) An Argument delegate implementation that transforms its values . Properties \u00b6 Name Summary completionCandidates val completionCandidates: CompletionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this argument. help val help: String The description of this argument. helpTags val helpTags: Map < String , String > Extra information about this argument to pass to the help formatter. name var name: String The metavar for this argument. nvalues val nvalues: Int The number of values that this argument takes. parameterHelp val parameterHelp: HelpFormatter.ParameterHelp.Argument Information about this argument for the help output. required val required: Boolean If true, an error will be thrown if this argument is not given on the command line. transformAll val transformAll: ArgCallsTransformer < AllT , ValueT > Called in finalize to transform the list of values to the final type. transformValidator val transformValidator: ArgValidator < AllT > Called after all paramters have been finalize d to validate the result of transformAll transformValue val transformValue: ArgValueTransformer < ValueT > Called in finalize to transform each value provided to the argument. Functions \u00b6 Name Summary copy fun <AllT, ValueT> copy(transformValue: ArgValueTransformer < ValueT >, transformAll: ArgCallsTransformer < AllT , ValueT >, validator: ArgValidator < AllT >, name: String = this.name, nvalues: Int = this.nvalues, required: Boolean = this.required, help: String = this.help, helpTags: Map < String , String > = this.helpTags, completionCandidates: CompletionCandidates = this.completionCandidates): ProcessedArgument < AllT , ValueT > Create a new argument that is a copy of this one with different transforms. fun copy(validator: ArgValidator < AllT > = this.transformValidator, name: String = this.name, nvalues: Int = this.nvalues, required: Boolean = this.required, help: String = this.help, helpTags: Map < String , String > = this.helpTags, completionCandidates: CompletionCandidates = this.completionCandidates): ProcessedArgument < AllT , ValueT > Create a new argument that is a copy of this one with the same transforms. finalize fun finalize(context: Context , values: List < String >): Unit Called after this command\u2019s argv is parsed to transform and store the argument\u2019s value. getValue fun getValue(thisRef: CliktCommand , property: KProperty <*>): AllT postValidate fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value. provideDelegate operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , AllT > Implementations must call CliktCommand.registerArgument Extension Functions \u00b6 Name Summary choice fun <T : Any > RawArgument.choice(choices: Map < String , T >): ProcessedArgument < T , T > fun <T : Any > RawArgument.choice(vararg choices: Pair < String , T >): ProcessedArgument < T , T > Convert the argument based on a fixed set of values. fun RawArgument.choice(vararg choices: String ): ProcessedArgument < String , String > Restrict the argument to a fixed set of values. convert fun <T : Any > RawArgument.convert(completionCandidates: CompletionCandidates = this.completionCandidates, conversion: ArgValueTransformer < T >): ProcessedArgument < T , T > Convert the argument\u2019s values. default fun <T : Any > ProcessedArgument < T , T >.default(value: T ): ArgumentDelegate < T > If the argument is not given, use value , com.github.ajalt.clikt.parameters.arguments.default.T)/value) instead of throwing an error. defaultLazy fun <T : Any > ProcessedArgument < T , T >.defaultLazy(value: () -> T ): ArgumentDelegate < T > If the argument is not given, call value , kotlin.Function0((com.github.ajalt.clikt.parameters.arguments.defaultLazy.T)))/value) and use its return value instead of throwing an error. double fun RawArgument.double(): ProcessedArgument < Double , Double > Convert the argument values to a Double file fun RawArgument.file(exists: Boolean = false, fileOkay: Boolean = true, folderOkay: Boolean = true, writable: Boolean = false, readable: Boolean = false): ProcessedArgument < File , File > Convert the argument to a File . float fun RawArgument.float(): ProcessedArgument < Float , Float > Convert the argument values to a Float int fun RawArgument.int(): ProcessedArgument < Int , Int > Convert the argument values to an Int long fun RawArgument.long(): ProcessedArgument < Long , Long > Convert the argument values to a Long multiple fun <T : Any > ProcessedArgument < T , T >.multiple(required: Boolean = false): ProcessedArgument < List < T >, T > Accept any number of values to this argument. optional fun <AllT : Any , ValueT> ProcessedArgument < AllT , ValueT >.optional(): ProcessedArgument < AllT ?, ValueT > Return null instead of throwing an error if no value is given. pair fun <T : Any > ProcessedArgument < T , T >.pair(): ProcessedArgument < Pair < T , T >, T > Require exactly two values to this argument, and store them in a Pair . path fun RawArgument.path(exists: Boolean = false, fileOkay: Boolean = true, folderOkay: Boolean = true, writable: Boolean = false, readable: Boolean = false, fileSystem: FileSystem = FileSystems.getDefault()): ProcessedArgument <Path, Path> Convert the argument to a Path . restrictTo fun <T> ProcessedArgument < T , T >.restrictTo(min: T ? = null, max: T ? = null, clamp: Boolean = false): ProcessedArgument < T , T > where T : Number , T : Comparable < T > fun <T> ProcessedArgument < T , T >.restrictTo(range: ClosedRange < T >, clamp: Boolean = false): ProcessedArgument < T , T > where T : Number , T : Comparable < T > Restrict the argument values to fit into a range. transformAll fun <AllInT, ValueT, AllOutT> ProcessedArgument < AllInT , ValueT >.transformAll(nvalues: Int ? = null, required: Boolean ? = null, transform: ArgCallsTransformer < AllOutT , ValueT >): ProcessedArgument < AllOutT , ValueT > Transform all values to the final argument type. triple fun <T : Any > ProcessedArgument < T , T >.triple(): ProcessedArgument < Triple < T , T , T >, T > Require exactly three values to this argument, and store them in a Triple unique fun <T : Any > ProcessedArgument < List < T >, T >.unique(): ProcessedArgument < Set < T >, T > Only store unique values for this argument validate fun <AllT : Any , ValueT> ProcessedArgument < AllT , ValueT >.validate(validator: ArgValidator < AllT >): ArgumentDelegate < AllT > Check the final argument value and raise an error if it\u2019s not valid.","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/#processedargument","text":"class ProcessedArgument<AllT, ValueT> : ArgumentDelegate < AllT > An Argument delegate implementation that transforms its values .","title":"ProcessedArgument"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/#constructors","text":"Name Summary <init> ProcessedArgument(name: String , nvalues: Int , required: Boolean , help: String , helpTags: Map < String , String >, completionCandidates: CompletionCandidates , transformValue: ArgValueTransformer < ValueT >, transformAll: ArgCallsTransformer < AllT , ValueT >, transformValidator: ArgValidator < AllT >) An Argument delegate implementation that transforms its values .","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/#properties","text":"Name Summary completionCandidates val completionCandidates: CompletionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this argument. help val help: String The description of this argument. helpTags val helpTags: Map < String , String > Extra information about this argument to pass to the help formatter. name var name: String The metavar for this argument. nvalues val nvalues: Int The number of values that this argument takes. parameterHelp val parameterHelp: HelpFormatter.ParameterHelp.Argument Information about this argument for the help output. required val required: Boolean If true, an error will be thrown if this argument is not given on the command line. transformAll val transformAll: ArgCallsTransformer < AllT , ValueT > Called in finalize to transform the list of values to the final type. transformValidator val transformValidator: ArgValidator < AllT > Called after all paramters have been finalize d to validate the result of transformAll transformValue val transformValue: ArgValueTransformer < ValueT > Called in finalize to transform each value provided to the argument.","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/#functions","text":"Name Summary copy fun <AllT, ValueT> copy(transformValue: ArgValueTransformer < ValueT >, transformAll: ArgCallsTransformer < AllT , ValueT >, validator: ArgValidator < AllT >, name: String = this.name, nvalues: Int = this.nvalues, required: Boolean = this.required, help: String = this.help, helpTags: Map < String , String > = this.helpTags, completionCandidates: CompletionCandidates = this.completionCandidates): ProcessedArgument < AllT , ValueT > Create a new argument that is a copy of this one with different transforms. fun copy(validator: ArgValidator < AllT > = this.transformValidator, name: String = this.name, nvalues: Int = this.nvalues, required: Boolean = this.required, help: String = this.help, helpTags: Map < String , String > = this.helpTags, completionCandidates: CompletionCandidates = this.completionCandidates): ProcessedArgument < AllT , ValueT > Create a new argument that is a copy of this one with the same transforms. finalize fun finalize(context: Context , values: List < String >): Unit Called after this command\u2019s argv is parsed to transform and store the argument\u2019s value. getValue fun getValue(thisRef: CliktCommand , property: KProperty <*>): AllT postValidate fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value. provideDelegate operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , AllT > Implementations must call CliktCommand.registerArgument","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/#extension-functions","text":"Name Summary choice fun <T : Any > RawArgument.choice(choices: Map < String , T >): ProcessedArgument < T , T > fun <T : Any > RawArgument.choice(vararg choices: Pair < String , T >): ProcessedArgument < T , T > Convert the argument based on a fixed set of values. fun RawArgument.choice(vararg choices: String ): ProcessedArgument < String , String > Restrict the argument to a fixed set of values. convert fun <T : Any > RawArgument.convert(completionCandidates: CompletionCandidates = this.completionCandidates, conversion: ArgValueTransformer < T >): ProcessedArgument < T , T > Convert the argument\u2019s values. default fun <T : Any > ProcessedArgument < T , T >.default(value: T ): ArgumentDelegate < T > If the argument is not given, use value , com.github.ajalt.clikt.parameters.arguments.default.T)/value) instead of throwing an error. defaultLazy fun <T : Any > ProcessedArgument < T , T >.defaultLazy(value: () -> T ): ArgumentDelegate < T > If the argument is not given, call value , kotlin.Function0((com.github.ajalt.clikt.parameters.arguments.defaultLazy.T)))/value) and use its return value instead of throwing an error. double fun RawArgument.double(): ProcessedArgument < Double , Double > Convert the argument values to a Double file fun RawArgument.file(exists: Boolean = false, fileOkay: Boolean = true, folderOkay: Boolean = true, writable: Boolean = false, readable: Boolean = false): ProcessedArgument < File , File > Convert the argument to a File . float fun RawArgument.float(): ProcessedArgument < Float , Float > Convert the argument values to a Float int fun RawArgument.int(): ProcessedArgument < Int , Int > Convert the argument values to an Int long fun RawArgument.long(): ProcessedArgument < Long , Long > Convert the argument values to a Long multiple fun <T : Any > ProcessedArgument < T , T >.multiple(required: Boolean = false): ProcessedArgument < List < T >, T > Accept any number of values to this argument. optional fun <AllT : Any , ValueT> ProcessedArgument < AllT , ValueT >.optional(): ProcessedArgument < AllT ?, ValueT > Return null instead of throwing an error if no value is given. pair fun <T : Any > ProcessedArgument < T , T >.pair(): ProcessedArgument < Pair < T , T >, T > Require exactly two values to this argument, and store them in a Pair . path fun RawArgument.path(exists: Boolean = false, fileOkay: Boolean = true, folderOkay: Boolean = true, writable: Boolean = false, readable: Boolean = false, fileSystem: FileSystem = FileSystems.getDefault()): ProcessedArgument <Path, Path> Convert the argument to a Path . restrictTo fun <T> ProcessedArgument < T , T >.restrictTo(min: T ? = null, max: T ? = null, clamp: Boolean = false): ProcessedArgument < T , T > where T : Number , T : Comparable < T > fun <T> ProcessedArgument < T , T >.restrictTo(range: ClosedRange < T >, clamp: Boolean = false): ProcessedArgument < T , T > where T : Number , T : Comparable < T > Restrict the argument values to fit into a range. transformAll fun <AllInT, ValueT, AllOutT> ProcessedArgument < AllInT , ValueT >.transformAll(nvalues: Int ? = null, required: Boolean ? = null, transform: ArgCallsTransformer < AllOutT , ValueT >): ProcessedArgument < AllOutT , ValueT > Transform all values to the final argument type. triple fun <T : Any > ProcessedArgument < T , T >.triple(): ProcessedArgument < Triple < T , T , T >, T > Require exactly three values to this argument, and store them in a Triple unique fun <T : Any > ProcessedArgument < List < T >, T >.unique(): ProcessedArgument < Set < T >, T > Only store unique values for this argument validate fun <AllT : Any , ValueT> ProcessedArgument < AllT , ValueT >.validate(validator: ArgValidator < AllT >): ArgumentDelegate < AllT > Check the final argument value and raise an error if it\u2019s not valid.","title":"Extension Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/-init-/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / <init> <init> \u00b6 ProcessedArgument(name: String , nvalues: Int , required: Boolean , help: String , helpTags: Map < String , String >, completionCandidates: CompletionCandidates , transformValue: ArgValueTransformer < ValueT >, transformAll: ArgCallsTransformer < AllT , ValueT >, transformValidator: ArgValidator < AllT >) An Argument delegate implementation that transforms its values .","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/-init-/#init","text":"ProcessedArgument(name: String , nvalues: Int , required: Boolean , help: String , helpTags: Map < String , String >, completionCandidates: CompletionCandidates , transformValue: ArgValueTransformer < ValueT >, transformAll: ArgCallsTransformer < AllT , ValueT >, transformValidator: ArgValidator < AllT >) An Argument delegate implementation that transforms its values .","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/completion-candidates/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / completionCandidates completionCandidates \u00b6 val completionCandidates: CompletionCandidates Overrides Argument.completionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this argument.","title":"Completion candidates"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/completion-candidates/#completioncandidates","text":"val completionCandidates: CompletionCandidates Overrides Argument.completionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this argument.","title":"completionCandidates"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/copy/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / copy copy \u00b6 fun <AllT, ValueT> copy(transformValue: ArgValueTransformer < ValueT >, transformAll: ArgCallsTransformer < AllT , ValueT >, validator: ArgValidator < AllT >, name: String = this.name, nvalues: Int = this.nvalues, required: Boolean = this.required, help: String = this.help, helpTags: Map < String , String > = this.helpTags, completionCandidates: CompletionCandidates = this.completionCandidates): ProcessedArgument < AllT , ValueT > Create a new argument that is a copy of this one with different transforms. fun copy(validator: ArgValidator < AllT > = this.transformValidator, name: String = this.name, nvalues: Int = this.nvalues, required: Boolean = this.required, help: String = this.help, helpTags: Map < String , String > = this.helpTags, completionCandidates: CompletionCandidates = this.completionCandidates): ProcessedArgument < AllT , ValueT > Create a new argument that is a copy of this one with the same transforms.","title":"Copy"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/copy/#copy","text":"fun <AllT, ValueT> copy(transformValue: ArgValueTransformer < ValueT >, transformAll: ArgCallsTransformer < AllT , ValueT >, validator: ArgValidator < AllT >, name: String = this.name, nvalues: Int = this.nvalues, required: Boolean = this.required, help: String = this.help, helpTags: Map < String , String > = this.helpTags, completionCandidates: CompletionCandidates = this.completionCandidates): ProcessedArgument < AllT , ValueT > Create a new argument that is a copy of this one with different transforms. fun copy(validator: ArgValidator < AllT > = this.transformValidator, name: String = this.name, nvalues: Int = this.nvalues, required: Boolean = this.required, help: String = this.help, helpTags: Map < String , String > = this.helpTags, completionCandidates: CompletionCandidates = this.completionCandidates): ProcessedArgument < AllT , ValueT > Create a new argument that is a copy of this one with the same transforms.","title":"copy"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/finalize/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / finalize finalize \u00b6 fun finalize(context: Context , values: List < String >): Unit Overrides Argument.finalize Called after this command\u2019s argv is parsed to transform and store the argument\u2019s value. You cannot refer to other parameter values during this call, since they might not have been finalized yet. Parameters \u00b6 context - The context for this parse values - A possibly empty list of values provided to this argument.","title":"Finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/finalize/#finalize","text":"fun finalize(context: Context , values: List < String >): Unit Overrides Argument.finalize Called after this command\u2019s argv is parsed to transform and store the argument\u2019s value. You cannot refer to other parameter values during this call, since they might not have been finalized yet.","title":"finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/finalize/#parameters","text":"context - The context for this parse values - A possibly empty list of values provided to this argument.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/get-value/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / getValue getValue \u00b6 fun getValue(thisRef: CliktCommand , property: KProperty <*>): AllT","title":"Get value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/get-value/#getvalue","text":"fun getValue(thisRef: CliktCommand , property: KProperty <*>): AllT","title":"getValue"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/help-tags/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / helpTags helpTags \u00b6 val helpTags: Map < String , String > Overrides Argument.helpTags Extra information about this argument to pass to the help formatter.","title":"Help tags"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/help-tags/#helptags","text":"val helpTags: Map < String , String > Overrides Argument.helpTags Extra information about this argument to pass to the help formatter.","title":"helpTags"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/help/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / help help \u00b6 val help: String Overrides Argument.help The description of this argument. It\u2019s usually better to leave this null and describe options in the usage line of the command instead.","title":"Help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/help/#help","text":"val help: String Overrides Argument.help The description of this argument. It\u2019s usually better to leave this null and describe options in the usage line of the command instead.","title":"help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/name/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / name name \u00b6 var name: String Overrides Argument.name The metavar for this argument.","title":"Name"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/name/#name","text":"var name: String Overrides Argument.name The metavar for this argument.","title":"name"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/nvalues/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / nvalues nvalues \u00b6 val nvalues: Int Overrides Argument.nvalues The number of values that this argument takes. Negative nvalues indicates a variable number of values. Cannot be 0.","title":"Nvalues"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/nvalues/#nvalues","text":"val nvalues: Int Overrides Argument.nvalues The number of values that this argument takes. Negative nvalues indicates a variable number of values. Cannot be 0.","title":"nvalues"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/parameter-help/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / parameterHelp parameterHelp \u00b6 val parameterHelp: HelpFormatter.ParameterHelp.Argument Overrides Argument.parameterHelp Information about this argument for the help output.","title":"Parameter help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/parameter-help/#parameterhelp","text":"val parameterHelp: HelpFormatter.ParameterHelp.Argument Overrides Argument.parameterHelp Information about this argument for the help output.","title":"parameterHelp"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/post-validate/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / postValidate postValidate \u00b6 fun postValidate(context: Context ): Unit Overrides Argument.postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"Post validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/post-validate/#postvalidate","text":"fun postValidate(context: Context ): Unit Overrides Argument.postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"postValidate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/provide-delegate/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / provideDelegate provideDelegate \u00b6 operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , AllT > Overrides ArgumentDelegate.provideDelegate Implementations must call CliktCommand.registerArgument","title":"Provide delegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/provide-delegate/#providedelegate","text":"operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , AllT > Overrides ArgumentDelegate.provideDelegate Implementations must call CliktCommand.registerArgument","title":"provideDelegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/required/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / required required \u00b6 val required: Boolean Overrides Argument.required If true, an error will be thrown if this argument is not given on the command line.","title":"Required"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/required/#required","text":"val required: Boolean Overrides Argument.required If true, an error will be thrown if this argument is not given on the command line.","title":"required"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/transform-all/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / transformAll transformAll \u00b6 val transformAll: ArgCallsTransformer < AllT , ValueT > Called in finalize to transform the list of values to the final type. Property \u00b6 transformAll - Called in finalize to transform the list of values to the final type.","title":"Transform all"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/transform-all/#transformall","text":"val transformAll: ArgCallsTransformer < AllT , ValueT > Called in finalize to transform the list of values to the final type.","title":"transformAll"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/transform-all/#property","text":"transformAll - Called in finalize to transform the list of values to the final type.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/transform-validator/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / transformValidator transformValidator \u00b6 val transformValidator: ArgValidator < AllT > Called after all paramters have been finalize d to validate the result of transformAll Property \u00b6 transformValidator - Called after all paramters have been finalize d to validate the result of transformAll","title":"Transform validator"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/transform-validator/#transformvalidator","text":"val transformValidator: ArgValidator < AllT > Called after all paramters have been finalize d to validate the result of transformAll","title":"transformValidator"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/transform-validator/#property","text":"transformValidator - Called after all paramters have been finalize d to validate the result of transformAll","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/transform-value/","text":"clikt / com.github.ajalt.clikt.parameters.arguments / ProcessedArgument / transformValue transformValue \u00b6 val transformValue: ArgValueTransformer < ValueT > Called in finalize to transform each value provided to the argument. Property \u00b6 transformValue - Called in finalize to transform each value provided to the argument.","title":"Transform value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/transform-value/#transformvalue","text":"val transformValue: ArgValueTransformer < ValueT > Called in finalize to transform each value provided to the argument.","title":"transformValue"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.arguments/-processed-argument/transform-value/#property","text":"transformValue - Called in finalize to transform each value provided to the argument.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/","text":"clikt / com.github.ajalt.clikt.parameters.groups Package com.github.ajalt.clikt.parameters.groups \u00b6 Types \u00b6 Name Summary ChoiceGroup class ChoiceGroup<GroupT : OptionGroup , OutT> : ParameterGroupDelegate < OutT > CoOccurringOptionGroup class CoOccurringOptionGroup<GroupT : OptionGroup , OutT> : ParameterGroupDelegate < OutT > MutuallyExclusiveOptions class MutuallyExclusiveOptions<OptT : Any , OutT> : ParameterGroupDelegate < OutT > OptionGroup open class OptionGroup : ParameterGroup , ParameterHolder A group of options that can be shown together in help output, or restricted to be cooccurring . ParameterGroup interface ParameterGroup ParameterGroupDelegate interface ParameterGroupDelegate<out T> : ParameterGroup , ReadOnlyProperty < CliktCommand , T > Functions \u00b6 Name Summary cooccurring fun <T : OptionGroup > T .cooccurring(): CoOccurringOptionGroup < T , T ?> Make this group a co-occurring group. default fun <T : Any > MutuallyExclusiveOptions < T , T ?>.default(value: T ): MutuallyExclusiveOptions < T , T > If none of the options in a mutuallyExclusiveOptions group are given on the command line, us value , com.github.ajalt.clikt.parameters.groups.default.T)/value) for the group. groupChoice fun <T : OptionGroup > RawOption .groupChoice(choices: Map < String , T >): ChoiceGroup < T , T ?> fun <T : OptionGroup > RawOption .groupChoice(vararg choices: Pair < String , T >): ChoiceGroup < T , T ?> Convert the option to an option group based on a fixed set of values. mutuallyExclusiveOptions fun <T : Any > ParameterHolder .mutuallyExclusiveOptions(option1: OptionDelegate < T ?>, option2: OptionDelegate < T ?>, vararg options: OptionDelegate < T ?>, name: String ? = null, help: String ? = null): MutuallyExclusiveOptions < T , T ?> Declare a set of two or more mutually exclusive options. provideDelegate operator fun <T : OptionGroup > T .provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , T > required fun <T : OptionGroup > ChoiceGroup < T , T ?>.required(): ChoiceGroup < T , T > If a groupChoice option is not called on the command line, throw a MissingParameter exception. fun <T : Any > MutuallyExclusiveOptions < T , T ?>.required(): MutuallyExclusiveOptions < T , T > Make a mutuallyExclusiveOptions group required. If none of the options in the group are given, a UsageError is thrown. single fun <T : Any > MutuallyExclusiveOptions < T , T ?>.single(): MutuallyExclusiveOptions < T , T ?> If more than one of the group\u2019s options are given on the command line, throw a MutuallyExclusiveGroupException","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/#package-comgithubajaltcliktparametersgroups","text":"","title":"Package com.github.ajalt.clikt.parameters.groups"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/#types","text":"Name Summary ChoiceGroup class ChoiceGroup<GroupT : OptionGroup , OutT> : ParameterGroupDelegate < OutT > CoOccurringOptionGroup class CoOccurringOptionGroup<GroupT : OptionGroup , OutT> : ParameterGroupDelegate < OutT > MutuallyExclusiveOptions class MutuallyExclusiveOptions<OptT : Any , OutT> : ParameterGroupDelegate < OutT > OptionGroup open class OptionGroup : ParameterGroup , ParameterHolder A group of options that can be shown together in help output, or restricted to be cooccurring . ParameterGroup interface ParameterGroup ParameterGroupDelegate interface ParameterGroupDelegate<out T> : ParameterGroup , ReadOnlyProperty < CliktCommand , T >","title":"Types"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/#functions","text":"Name Summary cooccurring fun <T : OptionGroup > T .cooccurring(): CoOccurringOptionGroup < T , T ?> Make this group a co-occurring group. default fun <T : Any > MutuallyExclusiveOptions < T , T ?>.default(value: T ): MutuallyExclusiveOptions < T , T > If none of the options in a mutuallyExclusiveOptions group are given on the command line, us value , com.github.ajalt.clikt.parameters.groups.default.T)/value) for the group. groupChoice fun <T : OptionGroup > RawOption .groupChoice(choices: Map < String , T >): ChoiceGroup < T , T ?> fun <T : OptionGroup > RawOption .groupChoice(vararg choices: Pair < String , T >): ChoiceGroup < T , T ?> Convert the option to an option group based on a fixed set of values. mutuallyExclusiveOptions fun <T : Any > ParameterHolder .mutuallyExclusiveOptions(option1: OptionDelegate < T ?>, option2: OptionDelegate < T ?>, vararg options: OptionDelegate < T ?>, name: String ? = null, help: String ? = null): MutuallyExclusiveOptions < T , T ?> Declare a set of two or more mutually exclusive options. provideDelegate operator fun <T : OptionGroup > T .provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , T > required fun <T : OptionGroup > ChoiceGroup < T , T ?>.required(): ChoiceGroup < T , T > If a groupChoice option is not called on the command line, throw a MissingParameter exception. fun <T : Any > MutuallyExclusiveOptions < T , T ?>.required(): MutuallyExclusiveOptions < T , T > Make a mutuallyExclusiveOptions group required. If none of the options in the group are given, a UsageError is thrown. single fun <T : Any > MutuallyExclusiveOptions < T , T ?>.single(): MutuallyExclusiveOptions < T , T ?> If more than one of the group\u2019s options are given on the command line, throw a MutuallyExclusiveGroupException","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/cooccurring/","text":"clikt / com.github.ajalt.clikt.parameters.groups / cooccurring cooccurring \u00b6 fun <T : OptionGroup > T .cooccurring(): CoOccurringOptionGroup < T , T ?> Make this group a co-occurring group. The group becomes nullable. At least one option in the group must be required . Of none of the options in the group are given on the command line, the group is null and none of the required constraints are enforced. If any option in the group is given, all required options in the group must be given as well.","title":"Cooccurring"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/cooccurring/#cooccurring","text":"fun <T : OptionGroup > T .cooccurring(): CoOccurringOptionGroup < T , T ?> Make this group a co-occurring group. The group becomes nullable. At least one option in the group must be required . Of none of the options in the group are given on the command line, the group is null and none of the required constraints are enforced. If any option in the group is given, all required options in the group must be given as well.","title":"cooccurring"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/default/","text":"clikt / com.github.ajalt.clikt.parameters.groups / default default \u00b6 fun <T : Any > MutuallyExclusiveOptions < T , T ?>.default(value: T ): MutuallyExclusiveOptions < T , T > If none of the options in a mutuallyExclusiveOptions group are given on the command line, us value , com.github.ajalt.clikt.parameters.groups.default.T)/value) for the group.","title":"Default"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/default/#default","text":"fun <T : Any > MutuallyExclusiveOptions < T , T ?>.default(value: T ): MutuallyExclusiveOptions < T , T > If none of the options in a mutuallyExclusiveOptions group are given on the command line, us value , com.github.ajalt.clikt.parameters.groups.default.T)/value) for the group.","title":"default"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/group-choice/","text":"clikt / com.github.ajalt.clikt.parameters.groups / groupChoice groupChoice \u00b6 fun <T : OptionGroup > RawOption .groupChoice(choices: Map < String , T >): ChoiceGroup < T , T ?> Convert the option to an option group based on a fixed set of values. Example: \u00b6 option (). choice ( mapOf ( \"foo\" to FooOptionGroup (), \"bar\" to BarOptionGroup ())) See Also com.github.ajalt.clikt.parameters.types.choice fun <T : OptionGroup > RawOption .groupChoice(vararg choices: Pair < String , T >): ChoiceGroup < T , T ?> Convert the option to an option group based on a fixed set of values. Example: \u00b6 option (). choice ( \"foo\" to FooOptionGroup (), \"bar\" to BarOptionGroup ()) See Also com.github.ajalt.clikt.parameters.types.choice","title":"Group choice"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/group-choice/#groupchoice","text":"fun <T : OptionGroup > RawOption .groupChoice(choices: Map < String , T >): ChoiceGroup < T , T ?> Convert the option to an option group based on a fixed set of values.","title":"groupChoice"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/group-choice/#example","text":"option (). choice ( mapOf ( \"foo\" to FooOptionGroup (), \"bar\" to BarOptionGroup ())) See Also com.github.ajalt.clikt.parameters.types.choice fun <T : OptionGroup > RawOption .groupChoice(vararg choices: Pair < String , T >): ChoiceGroup < T , T ?> Convert the option to an option group based on a fixed set of values.","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/group-choice/#example_1","text":"option (). choice ( \"foo\" to FooOptionGroup (), \"bar\" to BarOptionGroup ()) See Also com.github.ajalt.clikt.parameters.types.choice","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/mutually-exclusive-options/","text":"clikt / com.github.ajalt.clikt.parameters.groups / mutuallyExclusiveOptions mutuallyExclusiveOptions \u00b6 fun <T : Any > ParameterHolder .mutuallyExclusiveOptions(option1: OptionDelegate < T ?>, option2: OptionDelegate < T ?>, vararg options: OptionDelegate < T ?>, name: String ? = null, help: String ? = null): MutuallyExclusiveOptions < T , T ?> Declare a set of two or more mutually exclusive options. If none of the options are given on the command line, the value of this delegate will be null. If one option is given, the value will be that option\u2019s value. If more than one option is given, the value of the last one is used. All options in the group must have a name specified. All options must be nullable (they cannot use flag , required etc.). If you want flags, you should use switch instead. Example: \u00b6 val fruits : Int ? by mutuallyExclusiveOptions ( option ( \"--apples\" ). int (), option ( \"--oranges\" ). int () ) See Also com.github.ajalt.clikt.parameters.options.switch com.github.ajalt.clikt.parameters.types.choice","title":"Mutually exclusive options"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/mutually-exclusive-options/#mutuallyexclusiveoptions","text":"fun <T : Any > ParameterHolder .mutuallyExclusiveOptions(option1: OptionDelegate < T ?>, option2: OptionDelegate < T ?>, vararg options: OptionDelegate < T ?>, name: String ? = null, help: String ? = null): MutuallyExclusiveOptions < T , T ?> Declare a set of two or more mutually exclusive options. If none of the options are given on the command line, the value of this delegate will be null. If one option is given, the value will be that option\u2019s value. If more than one option is given, the value of the last one is used. All options in the group must have a name specified. All options must be nullable (they cannot use flag , required etc.). If you want flags, you should use switch instead.","title":"mutuallyExclusiveOptions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/mutually-exclusive-options/#example","text":"val fruits : Int ? by mutuallyExclusiveOptions ( option ( \"--apples\" ). int (), option ( \"--oranges\" ). int () ) See Also com.github.ajalt.clikt.parameters.options.switch com.github.ajalt.clikt.parameters.types.choice","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/provide-delegate/","text":"clikt / com.github.ajalt.clikt.parameters.groups / provideDelegate provideDelegate \u00b6 operator fun <T : OptionGroup > T .provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , T >","title":"Provide delegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/provide-delegate/#providedelegate","text":"operator fun <T : OptionGroup > T .provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , T >","title":"provideDelegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/required/","text":"clikt / com.github.ajalt.clikt.parameters.groups / required required \u00b6 fun <T : OptionGroup > ChoiceGroup < T , T ?>.required(): ChoiceGroup < T , T > If a groupChoice option is not called on the command line, throw a MissingParameter exception. Example: \u00b6 option (). choice ( \"foo\" to FooOptionGroup (), \"bar\" to BarOptionGroup ()). required () fun <T : Any > MutuallyExclusiveOptions < T , T ?>.required(): MutuallyExclusiveOptions < T , T > Make a mutuallyExclusiveOptions group required. If none of the options in the group are given, a UsageError is thrown.","title":"Required"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/required/#required","text":"fun <T : OptionGroup > ChoiceGroup < T , T ?>.required(): ChoiceGroup < T , T > If a groupChoice option is not called on the command line, throw a MissingParameter exception.","title":"required"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/required/#example","text":"option (). choice ( \"foo\" to FooOptionGroup (), \"bar\" to BarOptionGroup ()). required () fun <T : Any > MutuallyExclusiveOptions < T , T ?>.required(): MutuallyExclusiveOptions < T , T > Make a mutuallyExclusiveOptions group required. If none of the options in the group are given, a UsageError is thrown.","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/single/","text":"clikt / com.github.ajalt.clikt.parameters.groups / single single \u00b6 fun <T : Any > MutuallyExclusiveOptions < T , T ?>.single(): MutuallyExclusiveOptions < T , T ?> If more than one of the group\u2019s options are given on the command line, throw a MutuallyExclusiveGroupException","title":"Single"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/single/#single","text":"fun <T : Any > MutuallyExclusiveOptions < T , T ?>.single(): MutuallyExclusiveOptions < T , T ?> If more than one of the group\u2019s options are given on the command line, throw a MutuallyExclusiveGroupException","title":"single"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ChoiceGroup ChoiceGroup \u00b6 class ChoiceGroup<GroupT : OptionGroup , OutT> : ParameterGroupDelegate < OutT > Constructors \u00b6 Name Summary <init> ChoiceGroup(option: RawOption , groups: Map < String , GroupT >, transform: ( GroupT ?) -> OutT ) Properties \u00b6 Name Summary groupHelp val groupHelp: String ? A help message to display for this group. groupName val groupName: String ? The name of the group, or null if parameters in the group should not be separated from other parameters in the help output. Functions \u00b6 Name Summary finalize fun finalize(context: Context , invocationsByOption: Map < Option , List < OptionParser.Invocation >>): Unit Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. getValue fun getValue(thisRef: CliktCommand , property: KProperty <*>): OutT postValidate fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values. provideDelegate fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , OutT > Implementations must call CliktCommand.registerOptionGroup Extension Functions \u00b6 Name Summary required fun <T : OptionGroup > ChoiceGroup < T , T ?>.required(): ChoiceGroup < T , T > If a groupChoice option is not called on the command line, throw a MissingParameter exception.","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/#choicegroup","text":"class ChoiceGroup<GroupT : OptionGroup , OutT> : ParameterGroupDelegate < OutT >","title":"ChoiceGroup"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/#constructors","text":"Name Summary <init> ChoiceGroup(option: RawOption , groups: Map < String , GroupT >, transform: ( GroupT ?) -> OutT )","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/#properties","text":"Name Summary groupHelp val groupHelp: String ? A help message to display for this group. groupName val groupName: String ? The name of the group, or null if parameters in the group should not be separated from other parameters in the help output.","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/#functions","text":"Name Summary finalize fun finalize(context: Context , invocationsByOption: Map < Option , List < OptionParser.Invocation >>): Unit Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. getValue fun getValue(thisRef: CliktCommand , property: KProperty <*>): OutT postValidate fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values. provideDelegate fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , OutT > Implementations must call CliktCommand.registerOptionGroup","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/#extension-functions","text":"Name Summary required fun <T : OptionGroup > ChoiceGroup < T , T ?>.required(): ChoiceGroup < T , T > If a groupChoice option is not called on the command line, throw a MissingParameter exception.","title":"Extension Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/-init-/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ChoiceGroup / <init> <init> \u00b6 ChoiceGroup(option: RawOption , groups: Map < String , GroupT >, transform: ( GroupT ?) -> OutT )","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/-init-/#init","text":"ChoiceGroup(option: RawOption , groups: Map < String , GroupT >, transform: ( GroupT ?) -> OutT )","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/finalize/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ChoiceGroup / finalize finalize \u00b6 fun finalize(context: Context , invocationsByOption: Map < Option , List < OptionParser.Invocation >>): Unit Overrides ParameterGroup.finalize Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. Parameters \u00b6 context - The context for this parse invocationsByOption - The invocations of options in this group.","title":"Finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/finalize/#finalize","text":"fun finalize(context: Context , invocationsByOption: Map < Option , List < OptionParser.Invocation >>): Unit Overrides ParameterGroup.finalize Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints.","title":"finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/finalize/#parameters","text":"context - The context for this parse invocationsByOption - The invocations of options in this group.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/get-value/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ChoiceGroup / getValue getValue \u00b6 fun getValue(thisRef: CliktCommand , property: KProperty <*>): OutT","title":"Get value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/get-value/#getvalue","text":"fun getValue(thisRef: CliktCommand , property: KProperty <*>): OutT","title":"getValue"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/group-help/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ChoiceGroup / groupHelp groupHelp \u00b6 val groupHelp: String ? Overrides ParameterGroup.groupHelp A help message to display for this group. If groupName is null, the help formatter will ignore this value.","title":"Group help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/group-help/#grouphelp","text":"val groupHelp: String ? Overrides ParameterGroup.groupHelp A help message to display for this group. If groupName is null, the help formatter will ignore this value.","title":"groupHelp"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/group-name/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ChoiceGroup / groupName groupName \u00b6 val groupName: String ? Overrides ParameterGroup.groupName The name of the group, or null if parameters in the group should not be separated from other parameters in the help output.","title":"Group name"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/group-name/#groupname","text":"val groupName: String ? Overrides ParameterGroup.groupName The name of the group, or null if parameters in the group should not be separated from other parameters in the help output.","title":"groupName"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/post-validate/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ChoiceGroup / postValidate postValidate \u00b6 fun postValidate(context: Context ): Unit Overrides ParameterGroup.postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values.","title":"Post validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/post-validate/#postvalidate","text":"fun postValidate(context: Context ): Unit Overrides ParameterGroup.postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values.","title":"postValidate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/provide-delegate/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ChoiceGroup / provideDelegate provideDelegate \u00b6 fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , OutT > Overrides ParameterGroupDelegate.provideDelegate Implementations must call CliktCommand.registerOptionGroup","title":"Provide delegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-choice-group/provide-delegate/#providedelegate","text":"fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , OutT > Overrides ParameterGroupDelegate.provideDelegate Implementations must call CliktCommand.registerOptionGroup","title":"provideDelegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/","text":"clikt / com.github.ajalt.clikt.parameters.groups / CoOccurringOptionGroup CoOccurringOptionGroup \u00b6 class CoOccurringOptionGroup<GroupT : OptionGroup , OutT> : ParameterGroupDelegate < OutT > Constructors \u00b6 Name Summary <init> CoOccurringOptionGroup(group: GroupT , transform: (occurred: Boolean ?, group: GroupT , context: Context ) -> OutT ) Properties \u00b6 Name Summary groupHelp val groupHelp: String ? A help message to display for this group. groupName val groupName: String ? The name of the group, or null if parameters in the group should not be separated from other parameters in the help output. Functions \u00b6 Name Summary finalize fun finalize(context: Context , invocationsByOption: Map < Option , List < OptionParser.Invocation >>): Unit Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. getValue fun getValue(thisRef: CliktCommand , property: KProperty <*>): OutT postValidate fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values. provideDelegate fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , OutT > Implementations must call CliktCommand.registerOptionGroup","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/#cooccurringoptiongroup","text":"class CoOccurringOptionGroup<GroupT : OptionGroup , OutT> : ParameterGroupDelegate < OutT >","title":"CoOccurringOptionGroup"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/#constructors","text":"Name Summary <init> CoOccurringOptionGroup(group: GroupT , transform: (occurred: Boolean ?, group: GroupT , context: Context ) -> OutT )","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/#properties","text":"Name Summary groupHelp val groupHelp: String ? A help message to display for this group. groupName val groupName: String ? The name of the group, or null if parameters in the group should not be separated from other parameters in the help output.","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/#functions","text":"Name Summary finalize fun finalize(context: Context , invocationsByOption: Map < Option , List < OptionParser.Invocation >>): Unit Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. getValue fun getValue(thisRef: CliktCommand , property: KProperty <*>): OutT postValidate fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values. provideDelegate fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , OutT > Implementations must call CliktCommand.registerOptionGroup","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/-init-/","text":"clikt / com.github.ajalt.clikt.parameters.groups / CoOccurringOptionGroup / <init> <init> \u00b6 CoOccurringOptionGroup(group: GroupT , transform: (occurred: Boolean ?, group: GroupT , context: Context ) -> OutT )","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/-init-/#init","text":"CoOccurringOptionGroup(group: GroupT , transform: (occurred: Boolean ?, group: GroupT , context: Context ) -> OutT )","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/finalize/","text":"clikt / com.github.ajalt.clikt.parameters.groups / CoOccurringOptionGroup / finalize finalize \u00b6 fun finalize(context: Context , invocationsByOption: Map < Option , List < OptionParser.Invocation >>): Unit Overrides ParameterGroup.finalize Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. Parameters \u00b6 context - The context for this parse invocationsByOption - The invocations of options in this group.","title":"Finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/finalize/#finalize","text":"fun finalize(context: Context , invocationsByOption: Map < Option , List < OptionParser.Invocation >>): Unit Overrides ParameterGroup.finalize Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints.","title":"finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/finalize/#parameters","text":"context - The context for this parse invocationsByOption - The invocations of options in this group.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/get-value/","text":"clikt / com.github.ajalt.clikt.parameters.groups / CoOccurringOptionGroup / getValue getValue \u00b6 fun getValue(thisRef: CliktCommand , property: KProperty <*>): OutT","title":"Get value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/get-value/#getvalue","text":"fun getValue(thisRef: CliktCommand , property: KProperty <*>): OutT","title":"getValue"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/group-help/","text":"clikt / com.github.ajalt.clikt.parameters.groups / CoOccurringOptionGroup / groupHelp groupHelp \u00b6 val groupHelp: String ? Overrides ParameterGroup.groupHelp A help message to display for this group. If groupName is null, the help formatter will ignore this value.","title":"Group help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/group-help/#grouphelp","text":"val groupHelp: String ? Overrides ParameterGroup.groupHelp A help message to display for this group. If groupName is null, the help formatter will ignore this value.","title":"groupHelp"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/group-name/","text":"clikt / com.github.ajalt.clikt.parameters.groups / CoOccurringOptionGroup / groupName groupName \u00b6 val groupName: String ? Overrides ParameterGroup.groupName The name of the group, or null if parameters in the group should not be separated from other parameters in the help output.","title":"Group name"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/group-name/#groupname","text":"val groupName: String ? Overrides ParameterGroup.groupName The name of the group, or null if parameters in the group should not be separated from other parameters in the help output.","title":"groupName"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/post-validate/","text":"clikt / com.github.ajalt.clikt.parameters.groups / CoOccurringOptionGroup / postValidate postValidate \u00b6 fun postValidate(context: Context ): Unit Overrides ParameterGroup.postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values.","title":"Post validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/post-validate/#postvalidate","text":"fun postValidate(context: Context ): Unit Overrides ParameterGroup.postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values.","title":"postValidate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/provide-delegate/","text":"clikt / com.github.ajalt.clikt.parameters.groups / CoOccurringOptionGroup / provideDelegate provideDelegate \u00b6 fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , OutT > Overrides ParameterGroupDelegate.provideDelegate Implementations must call CliktCommand.registerOptionGroup","title":"Provide delegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-co-occurring-option-group/provide-delegate/#providedelegate","text":"fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , OutT > Overrides ParameterGroupDelegate.provideDelegate Implementations must call CliktCommand.registerOptionGroup","title":"provideDelegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/","text":"clikt / com.github.ajalt.clikt.parameters.groups / MutuallyExclusiveOptions MutuallyExclusiveOptions \u00b6 class MutuallyExclusiveOptions<OptT : Any , OutT> : ParameterGroupDelegate < OutT > Constructors \u00b6 Name Summary <init> MutuallyExclusiveOptions(options: List < OptionDelegate < OptT ?>>, groupName: String ?, groupHelp: String ?, transformAll: ( List < OptT >) -> OutT ) Properties \u00b6 Name Summary groupHelp val groupHelp: String ? A help message to display for this group. groupName val groupName: String ? The name of the group, or null if parameters in the group should not be separated from other parameters in the help output. Functions \u00b6 Name Summary copy fun <T> copy(transformAll: ( List < OptT >) -> T ): MutuallyExclusiveOptions < OptT , T > finalize fun finalize(context: Context , invocationsByOption: Map < Option , List < OptionParser.Invocation >>): Unit Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. getValue fun getValue(thisRef: CliktCommand , property: KProperty <*>): OutT postValidate fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values. provideDelegate operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , OutT > Implementations must call CliktCommand.registerOptionGroup Extension Functions \u00b6 Name Summary default fun <T : Any > MutuallyExclusiveOptions < T , T ?>.default(value: T ): MutuallyExclusiveOptions < T , T > If none of the options in a mutuallyExclusiveOptions group are given on the command line, us value , com.github.ajalt.clikt.parameters.groups.default.T)/value) for the group. required fun <T : Any > MutuallyExclusiveOptions < T , T ?>.required(): MutuallyExclusiveOptions < T , T > Make a mutuallyExclusiveOptions group required. If none of the options in the group are given, a UsageError is thrown. single fun <T : Any > MutuallyExclusiveOptions < T , T ?>.single(): MutuallyExclusiveOptions < T , T ?> If more than one of the group\u2019s options are given on the command line, throw a MutuallyExclusiveGroupException","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/#mutuallyexclusiveoptions","text":"class MutuallyExclusiveOptions<OptT : Any , OutT> : ParameterGroupDelegate < OutT >","title":"MutuallyExclusiveOptions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/#constructors","text":"Name Summary <init> MutuallyExclusiveOptions(options: List < OptionDelegate < OptT ?>>, groupName: String ?, groupHelp: String ?, transformAll: ( List < OptT >) -> OutT )","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/#properties","text":"Name Summary groupHelp val groupHelp: String ? A help message to display for this group. groupName val groupName: String ? The name of the group, or null if parameters in the group should not be separated from other parameters in the help output.","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/#functions","text":"Name Summary copy fun <T> copy(transformAll: ( List < OptT >) -> T ): MutuallyExclusiveOptions < OptT , T > finalize fun finalize(context: Context , invocationsByOption: Map < Option , List < OptionParser.Invocation >>): Unit Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. getValue fun getValue(thisRef: CliktCommand , property: KProperty <*>): OutT postValidate fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values. provideDelegate operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , OutT > Implementations must call CliktCommand.registerOptionGroup","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/#extension-functions","text":"Name Summary default fun <T : Any > MutuallyExclusiveOptions < T , T ?>.default(value: T ): MutuallyExclusiveOptions < T , T > If none of the options in a mutuallyExclusiveOptions group are given on the command line, us value , com.github.ajalt.clikt.parameters.groups.default.T)/value) for the group. required fun <T : Any > MutuallyExclusiveOptions < T , T ?>.required(): MutuallyExclusiveOptions < T , T > Make a mutuallyExclusiveOptions group required. If none of the options in the group are given, a UsageError is thrown. single fun <T : Any > MutuallyExclusiveOptions < T , T ?>.single(): MutuallyExclusiveOptions < T , T ?> If more than one of the group\u2019s options are given on the command line, throw a MutuallyExclusiveGroupException","title":"Extension Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/-init-/","text":"clikt / com.github.ajalt.clikt.parameters.groups / MutuallyExclusiveOptions / <init> <init> \u00b6 MutuallyExclusiveOptions(options: List < OptionDelegate < OptT ?>>, groupName: String ?, groupHelp: String ?, transformAll: ( List < OptT >) -> OutT )","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/-init-/#init","text":"MutuallyExclusiveOptions(options: List < OptionDelegate < OptT ?>>, groupName: String ?, groupHelp: String ?, transformAll: ( List < OptT >) -> OutT )","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/copy/","text":"clikt / com.github.ajalt.clikt.parameters.groups / MutuallyExclusiveOptions / copy copy \u00b6 fun <T> copy(transformAll: ( List < OptT >) -> T ): MutuallyExclusiveOptions < OptT , T >","title":"Copy"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/copy/#copy","text":"fun <T> copy(transformAll: ( List < OptT >) -> T ): MutuallyExclusiveOptions < OptT , T >","title":"copy"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/finalize/","text":"clikt / com.github.ajalt.clikt.parameters.groups / MutuallyExclusiveOptions / finalize finalize \u00b6 fun finalize(context: Context , invocationsByOption: Map < Option , List < OptionParser.Invocation >>): Unit Overrides ParameterGroup.finalize Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. Parameters \u00b6 context - The context for this parse invocationsByOption - The invocations of options in this group.","title":"Finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/finalize/#finalize","text":"fun finalize(context: Context , invocationsByOption: Map < Option , List < OptionParser.Invocation >>): Unit Overrides ParameterGroup.finalize Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints.","title":"finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/finalize/#parameters","text":"context - The context for this parse invocationsByOption - The invocations of options in this group.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/get-value/","text":"clikt / com.github.ajalt.clikt.parameters.groups / MutuallyExclusiveOptions / getValue getValue \u00b6 fun getValue(thisRef: CliktCommand , property: KProperty <*>): OutT","title":"Get value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/get-value/#getvalue","text":"fun getValue(thisRef: CliktCommand , property: KProperty <*>): OutT","title":"getValue"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/group-help/","text":"clikt / com.github.ajalt.clikt.parameters.groups / MutuallyExclusiveOptions / groupHelp groupHelp \u00b6 val groupHelp: String ? Overrides ParameterGroup.groupHelp A help message to display for this group. If groupName is null, the help formatter will ignore this value.","title":"Group help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/group-help/#grouphelp","text":"val groupHelp: String ? Overrides ParameterGroup.groupHelp A help message to display for this group. If groupName is null, the help formatter will ignore this value.","title":"groupHelp"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/group-name/","text":"clikt / com.github.ajalt.clikt.parameters.groups / MutuallyExclusiveOptions / groupName groupName \u00b6 val groupName: String ? Overrides ParameterGroup.groupName The name of the group, or null if parameters in the group should not be separated from other parameters in the help output.","title":"Group name"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/group-name/#groupname","text":"val groupName: String ? Overrides ParameterGroup.groupName The name of the group, or null if parameters in the group should not be separated from other parameters in the help output.","title":"groupName"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/post-validate/","text":"clikt / com.github.ajalt.clikt.parameters.groups / MutuallyExclusiveOptions / postValidate postValidate \u00b6 fun postValidate(context: Context ): Unit Overrides ParameterGroup.postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values.","title":"Post validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/post-validate/#postvalidate","text":"fun postValidate(context: Context ): Unit Overrides ParameterGroup.postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values.","title":"postValidate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/provide-delegate/","text":"clikt / com.github.ajalt.clikt.parameters.groups / MutuallyExclusiveOptions / provideDelegate provideDelegate \u00b6 operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , OutT > Overrides ParameterGroupDelegate.provideDelegate Implementations must call CliktCommand.registerOptionGroup","title":"Provide delegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-mutually-exclusive-options/provide-delegate/#providedelegate","text":"operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , OutT > Overrides ParameterGroupDelegate.provideDelegate Implementations must call CliktCommand.registerOptionGroup","title":"provideDelegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/","text":"clikt / com.github.ajalt.clikt.parameters.groups / OptionGroup OptionGroup \u00b6 open class OptionGroup : ParameterGroup , ParameterHolder A group of options that can be shown together in help output, or restricted to be cooccurring . Declare a subclass with option delegate properties, then use an instance of your subclass is a delegate property in your command with provideDelegate . Example: \u00b6 class UserOptions : OptionGroup ( name = \"User Options\" , help = \"Options controlling the user\" ) { val name by option () val age by option (). int () } class Tool : CliktCommand () { val userOptions by UserOptions () } Note: \u00b6 If you\u2019re using IntelliJ, bug KT-31319 prevents provideDelegate from being imported automatically, so until that\u2019s fixed, you\u2019ll need to add this import manually: import com.github.ajalt.clikt.parameters.groups.provideDelegate Constructors \u00b6 Name Summary <init> OptionGroup(name: String ? = null, help: String ? = null) A group of options that can be shown together in help output, or restricted to be cooccurring . Properties \u00b6 Name Summary groupHelp open val groupHelp: String ? A help message to display for this group. groupName open val groupName: String ? The name of the group, or null if parameters in the group should not be separated from other parameters in the help output. Inherited Properties \u00b6 Name Summary parameterHelp open val parameterHelp: HelpFormatter.ParameterHelp.Group ? Functions \u00b6 Name Summary finalize open fun finalize(context: Context , invocationsByOption: Map < Option , List < OptionParser.Invocation >>): Unit Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. postValidate open fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values. registerOption open fun registerOption(option: GroupableOption ): Unit Register an option with this command or group. Extension Functions \u00b6 Name Summary cooccurring fun <T : OptionGroup > T .cooccurring(): CoOccurringOptionGroup < T , T ?> Make this group a co-occurring group. mutuallyExclusiveOptions fun <T : Any > ParameterHolder .mutuallyExclusiveOptions(option1: OptionDelegate < T ?>, option2: OptionDelegate < T ?>, vararg options: OptionDelegate < T ?>, name: String ? = null, help: String ? = null): MutuallyExclusiveOptions < T , T ?> Declare a set of two or more mutually exclusive options. option fun ParameterHolder .option(vararg names: String , help: String = \"\", metavar: String ? = null, hidden: Boolean = false, envvar: String ? = null, envvarSplit: Regex ? = null, helpTags: Map < String , String > = emptyMap()): RawOption Create a property delegate option. provideDelegate operator fun <T : OptionGroup > T .provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , T >","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/#optiongroup","text":"open class OptionGroup : ParameterGroup , ParameterHolder A group of options that can be shown together in help output, or restricted to be cooccurring . Declare a subclass with option delegate properties, then use an instance of your subclass is a delegate property in your command with provideDelegate .","title":"OptionGroup"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/#example","text":"class UserOptions : OptionGroup ( name = \"User Options\" , help = \"Options controlling the user\" ) { val name by option () val age by option (). int () } class Tool : CliktCommand () { val userOptions by UserOptions () }","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/#note","text":"If you\u2019re using IntelliJ, bug KT-31319 prevents provideDelegate from being imported automatically, so until that\u2019s fixed, you\u2019ll need to add this import manually: import com.github.ajalt.clikt.parameters.groups.provideDelegate","title":"Note:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/#constructors","text":"Name Summary <init> OptionGroup(name: String ? = null, help: String ? = null) A group of options that can be shown together in help output, or restricted to be cooccurring .","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/#properties","text":"Name Summary groupHelp open val groupHelp: String ? A help message to display for this group. groupName open val groupName: String ? The name of the group, or null if parameters in the group should not be separated from other parameters in the help output.","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/#inherited-properties","text":"Name Summary parameterHelp open val parameterHelp: HelpFormatter.ParameterHelp.Group ?","title":"Inherited Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/#functions","text":"Name Summary finalize open fun finalize(context: Context , invocationsByOption: Map < Option , List < OptionParser.Invocation >>): Unit Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. postValidate open fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values. registerOption open fun registerOption(option: GroupableOption ): Unit Register an option with this command or group.","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/#extension-functions","text":"Name Summary cooccurring fun <T : OptionGroup > T .cooccurring(): CoOccurringOptionGroup < T , T ?> Make this group a co-occurring group. mutuallyExclusiveOptions fun <T : Any > ParameterHolder .mutuallyExclusiveOptions(option1: OptionDelegate < T ?>, option2: OptionDelegate < T ?>, vararg options: OptionDelegate < T ?>, name: String ? = null, help: String ? = null): MutuallyExclusiveOptions < T , T ?> Declare a set of two or more mutually exclusive options. option fun ParameterHolder .option(vararg names: String , help: String = \"\", metavar: String ? = null, hidden: Boolean = false, envvar: String ? = null, envvarSplit: Regex ? = null, helpTags: Map < String , String > = emptyMap()): RawOption Create a property delegate option. provideDelegate operator fun <T : OptionGroup > T .provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , T >","title":"Extension Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/-init-/","text":"clikt / com.github.ajalt.clikt.parameters.groups / OptionGroup / <init> <init> \u00b6 OptionGroup(name: String ? = null, help: String ? = null) A group of options that can be shown together in help output, or restricted to be cooccurring . Declare a subclass with option delegate properties, then use an instance of your subclass is a delegate property in your command with provideDelegate . Example: \u00b6 class UserOptions : OptionGroup ( name = \"User Options\" , help = \"Options controlling the user\" ) { val name by option () val age by option (). int () } class Tool : CliktCommand () { val userOptions by UserOptions () } Note: \u00b6 If you\u2019re using IntelliJ, bug KT-31319 prevents provideDelegate from being imported automatically, so until that\u2019s fixed, you\u2019ll need to add this import manually: import com.github.ajalt.clikt.parameters.groups.provideDelegate","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/-init-/#init","text":"OptionGroup(name: String ? = null, help: String ? = null) A group of options that can be shown together in help output, or restricted to be cooccurring . Declare a subclass with option delegate properties, then use an instance of your subclass is a delegate property in your command with provideDelegate .","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/-init-/#example","text":"class UserOptions : OptionGroup ( name = \"User Options\" , help = \"Options controlling the user\" ) { val name by option () val age by option (). int () } class Tool : CliktCommand () { val userOptions by UserOptions () }","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/-init-/#note","text":"If you\u2019re using IntelliJ, bug KT-31319 prevents provideDelegate from being imported automatically, so until that\u2019s fixed, you\u2019ll need to add this import manually: import com.github.ajalt.clikt.parameters.groups.provideDelegate","title":"Note:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/finalize/","text":"clikt / com.github.ajalt.clikt.parameters.groups / OptionGroup / finalize finalize \u00b6 open fun finalize(context: Context , invocationsByOption: Map < Option , List < OptionParser.Invocation >>): Unit Overrides ParameterGroup.finalize Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. Parameters \u00b6 context - The context for this parse invocationsByOption - The invocations of options in this group.","title":"Finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/finalize/#finalize","text":"open fun finalize(context: Context , invocationsByOption: Map < Option , List < OptionParser.Invocation >>): Unit Overrides ParameterGroup.finalize Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints.","title":"finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/finalize/#parameters","text":"context - The context for this parse invocationsByOption - The invocations of options in this group.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/group-help/","text":"clikt / com.github.ajalt.clikt.parameters.groups / OptionGroup / groupHelp groupHelp \u00b6 open val groupHelp: String ? Overrides ParameterGroup.groupHelp A help message to display for this group. If groupName is null, the help formatter will ignore this value.","title":"Group help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/group-help/#grouphelp","text":"open val groupHelp: String ? Overrides ParameterGroup.groupHelp A help message to display for this group. If groupName is null, the help formatter will ignore this value.","title":"groupHelp"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/group-name/","text":"clikt / com.github.ajalt.clikt.parameters.groups / OptionGroup / groupName groupName \u00b6 open val groupName: String ? Overrides ParameterGroup.groupName The name of the group, or null if parameters in the group should not be separated from other parameters in the help output.","title":"Group name"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/group-name/#groupname","text":"open val groupName: String ? Overrides ParameterGroup.groupName The name of the group, or null if parameters in the group should not be separated from other parameters in the help output.","title":"groupName"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/post-validate/","text":"clikt / com.github.ajalt.clikt.parameters.groups / OptionGroup / postValidate postValidate \u00b6 open fun postValidate(context: Context ): Unit Overrides ParameterGroup.postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values.","title":"Post validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/post-validate/#postvalidate","text":"open fun postValidate(context: Context ): Unit Overrides ParameterGroup.postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values.","title":"postValidate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/register-option/","text":"clikt / com.github.ajalt.clikt.parameters.groups / OptionGroup / registerOption registerOption \u00b6 open fun registerOption(option: GroupableOption ): Unit Overrides ParameterHolder.registerOption Register an option with this command or group. This is called automatically for the built in options, but you need to call this if you want to add a custom option.","title":"Register option"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-option-group/register-option/#registeroption","text":"open fun registerOption(option: GroupableOption ): Unit Overrides ParameterHolder.registerOption Register an option with this command or group. This is called automatically for the built in options, but you need to call this if you want to add a custom option.","title":"registerOption"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ParameterGroup ParameterGroup \u00b6 interface ParameterGroup Properties \u00b6 Name Summary groupHelp abstract val groupHelp: String ? A help message to display for this group. groupName abstract val groupName: String ? The name of the group, or null if parameters in the group should not be separated from other parameters in the help output. parameterHelp open val parameterHelp: HelpFormatter.ParameterHelp.Group ? Functions \u00b6 Name Summary finalize abstract fun finalize(context: Context , invocationsByOption: Map < Option , List < OptionParser.Invocation >>): Unit Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. postValidate abstract fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values. Inheritors \u00b6 Name Summary OptionGroup open class OptionGroup : ParameterGroup , ParameterHolder A group of options that can be shown together in help output, or restricted to be cooccurring . ParameterGroupDelegate interface ParameterGroupDelegate<out T> : ParameterGroup , ReadOnlyProperty < CliktCommand , T >","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/#parametergroup","text":"interface ParameterGroup","title":"ParameterGroup"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/#properties","text":"Name Summary groupHelp abstract val groupHelp: String ? A help message to display for this group. groupName abstract val groupName: String ? The name of the group, or null if parameters in the group should not be separated from other parameters in the help output. parameterHelp open val parameterHelp: HelpFormatter.ParameterHelp.Group ?","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/#functions","text":"Name Summary finalize abstract fun finalize(context: Context , invocationsByOption: Map < Option , List < OptionParser.Invocation >>): Unit Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. postValidate abstract fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values.","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/#inheritors","text":"Name Summary OptionGroup open class OptionGroup : ParameterGroup , ParameterHolder A group of options that can be shown together in help output, or restricted to be cooccurring . ParameterGroupDelegate interface ParameterGroupDelegate<out T> : ParameterGroup , ReadOnlyProperty < CliktCommand , T >","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/finalize/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ParameterGroup / finalize finalize \u00b6 abstract fun finalize(context: Context , invocationsByOption: Map < Option , List < OptionParser.Invocation >>): Unit Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. Parameters \u00b6 context - The context for this parse invocationsByOption - The invocations of options in this group.","title":"Finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/finalize/#finalize","text":"abstract fun finalize(context: Context , invocationsByOption: Map < Option , List < OptionParser.Invocation >>): Unit Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints.","title":"finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/finalize/#parameters","text":"context - The context for this parse invocationsByOption - The invocations of options in this group.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/group-help/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ParameterGroup / groupHelp groupHelp \u00b6 abstract val groupHelp: String ? A help message to display for this group. If groupName is null, the help formatter will ignore this value.","title":"Group help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/group-help/#grouphelp","text":"abstract val groupHelp: String ? A help message to display for this group. If groupName is null, the help formatter will ignore this value.","title":"groupHelp"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/group-name/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ParameterGroup / groupName groupName \u00b6 abstract val groupName: String ? The name of the group, or null if parameters in the group should not be separated from other parameters in the help output.","title":"Group name"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/group-name/#groupname","text":"abstract val groupName: String ? The name of the group, or null if parameters in the group should not be separated from other parameters in the help output.","title":"groupName"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/parameter-help/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ParameterGroup / parameterHelp parameterHelp \u00b6 open val parameterHelp: HelpFormatter.ParameterHelp.Group ?","title":"Parameter help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/parameter-help/#parameterhelp","text":"open val parameterHelp: HelpFormatter.ParameterHelp.Group ?","title":"parameterHelp"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/post-validate/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ParameterGroup / postValidate postValidate \u00b6 abstract fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values.","title":"Post validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group/post-validate/#postvalidate","text":"abstract fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values.","title":"postValidate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group-delegate/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ParameterGroupDelegate ParameterGroupDelegate \u00b6 interface ParameterGroupDelegate<out T> : ParameterGroup , ReadOnlyProperty < CliktCommand , T > Inherited Properties \u00b6 Name Summary groupHelp abstract val groupHelp: String ? A help message to display for this group. groupName abstract val groupName: String ? The name of the group, or null if parameters in the group should not be separated from other parameters in the help output. parameterHelp open val parameterHelp: HelpFormatter.ParameterHelp.Group ? Functions \u00b6 Name Summary provideDelegate abstract operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , T > Implementations must call CliktCommand.registerOptionGroup Inherited Functions \u00b6 Name Summary finalize abstract fun finalize(context: Context , invocationsByOption: Map < Option , List < OptionParser.Invocation >>): Unit Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. postValidate abstract fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values. Inheritors \u00b6 Name Summary ChoiceGroup class ChoiceGroup<GroupT : OptionGroup , OutT> : ParameterGroupDelegate < OutT > CoOccurringOptionGroup class CoOccurringOptionGroup<GroupT : OptionGroup , OutT> : ParameterGroupDelegate < OutT > MutuallyExclusiveOptions class MutuallyExclusiveOptions<OptT : Any , OutT> : ParameterGroupDelegate < OutT >","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group-delegate/#parametergroupdelegate","text":"interface ParameterGroupDelegate<out T> : ParameterGroup , ReadOnlyProperty < CliktCommand , T >","title":"ParameterGroupDelegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group-delegate/#inherited-properties","text":"Name Summary groupHelp abstract val groupHelp: String ? A help message to display for this group. groupName abstract val groupName: String ? The name of the group, or null if parameters in the group should not be separated from other parameters in the help output. parameterHelp open val parameterHelp: HelpFormatter.ParameterHelp.Group ?","title":"Inherited Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group-delegate/#functions","text":"Name Summary provideDelegate abstract operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , T > Implementations must call CliktCommand.registerOptionGroup","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group-delegate/#inherited-functions","text":"Name Summary finalize abstract fun finalize(context: Context , invocationsByOption: Map < Option , List < OptionParser.Invocation >>): Unit Called after this command\u2019s argv is parsed and all options are validated to validate the group constraints. postValidate abstract fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final values.","title":"Inherited Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group-delegate/#inheritors","text":"Name Summary ChoiceGroup class ChoiceGroup<GroupT : OptionGroup , OutT> : ParameterGroupDelegate < OutT > CoOccurringOptionGroup class CoOccurringOptionGroup<GroupT : OptionGroup , OutT> : ParameterGroupDelegate < OutT > MutuallyExclusiveOptions class MutuallyExclusiveOptions<OptT : Any , OutT> : ParameterGroupDelegate < OutT >","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group-delegate/provide-delegate/","text":"clikt / com.github.ajalt.clikt.parameters.groups / ParameterGroupDelegate / provideDelegate provideDelegate \u00b6 abstract operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , T > Implementations must call CliktCommand.registerOptionGroup","title":"Provide delegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.groups/-parameter-group-delegate/provide-delegate/#providedelegate","text":"abstract operator fun provideDelegate(thisRef: CliktCommand , prop: KProperty <*>): ReadOnlyProperty < CliktCommand , T > Implementations must call CliktCommand.registerOptionGroup","title":"provideDelegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/","text":"clikt / com.github.ajalt.clikt.parameters.options Package com.github.ajalt.clikt.parameters.options \u00b6 Types \u00b6 Name Summary EagerOption class EagerOption : Option An Option with no values that is finalize d before other types of options. FlagOption class FlagOption<T> : OptionDelegate < T > An Option that has no values. Option interface Option An optional command line parameter that takes a fixed number of values. OptionCallTransformContext class OptionCallTransformContext : Option A receiver for options transformers. OptionDelegate interface OptionDelegate<T> : GroupableOption , ReadOnlyProperty < ParameterHolder , T > An option that functions as a property delegate OptionTransformContext class OptionTransformContext : Option A receiver for options transformers. OptionWithValues class OptionWithValues<AllT, EachT, ValueT> : OptionDelegate < AllT >, GroupableOption An Option that takes one or more values. ValueWithDefault data class ValueWithDefault<out T> A container for a value that can have a default value and can be manually set Type Aliases \u00b6 Name Summary ArgsTransformer typealias ArgsTransformer<ValueT, EachT> = OptionCallTransformContext .( List < ValueT >) -> EachT A callback that transforms all the values for a call to the call type. CallsTransformer typealias CallsTransformer<EachT, AllT> = OptionTransformContext .( List < EachT >) -> AllT A callback that transforms all of the calls to the final option type. NullableOption typealias NullableOption<EachT, ValueT> = OptionWithValues < EachT ?, EachT , ValueT > OptionValidator typealias OptionValidator<AllT> = OptionTransformContext .( AllT ) -> Unit A callback validates the final option type RawOption typealias RawOption = NullableOption < String , String > ValueTransformer typealias ValueTransformer<ValueT> = OptionCallTransformContext .( String ) -> ValueT A callback that transforms a single value from a string to the value type Functions \u00b6 Name Summary convert fun <T : Any > RawOption .convert(metavar: String = \"VALUE\", envvarSplit: Regex = this.envvarSplit.default, completionCandidates: CompletionCandidates = this.completionCandidates, conversion: ValueTransformer < T >): NullableOption < T , T > Convert the option value type. counted fun RawOption .counted(): FlagOption < Int > Turn an option into a flag that counts the number of times the option occurs on the command line. default fun <T : Any > FlagOption < T ?>.default(value: T ): FlagOption < T > Set a default value for a option. fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.default(value: EachT , defaultForHelp: String = value.toString()): OptionWithValues < EachT , EachT , ValueT > If the option is not called on the command line (and is not set in an envvar), use value , com.github.ajalt.clikt.parameters.options.default.EachT, kotlin.String)/value) for the option. defaultLazy fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.defaultLazy(defaultForHelp: String = \"\", value: () -> EachT ): OptionWithValues < EachT , EachT , ValueT > If the option is not called on the command line (and is not set in an envvar), call the value , kotlin.String, kotlin.Function0((com.github.ajalt.clikt.parameters.options.defaultLazy.EachT)))/value) and use its return value for the option. deprecated fun <T> FlagOption < T >.deprecated(message: String ? = \"\", tagName: String ? = \"deprecated\", tagValue: String = \"\", error: Boolean = false): OptionDelegate < T > fun <AllT, EachT, ValueT> OptionWithValues < AllT , EachT , ValueT >.deprecated(message: String ? = \"\", tagName: String ? = \"deprecated\", tagValue: String = \"\", error: Boolean = false): OptionDelegate < AllT > Mark this option as deprecated in the help output. flag fun RawOption .flag(vararg secondaryNames: String , default: Boolean = false): FlagOption < Boolean > Turn an option into a boolean flag. multiple fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.multiple(default: List < EachT > = emptyList()): OptionWithValues < List < EachT >, EachT , ValueT > Make the option return a list of calls; each item in the list is the value of one call. option fun ParameterHolder .option(vararg names: String , help: String = \"\", metavar: String ? = null, hidden: Boolean = false, envvar: String ? = null, envvarSplit: Regex ? = null, helpTags: Map < String , String > = emptyMap()): RawOption Create a property delegate option. pair fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.pair(): NullableOption < Pair < ValueT , ValueT >, ValueT > Change to option to take two values, held in a Pair . prompt fun <T : Any > NullableOption < T , T >.prompt(text: String ? = null, default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \"Repeat for confirmation: \", promptSuffix: String = \": \", showDefault: Boolean = true): OptionWithValues < T , T , T > If the option isn\u2019t given on the command line, prompt the user for manual input. required fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.required(): OptionWithValues < EachT , EachT , ValueT > If the option is not called on the command line (and is not set in an envvar), throw a MissingParameter . split fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.split(regex: Regex ): OptionWithValues < List < ValueT >?, List < ValueT >, ValueT > Change to option to take any number of values, separated by a regex , kotlin.text.Regex)/regex). fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.split(delimiter: String ): OptionWithValues < List < ValueT >?, List < ValueT >, ValueT > Change to option to take any number of values, separated by a string delimiter , kotlin.String)/delimiter). switch fun <T : Any > RawOption .switch(choices: Map < String , T >): FlagOption < T ?> fun <T : Any > RawOption .switch(vararg choices: Pair < String , T >): FlagOption < T ?> Turn an option into a set of flags that each map to a value. transformAll fun <AllT, EachT : Any , ValueT> NullableOption < EachT , ValueT >.transformAll(defaultForHelp: String ? = this.helpTags[HelpFormatter.Tags.DEFAULT], showAsRequired: Boolean = HelpFormatter.Tags.REQUIRED in this.helpTags, transform: CallsTransformer < EachT , AllT >): OptionWithValues < AllT , EachT , ValueT > Transform all calls to the option to the final option type. transformValues fun <EachInT : Any , EachOutT : Any , ValueT> NullableOption < EachInT , ValueT >.transformValues(nvalues: Int , transform: ArgsTransformer < ValueT , EachOutT >): NullableOption < EachOutT , ValueT > Change the number of values that this option takes. triple fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.triple(): NullableOption < Triple < ValueT , ValueT , ValueT >, ValueT > Change to option to take three values, held in a Triple . unique fun <EachT : Any , ValueT> OptionWithValues < List < EachT >, EachT , ValueT >.unique(): OptionWithValues < Set < EachT >, EachT , ValueT > Make the multiple option return a unique set of calls validate fun <T : Any > FlagOption < T >.validate(validator: OptionValidator < T >): OptionDelegate < T > fun <AllT : Any , EachT, ValueT> OptionWithValues < AllT , EachT , ValueT >.validate(validator: OptionValidator < AllT >): OptionDelegate < AllT > Check the final option value and raise an error if it\u2019s not valid. versionOption fun <T : CliktCommand > T .versionOption(version: String , help: String = \"Show the version and exit\", names: Set < String > = setOf(\"--version\"), message: ( String ) -> String = { \"$commandName version $it\" }): T Add an eager option to this command that, when invoked, prints a version message and exits.","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/#package-comgithubajaltcliktparametersoptions","text":"","title":"Package com.github.ajalt.clikt.parameters.options"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/#types","text":"Name Summary EagerOption class EagerOption : Option An Option with no values that is finalize d before other types of options. FlagOption class FlagOption<T> : OptionDelegate < T > An Option that has no values. Option interface Option An optional command line parameter that takes a fixed number of values. OptionCallTransformContext class OptionCallTransformContext : Option A receiver for options transformers. OptionDelegate interface OptionDelegate<T> : GroupableOption , ReadOnlyProperty < ParameterHolder , T > An option that functions as a property delegate OptionTransformContext class OptionTransformContext : Option A receiver for options transformers. OptionWithValues class OptionWithValues<AllT, EachT, ValueT> : OptionDelegate < AllT >, GroupableOption An Option that takes one or more values. ValueWithDefault data class ValueWithDefault<out T> A container for a value that can have a default value and can be manually set","title":"Types"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/#type-aliases","text":"Name Summary ArgsTransformer typealias ArgsTransformer<ValueT, EachT> = OptionCallTransformContext .( List < ValueT >) -> EachT A callback that transforms all the values for a call to the call type. CallsTransformer typealias CallsTransformer<EachT, AllT> = OptionTransformContext .( List < EachT >) -> AllT A callback that transforms all of the calls to the final option type. NullableOption typealias NullableOption<EachT, ValueT> = OptionWithValues < EachT ?, EachT , ValueT > OptionValidator typealias OptionValidator<AllT> = OptionTransformContext .( AllT ) -> Unit A callback validates the final option type RawOption typealias RawOption = NullableOption < String , String > ValueTransformer typealias ValueTransformer<ValueT> = OptionCallTransformContext .( String ) -> ValueT A callback that transforms a single value from a string to the value type","title":"Type Aliases"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/#functions","text":"Name Summary convert fun <T : Any > RawOption .convert(metavar: String = \"VALUE\", envvarSplit: Regex = this.envvarSplit.default, completionCandidates: CompletionCandidates = this.completionCandidates, conversion: ValueTransformer < T >): NullableOption < T , T > Convert the option value type. counted fun RawOption .counted(): FlagOption < Int > Turn an option into a flag that counts the number of times the option occurs on the command line. default fun <T : Any > FlagOption < T ?>.default(value: T ): FlagOption < T > Set a default value for a option. fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.default(value: EachT , defaultForHelp: String = value.toString()): OptionWithValues < EachT , EachT , ValueT > If the option is not called on the command line (and is not set in an envvar), use value , com.github.ajalt.clikt.parameters.options.default.EachT, kotlin.String)/value) for the option. defaultLazy fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.defaultLazy(defaultForHelp: String = \"\", value: () -> EachT ): OptionWithValues < EachT , EachT , ValueT > If the option is not called on the command line (and is not set in an envvar), call the value , kotlin.String, kotlin.Function0((com.github.ajalt.clikt.parameters.options.defaultLazy.EachT)))/value) and use its return value for the option. deprecated fun <T> FlagOption < T >.deprecated(message: String ? = \"\", tagName: String ? = \"deprecated\", tagValue: String = \"\", error: Boolean = false): OptionDelegate < T > fun <AllT, EachT, ValueT> OptionWithValues < AllT , EachT , ValueT >.deprecated(message: String ? = \"\", tagName: String ? = \"deprecated\", tagValue: String = \"\", error: Boolean = false): OptionDelegate < AllT > Mark this option as deprecated in the help output. flag fun RawOption .flag(vararg secondaryNames: String , default: Boolean = false): FlagOption < Boolean > Turn an option into a boolean flag. multiple fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.multiple(default: List < EachT > = emptyList()): OptionWithValues < List < EachT >, EachT , ValueT > Make the option return a list of calls; each item in the list is the value of one call. option fun ParameterHolder .option(vararg names: String , help: String = \"\", metavar: String ? = null, hidden: Boolean = false, envvar: String ? = null, envvarSplit: Regex ? = null, helpTags: Map < String , String > = emptyMap()): RawOption Create a property delegate option. pair fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.pair(): NullableOption < Pair < ValueT , ValueT >, ValueT > Change to option to take two values, held in a Pair . prompt fun <T : Any > NullableOption < T , T >.prompt(text: String ? = null, default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \"Repeat for confirmation: \", promptSuffix: String = \": \", showDefault: Boolean = true): OptionWithValues < T , T , T > If the option isn\u2019t given on the command line, prompt the user for manual input. required fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.required(): OptionWithValues < EachT , EachT , ValueT > If the option is not called on the command line (and is not set in an envvar), throw a MissingParameter . split fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.split(regex: Regex ): OptionWithValues < List < ValueT >?, List < ValueT >, ValueT > Change to option to take any number of values, separated by a regex , kotlin.text.Regex)/regex). fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.split(delimiter: String ): OptionWithValues < List < ValueT >?, List < ValueT >, ValueT > Change to option to take any number of values, separated by a string delimiter , kotlin.String)/delimiter). switch fun <T : Any > RawOption .switch(choices: Map < String , T >): FlagOption < T ?> fun <T : Any > RawOption .switch(vararg choices: Pair < String , T >): FlagOption < T ?> Turn an option into a set of flags that each map to a value. transformAll fun <AllT, EachT : Any , ValueT> NullableOption < EachT , ValueT >.transformAll(defaultForHelp: String ? = this.helpTags[HelpFormatter.Tags.DEFAULT], showAsRequired: Boolean = HelpFormatter.Tags.REQUIRED in this.helpTags, transform: CallsTransformer < EachT , AllT >): OptionWithValues < AllT , EachT , ValueT > Transform all calls to the option to the final option type. transformValues fun <EachInT : Any , EachOutT : Any , ValueT> NullableOption < EachInT , ValueT >.transformValues(nvalues: Int , transform: ArgsTransformer < ValueT , EachOutT >): NullableOption < EachOutT , ValueT > Change the number of values that this option takes. triple fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.triple(): NullableOption < Triple < ValueT , ValueT , ValueT >, ValueT > Change to option to take three values, held in a Triple . unique fun <EachT : Any , ValueT> OptionWithValues < List < EachT >, EachT , ValueT >.unique(): OptionWithValues < Set < EachT >, EachT , ValueT > Make the multiple option return a unique set of calls validate fun <T : Any > FlagOption < T >.validate(validator: OptionValidator < T >): OptionDelegate < T > fun <AllT : Any , EachT, ValueT> OptionWithValues < AllT , EachT , ValueT >.validate(validator: OptionValidator < AllT >): OptionDelegate < AllT > Check the final option value and raise an error if it\u2019s not valid. versionOption fun <T : CliktCommand > T .versionOption(version: String , help: String = \"Show the version and exit\", names: Set < String > = setOf(\"--version\"), message: ( String ) -> String = { \"$commandName version $it\" }): T Add an eager option to this command that, when invoked, prints a version message and exits.","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-args-transformer/","text":"clikt / com.github.ajalt.clikt.parameters.options / ArgsTransformer ArgsTransformer \u00b6 typealias ArgsTransformer<ValueT, EachT> = OptionCallTransformContext .( List < ValueT >) -> EachT A callback that transforms all the values for a call to the call type. The input list will always have a size equal to nvalues","title":" args transformer"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-args-transformer/#argstransformer","text":"typealias ArgsTransformer<ValueT, EachT> = OptionCallTransformContext .( List < ValueT >) -> EachT A callback that transforms all the values for a call to the call type. The input list will always have a size equal to nvalues","title":"ArgsTransformer"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-calls-transformer/","text":"clikt / com.github.ajalt.clikt.parameters.options / CallsTransformer CallsTransformer \u00b6 typealias CallsTransformer<EachT, AllT> = OptionTransformContext .( List < EachT >) -> AllT A callback that transforms all of the calls to the final option type. The input list will have a size equal to the number of times the option appears on the command line.","title":" calls transformer"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-calls-transformer/#callstransformer","text":"typealias CallsTransformer<EachT, AllT> = OptionTransformContext .( List < EachT >) -> AllT A callback that transforms all of the calls to the final option type. The input list will have a size equal to the number of times the option appears on the command line.","title":"CallsTransformer"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-nullable-option/","text":"clikt / com.github.ajalt.clikt.parameters.options / NullableOption NullableOption \u00b6 typealias NullableOption<EachT, ValueT> = OptionWithValues < EachT ?, EachT , ValueT >","title":" nullable option"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-nullable-option/#nullableoption","text":"typealias NullableOption<EachT, ValueT> = OptionWithValues < EachT ?, EachT , ValueT >","title":"NullableOption"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-validator/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionValidator OptionValidator \u00b6 typealias OptionValidator<AllT> = OptionTransformContext .( AllT ) -> Unit A callback validates the final option type","title":" option validator"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-validator/#optionvalidator","text":"typealias OptionValidator<AllT> = OptionTransformContext .( AllT ) -> Unit A callback validates the final option type","title":"OptionValidator"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-raw-option/","text":"clikt / com.github.ajalt.clikt.parameters.options / RawOption RawOption \u00b6 typealias RawOption = NullableOption < String , String >","title":" raw option"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-raw-option/#rawoption","text":"typealias RawOption = NullableOption < String , String >","title":"RawOption"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-transformer/","text":"clikt / com.github.ajalt.clikt.parameters.options / ValueTransformer ValueTransformer \u00b6 typealias ValueTransformer<ValueT> = OptionCallTransformContext .( String ) -> ValueT A callback that transforms a single value from a string to the value type","title":" value transformer"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-transformer/#valuetransformer","text":"typealias ValueTransformer<ValueT> = OptionCallTransformContext .( String ) -> ValueT A callback that transforms a single value from a string to the value type","title":"ValueTransformer"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/convert/","text":"clikt / com.github.ajalt.clikt.parameters.options / convert convert \u00b6 inline fun <T : Any > RawOption .convert(metavar: String = \"VALUE\", envvarSplit: Regex = this.envvarSplit.default, completionCandidates: CompletionCandidates = this.completionCandidates, crossinline conversion: ValueTransformer < T >): NullableOption < T , T > Convert the option value type. The conversion , kotlin.String, kotlin.text.Regex, com.github.ajalt.clikt.completion.CompletionCandidates, kotlin.Function2((com.github.ajalt.clikt.parameters.options.OptionCallTransformContext, kotlin.String, com.github.ajalt.clikt.parameters.options.convert.T)))/conversion) is called once for each value in each invocation of the option. If any errors are thrown, they are caught and a BadParameterValue is thrown with the error message. You can call fail to throw a BadParameterValue manually. Parameters \u00b6 metavar - The metavar for the type. Overridden by a metavar passed to option . envvarSplit - If the value is read from an envvar, the pattern to split the value on. The default splits on whitespace. This value is can be overridden by passing a value to the option function. completionCandidates - candidates to use when completing this option in shell autocomplete","title":"Convert"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/convert/#convert","text":"inline fun <T : Any > RawOption .convert(metavar: String = \"VALUE\", envvarSplit: Regex = this.envvarSplit.default, completionCandidates: CompletionCandidates = this.completionCandidates, crossinline conversion: ValueTransformer < T >): NullableOption < T , T > Convert the option value type. The conversion , kotlin.String, kotlin.text.Regex, com.github.ajalt.clikt.completion.CompletionCandidates, kotlin.Function2((com.github.ajalt.clikt.parameters.options.OptionCallTransformContext, kotlin.String, com.github.ajalt.clikt.parameters.options.convert.T)))/conversion) is called once for each value in each invocation of the option. If any errors are thrown, they are caught and a BadParameterValue is thrown with the error message. You can call fail to throw a BadParameterValue manually.","title":"convert"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/convert/#parameters","text":"metavar - The metavar for the type. Overridden by a metavar passed to option . envvarSplit - If the value is read from an envvar, the pattern to split the value on. The default splits on whitespace. This value is can be overridden by passing a value to the option function. completionCandidates - candidates to use when completing this option in shell autocomplete","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/counted/","text":"clikt / com.github.ajalt.clikt.parameters.options / counted counted \u00b6 fun RawOption .counted(): FlagOption < Int > Turn an option into a flag that counts the number of times the option occurs on the command line.","title":"Counted"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/counted/#counted","text":"fun RawOption .counted(): FlagOption < Int > Turn an option into a flag that counts the number of times the option occurs on the command line.","title":"counted"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/default-lazy/","text":"clikt / com.github.ajalt.clikt.parameters.options / defaultLazy defaultLazy \u00b6 inline fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.defaultLazy(defaultForHelp: String = \"\", crossinline value: () -> EachT ): OptionWithValues < EachT , EachT , ValueT > If the option is not called on the command line (and is not set in an envvar), call the value , kotlin.String, kotlin.Function0((com.github.ajalt.clikt.parameters.options.defaultLazy.EachT)))/value) and use its return value for the option. This must be applied after all other transforms. If the option is given on the command line, value , kotlin.String, kotlin.Function0((com.github.ajalt.clikt.parameters.options.defaultLazy.EachT)))/value) will not be called. You can customize how the default is shown to the user with defaultForHelp , kotlin.String, kotlin.Function0((com.github.ajalt.clikt.parameters.options.defaultLazy.EachT)))/defaultForHelp). The default value is an empty string, so if you have the help formatter configured to show values, you should set this value manually. Example: \u00b6 val opt : Pair < Int , Int > by option (). int (). pair (). defaultLazy { expensiveOperation () }","title":"Default lazy"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/default-lazy/#defaultlazy","text":"inline fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.defaultLazy(defaultForHelp: String = \"\", crossinline value: () -> EachT ): OptionWithValues < EachT , EachT , ValueT > If the option is not called on the command line (and is not set in an envvar), call the value , kotlin.String, kotlin.Function0((com.github.ajalt.clikt.parameters.options.defaultLazy.EachT)))/value) and use its return value for the option. This must be applied after all other transforms. If the option is given on the command line, value , kotlin.String, kotlin.Function0((com.github.ajalt.clikt.parameters.options.defaultLazy.EachT)))/value) will not be called. You can customize how the default is shown to the user with defaultForHelp , kotlin.String, kotlin.Function0((com.github.ajalt.clikt.parameters.options.defaultLazy.EachT)))/defaultForHelp). The default value is an empty string, so if you have the help formatter configured to show values, you should set this value manually.","title":"defaultLazy"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/default-lazy/#example","text":"val opt : Pair < Int , Int > by option (). int (). pair (). defaultLazy { expensiveOperation () }","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/default/","text":"clikt / com.github.ajalt.clikt.parameters.options / default default \u00b6 fun <T : Any > FlagOption < T ?>.default(value: T ): FlagOption < T > Set a default value for a option. fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.default(value: EachT , defaultForHelp: String = value.toString()): OptionWithValues < EachT , EachT , ValueT > If the option is not called on the command line (and is not set in an envvar), use value , com.github.ajalt.clikt.parameters.options.default.EachT, kotlin.String)/value) for the option. This must be applied after all other transforms. You can customize how the default is shown to the user with defaultForHelp , com.github.ajalt.clikt.parameters.options.default.EachT, kotlin.String)/defaultForHelp). Example: \u00b6 val opt : Pair < Int , Int > by option (). int (). pair (). default ( 1 to 2 )","title":"Default"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/default/#default","text":"fun <T : Any > FlagOption < T ?>.default(value: T ): FlagOption < T > Set a default value for a option. fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.default(value: EachT , defaultForHelp: String = value.toString()): OptionWithValues < EachT , EachT , ValueT > If the option is not called on the command line (and is not set in an envvar), use value , com.github.ajalt.clikt.parameters.options.default.EachT, kotlin.String)/value) for the option. This must be applied after all other transforms. You can customize how the default is shown to the user with defaultForHelp , com.github.ajalt.clikt.parameters.options.default.EachT, kotlin.String)/defaultForHelp).","title":"default"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/default/#example","text":"val opt : Pair < Int , Int > by option (). int (). pair (). default ( 1 to 2 )","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/deprecated/","text":"clikt / com.github.ajalt.clikt.parameters.options / deprecated deprecated \u00b6 fun <T> FlagOption < T >.deprecated(message: String ? = \"\", tagName: String ? = \"deprecated\", tagValue: String = \"\", error: Boolean = false): OptionDelegate < T > Mark this option as deprecated in the help output. By default, a tag is added to the help message and a warning is printed if the option is used. This should be called after any validation. Parameters \u00b6 message - The message to show in the warning or error. If null, no warning is issued. tagName - The tag to add to the help message tagValue - An extra message to add to the tag error - If true, when the option is invoked, a CliktError is raised immediately instead of issuing a warning. fun <AllT, EachT, ValueT> OptionWithValues < AllT , EachT , ValueT >.deprecated(message: String ? = \"\", tagName: String ? = \"deprecated\", tagValue: String = \"\", error: Boolean = false): OptionDelegate < AllT > Mark this option as deprecated in the help output. By default, a tag is added to the help message and a warning is printed if the option is used. This should be called after any conversion and validation. Example: \u00b6 val opt by option (). int (). validate { require ( it % 2 == 0 ) { \"value must be even\" } } . deprecated ( \"WARNING: --opt is deprecated, use --new-opt instead\" ) Parameters \u00b6 message - The message to show in the warning or error. If null, no warning is issued. tagName - The tag to add to the help message tagValue - An extra message to add to the tag error - If true, when the option is invoked, a CliktError is raised immediately instead of issuing a warning.","title":"Deprecated"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/deprecated/#deprecated","text":"fun <T> FlagOption < T >.deprecated(message: String ? = \"\", tagName: String ? = \"deprecated\", tagValue: String = \"\", error: Boolean = false): OptionDelegate < T > Mark this option as deprecated in the help output. By default, a tag is added to the help message and a warning is printed if the option is used. This should be called after any validation.","title":"deprecated"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/deprecated/#parameters","text":"message - The message to show in the warning or error. If null, no warning is issued. tagName - The tag to add to the help message tagValue - An extra message to add to the tag error - If true, when the option is invoked, a CliktError is raised immediately instead of issuing a warning. fun <AllT, EachT, ValueT> OptionWithValues < AllT , EachT , ValueT >.deprecated(message: String ? = \"\", tagName: String ? = \"deprecated\", tagValue: String = \"\", error: Boolean = false): OptionDelegate < AllT > Mark this option as deprecated in the help output. By default, a tag is added to the help message and a warning is printed if the option is used. This should be called after any conversion and validation.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/deprecated/#example","text":"val opt by option (). int (). validate { require ( it % 2 == 0 ) { \"value must be even\" } } . deprecated ( \"WARNING: --opt is deprecated, use --new-opt instead\" )","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/deprecated/#parameters_1","text":"message - The message to show in the warning or error. If null, no warning is issued. tagName - The tag to add to the help message tagValue - An extra message to add to the tag error - If true, when the option is invoked, a CliktError is raised immediately instead of issuing a warning.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/flag/","text":"clikt / com.github.ajalt.clikt.parameters.options / flag flag \u00b6 fun RawOption .flag(vararg secondaryNames: String , default: Boolean = false): FlagOption < Boolean > Turn an option into a boolean flag. Parameters \u00b6 secondaryNames - additional names for that option that cause the option value to be false. It\u2019s good practice to provide secondary names so that users can disable an option that was previously enabled. default - the value for this property if the option is not given on the command line.","title":"Flag"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/flag/#flag","text":"fun RawOption .flag(vararg secondaryNames: String , default: Boolean = false): FlagOption < Boolean > Turn an option into a boolean flag.","title":"flag"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/flag/#parameters","text":"secondaryNames - additional names for that option that cause the option value to be false. It\u2019s good practice to provide secondary names so that users can disable an option that was previously enabled. default - the value for this property if the option is not given on the command line.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/multiple/","text":"clikt / com.github.ajalt.clikt.parameters.options / multiple multiple \u00b6 fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.multiple(default: List < EachT > = emptyList()): OptionWithValues < List < EachT >, EachT , ValueT > Make the option return a list of calls; each item in the list is the value of one call. If the option is never called, the list will be empty. This must be applied after all other transforms. Example: \u00b6 val opt : List < Pair < Int , Int >> by option (). int (). pair (). multiple () Parameters \u00b6 default - The value to use if the option is not supplied. Defaults to an empty list.","title":"Multiple"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/multiple/#multiple","text":"fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.multiple(default: List < EachT > = emptyList()): OptionWithValues < List < EachT >, EachT , ValueT > Make the option return a list of calls; each item in the list is the value of one call. If the option is never called, the list will be empty. This must be applied after all other transforms.","title":"multiple"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/multiple/#example","text":"val opt : List < Pair < Int , Int >> by option (). int (). pair (). multiple ()","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/multiple/#parameters","text":"default - The value to use if the option is not supplied. Defaults to an empty list.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/option/","text":"clikt / com.github.ajalt.clikt.parameters.options / option option \u00b6 fun ParameterHolder .option(vararg names: String , help: String = \"\", metavar: String ? = null, hidden: Boolean = false, envvar: String ? = null, envvarSplit: Regex ? = null, helpTags: Map < String , String > = emptyMap()): RawOption Create a property delegate option. By default, the property will return null if the option does not appear on the command line. If the option is invoked multiple times, the value from the last invocation will be used The option can be modified with functions like int , pair , and multiple . Parameters \u00b6 names - The names that can be used to invoke this option. They must start with a punctuation character. If not given, a name is inferred from the property name. help - The description of this option, usually a single line. metavar - A name representing the values for this option that can be displayed to the user. Automatically inferred from the type. hidden - Hide this option from help outputs. envvar - The environment variable that will be used for the value if one is not given on the command line. envvarSplit - The pattern to split the value of the envvar , kotlin.String, kotlin.String, kotlin.Boolean, kotlin.String, kotlin.text.Regex, kotlin.collections.Map((kotlin.String, )))/envvar) on. Defaults to whitespace, although some conversions like file change the default. helpTags - Extra information about this option to pass to the help formatter","title":"Option"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/option/#option","text":"fun ParameterHolder .option(vararg names: String , help: String = \"\", metavar: String ? = null, hidden: Boolean = false, envvar: String ? = null, envvarSplit: Regex ? = null, helpTags: Map < String , String > = emptyMap()): RawOption Create a property delegate option. By default, the property will return null if the option does not appear on the command line. If the option is invoked multiple times, the value from the last invocation will be used The option can be modified with functions like int , pair , and multiple .","title":"option"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/option/#parameters","text":"names - The names that can be used to invoke this option. They must start with a punctuation character. If not given, a name is inferred from the property name. help - The description of this option, usually a single line. metavar - A name representing the values for this option that can be displayed to the user. Automatically inferred from the type. hidden - Hide this option from help outputs. envvar - The environment variable that will be used for the value if one is not given on the command line. envvarSplit - The pattern to split the value of the envvar , kotlin.String, kotlin.String, kotlin.Boolean, kotlin.String, kotlin.text.Regex, kotlin.collections.Map((kotlin.String, )))/envvar) on. Defaults to whitespace, although some conversions like file change the default. helpTags - Extra information about this option to pass to the help formatter","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/pair/","text":"clikt / com.github.ajalt.clikt.parameters.options / pair pair \u00b6 fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.pair(): NullableOption < Pair < ValueT , ValueT >, ValueT > Change to option to take two values, held in a Pair . This must be called after converting the value type, and before other transforms. Example: \u00b6 val opt : Pair < Int , Int >? by option (). int (). pair ()","title":"Pair"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/pair/#pair","text":"fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.pair(): NullableOption < Pair < ValueT , ValueT >, ValueT > Change to option to take two values, held in a Pair . This must be called after converting the value type, and before other transforms.","title":"pair"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/pair/#example","text":"val opt : Pair < Int , Int >? by option (). int (). pair ()","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/prompt/","text":"clikt / com.github.ajalt.clikt.parameters.options / prompt prompt \u00b6 fun <T : Any > NullableOption < T , T >.prompt(text: String ? = null, default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \"Repeat for confirmation: \", promptSuffix: String = \": \", showDefault: Boolean = true): OptionWithValues < T , T , T > If the option isn\u2019t given on the command line, prompt the user for manual input. Parameters \u00b6 text - The text to prompt the user with default - The default value to use if no input is given. If null, the prompt will be repeated until input is given. hideInput - If true, user input will not be shown on the screen. Useful for passwords and sensitive input. requireConfirmation - If true, the user will be required to enter the same value twice before it is accepted. confirmationPrompt - If requireConfirmation , kotlin.String, kotlin.String, kotlin.Boolean, kotlin.Boolean, kotlin.String, kotlin.String, kotlin.Boolean)/requireConfirmation) is true, this will be used to ask for input again. promptSuffix - Text to display directly after text , kotlin.String, kotlin.String, kotlin.Boolean, kotlin.Boolean, kotlin.String, kotlin.String, kotlin.Boolean)/text). Defaults to \u201c: \u201c. showDefault - Show default , kotlin.String, kotlin.String, kotlin.Boolean, kotlin.Boolean, kotlin.String, kotlin.String, kotlin.Boolean)/default) to the user in the prompt.","title":"Prompt"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/prompt/#prompt","text":"fun <T : Any > NullableOption < T , T >.prompt(text: String ? = null, default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \"Repeat for confirmation: \", promptSuffix: String = \": \", showDefault: Boolean = true): OptionWithValues < T , T , T > If the option isn\u2019t given on the command line, prompt the user for manual input.","title":"prompt"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/prompt/#parameters","text":"text - The text to prompt the user with default - The default value to use if no input is given. If null, the prompt will be repeated until input is given. hideInput - If true, user input will not be shown on the screen. Useful for passwords and sensitive input. requireConfirmation - If true, the user will be required to enter the same value twice before it is accepted. confirmationPrompt - If requireConfirmation , kotlin.String, kotlin.String, kotlin.Boolean, kotlin.Boolean, kotlin.String, kotlin.String, kotlin.Boolean)/requireConfirmation) is true, this will be used to ask for input again. promptSuffix - Text to display directly after text , kotlin.String, kotlin.String, kotlin.Boolean, kotlin.Boolean, kotlin.String, kotlin.String, kotlin.Boolean)/text). Defaults to \u201c: \u201c. showDefault - Show default , kotlin.String, kotlin.String, kotlin.Boolean, kotlin.Boolean, kotlin.String, kotlin.String, kotlin.Boolean)/default) to the user in the prompt.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/required/","text":"clikt / com.github.ajalt.clikt.parameters.options / required required \u00b6 fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.required(): OptionWithValues < EachT , EachT , ValueT > If the option is not called on the command line (and is not set in an envvar), throw a MissingParameter . This must be applied after all other transforms. Example: \u00b6 val opt : Pair < Int , Int > by option (). int (). pair (). required ()","title":"Required"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/required/#required","text":"fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.required(): OptionWithValues < EachT , EachT , ValueT > If the option is not called on the command line (and is not set in an envvar), throw a MissingParameter . This must be applied after all other transforms.","title":"required"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/required/#example","text":"val opt : Pair < Int , Int > by option (). int (). pair (). required ()","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/split/","text":"clikt / com.github.ajalt.clikt.parameters.options / split split \u00b6 fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.split(regex: Regex ): OptionWithValues < List < ValueT >?, List < ValueT >, ValueT > Change to option to take any number of values, separated by a regex , kotlin.text.Regex)/regex). This must be called after converting the value type, and before other transforms. Example: \u00b6 val opt : List < Int >? by option (). int (). split ( Regex ( \",\" )) Which can be called like this: ./program --opt 1,2,3 fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.split(delimiter: String ): OptionWithValues < List < ValueT >?, List < ValueT >, ValueT > Change to option to take any number of values, separated by a string delimiter , kotlin.String)/delimiter). This must be called after converting the value type, and before other transforms. Example: \u00b6 val opt : List < Int >? by option (). int (). split ( Regex ( \",\" )) Which can be called like this: ./program --opt 1,2,3","title":"Split"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/split/#split","text":"fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.split(regex: Regex ): OptionWithValues < List < ValueT >?, List < ValueT >, ValueT > Change to option to take any number of values, separated by a regex , kotlin.text.Regex)/regex). This must be called after converting the value type, and before other transforms.","title":"split"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/split/#example","text":"val opt : List < Int >? by option (). int (). split ( Regex ( \",\" )) Which can be called like this: ./program --opt 1,2,3 fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.split(delimiter: String ): OptionWithValues < List < ValueT >?, List < ValueT >, ValueT > Change to option to take any number of values, separated by a string delimiter , kotlin.String)/delimiter). This must be called after converting the value type, and before other transforms.","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/split/#example_1","text":"val opt : List < Int >? by option (). int (). split ( Regex ( \",\" )) Which can be called like this: ./program --opt 1,2,3","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/switch/","text":"clikt / com.github.ajalt.clikt.parameters.options / switch switch \u00b6 fun <T : Any > RawOption .switch(choices: Map < String , T >): FlagOption < T ?> fun <T : Any > RawOption .switch(vararg choices: Pair < String , T >): FlagOption < T ?> Turn an option into a set of flags that each map to a value.","title":"Switch"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/switch/#switch","text":"fun <T : Any > RawOption .switch(choices: Map < String , T >): FlagOption < T ?> fun <T : Any > RawOption .switch(vararg choices: Pair < String , T >): FlagOption < T ?> Turn an option into a set of flags that each map to a value.","title":"switch"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/transform-all/","text":"clikt / com.github.ajalt.clikt.parameters.options / transformAll transformAll \u00b6 fun <AllT, EachT : Any , ValueT> NullableOption < EachT , ValueT >.transformAll(defaultForHelp: String ? = this.helpTags[HelpFormatter.Tags.DEFAULT], showAsRequired: Boolean = HelpFormatter.Tags.REQUIRED in this.helpTags, transform: CallsTransformer < EachT , AllT >): OptionWithValues < AllT , EachT , ValueT > Transform all calls to the option to the final option type. The input is a list of calls, one for each time the option appears on the command line. The values in the list are the output of calls to transformValues . If the option does not appear from any source (command line or envvar), this will be called with an empty list. Used to implement functions like default and multiple . Parameters \u00b6 defaultForHelp - The help text for this option\u2019s default value if the help formatter is configured to show them, or null if this option has no default or the default value should not be shown.This does not affect behavior outside of help formatting. showAsRequired - Tell the help formatter that this option should be marked as required. This does not affect behavior outside of help formatting.","title":"Transform all"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/transform-all/#transformall","text":"fun <AllT, EachT : Any , ValueT> NullableOption < EachT , ValueT >.transformAll(defaultForHelp: String ? = this.helpTags[HelpFormatter.Tags.DEFAULT], showAsRequired: Boolean = HelpFormatter.Tags.REQUIRED in this.helpTags, transform: CallsTransformer < EachT , AllT >): OptionWithValues < AllT , EachT , ValueT > Transform all calls to the option to the final option type. The input is a list of calls, one for each time the option appears on the command line. The values in the list are the output of calls to transformValues . If the option does not appear from any source (command line or envvar), this will be called with an empty list. Used to implement functions like default and multiple .","title":"transformAll"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/transform-all/#parameters","text":"defaultForHelp - The help text for this option\u2019s default value if the help formatter is configured to show them, or null if this option has no default or the default value should not be shown.This does not affect behavior outside of help formatting. showAsRequired - Tell the help formatter that this option should be marked as required. This does not affect behavior outside of help formatting.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/transform-values/","text":"clikt / com.github.ajalt.clikt.parameters.options / transformValues transformValues \u00b6 fun <EachInT : Any , EachOutT : Any , ValueT> NullableOption < EachInT , ValueT >.transformValues(nvalues: Int , transform: ArgsTransformer < ValueT , EachOutT >): NullableOption < EachOutT , ValueT > Change the number of values that this option takes. The input will be a list of size nvalues , kotlin.Int, kotlin.Function2((com.github.ajalt.clikt.parameters.options.OptionCallTransformContext, kotlin.collections.List((com.github.ajalt.clikt.parameters.options.transformValues.ValueT)), com.github.ajalt.clikt.parameters.options.transformValues.EachOutT)))/nvalues), with each item in the list being the output of a call to convert . nvalues , kotlin.Int, kotlin.Function2((com.github.ajalt.clikt.parameters.options.OptionCallTransformContext, kotlin.collections.List((com.github.ajalt.clikt.parameters.options.transformValues.ValueT)), com.github.ajalt.clikt.parameters.options.transformValues.EachOutT)))/nvalues) must be 2 or greater, since options cannot take a variable number of values, and option has nvalues , kotlin.Int, kotlin.Function2((com.github.ajalt.clikt.parameters.options.OptionCallTransformContext, kotlin.collections.List((com.github.ajalt.clikt.parameters.options.transformValues.ValueT)), com.github.ajalt.clikt.parameters.options.transformValues.EachOutT)))/nvalues) = 1 by default. If you want to change the type of an option with one value, use convert instead. Used to implement functions like pair and triple . This must be applied before any other transforms.","title":"Transform values"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/transform-values/#transformvalues","text":"fun <EachInT : Any , EachOutT : Any , ValueT> NullableOption < EachInT , ValueT >.transformValues(nvalues: Int , transform: ArgsTransformer < ValueT , EachOutT >): NullableOption < EachOutT , ValueT > Change the number of values that this option takes. The input will be a list of size nvalues , kotlin.Int, kotlin.Function2((com.github.ajalt.clikt.parameters.options.OptionCallTransformContext, kotlin.collections.List((com.github.ajalt.clikt.parameters.options.transformValues.ValueT)), com.github.ajalt.clikt.parameters.options.transformValues.EachOutT)))/nvalues), with each item in the list being the output of a call to convert . nvalues , kotlin.Int, kotlin.Function2((com.github.ajalt.clikt.parameters.options.OptionCallTransformContext, kotlin.collections.List((com.github.ajalt.clikt.parameters.options.transformValues.ValueT)), com.github.ajalt.clikt.parameters.options.transformValues.EachOutT)))/nvalues) must be 2 or greater, since options cannot take a variable number of values, and option has nvalues , kotlin.Int, kotlin.Function2((com.github.ajalt.clikt.parameters.options.OptionCallTransformContext, kotlin.collections.List((com.github.ajalt.clikt.parameters.options.transformValues.ValueT)), com.github.ajalt.clikt.parameters.options.transformValues.EachOutT)))/nvalues) = 1 by default. If you want to change the type of an option with one value, use convert instead. Used to implement functions like pair and triple . This must be applied before any other transforms.","title":"transformValues"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/triple/","text":"clikt / com.github.ajalt.clikt.parameters.options / triple triple \u00b6 fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.triple(): NullableOption < Triple < ValueT , ValueT , ValueT >, ValueT > Change to option to take three values, held in a Triple . This must be called after converting the value type, and before other transforms. Example: \u00b6 val opt : Triple < Int , Int , Int >? by option (). int (). triple ()","title":"Triple"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/triple/#triple","text":"fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.triple(): NullableOption < Triple < ValueT , ValueT , ValueT >, ValueT > Change to option to take three values, held in a Triple . This must be called after converting the value type, and before other transforms.","title":"triple"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/triple/#example","text":"val opt : Triple < Int , Int , Int >? by option (). int (). triple ()","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/unique/","text":"clikt / com.github.ajalt.clikt.parameters.options / unique unique \u00b6 fun <EachT : Any , ValueT> OptionWithValues < List < EachT >, EachT , ValueT >.unique(): OptionWithValues < Set < EachT >, EachT , ValueT > Make the multiple option return a unique set of calls Example: \u00b6 val opt : Set < Int > by option (). int (). multiple (). unique ()","title":"Unique"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/unique/#unique","text":"fun <EachT : Any , ValueT> OptionWithValues < List < EachT >, EachT , ValueT >.unique(): OptionWithValues < Set < EachT >, EachT , ValueT > Make the multiple option return a unique set of calls","title":"unique"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/unique/#example","text":"val opt : Set < Int > by option (). int (). multiple (). unique ()","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/validate/","text":"clikt / com.github.ajalt.clikt.parameters.options / validate validate \u00b6 fun <T : Any > FlagOption < T >.validate(validator: OptionValidator < T >): OptionDelegate < T > Check the final option value and raise an error if it\u2019s not valid. The validator is called with the final option type (the output of transformAll ), and should call fail if the value is not valid. It is not called if the delegate value is null. fun <AllT : Any , EachT, ValueT> OptionWithValues < AllT , EachT , ValueT >.validate(validator: OptionValidator < AllT >): OptionDelegate < AllT > Check the final option value and raise an error if it\u2019s not valid. The validator is called with the final option type (the output of transformAll ), and should call fail if the value is not valid. It is not called if the delegate value is null. You can also call require to fail automatically if an expression is false. Example: \u00b6 val opt by option (). int (). validate { require ( it % 2 == 0 ) { \"value must be even\" } }","title":"Validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/validate/#validate","text":"fun <T : Any > FlagOption < T >.validate(validator: OptionValidator < T >): OptionDelegate < T > Check the final option value and raise an error if it\u2019s not valid. The validator is called with the final option type (the output of transformAll ), and should call fail if the value is not valid. It is not called if the delegate value is null. fun <AllT : Any , EachT, ValueT> OptionWithValues < AllT , EachT , ValueT >.validate(validator: OptionValidator < AllT >): OptionDelegate < AllT > Check the final option value and raise an error if it\u2019s not valid. The validator is called with the final option type (the output of transformAll ), and should call fail if the value is not valid. It is not called if the delegate value is null. You can also call require to fail automatically if an expression is false.","title":"validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/validate/#example","text":"val opt by option (). int (). validate { require ( it % 2 == 0 ) { \"value must be even\" } }","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/version-option/","text":"clikt / com.github.ajalt.clikt.parameters.options / versionOption versionOption \u00b6 inline fun <T : CliktCommand > T .versionOption(version: String , help: String = \"Show the version and exit\", names: Set < String > = setOf(\"--version\"), crossinline message: ( String ) -> String = { \"$commandName version $it\" }): T Add an eager option to this command that, when invoked, prints a version message and exits.","title":"Version option"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/version-option/#versionoption","text":"inline fun <T : CliktCommand > T .versionOption(version: String , help: String = \"Show the version and exit\", names: Set < String > = setOf(\"--version\"), crossinline message: ( String ) -> String = { \"$commandName version $it\" }): T Add an eager option to this command that, when invoked, prints a version message and exits.","title":"versionOption"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/","text":"clikt / com.github.ajalt.clikt.parameters.options / EagerOption EagerOption \u00b6 class EagerOption : Option An Option with no values that is finalize d before other types of options. Parameters \u00b6 callback - This callback is called when the option is encountered on the command line. If you want to print a message and halt execution normally, you should throw a PrintMessage exception. The callback it passed the current execution context as a parameter. Constructors \u00b6 Name Summary <init> EagerOption(vararg names: String , nvalues: Int = 0, help: String = \"\", hidden: Boolean = false, helpTags: Map < String , String > = emptyMap(), callback: OptionTransformContext .() -> Unit )``EagerOption(names: Set < String >, nvalues: Int , help: String , hidden: Boolean , helpTags: Map < String , String >, callback: OptionTransformContext .() -> Unit ) An Option with no values that is finalize d before other types of options. Properties \u00b6 Name Summary help val help: String The description of this option, usually a single line. helpTags val helpTags: Map < String , String > Extra information about this option to pass to the help formatter. hidden val hidden: Boolean If true, this option should not appear in help output. metavar val metavar: String ? A name representing the values for this option that can be displayed to the user. names val names: Set < String > The names that can be used to invoke this option. They must start with a punctuation character. nvalues val nvalues: Int The number of values that must be given to this option. parser val parser: OptionParser The parser for this option\u2019s values. secondaryNames val secondaryNames: Set < String > Names that can be used for a secondary purpose, like disabling flag options. Inherited Properties \u00b6 Name Summary completionCandidates open val completionCandidates: CompletionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this option. parameterHelp open val parameterHelp: HelpFormatter.ParameterHelp.Option ? Information about this option for the help output. Functions \u00b6 Name Summary finalize fun finalize(context: Context , invocations: List < OptionParser.Invocation >): Unit Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. postValidate fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/#eageroption","text":"class EagerOption : Option An Option with no values that is finalize d before other types of options.","title":"EagerOption"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/#parameters","text":"callback - This callback is called when the option is encountered on the command line. If you want to print a message and halt execution normally, you should throw a PrintMessage exception. The callback it passed the current execution context as a parameter.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/#constructors","text":"Name Summary <init> EagerOption(vararg names: String , nvalues: Int = 0, help: String = \"\", hidden: Boolean = false, helpTags: Map < String , String > = emptyMap(), callback: OptionTransformContext .() -> Unit )``EagerOption(names: Set < String >, nvalues: Int , help: String , hidden: Boolean , helpTags: Map < String , String >, callback: OptionTransformContext .() -> Unit ) An Option with no values that is finalize d before other types of options.","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/#properties","text":"Name Summary help val help: String The description of this option, usually a single line. helpTags val helpTags: Map < String , String > Extra information about this option to pass to the help formatter. hidden val hidden: Boolean If true, this option should not appear in help output. metavar val metavar: String ? A name representing the values for this option that can be displayed to the user. names val names: Set < String > The names that can be used to invoke this option. They must start with a punctuation character. nvalues val nvalues: Int The number of values that must be given to this option. parser val parser: OptionParser The parser for this option\u2019s values. secondaryNames val secondaryNames: Set < String > Names that can be used for a secondary purpose, like disabling flag options.","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/#inherited-properties","text":"Name Summary completionCandidates open val completionCandidates: CompletionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this option. parameterHelp open val parameterHelp: HelpFormatter.ParameterHelp.Option ? Information about this option for the help output.","title":"Inherited Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/#functions","text":"Name Summary finalize fun finalize(context: Context , invocations: List < OptionParser.Invocation >): Unit Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. postValidate fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/-init-/","text":"clikt / com.github.ajalt.clikt.parameters.options / EagerOption / <init> <init> \u00b6 EagerOption(vararg names: String , nvalues: Int = 0, help: String = \"\", hidden: Boolean = false, helpTags: Map < String , String > = emptyMap(), callback: OptionTransformContext .() -> Unit )``EagerOption(names: Set < String >, nvalues: Int , help: String , hidden: Boolean , helpTags: Map < String , String >, callback: OptionTransformContext .() -> Unit ) An Option with no values that is finalize d before other types of options. Parameters \u00b6 callback - This callback is called when the option is encountered on the command line. If you want to print a message and halt execution normally, you should throw a PrintMessage exception. The callback it passed the current execution context as a parameter.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/-init-/#init","text":"EagerOption(vararg names: String , nvalues: Int = 0, help: String = \"\", hidden: Boolean = false, helpTags: Map < String , String > = emptyMap(), callback: OptionTransformContext .() -> Unit )``EagerOption(names: Set < String >, nvalues: Int , help: String , hidden: Boolean , helpTags: Map < String , String >, callback: OptionTransformContext .() -> Unit ) An Option with no values that is finalize d before other types of options.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/-init-/#parameters","text":"callback - This callback is called when the option is encountered on the command line. If you want to print a message and halt execution normally, you should throw a PrintMessage exception. The callback it passed the current execution context as a parameter.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/finalize/","text":"clikt / com.github.ajalt.clikt.parameters.options / EagerOption / finalize finalize \u00b6 fun finalize(context: Context , invocations: List < OptionParser.Invocation >): Unit Overrides Option.finalize Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. You cannot refer to other parameter values during this call, since they might not have been finalized yet. Parameters \u00b6 context - The context for this parse invocations - A possibly empty list of invocations of this option.","title":"Finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/finalize/#finalize","text":"fun finalize(context: Context , invocations: List < OptionParser.Invocation >): Unit Overrides Option.finalize Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. You cannot refer to other parameter values during this call, since they might not have been finalized yet.","title":"finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/finalize/#parameters","text":"context - The context for this parse invocations - A possibly empty list of invocations of this option.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/help-tags/","text":"clikt / com.github.ajalt.clikt.parameters.options / EagerOption / helpTags helpTags \u00b6 val helpTags: Map < String , String > Overrides Option.helpTags Extra information about this option to pass to the help formatter.","title":"Help tags"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/help-tags/#helptags","text":"val helpTags: Map < String , String > Overrides Option.helpTags Extra information about this option to pass to the help formatter.","title":"helpTags"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/help/","text":"clikt / com.github.ajalt.clikt.parameters.options / EagerOption / help help \u00b6 val help: String Overrides Option.help The description of this option, usually a single line.","title":"Help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/help/#help","text":"val help: String Overrides Option.help The description of this option, usually a single line.","title":"help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/hidden/","text":"clikt / com.github.ajalt.clikt.parameters.options / EagerOption / hidden hidden \u00b6 val hidden: Boolean Overrides Option.hidden If true, this option should not appear in help output.","title":"Hidden"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/hidden/#hidden","text":"val hidden: Boolean Overrides Option.hidden If true, this option should not appear in help output.","title":"hidden"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/metavar/","text":"clikt / com.github.ajalt.clikt.parameters.options / EagerOption / metavar metavar \u00b6 val metavar: String ? Overrides Option.metavar A name representing the values for this option that can be displayed to the user.","title":"Metavar"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/metavar/#metavar","text":"val metavar: String ? Overrides Option.metavar A name representing the values for this option that can be displayed to the user.","title":"metavar"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/names/","text":"clikt / com.github.ajalt.clikt.parameters.options / EagerOption / names names \u00b6 val names: Set < String > Overrides Option.names The names that can be used to invoke this option. They must start with a punctuation character.","title":"Names"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/names/#names","text":"val names: Set < String > Overrides Option.names The names that can be used to invoke this option. They must start with a punctuation character.","title":"names"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/nvalues/","text":"clikt / com.github.ajalt.clikt.parameters.options / EagerOption / nvalues nvalues \u00b6 val nvalues: Int Overrides Option.nvalues The number of values that must be given to this option.","title":"Nvalues"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/nvalues/#nvalues","text":"val nvalues: Int Overrides Option.nvalues The number of values that must be given to this option.","title":"nvalues"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/parser/","text":"clikt / com.github.ajalt.clikt.parameters.options / EagerOption / parser parser \u00b6 val parser: OptionParser Overrides Option.parser The parser for this option\u2019s values.","title":"Parser"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/parser/#parser","text":"val parser: OptionParser Overrides Option.parser The parser for this option\u2019s values.","title":"parser"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/post-validate/","text":"clikt / com.github.ajalt.clikt.parameters.options / EagerOption / postValidate postValidate \u00b6 fun postValidate(context: Context ): Unit Overrides Option.postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"Post validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/post-validate/#postvalidate","text":"fun postValidate(context: Context ): Unit Overrides Option.postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"postValidate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/secondary-names/","text":"clikt / com.github.ajalt.clikt.parameters.options / EagerOption / secondaryNames secondaryNames \u00b6 val secondaryNames: Set < String > Overrides Option.secondaryNames Names that can be used for a secondary purpose, like disabling flag options.","title":"Secondary names"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-eager-option/secondary-names/#secondarynames","text":"val secondaryNames: Set < String > Overrides Option.secondaryNames Names that can be used for a secondary purpose, like disabling flag options.","title":"secondaryNames"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption FlagOption \u00b6 class FlagOption<T> : OptionDelegate < T > An Option that has no values. Constructors \u00b6 Name Summary <init> FlagOption(names: Set < String >, secondaryNames: Set < String >, help: String , hidden: Boolean , helpTags: Map < String , String >, envvar: String ?, transformEnvvar: OptionTransformContext .( String ) -> T , transformAll: CallsTransformer < String , T >, validator: OptionValidator < T >) An Option that has no values. Properties \u00b6 Name Summary envvar val envvar: String ? The name of the environment variable for this option. Overrides automatic names. groupName var groupName: String ? The name of the group, or null if this option should not be grouped in the help output. help val help: String The description of this option, usually a single line. helpTags val helpTags: Map < String , String > Extra information about this option to pass to the help formatter. hidden val hidden: Boolean If true, this option should not appear in help output. metavar val metavar: String ? A name representing the values for this option that can be displayed to the user. names var names: Set < String > The names that can be used to invoke this option. They must start with a punctuation character. nvalues val nvalues: Int The number of values that must be given to this option. parameterGroup var parameterGroup: ParameterGroup ? The group that this option belongs to, or null. Set by the group. parser val parser: FlagOptionParser The parser for this option\u2019s values. secondaryNames val secondaryNames: Set < String > Names that can be used for a secondary purpose, like disabling flag options. transformAll val transformAll: CallsTransformer < String , T > Called to transform all invocations of this option into the final option type. transformEnvvar val transformEnvvar: OptionTransformContext .( String ) -> T Called to transform string values from envvars into the option type. validator val validator: OptionValidator < T > value var value: T The value for this option. Functions \u00b6 Name Summary copy fun <T> copy(transformEnvvar: OptionTransformContext .( String ) -> T , transformAll: CallsTransformer < String , T >, validator: OptionValidator < T >, names: Set < String > = this.names, secondaryNames: Set < String > = this.secondaryNames, help: String = this.help, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, envvar: String ? = this.envvar): FlagOption < T > Create a new option that is a copy of this one with different transforms. fun copy(validator: OptionValidator < T > = this.validator, names: Set < String > = this.names, secondaryNames: Set < String > = this.secondaryNames, help: String = this.help, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, envvar: String ? = this.envvar): FlagOption < T > Create a new option that is a copy of this one with the same transforms. finalize fun finalize(context: Context , invocations: List < OptionParser.Invocation >): Unit Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. postValidate fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value. provideDelegate operator fun provideDelegate(thisRef: ParameterHolder , prop: KProperty <*>): ReadOnlyProperty < ParameterHolder , T > Implementations must call ParameterHolder.registerOption Inherited Functions \u00b6 Name Summary getValue open fun getValue(thisRef: ParameterHolder , property: KProperty <*>): T Extension Functions \u00b6 Name Summary default fun <T : Any > FlagOption < T ?>.default(value: T ): FlagOption < T > Set a default value for a option. deprecated fun <T> FlagOption < T >.deprecated(message: String ? = \"\", tagName: String ? = \"deprecated\", tagValue: String = \"\", error: Boolean = false): OptionDelegate < T > Mark this option as deprecated in the help output. validate fun <T : Any > FlagOption < T >.validate(validator: OptionValidator < T >): OptionDelegate < T > Check the final option value and raise an error if it\u2019s not valid.","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/#flagoption","text":"class FlagOption<T> : OptionDelegate < T > An Option that has no values.","title":"FlagOption"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/#constructors","text":"Name Summary <init> FlagOption(names: Set < String >, secondaryNames: Set < String >, help: String , hidden: Boolean , helpTags: Map < String , String >, envvar: String ?, transformEnvvar: OptionTransformContext .( String ) -> T , transformAll: CallsTransformer < String , T >, validator: OptionValidator < T >) An Option that has no values.","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/#properties","text":"Name Summary envvar val envvar: String ? The name of the environment variable for this option. Overrides automatic names. groupName var groupName: String ? The name of the group, or null if this option should not be grouped in the help output. help val help: String The description of this option, usually a single line. helpTags val helpTags: Map < String , String > Extra information about this option to pass to the help formatter. hidden val hidden: Boolean If true, this option should not appear in help output. metavar val metavar: String ? A name representing the values for this option that can be displayed to the user. names var names: Set < String > The names that can be used to invoke this option. They must start with a punctuation character. nvalues val nvalues: Int The number of values that must be given to this option. parameterGroup var parameterGroup: ParameterGroup ? The group that this option belongs to, or null. Set by the group. parser val parser: FlagOptionParser The parser for this option\u2019s values. secondaryNames val secondaryNames: Set < String > Names that can be used for a secondary purpose, like disabling flag options. transformAll val transformAll: CallsTransformer < String , T > Called to transform all invocations of this option into the final option type. transformEnvvar val transformEnvvar: OptionTransformContext .( String ) -> T Called to transform string values from envvars into the option type. validator val validator: OptionValidator < T > value var value: T The value for this option.","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/#functions","text":"Name Summary copy fun <T> copy(transformEnvvar: OptionTransformContext .( String ) -> T , transformAll: CallsTransformer < String , T >, validator: OptionValidator < T >, names: Set < String > = this.names, secondaryNames: Set < String > = this.secondaryNames, help: String = this.help, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, envvar: String ? = this.envvar): FlagOption < T > Create a new option that is a copy of this one with different transforms. fun copy(validator: OptionValidator < T > = this.validator, names: Set < String > = this.names, secondaryNames: Set < String > = this.secondaryNames, help: String = this.help, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, envvar: String ? = this.envvar): FlagOption < T > Create a new option that is a copy of this one with the same transforms. finalize fun finalize(context: Context , invocations: List < OptionParser.Invocation >): Unit Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. postValidate fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value. provideDelegate operator fun provideDelegate(thisRef: ParameterHolder , prop: KProperty <*>): ReadOnlyProperty < ParameterHolder , T > Implementations must call ParameterHolder.registerOption","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/#inherited-functions","text":"Name Summary getValue open fun getValue(thisRef: ParameterHolder , property: KProperty <*>): T","title":"Inherited Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/#extension-functions","text":"Name Summary default fun <T : Any > FlagOption < T ?>.default(value: T ): FlagOption < T > Set a default value for a option. deprecated fun <T> FlagOption < T >.deprecated(message: String ? = \"\", tagName: String ? = \"deprecated\", tagValue: String = \"\", error: Boolean = false): OptionDelegate < T > Mark this option as deprecated in the help output. validate fun <T : Any > FlagOption < T >.validate(validator: OptionValidator < T >): OptionDelegate < T > Check the final option value and raise an error if it\u2019s not valid.","title":"Extension Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/-init-/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / <init> <init> \u00b6 FlagOption(names: Set < String >, secondaryNames: Set < String >, help: String , hidden: Boolean , helpTags: Map < String , String >, envvar: String ?, transformEnvvar: OptionTransformContext .( String ) -> T , transformAll: CallsTransformer < String , T >, validator: OptionValidator < T >) An Option that has no values.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/-init-/#init","text":"FlagOption(names: Set < String >, secondaryNames: Set < String >, help: String , hidden: Boolean , helpTags: Map < String , String >, envvar: String ?, transformEnvvar: OptionTransformContext .( String ) -> T , transformAll: CallsTransformer < String , T >, validator: OptionValidator < T >) An Option that has no values.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/copy/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / copy copy \u00b6 fun <T> copy(transformEnvvar: OptionTransformContext .( String ) -> T , transformAll: CallsTransformer < String , T >, validator: OptionValidator < T >, names: Set < String > = this.names, secondaryNames: Set < String > = this.secondaryNames, help: String = this.help, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, envvar: String ? = this.envvar): FlagOption < T > Create a new option that is a copy of this one with different transforms. fun copy(validator: OptionValidator < T > = this.validator, names: Set < String > = this.names, secondaryNames: Set < String > = this.secondaryNames, help: String = this.help, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, envvar: String ? = this.envvar): FlagOption < T > Create a new option that is a copy of this one with the same transforms.","title":"Copy"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/copy/#copy","text":"fun <T> copy(transformEnvvar: OptionTransformContext .( String ) -> T , transformAll: CallsTransformer < String , T >, validator: OptionValidator < T >, names: Set < String > = this.names, secondaryNames: Set < String > = this.secondaryNames, help: String = this.help, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, envvar: String ? = this.envvar): FlagOption < T > Create a new option that is a copy of this one with different transforms. fun copy(validator: OptionValidator < T > = this.validator, names: Set < String > = this.names, secondaryNames: Set < String > = this.secondaryNames, help: String = this.help, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, envvar: String ? = this.envvar): FlagOption < T > Create a new option that is a copy of this one with the same transforms.","title":"copy"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/envvar/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / envvar envvar \u00b6 val envvar: String ? The name of the environment variable for this option. Overrides automatic names. Property \u00b6 envvar - The name of the environment variable for this option. Overrides automatic names.","title":"Envvar"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/envvar/#envvar","text":"val envvar: String ? The name of the environment variable for this option. Overrides automatic names.","title":"envvar"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/envvar/#property","text":"envvar - The name of the environment variable for this option. Overrides automatic names.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/finalize/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / finalize finalize \u00b6 fun finalize(context: Context , invocations: List < OptionParser.Invocation >): Unit Overrides Option.finalize Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. You cannot refer to other parameter values during this call, since they might not have been finalized yet. Parameters \u00b6 context - The context for this parse invocations - A possibly empty list of invocations of this option.","title":"Finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/finalize/#finalize","text":"fun finalize(context: Context , invocations: List < OptionParser.Invocation >): Unit Overrides Option.finalize Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. You cannot refer to other parameter values during this call, since they might not have been finalized yet.","title":"finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/finalize/#parameters","text":"context - The context for this parse invocations - A possibly empty list of invocations of this option.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/group-name/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / groupName groupName \u00b6 var groupName: String ? Overrides GroupableOption.groupName The name of the group, or null if this option should not be grouped in the help output.","title":"Group name"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/group-name/#groupname","text":"var groupName: String ? Overrides GroupableOption.groupName The name of the group, or null if this option should not be grouped in the help output.","title":"groupName"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/help-tags/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / helpTags helpTags \u00b6 val helpTags: Map < String , String > Overrides Option.helpTags Extra information about this option to pass to the help formatter.","title":"Help tags"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/help-tags/#helptags","text":"val helpTags: Map < String , String > Overrides Option.helpTags Extra information about this option to pass to the help formatter.","title":"helpTags"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/help/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / help help \u00b6 val help: String Overrides Option.help The description of this option, usually a single line.","title":"Help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/help/#help","text":"val help: String Overrides Option.help The description of this option, usually a single line.","title":"help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/hidden/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / hidden hidden \u00b6 val hidden: Boolean Overrides Option.hidden If true, this option should not appear in help output.","title":"Hidden"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/hidden/#hidden","text":"val hidden: Boolean Overrides Option.hidden If true, this option should not appear in help output.","title":"hidden"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/metavar/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / metavar metavar \u00b6 val metavar: String ? Overrides Option.metavar A name representing the values for this option that can be displayed to the user.","title":"Metavar"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/metavar/#metavar","text":"val metavar: String ? Overrides Option.metavar A name representing the values for this option that can be displayed to the user.","title":"metavar"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/names/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / names names \u00b6 var names: Set < String > Overrides Option.names The names that can be used to invoke this option. They must start with a punctuation character.","title":"Names"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/names/#names","text":"var names: Set < String > Overrides Option.names The names that can be used to invoke this option. They must start with a punctuation character.","title":"names"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/nvalues/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / nvalues nvalues \u00b6 val nvalues: Int Overrides Option.nvalues The number of values that must be given to this option.","title":"Nvalues"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/nvalues/#nvalues","text":"val nvalues: Int Overrides Option.nvalues The number of values that must be given to this option.","title":"nvalues"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/parameter-group/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / parameterGroup parameterGroup \u00b6 var parameterGroup: ParameterGroup ? Overrides GroupableOption.parameterGroup The group that this option belongs to, or null. Set by the group.","title":"Parameter group"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/parameter-group/#parametergroup","text":"var parameterGroup: ParameterGroup ? Overrides GroupableOption.parameterGroup The group that this option belongs to, or null. Set by the group.","title":"parameterGroup"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/parser/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / parser parser \u00b6 val parser: FlagOptionParser Overrides Option.parser The parser for this option\u2019s values.","title":"Parser"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/parser/#parser","text":"val parser: FlagOptionParser Overrides Option.parser The parser for this option\u2019s values.","title":"parser"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/post-validate/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / postValidate postValidate \u00b6 fun postValidate(context: Context ): Unit Overrides Option.postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"Post validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/post-validate/#postvalidate","text":"fun postValidate(context: Context ): Unit Overrides Option.postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"postValidate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/provide-delegate/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / provideDelegate provideDelegate \u00b6 operator fun provideDelegate(thisRef: ParameterHolder , prop: KProperty <*>): ReadOnlyProperty < ParameterHolder , T > Overrides OptionDelegate.provideDelegate Implementations must call ParameterHolder.registerOption","title":"Provide delegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/provide-delegate/#providedelegate","text":"operator fun provideDelegate(thisRef: ParameterHolder , prop: KProperty <*>): ReadOnlyProperty < ParameterHolder , T > Overrides OptionDelegate.provideDelegate Implementations must call ParameterHolder.registerOption","title":"provideDelegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/secondary-names/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / secondaryNames secondaryNames \u00b6 val secondaryNames: Set < String > Overrides Option.secondaryNames Names that can be used for a secondary purpose, like disabling flag options.","title":"Secondary names"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/secondary-names/#secondarynames","text":"val secondaryNames: Set < String > Overrides Option.secondaryNames Names that can be used for a secondary purpose, like disabling flag options.","title":"secondaryNames"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/transform-all/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / transformAll transformAll \u00b6 val transformAll: CallsTransformer < String , T > Called to transform all invocations of this option into the final option type. Property \u00b6 transformAll - Called to transform all invocations of this option into the final option type.","title":"Transform all"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/transform-all/#transformall","text":"val transformAll: CallsTransformer < String , T > Called to transform all invocations of this option into the final option type.","title":"transformAll"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/transform-all/#property","text":"transformAll - Called to transform all invocations of this option into the final option type.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/transform-envvar/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / transformEnvvar transformEnvvar \u00b6 val transformEnvvar: OptionTransformContext .( String ) -> T Called to transform string values from envvars into the option type. Property \u00b6 transformEnvvar - Called to transform string values from envvars into the option type.","title":"Transform envvar"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/transform-envvar/#transformenvvar","text":"val transformEnvvar: OptionTransformContext .( String ) -> T Called to transform string values from envvars into the option type.","title":"transformEnvvar"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/transform-envvar/#property","text":"transformEnvvar - Called to transform string values from envvars into the option type.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/validator/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / validator validator \u00b6 val validator: OptionValidator < T >","title":"Validator"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/validator/#validator","text":"val validator: OptionValidator < T >","title":"validator"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/value/","text":"clikt / com.github.ajalt.clikt.parameters.options / FlagOption / value value \u00b6 var value: T Overrides OptionDelegate.value The value for this option. An exception should be thrown if this property is accessed before finalize is called. Getter The value for this option. An exception should be thrown if this property is accessed before finalize is called.","title":"Value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-flag-option/value/#value","text":"var value: T Overrides OptionDelegate.value The value for this option. An exception should be thrown if this property is accessed before finalize is called. Getter The value for this option. An exception should be thrown if this property is accessed before finalize is called.","title":"value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/","text":"clikt / com.github.ajalt.clikt.parameters.options / Option Option \u00b6 interface Option An optional command line parameter that takes a fixed number of values. Options can take any fixed number of values, including 0. Properties \u00b6 Name Summary completionCandidates open val completionCandidates: CompletionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this option. help abstract val help: String The description of this option, usually a single line. helpTags abstract val helpTags: Map < String , String > Extra information about this option to pass to the help formatter. hidden abstract val hidden: Boolean If true, this option should not appear in help output. metavar abstract val metavar: String ? A name representing the values for this option that can be displayed to the user. names abstract val names: Set < String > The names that can be used to invoke this option. They must start with a punctuation character. nvalues abstract val nvalues: Int The number of values that must be given to this option. parameterHelp open val parameterHelp: HelpFormatter.ParameterHelp.Option ? Information about this option for the help output. parser abstract val parser: OptionParser The parser for this option\u2019s values. secondaryNames abstract val secondaryNames: Set < String > Names that can be used for a secondary purpose, like disabling flag options. Functions \u00b6 Name Summary finalize abstract fun finalize(context: Context , invocations: List < OptionParser.Invocation >): Unit Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. postValidate abstract fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value. Inheritors \u00b6 Name Summary EagerOption class EagerOption : Option An Option with no values that is finalize d before other types of options. GroupableOption interface GroupableOption : Option An option that can be added to a ParameterGroup OptionCallTransformContext class OptionCallTransformContext : Option A receiver for options transformers. OptionTransformContext class OptionTransformContext : Option A receiver for options transformers.","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/#option","text":"interface Option An optional command line parameter that takes a fixed number of values. Options can take any fixed number of values, including 0.","title":"Option"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/#properties","text":"Name Summary completionCandidates open val completionCandidates: CompletionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this option. help abstract val help: String The description of this option, usually a single line. helpTags abstract val helpTags: Map < String , String > Extra information about this option to pass to the help formatter. hidden abstract val hidden: Boolean If true, this option should not appear in help output. metavar abstract val metavar: String ? A name representing the values for this option that can be displayed to the user. names abstract val names: Set < String > The names that can be used to invoke this option. They must start with a punctuation character. nvalues abstract val nvalues: Int The number of values that must be given to this option. parameterHelp open val parameterHelp: HelpFormatter.ParameterHelp.Option ? Information about this option for the help output. parser abstract val parser: OptionParser The parser for this option\u2019s values. secondaryNames abstract val secondaryNames: Set < String > Names that can be used for a secondary purpose, like disabling flag options.","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/#functions","text":"Name Summary finalize abstract fun finalize(context: Context , invocations: List < OptionParser.Invocation >): Unit Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. postValidate abstract fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/#inheritors","text":"Name Summary EagerOption class EagerOption : Option An Option with no values that is finalize d before other types of options. GroupableOption interface GroupableOption : Option An option that can be added to a ParameterGroup OptionCallTransformContext class OptionCallTransformContext : Option A receiver for options transformers. OptionTransformContext class OptionTransformContext : Option A receiver for options transformers.","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/completion-candidates/","text":"clikt / com.github.ajalt.clikt.parameters.options / Option / completionCandidates completionCandidates \u00b6 open val completionCandidates: CompletionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this option.","title":"Completion candidates"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/completion-candidates/#completioncandidates","text":"open val completionCandidates: CompletionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this option.","title":"completionCandidates"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/finalize/","text":"clikt / com.github.ajalt.clikt.parameters.options / Option / finalize finalize \u00b6 abstract fun finalize(context: Context , invocations: List < OptionParser.Invocation >): Unit Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. You cannot refer to other parameter values during this call, since they might not have been finalized yet. Parameters \u00b6 context - The context for this parse invocations - A possibly empty list of invocations of this option.","title":"Finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/finalize/#finalize","text":"abstract fun finalize(context: Context , invocations: List < OptionParser.Invocation >): Unit Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. You cannot refer to other parameter values during this call, since they might not have been finalized yet.","title":"finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/finalize/#parameters","text":"context - The context for this parse invocations - A possibly empty list of invocations of this option.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/help-tags/","text":"clikt / com.github.ajalt.clikt.parameters.options / Option / helpTags helpTags \u00b6 abstract val helpTags: Map < String , String > Extra information about this option to pass to the help formatter.","title":"Help tags"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/help-tags/#helptags","text":"abstract val helpTags: Map < String , String > Extra information about this option to pass to the help formatter.","title":"helpTags"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/help/","text":"clikt / com.github.ajalt.clikt.parameters.options / Option / help help \u00b6 abstract val help: String The description of this option, usually a single line.","title":"Help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/help/#help","text":"abstract val help: String The description of this option, usually a single line.","title":"help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/hidden/","text":"clikt / com.github.ajalt.clikt.parameters.options / Option / hidden hidden \u00b6 abstract val hidden: Boolean If true, this option should not appear in help output.","title":"Hidden"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/hidden/#hidden","text":"abstract val hidden: Boolean If true, this option should not appear in help output.","title":"hidden"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/metavar/","text":"clikt / com.github.ajalt.clikt.parameters.options / Option / metavar metavar \u00b6 abstract val metavar: String ? A name representing the values for this option that can be displayed to the user.","title":"Metavar"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/metavar/#metavar","text":"abstract val metavar: String ? A name representing the values for this option that can be displayed to the user.","title":"metavar"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/names/","text":"clikt / com.github.ajalt.clikt.parameters.options / Option / names names \u00b6 abstract val names: Set < String > The names that can be used to invoke this option. They must start with a punctuation character.","title":"Names"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/names/#names","text":"abstract val names: Set < String > The names that can be used to invoke this option. They must start with a punctuation character.","title":"names"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/nvalues/","text":"clikt / com.github.ajalt.clikt.parameters.options / Option / nvalues nvalues \u00b6 abstract val nvalues: Int The number of values that must be given to this option.","title":"Nvalues"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/nvalues/#nvalues","text":"abstract val nvalues: Int The number of values that must be given to this option.","title":"nvalues"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/parameter-help/","text":"clikt / com.github.ajalt.clikt.parameters.options / Option / parameterHelp parameterHelp \u00b6 open val parameterHelp: HelpFormatter.ParameterHelp.Option ? Information about this option for the help output.","title":"Parameter help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/parameter-help/#parameterhelp","text":"open val parameterHelp: HelpFormatter.ParameterHelp.Option ? Information about this option for the help output.","title":"parameterHelp"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/parser/","text":"clikt / com.github.ajalt.clikt.parameters.options / Option / parser parser \u00b6 abstract val parser: OptionParser The parser for this option\u2019s values.","title":"Parser"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/parser/#parser","text":"abstract val parser: OptionParser The parser for this option\u2019s values.","title":"parser"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/post-validate/","text":"clikt / com.github.ajalt.clikt.parameters.options / Option / postValidate postValidate \u00b6 abstract fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"Post validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/post-validate/#postvalidate","text":"abstract fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"postValidate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/secondary-names/","text":"clikt / com.github.ajalt.clikt.parameters.options / Option / secondaryNames secondaryNames \u00b6 abstract val secondaryNames: Set < String > Names that can be used for a secondary purpose, like disabling flag options.","title":"Secondary names"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option/secondary-names/#secondarynames","text":"abstract val secondaryNames: Set < String > Names that can be used for a secondary purpose, like disabling flag options.","title":"secondaryNames"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionCallTransformContext OptionCallTransformContext \u00b6 class OptionCallTransformContext : Option A receiver for options transformers. Constructors \u00b6 Name Summary <init> OptionCallTransformContext(name: String , option: Option , context: Context ) A receiver for options transformers. Properties \u00b6 Name Summary context val context: Context name val name: String The name that was used to invoke this option. option val option: Option The option that was invoked Functions \u00b6 Name Summary fail fun fail(message: String ): Nothing Throw an exception indicating that an invalid value was provided. message fun message(message: String ): Unit Issue a message that can be shown to the user require fun require(value: Boolean , lazyMessage: () -> String = { \"invalid value\" }): Unit If value )/value) is false, call fail with the output of lazyMessage )/lazyMessage)","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/#optioncalltransformcontext","text":"class OptionCallTransformContext : Option A receiver for options transformers.","title":"OptionCallTransformContext"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/#constructors","text":"Name Summary <init> OptionCallTransformContext(name: String , option: Option , context: Context ) A receiver for options transformers.","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/#properties","text":"Name Summary context val context: Context name val name: String The name that was used to invoke this option. option val option: Option The option that was invoked","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/#functions","text":"Name Summary fail fun fail(message: String ): Nothing Throw an exception indicating that an invalid value was provided. message fun message(message: String ): Unit Issue a message that can be shown to the user require fun require(value: Boolean , lazyMessage: () -> String = { \"invalid value\" }): Unit If value )/value) is false, call fail with the output of lazyMessage )/lazyMessage)","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/-init-/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionCallTransformContext / <init> <init> \u00b6 OptionCallTransformContext(name: String , option: Option , context: Context ) A receiver for options transformers.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/-init-/#init","text":"OptionCallTransformContext(name: String , option: Option , context: Context ) A receiver for options transformers.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/context/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionCallTransformContext / context context \u00b6 val context: Context","title":"Context"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/context/#context","text":"val context: Context","title":"context"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/fail/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionCallTransformContext / fail fail \u00b6 fun fail(message: String ): Nothing Throw an exception indicating that an invalid value was provided.","title":"Fail"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/fail/#fail","text":"fun fail(message: String ): Nothing Throw an exception indicating that an invalid value was provided.","title":"fail"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/message/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionCallTransformContext / message message \u00b6 fun message(message: String ): Unit Issue a message that can be shown to the user","title":"Message"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/message/#message","text":"fun message(message: String ): Unit Issue a message that can be shown to the user","title":"message"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/name/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionCallTransformContext / name name \u00b6 val name: String The name that was used to invoke this option. Property \u00b6 name - The name that was used to invoke this option.","title":"Name"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/name/#name","text":"val name: String The name that was used to invoke this option.","title":"name"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/name/#property","text":"name - The name that was used to invoke this option.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/option/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionCallTransformContext / option option \u00b6 val option: Option The option that was invoked Property \u00b6 option - The option that was invoked","title":"Option"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/option/#option","text":"val option: Option The option that was invoked","title":"option"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/option/#property","text":"option - The option that was invoked","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/require/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionCallTransformContext / require require \u00b6 inline fun require(value: Boolean , lazyMessage: () -> String = { \"invalid value\" }): Unit If value )/value) is false, call fail with the output of lazyMessage )/lazyMessage)","title":"Require"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-call-transform-context/require/#require","text":"inline fun require(value: Boolean , lazyMessage: () -> String = { \"invalid value\" }): Unit If value )/value) is false, call fail with the output of lazyMessage )/lazyMessage)","title":"require"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-delegate/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionDelegate OptionDelegate \u00b6 interface OptionDelegate<T> : GroupableOption , ReadOnlyProperty < ParameterHolder , T > An option that functions as a property delegate Properties \u00b6 Name Summary value abstract val value: T The value for this option. Inherited Properties \u00b6 Name Summary groupName abstract var groupName: String ? The name of the group, or null if this option should not be grouped in the help output. parameterGroup abstract var parameterGroup: ParameterGroup ? The group that this option belongs to, or null. Set by the group. Functions \u00b6 Name Summary getValue open fun getValue(thisRef: ParameterHolder , property: KProperty <*>): T provideDelegate abstract operator fun provideDelegate(thisRef: ParameterHolder , prop: KProperty <*>): ReadOnlyProperty < ParameterHolder , T > Implementations must call ParameterHolder.registerOption Inheritors \u00b6 Name Summary FlagOption class FlagOption<T> : OptionDelegate < T > An Option that has no values. OptionWithValues class OptionWithValues<AllT, EachT, ValueT> : OptionDelegate < AllT >, GroupableOption An Option that takes one or more values.","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-delegate/#optiondelegate","text":"interface OptionDelegate<T> : GroupableOption , ReadOnlyProperty < ParameterHolder , T > An option that functions as a property delegate","title":"OptionDelegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-delegate/#properties","text":"Name Summary value abstract val value: T The value for this option.","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-delegate/#inherited-properties","text":"Name Summary groupName abstract var groupName: String ? The name of the group, or null if this option should not be grouped in the help output. parameterGroup abstract var parameterGroup: ParameterGroup ? The group that this option belongs to, or null. Set by the group.","title":"Inherited Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-delegate/#functions","text":"Name Summary getValue open fun getValue(thisRef: ParameterHolder , property: KProperty <*>): T provideDelegate abstract operator fun provideDelegate(thisRef: ParameterHolder , prop: KProperty <*>): ReadOnlyProperty < ParameterHolder , T > Implementations must call ParameterHolder.registerOption","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-delegate/#inheritors","text":"Name Summary FlagOption class FlagOption<T> : OptionDelegate < T > An Option that has no values. OptionWithValues class OptionWithValues<AllT, EachT, ValueT> : OptionDelegate < AllT >, GroupableOption An Option that takes one or more values.","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-delegate/get-value/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionDelegate / getValue getValue \u00b6 open fun getValue(thisRef: ParameterHolder , property: KProperty <*>): T","title":"Get value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-delegate/get-value/#getvalue","text":"open fun getValue(thisRef: ParameterHolder , property: KProperty <*>): T","title":"getValue"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-delegate/provide-delegate/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionDelegate / provideDelegate provideDelegate \u00b6 abstract operator fun provideDelegate(thisRef: ParameterHolder , prop: KProperty <*>): ReadOnlyProperty < ParameterHolder , T > Implementations must call ParameterHolder.registerOption","title":"Provide delegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-delegate/provide-delegate/#providedelegate","text":"abstract operator fun provideDelegate(thisRef: ParameterHolder , prop: KProperty <*>): ReadOnlyProperty < ParameterHolder , T > Implementations must call ParameterHolder.registerOption","title":"provideDelegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-delegate/value/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionDelegate / value value \u00b6 abstract val value: T The value for this option. An exception should be thrown if this property is accessed before finalize is called.","title":"Value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-delegate/value/#value","text":"abstract val value: T The value for this option. An exception should be thrown if this property is accessed before finalize is called.","title":"value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionTransformContext OptionTransformContext \u00b6 class OptionTransformContext : Option A receiver for options transformers. Constructors \u00b6 Name Summary <init> OptionTransformContext(option: Option , context: Context ) A receiver for options transformers. Properties \u00b6 Name Summary context val context: Context option val option: Option The option that was invoked Functions \u00b6 Name Summary fail fun fail(message: String ): Nothing Throw an exception indicating that usage was incorrect. message fun message(message: String ): Unit Issue a message that can be shown to the user require fun require(value: Boolean , lazyMessage: () -> String = { \"invalid value\" }): Unit If value )/value) is false, call fail with the output of lazyMessage )/lazyMessage)","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/#optiontransformcontext","text":"class OptionTransformContext : Option A receiver for options transformers.","title":"OptionTransformContext"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/#constructors","text":"Name Summary <init> OptionTransformContext(option: Option , context: Context ) A receiver for options transformers.","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/#properties","text":"Name Summary context val context: Context option val option: Option The option that was invoked","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/#functions","text":"Name Summary fail fun fail(message: String ): Nothing Throw an exception indicating that usage was incorrect. message fun message(message: String ): Unit Issue a message that can be shown to the user require fun require(value: Boolean , lazyMessage: () -> String = { \"invalid value\" }): Unit If value )/value) is false, call fail with the output of lazyMessage )/lazyMessage)","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/-init-/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionTransformContext / <init> <init> \u00b6 OptionTransformContext(option: Option , context: Context ) A receiver for options transformers.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/-init-/#init","text":"OptionTransformContext(option: Option , context: Context ) A receiver for options transformers.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/context/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionTransformContext / context context \u00b6 val context: Context","title":"Context"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/context/#context","text":"val context: Context","title":"context"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/fail/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionTransformContext / fail fail \u00b6 fun fail(message: String ): Nothing Throw an exception indicating that usage was incorrect.","title":"Fail"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/fail/#fail","text":"fun fail(message: String ): Nothing Throw an exception indicating that usage was incorrect.","title":"fail"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/message/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionTransformContext / message message \u00b6 fun message(message: String ): Unit Issue a message that can be shown to the user","title":"Message"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/message/#message","text":"fun message(message: String ): Unit Issue a message that can be shown to the user","title":"message"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/option/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionTransformContext / option option \u00b6 val option: Option The option that was invoked Property \u00b6 option - The option that was invoked","title":"Option"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/option/#option","text":"val option: Option The option that was invoked","title":"option"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/option/#property","text":"option - The option that was invoked","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/require/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionTransformContext / require require \u00b6 inline fun require(value: Boolean , lazyMessage: () -> String = { \"invalid value\" }): Unit If value )/value) is false, call fail with the output of lazyMessage )/lazyMessage)","title":"Require"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-transform-context/require/#require","text":"inline fun require(value: Boolean , lazyMessage: () -> String = { \"invalid value\" }): Unit If value )/value) is false, call fail with the output of lazyMessage )/lazyMessage)","title":"require"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues OptionWithValues \u00b6 class OptionWithValues<AllT, EachT, ValueT> : OptionDelegate < AllT >, GroupableOption An Option that takes one or more values. Constructors \u00b6 Name Summary <init> OptionWithValues(names: Set < String >, metavarWithDefault: ValueWithDefault < String ?>, nvalues: Int , help: String , hidden: Boolean , helpTags: Map < String , String >, envvar: String ?, envvarSplit: ValueWithDefault < Regex >, valueSplit: Regex ?, parser: OptionWithValuesParser , completionCandidates: CompletionCandidates , transformValue: ValueTransformer < ValueT >, transformEach: ArgsTransformer < ValueT , EachT >, transformAll: CallsTransformer < EachT , AllT >, transformValidator: OptionValidator < AllT >) An Option that takes one or more values. Properties \u00b6 Name Summary completionCandidates val completionCandidates: CompletionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this option. envvar val envvar: String ? The environment variable name to use. envvarSplit val envvarSplit: ValueWithDefault < Regex > The pattern to split envvar values on. If the envvar splits into multiple values, each one will be treated like a separate invocation of the option. groupName var groupName: String ? The name of the group, or null if this option should not be grouped in the help output. help val help: String The description of this option, usually a single line. helpTags val helpTags: Map < String , String > Extra information about this option to pass to the help formatter. hidden val hidden: Boolean If true, this option should not appear in help output. metavar val metavar: String ? A name representing the values for this option that can be displayed to the user. metavarWithDefault val metavarWithDefault: ValueWithDefault < String ?> The metavar to use. Specified at option creation. names var names: Set < String > The names that can be used to invoke this option. They must start with a punctuation character. nvalues val nvalues: Int The number of values that must be given to this option. parameterGroup var parameterGroup: ParameterGroup ? The group that this option belongs to, or null. Set by the group. parser val parser: OptionWithValuesParser The parser for this option\u2019s values. secondaryNames val secondaryNames: Set < String > Names that can be used for a secondary purpose, like disabling flag options. transformAll val transformAll: CallsTransformer < EachT , AllT > Called in finalize to transform all invocations into the final value. transformEach val transformEach: ArgsTransformer < ValueT , EachT > Called in finalize to transform each invocation. transformValidator val transformValidator: OptionValidator < AllT > Called after all parameters have been finalize d to validate the output of transformAll transformValue val transformValue: ValueTransformer < ValueT > Called in finalize to transform each value provided to each invocation. value var value: AllT The value for this option. valueSplit val valueSplit: Regex ? The pattern to split values from the command line on. By default, values are split on whitespace. Functions \u00b6 Name Summary copy fun <AllT, EachT, ValueT> copy(transformValue: ValueTransformer < ValueT >, transformEach: ArgsTransformer < ValueT , EachT >, transformAll: CallsTransformer < EachT , AllT >, validator: OptionValidator < AllT >, names: Set < String > = this.names, metavarWithDefault: ValueWithDefault < String ?> = this.metavarWithDefault, nvalues: Int = this.nvalues, help: String = this.help, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, envvar: String ? = this.envvar, envvarSplit: ValueWithDefault < Regex > = this.envvarSplit, valueSplit: Regex ? = this.valueSplit, parser: OptionWithValuesParser = this.parser, completionCandidates: CompletionCandidates = this.completionCandidates): OptionWithValues < AllT , EachT , ValueT > Create a new option that is a copy of this one with different transforms. fun copy(validator: OptionValidator < AllT > = this.transformValidator, names: Set < String > = this.names, metavarWithDefault: ValueWithDefault < String ?> = this.metavarWithDefault, nvalues: Int = this.nvalues, help: String = this.help, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, envvar: String ? = this.envvar, envvarSplit: ValueWithDefault < Regex > = this.envvarSplit, valueSplit: Regex ? = this.valueSplit, parser: OptionWithValuesParser = this.parser, completionCandidates: CompletionCandidates = this.completionCandidates): OptionWithValues < AllT , EachT , ValueT > Create a new option that is a copy of this one with the same transforms. finalize fun finalize(context: Context , invocations: List < OptionParser.Invocation >): Unit Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. postValidate fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value. provideDelegate operator fun provideDelegate(thisRef: ParameterHolder , prop: KProperty <*>): ReadOnlyProperty < ParameterHolder , AllT > Implementations must call ParameterHolder.registerOption Inherited Functions \u00b6 Name Summary getValue open fun getValue(thisRef: ParameterHolder , property: KProperty <*>): T Extension Functions \u00b6 Name Summary choice fun <T : Any > RawOption .choice(choices: Map < String , T >, metavar: String = mvar(choices.keys)): NullableOption < T , T > fun <T : Any > RawOption .choice(vararg choices: Pair < String , T >, metavar: String = mvar(choices.map { it.first })): NullableOption < T , T > Convert the option based on a fixed set of values. fun RawOption .choice(vararg choices: String , metavar: String = mvar(choices.asIterable())): NullableOption < String , String > Restrict the option to a fixed set of values. convert fun <T : Any > RawOption .convert(metavar: String = \"VALUE\", envvarSplit: Regex = this.envvarSplit.default, completionCandidates: CompletionCandidates = this.completionCandidates, conversion: ValueTransformer < T >): NullableOption < T , T > Convert the option value type. counted fun RawOption .counted(): FlagOption < Int > Turn an option into a flag that counts the number of times the option occurs on the command line. default fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.default(value: EachT , defaultForHelp: String = value.toString()): OptionWithValues < EachT , EachT , ValueT > If the option is not called on the command line (and is not set in an envvar), use value , com.github.ajalt.clikt.parameters.options.default.EachT, kotlin.String)/value) for the option. defaultLazy fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.defaultLazy(defaultForHelp: String = \"\", value: () -> EachT ): OptionWithValues < EachT , EachT , ValueT > If the option is not called on the command line (and is not set in an envvar), call the value , kotlin.String, kotlin.Function0((com.github.ajalt.clikt.parameters.options.defaultLazy.EachT)))/value) and use its return value for the option. deprecated fun <AllT, EachT, ValueT> OptionWithValues < AllT , EachT , ValueT >.deprecated(message: String ? = \"\", tagName: String ? = \"deprecated\", tagValue: String = \"\", error: Boolean = false): OptionDelegate < AllT > Mark this option as deprecated in the help output. double fun RawOption .double(): NullableOption < Double , Double > Convert the option values to a Double file fun RawOption .file(exists: Boolean = false, fileOkay: Boolean = true, folderOkay: Boolean = true, writable: Boolean = false, readable: Boolean = false): NullableOption < File , File > Convert the option to a File . flag fun RawOption .flag(vararg secondaryNames: String , default: Boolean = false): FlagOption < Boolean > Turn an option into a boolean flag. float fun RawOption .float(): NullableOption < Float , Float > Convert the option values to a Float groupChoice fun <T : OptionGroup > RawOption .groupChoice(choices: Map < String , T >): ChoiceGroup < T , T ?> fun <T : OptionGroup > RawOption .groupChoice(vararg choices: Pair < String , T >): ChoiceGroup < T , T ?> Convert the option to an option group based on a fixed set of values. int fun RawOption .int(): NullableOption < Int , Int > Convert the option values to an Int long fun RawOption .long(): NullableOption < Long , Long > Convert the option values to a Long multiple fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.multiple(default: List < EachT > = emptyList()): OptionWithValues < List < EachT >, EachT , ValueT > Make the option return a list of calls; each item in the list is the value of one call. pair fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.pair(): NullableOption < Pair < ValueT , ValueT >, ValueT > Change to option to take two values, held in a Pair . path fun RawOption .path(exists: Boolean = false, fileOkay: Boolean = true, folderOkay: Boolean = true, writable: Boolean = false, readable: Boolean = false, fileSystem: FileSystem = FileSystems.getDefault()): NullableOption <Path, Path> Convert the option to a Path . prompt fun <T : Any > NullableOption < T , T >.prompt(text: String ? = null, default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \"Repeat for confirmation: \", promptSuffix: String = \": \", showDefault: Boolean = true): OptionWithValues < T , T , T > If the option isn\u2019t given on the command line, prompt the user for manual input. required fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.required(): OptionWithValues < EachT , EachT , ValueT > If the option is not called on the command line (and is not set in an envvar), throw a MissingParameter . restrictTo fun <T> OptionWithValues < T ?, T , T >.restrictTo(min: T ? = null, max: T ? = null, clamp: Boolean = false): OptionWithValues < T ?, T , T > where T : Number , T : Comparable < T > fun <T> OptionWithValues < T ?, T , T >.restrictTo(range: ClosedRange < T >, clamp: Boolean = false): OptionWithValues < T ?, T , T > where T : Number , T : Comparable < T > Restrict the option values to fit into a range. split fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.split(regex: Regex ): OptionWithValues < List < ValueT >?, List < ValueT >, ValueT > Change to option to take any number of values, separated by a regex , kotlin.text.Regex)/regex). fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.split(delimiter: String ): OptionWithValues < List < ValueT >?, List < ValueT >, ValueT > Change to option to take any number of values, separated by a string delimiter , kotlin.String)/delimiter). switch fun <T : Any > RawOption .switch(choices: Map < String , T >): FlagOption < T ?> fun <T : Any > RawOption .switch(vararg choices: Pair < String , T >): FlagOption < T ?> Turn an option into a set of flags that each map to a value. transformAll fun <AllT, EachT : Any , ValueT> NullableOption < EachT , ValueT >.transformAll(defaultForHelp: String ? = this.helpTags[HelpFormatter.Tags.DEFAULT], showAsRequired: Boolean = HelpFormatter.Tags.REQUIRED in this.helpTags, transform: CallsTransformer < EachT , AllT >): OptionWithValues < AllT , EachT , ValueT > Transform all calls to the option to the final option type. transformValues fun <EachInT : Any , EachOutT : Any , ValueT> NullableOption < EachInT , ValueT >.transformValues(nvalues: Int , transform: ArgsTransformer < ValueT , EachOutT >): NullableOption < EachOutT , ValueT > Change the number of values that this option takes. triple fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.triple(): NullableOption < Triple < ValueT , ValueT , ValueT >, ValueT > Change to option to take three values, held in a Triple . unique fun <EachT : Any , ValueT> OptionWithValues < List < EachT >, EachT , ValueT >.unique(): OptionWithValues < Set < EachT >, EachT , ValueT > Make the multiple option return a unique set of calls validate fun <AllT : Any , EachT, ValueT> OptionWithValues < AllT , EachT , ValueT >.validate(validator: OptionValidator < AllT >): OptionDelegate < AllT > Check the final option value and raise an error if it\u2019s not valid.","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/#optionwithvalues","text":"class OptionWithValues<AllT, EachT, ValueT> : OptionDelegate < AllT >, GroupableOption An Option that takes one or more values.","title":"OptionWithValues"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/#constructors","text":"Name Summary <init> OptionWithValues(names: Set < String >, metavarWithDefault: ValueWithDefault < String ?>, nvalues: Int , help: String , hidden: Boolean , helpTags: Map < String , String >, envvar: String ?, envvarSplit: ValueWithDefault < Regex >, valueSplit: Regex ?, parser: OptionWithValuesParser , completionCandidates: CompletionCandidates , transformValue: ValueTransformer < ValueT >, transformEach: ArgsTransformer < ValueT , EachT >, transformAll: CallsTransformer < EachT , AllT >, transformValidator: OptionValidator < AllT >) An Option that takes one or more values.","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/#properties","text":"Name Summary completionCandidates val completionCandidates: CompletionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this option. envvar val envvar: String ? The environment variable name to use. envvarSplit val envvarSplit: ValueWithDefault < Regex > The pattern to split envvar values on. If the envvar splits into multiple values, each one will be treated like a separate invocation of the option. groupName var groupName: String ? The name of the group, or null if this option should not be grouped in the help output. help val help: String The description of this option, usually a single line. helpTags val helpTags: Map < String , String > Extra information about this option to pass to the help formatter. hidden val hidden: Boolean If true, this option should not appear in help output. metavar val metavar: String ? A name representing the values for this option that can be displayed to the user. metavarWithDefault val metavarWithDefault: ValueWithDefault < String ?> The metavar to use. Specified at option creation. names var names: Set < String > The names that can be used to invoke this option. They must start with a punctuation character. nvalues val nvalues: Int The number of values that must be given to this option. parameterGroup var parameterGroup: ParameterGroup ? The group that this option belongs to, or null. Set by the group. parser val parser: OptionWithValuesParser The parser for this option\u2019s values. secondaryNames val secondaryNames: Set < String > Names that can be used for a secondary purpose, like disabling flag options. transformAll val transformAll: CallsTransformer < EachT , AllT > Called in finalize to transform all invocations into the final value. transformEach val transformEach: ArgsTransformer < ValueT , EachT > Called in finalize to transform each invocation. transformValidator val transformValidator: OptionValidator < AllT > Called after all parameters have been finalize d to validate the output of transformAll transformValue val transformValue: ValueTransformer < ValueT > Called in finalize to transform each value provided to each invocation. value var value: AllT The value for this option. valueSplit val valueSplit: Regex ? The pattern to split values from the command line on. By default, values are split on whitespace.","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/#functions","text":"Name Summary copy fun <AllT, EachT, ValueT> copy(transformValue: ValueTransformer < ValueT >, transformEach: ArgsTransformer < ValueT , EachT >, transformAll: CallsTransformer < EachT , AllT >, validator: OptionValidator < AllT >, names: Set < String > = this.names, metavarWithDefault: ValueWithDefault < String ?> = this.metavarWithDefault, nvalues: Int = this.nvalues, help: String = this.help, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, envvar: String ? = this.envvar, envvarSplit: ValueWithDefault < Regex > = this.envvarSplit, valueSplit: Regex ? = this.valueSplit, parser: OptionWithValuesParser = this.parser, completionCandidates: CompletionCandidates = this.completionCandidates): OptionWithValues < AllT , EachT , ValueT > Create a new option that is a copy of this one with different transforms. fun copy(validator: OptionValidator < AllT > = this.transformValidator, names: Set < String > = this.names, metavarWithDefault: ValueWithDefault < String ?> = this.metavarWithDefault, nvalues: Int = this.nvalues, help: String = this.help, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, envvar: String ? = this.envvar, envvarSplit: ValueWithDefault < Regex > = this.envvarSplit, valueSplit: Regex ? = this.valueSplit, parser: OptionWithValuesParser = this.parser, completionCandidates: CompletionCandidates = this.completionCandidates): OptionWithValues < AllT , EachT , ValueT > Create a new option that is a copy of this one with the same transforms. finalize fun finalize(context: Context , invocations: List < OptionParser.Invocation >): Unit Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. postValidate fun postValidate(context: Context ): Unit Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value. provideDelegate operator fun provideDelegate(thisRef: ParameterHolder , prop: KProperty <*>): ReadOnlyProperty < ParameterHolder , AllT > Implementations must call ParameterHolder.registerOption","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/#inherited-functions","text":"Name Summary getValue open fun getValue(thisRef: ParameterHolder , property: KProperty <*>): T","title":"Inherited Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/#extension-functions","text":"Name Summary choice fun <T : Any > RawOption .choice(choices: Map < String , T >, metavar: String = mvar(choices.keys)): NullableOption < T , T > fun <T : Any > RawOption .choice(vararg choices: Pair < String , T >, metavar: String = mvar(choices.map { it.first })): NullableOption < T , T > Convert the option based on a fixed set of values. fun RawOption .choice(vararg choices: String , metavar: String = mvar(choices.asIterable())): NullableOption < String , String > Restrict the option to a fixed set of values. convert fun <T : Any > RawOption .convert(metavar: String = \"VALUE\", envvarSplit: Regex = this.envvarSplit.default, completionCandidates: CompletionCandidates = this.completionCandidates, conversion: ValueTransformer < T >): NullableOption < T , T > Convert the option value type. counted fun RawOption .counted(): FlagOption < Int > Turn an option into a flag that counts the number of times the option occurs on the command line. default fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.default(value: EachT , defaultForHelp: String = value.toString()): OptionWithValues < EachT , EachT , ValueT > If the option is not called on the command line (and is not set in an envvar), use value , com.github.ajalt.clikt.parameters.options.default.EachT, kotlin.String)/value) for the option. defaultLazy fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.defaultLazy(defaultForHelp: String = \"\", value: () -> EachT ): OptionWithValues < EachT , EachT , ValueT > If the option is not called on the command line (and is not set in an envvar), call the value , kotlin.String, kotlin.Function0((com.github.ajalt.clikt.parameters.options.defaultLazy.EachT)))/value) and use its return value for the option. deprecated fun <AllT, EachT, ValueT> OptionWithValues < AllT , EachT , ValueT >.deprecated(message: String ? = \"\", tagName: String ? = \"deprecated\", tagValue: String = \"\", error: Boolean = false): OptionDelegate < AllT > Mark this option as deprecated in the help output. double fun RawOption .double(): NullableOption < Double , Double > Convert the option values to a Double file fun RawOption .file(exists: Boolean = false, fileOkay: Boolean = true, folderOkay: Boolean = true, writable: Boolean = false, readable: Boolean = false): NullableOption < File , File > Convert the option to a File . flag fun RawOption .flag(vararg secondaryNames: String , default: Boolean = false): FlagOption < Boolean > Turn an option into a boolean flag. float fun RawOption .float(): NullableOption < Float , Float > Convert the option values to a Float groupChoice fun <T : OptionGroup > RawOption .groupChoice(choices: Map < String , T >): ChoiceGroup < T , T ?> fun <T : OptionGroup > RawOption .groupChoice(vararg choices: Pair < String , T >): ChoiceGroup < T , T ?> Convert the option to an option group based on a fixed set of values. int fun RawOption .int(): NullableOption < Int , Int > Convert the option values to an Int long fun RawOption .long(): NullableOption < Long , Long > Convert the option values to a Long multiple fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.multiple(default: List < EachT > = emptyList()): OptionWithValues < List < EachT >, EachT , ValueT > Make the option return a list of calls; each item in the list is the value of one call. pair fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.pair(): NullableOption < Pair < ValueT , ValueT >, ValueT > Change to option to take two values, held in a Pair . path fun RawOption .path(exists: Boolean = false, fileOkay: Boolean = true, folderOkay: Boolean = true, writable: Boolean = false, readable: Boolean = false, fileSystem: FileSystem = FileSystems.getDefault()): NullableOption <Path, Path> Convert the option to a Path . prompt fun <T : Any > NullableOption < T , T >.prompt(text: String ? = null, default: String ? = null, hideInput: Boolean = false, requireConfirmation: Boolean = false, confirmationPrompt: String = \"Repeat for confirmation: \", promptSuffix: String = \": \", showDefault: Boolean = true): OptionWithValues < T , T , T > If the option isn\u2019t given on the command line, prompt the user for manual input. required fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.required(): OptionWithValues < EachT , EachT , ValueT > If the option is not called on the command line (and is not set in an envvar), throw a MissingParameter . restrictTo fun <T> OptionWithValues < T ?, T , T >.restrictTo(min: T ? = null, max: T ? = null, clamp: Boolean = false): OptionWithValues < T ?, T , T > where T : Number , T : Comparable < T > fun <T> OptionWithValues < T ?, T , T >.restrictTo(range: ClosedRange < T >, clamp: Boolean = false): OptionWithValues < T ?, T , T > where T : Number , T : Comparable < T > Restrict the option values to fit into a range. split fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.split(regex: Regex ): OptionWithValues < List < ValueT >?, List < ValueT >, ValueT > Change to option to take any number of values, separated by a regex , kotlin.text.Regex)/regex). fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.split(delimiter: String ): OptionWithValues < List < ValueT >?, List < ValueT >, ValueT > Change to option to take any number of values, separated by a string delimiter , kotlin.String)/delimiter). switch fun <T : Any > RawOption .switch(choices: Map < String , T >): FlagOption < T ?> fun <T : Any > RawOption .switch(vararg choices: Pair < String , T >): FlagOption < T ?> Turn an option into a set of flags that each map to a value. transformAll fun <AllT, EachT : Any , ValueT> NullableOption < EachT , ValueT >.transformAll(defaultForHelp: String ? = this.helpTags[HelpFormatter.Tags.DEFAULT], showAsRequired: Boolean = HelpFormatter.Tags.REQUIRED in this.helpTags, transform: CallsTransformer < EachT , AllT >): OptionWithValues < AllT , EachT , ValueT > Transform all calls to the option to the final option type. transformValues fun <EachInT : Any , EachOutT : Any , ValueT> NullableOption < EachInT , ValueT >.transformValues(nvalues: Int , transform: ArgsTransformer < ValueT , EachOutT >): NullableOption < EachOutT , ValueT > Change the number of values that this option takes. triple fun <EachT : Any , ValueT> NullableOption < EachT , ValueT >.triple(): NullableOption < Triple < ValueT , ValueT , ValueT >, ValueT > Change to option to take three values, held in a Triple . unique fun <EachT : Any , ValueT> OptionWithValues < List < EachT >, EachT , ValueT >.unique(): OptionWithValues < Set < EachT >, EachT , ValueT > Make the multiple option return a unique set of calls validate fun <AllT : Any , EachT, ValueT> OptionWithValues < AllT , EachT , ValueT >.validate(validator: OptionValidator < AllT >): OptionDelegate < AllT > Check the final option value and raise an error if it\u2019s not valid.","title":"Extension Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/-init-/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / <init> <init> \u00b6 OptionWithValues(names: Set < String >, metavarWithDefault: ValueWithDefault < String ?>, nvalues: Int , help: String , hidden: Boolean , helpTags: Map < String , String >, envvar: String ?, envvarSplit: ValueWithDefault < Regex >, valueSplit: Regex ?, parser: OptionWithValuesParser , completionCandidates: CompletionCandidates , transformValue: ValueTransformer < ValueT >, transformEach: ArgsTransformer < ValueT , EachT >, transformAll: CallsTransformer < EachT , AllT >, transformValidator: OptionValidator < AllT >) An Option that takes one or more values.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/-init-/#init","text":"OptionWithValues(names: Set < String >, metavarWithDefault: ValueWithDefault < String ?>, nvalues: Int , help: String , hidden: Boolean , helpTags: Map < String , String >, envvar: String ?, envvarSplit: ValueWithDefault < Regex >, valueSplit: Regex ?, parser: OptionWithValuesParser , completionCandidates: CompletionCandidates , transformValue: ValueTransformer < ValueT >, transformEach: ArgsTransformer < ValueT , EachT >, transformAll: CallsTransformer < EachT , AllT >, transformValidator: OptionValidator < AllT >) An Option that takes one or more values.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/completion-candidates/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / completionCandidates completionCandidates \u00b6 val completionCandidates: CompletionCandidates Overrides Option.completionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this option.","title":"Completion candidates"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/completion-candidates/#completioncandidates","text":"val completionCandidates: CompletionCandidates Overrides Option.completionCandidates Optional set of strings to use when the user invokes shell autocomplete on a value for this option.","title":"completionCandidates"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/copy/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / copy copy \u00b6 fun <AllT, EachT, ValueT> copy(transformValue: ValueTransformer < ValueT >, transformEach: ArgsTransformer < ValueT , EachT >, transformAll: CallsTransformer < EachT , AllT >, validator: OptionValidator < AllT >, names: Set < String > = this.names, metavarWithDefault: ValueWithDefault < String ?> = this.metavarWithDefault, nvalues: Int = this.nvalues, help: String = this.help, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, envvar: String ? = this.envvar, envvarSplit: ValueWithDefault < Regex > = this.envvarSplit, valueSplit: Regex ? = this.valueSplit, parser: OptionWithValuesParser = this.parser, completionCandidates: CompletionCandidates = this.completionCandidates): OptionWithValues < AllT , EachT , ValueT > Create a new option that is a copy of this one with different transforms. fun copy(validator: OptionValidator < AllT > = this.transformValidator, names: Set < String > = this.names, metavarWithDefault: ValueWithDefault < String ?> = this.metavarWithDefault, nvalues: Int = this.nvalues, help: String = this.help, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, envvar: String ? = this.envvar, envvarSplit: ValueWithDefault < Regex > = this.envvarSplit, valueSplit: Regex ? = this.valueSplit, parser: OptionWithValuesParser = this.parser, completionCandidates: CompletionCandidates = this.completionCandidates): OptionWithValues < AllT , EachT , ValueT > Create a new option that is a copy of this one with the same transforms.","title":"Copy"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/copy/#copy","text":"fun <AllT, EachT, ValueT> copy(transformValue: ValueTransformer < ValueT >, transformEach: ArgsTransformer < ValueT , EachT >, transformAll: CallsTransformer < EachT , AllT >, validator: OptionValidator < AllT >, names: Set < String > = this.names, metavarWithDefault: ValueWithDefault < String ?> = this.metavarWithDefault, nvalues: Int = this.nvalues, help: String = this.help, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, envvar: String ? = this.envvar, envvarSplit: ValueWithDefault < Regex > = this.envvarSplit, valueSplit: Regex ? = this.valueSplit, parser: OptionWithValuesParser = this.parser, completionCandidates: CompletionCandidates = this.completionCandidates): OptionWithValues < AllT , EachT , ValueT > Create a new option that is a copy of this one with different transforms. fun copy(validator: OptionValidator < AllT > = this.transformValidator, names: Set < String > = this.names, metavarWithDefault: ValueWithDefault < String ?> = this.metavarWithDefault, nvalues: Int = this.nvalues, help: String = this.help, hidden: Boolean = this.hidden, helpTags: Map < String , String > = this.helpTags, envvar: String ? = this.envvar, envvarSplit: ValueWithDefault < Regex > = this.envvarSplit, valueSplit: Regex ? = this.valueSplit, parser: OptionWithValuesParser = this.parser, completionCandidates: CompletionCandidates = this.completionCandidates): OptionWithValues < AllT , EachT , ValueT > Create a new option that is a copy of this one with the same transforms.","title":"copy"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/envvar-split/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / envvarSplit envvarSplit \u00b6 val envvarSplit: ValueWithDefault < Regex > The pattern to split envvar values on. If the envvar splits into multiple values, each one will be treated like a separate invocation of the option. Property \u00b6 envvarSplit - The pattern to split envvar values on. If the envvar splits into multiple values, each one will be treated like a separate invocation of the option.","title":"Envvar split"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/envvar-split/#envvarsplit","text":"val envvarSplit: ValueWithDefault < Regex > The pattern to split envvar values on. If the envvar splits into multiple values, each one will be treated like a separate invocation of the option.","title":"envvarSplit"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/envvar-split/#property","text":"envvarSplit - The pattern to split envvar values on. If the envvar splits into multiple values, each one will be treated like a separate invocation of the option.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/envvar/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / envvar envvar \u00b6 val envvar: String ? The environment variable name to use. Property \u00b6 envvar - The environment variable name to use.","title":"Envvar"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/envvar/#envvar","text":"val envvar: String ? The environment variable name to use.","title":"envvar"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/envvar/#property","text":"envvar - The environment variable name to use.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/finalize/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / finalize finalize \u00b6 fun finalize(context: Context , invocations: List < OptionParser.Invocation >): Unit Overrides Option.finalize Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. You cannot refer to other parameter values during this call, since they might not have been finalized yet. Parameters \u00b6 context - The context for this parse invocations - A possibly empty list of invocations of this option.","title":"Finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/finalize/#finalize","text":"fun finalize(context: Context , invocations: List < OptionParser.Invocation >): Unit Overrides Option.finalize Called after this command\u2019s argv is parsed to transform and store the option\u2019s value. You cannot refer to other parameter values during this call, since they might not have been finalized yet.","title":"finalize"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/finalize/#parameters","text":"context - The context for this parse invocations - A possibly empty list of invocations of this option.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/group-name/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / groupName groupName \u00b6 var groupName: String ? Overrides GroupableOption.groupName The name of the group, or null if this option should not be grouped in the help output.","title":"Group name"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/group-name/#groupname","text":"var groupName: String ? Overrides GroupableOption.groupName The name of the group, or null if this option should not be grouped in the help output.","title":"groupName"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/help-tags/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / helpTags helpTags \u00b6 val helpTags: Map < String , String > Overrides Option.helpTags Extra information about this option to pass to the help formatter.","title":"Help tags"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/help-tags/#helptags","text":"val helpTags: Map < String , String > Overrides Option.helpTags Extra information about this option to pass to the help formatter.","title":"helpTags"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/help/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / help help \u00b6 val help: String Overrides Option.help The description of this option, usually a single line.","title":"Help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/help/#help","text":"val help: String Overrides Option.help The description of this option, usually a single line.","title":"help"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/hidden/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / hidden hidden \u00b6 val hidden: Boolean Overrides Option.hidden If true, this option should not appear in help output.","title":"Hidden"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/hidden/#hidden","text":"val hidden: Boolean Overrides Option.hidden If true, this option should not appear in help output.","title":"hidden"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/metavar-with-default/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / metavarWithDefault metavarWithDefault \u00b6 val metavarWithDefault: ValueWithDefault < String ?> The metavar to use. Specified at option creation. Property \u00b6 metavarWithDefault - The metavar to use. Specified at option creation.","title":"Metavar with default"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/metavar-with-default/#metavarwithdefault","text":"val metavarWithDefault: ValueWithDefault < String ?> The metavar to use. Specified at option creation.","title":"metavarWithDefault"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/metavar-with-default/#property","text":"metavarWithDefault - The metavar to use. Specified at option creation.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/metavar/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / metavar metavar \u00b6 val metavar: String ? Overrides Option.metavar A name representing the values for this option that can be displayed to the user.","title":"Metavar"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/metavar/#metavar","text":"val metavar: String ? Overrides Option.metavar A name representing the values for this option that can be displayed to the user.","title":"metavar"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/names/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / names names \u00b6 var names: Set < String > Overrides Option.names The names that can be used to invoke this option. They must start with a punctuation character.","title":"Names"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/names/#names","text":"var names: Set < String > Overrides Option.names The names that can be used to invoke this option. They must start with a punctuation character.","title":"names"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/nvalues/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / nvalues nvalues \u00b6 val nvalues: Int Overrides Option.nvalues The number of values that must be given to this option.","title":"Nvalues"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/nvalues/#nvalues","text":"val nvalues: Int Overrides Option.nvalues The number of values that must be given to this option.","title":"nvalues"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/parameter-group/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / parameterGroup parameterGroup \u00b6 var parameterGroup: ParameterGroup ? Overrides GroupableOption.parameterGroup The group that this option belongs to, or null. Set by the group.","title":"Parameter group"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/parameter-group/#parametergroup","text":"var parameterGroup: ParameterGroup ? Overrides GroupableOption.parameterGroup The group that this option belongs to, or null. Set by the group.","title":"parameterGroup"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/parser/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / parser parser \u00b6 val parser: OptionWithValuesParser Overrides Option.parser The parser for this option\u2019s values.","title":"Parser"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/parser/#parser","text":"val parser: OptionWithValuesParser Overrides Option.parser The parser for this option\u2019s values.","title":"parser"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/post-validate/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / postValidate postValidate \u00b6 fun postValidate(context: Context ): Unit Overrides Option.postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"Post validate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/post-validate/#postvalidate","text":"fun postValidate(context: Context ): Unit Overrides Option.postValidate Called after all of a command\u2019s parameters have been finalize d to perform validation of the final value.","title":"postValidate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/provide-delegate/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / provideDelegate provideDelegate \u00b6 operator fun provideDelegate(thisRef: ParameterHolder , prop: KProperty <*>): ReadOnlyProperty < ParameterHolder , AllT > Overrides OptionDelegate.provideDelegate Implementations must call ParameterHolder.registerOption","title":"Provide delegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/provide-delegate/#providedelegate","text":"operator fun provideDelegate(thisRef: ParameterHolder , prop: KProperty <*>): ReadOnlyProperty < ParameterHolder , AllT > Overrides OptionDelegate.provideDelegate Implementations must call ParameterHolder.registerOption","title":"provideDelegate"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/secondary-names/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / secondaryNames secondaryNames \u00b6 val secondaryNames: Set < String > Overrides Option.secondaryNames Names that can be used for a secondary purpose, like disabling flag options.","title":"Secondary names"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/secondary-names/#secondarynames","text":"val secondaryNames: Set < String > Overrides Option.secondaryNames Names that can be used for a secondary purpose, like disabling flag options.","title":"secondaryNames"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/transform-all/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / transformAll transformAll \u00b6 val transformAll: CallsTransformer < EachT , AllT > Called in finalize to transform all invocations into the final value. Property \u00b6 transformAll - Called in finalize to transform all invocations into the final value.","title":"Transform all"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/transform-all/#transformall","text":"val transformAll: CallsTransformer < EachT , AllT > Called in finalize to transform all invocations into the final value.","title":"transformAll"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/transform-all/#property","text":"transformAll - Called in finalize to transform all invocations into the final value.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/transform-each/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / transformEach transformEach \u00b6 val transformEach: ArgsTransformer < ValueT , EachT > Called in finalize to transform each invocation. Property \u00b6 transformEach - Called in finalize to transform each invocation.","title":"Transform each"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/transform-each/#transformeach","text":"val transformEach: ArgsTransformer < ValueT , EachT > Called in finalize to transform each invocation.","title":"transformEach"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/transform-each/#property","text":"transformEach - Called in finalize to transform each invocation.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/transform-validator/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / transformValidator transformValidator \u00b6 val transformValidator: OptionValidator < AllT > Called after all parameters have been finalize d to validate the output of transformAll Property \u00b6 transformValidator - Called after all parameters have been finalize d to validate the output of transformAll","title":"Transform validator"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/transform-validator/#transformvalidator","text":"val transformValidator: OptionValidator < AllT > Called after all parameters have been finalize d to validate the output of transformAll","title":"transformValidator"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/transform-validator/#property","text":"transformValidator - Called after all parameters have been finalize d to validate the output of transformAll","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/transform-value/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / transformValue transformValue \u00b6 val transformValue: ValueTransformer < ValueT > Called in finalize to transform each value provided to each invocation. Property \u00b6 transformValue - Called in finalize to transform each value provided to each invocation.","title":"Transform value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/transform-value/#transformvalue","text":"val transformValue: ValueTransformer < ValueT > Called in finalize to transform each value provided to each invocation.","title":"transformValue"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/transform-value/#property","text":"transformValue - Called in finalize to transform each value provided to each invocation.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/value-split/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / valueSplit valueSplit \u00b6 val valueSplit: Regex ? The pattern to split values from the command line on. By default, values are split on whitespace. Property \u00b6 valueSplit - The pattern to split values from the command line on. By default, values are split on whitespace.","title":"Value split"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/value-split/#valuesplit","text":"val valueSplit: Regex ? The pattern to split values from the command line on. By default, values are split on whitespace.","title":"valueSplit"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/value-split/#property","text":"valueSplit - The pattern to split values from the command line on. By default, values are split on whitespace.","title":"Property"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/value/","text":"clikt / com.github.ajalt.clikt.parameters.options / OptionWithValues / value value \u00b6 var value: AllT Overrides OptionDelegate.value The value for this option. An exception should be thrown if this property is accessed before finalize is called. Getter The value for this option. An exception should be thrown if this property is accessed before finalize is called.","title":"Value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-option-with-values/value/#value","text":"var value: AllT Overrides OptionDelegate.value The value for this option. An exception should be thrown if this property is accessed before finalize is called. Getter The value for this option. An exception should be thrown if this property is accessed before finalize is called.","title":"value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-with-default/","text":"clikt / com.github.ajalt.clikt.parameters.options / ValueWithDefault ValueWithDefault \u00b6 data class ValueWithDefault<out T> A container for a value that can have a default value and can be manually set Constructors \u00b6 Name Summary <init> ValueWithDefault(explicit: T ?, default: T ) A container for a value that can have a default value and can be manually set Properties \u00b6 Name Summary default val default: T explicit val explicit: T ? value val value: T","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-with-default/#valuewithdefault","text":"data class ValueWithDefault<out T> A container for a value that can have a default value and can be manually set","title":"ValueWithDefault"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-with-default/#constructors","text":"Name Summary <init> ValueWithDefault(explicit: T ?, default: T ) A container for a value that can have a default value and can be manually set","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-with-default/#properties","text":"Name Summary default val default: T explicit val explicit: T ? value val value: T","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-with-default/-init-/","text":"clikt / com.github.ajalt.clikt.parameters.options / ValueWithDefault / <init> <init> \u00b6 ValueWithDefault(explicit: T ?, default: T ) A container for a value that can have a default value and can be manually set","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-with-default/-init-/#init","text":"ValueWithDefault(explicit: T ?, default: T ) A container for a value that can have a default value and can be manually set","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-with-default/default/","text":"clikt / com.github.ajalt.clikt.parameters.options / ValueWithDefault / default default \u00b6 val default: T","title":"Default"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-with-default/default/#default","text":"val default: T","title":"default"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-with-default/explicit/","text":"clikt / com.github.ajalt.clikt.parameters.options / ValueWithDefault / explicit explicit \u00b6 val explicit: T ?","title":"Explicit"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-with-default/explicit/#explicit","text":"val explicit: T ?","title":"explicit"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-with-default/value/","text":"clikt / com.github.ajalt.clikt.parameters.options / ValueWithDefault / value value \u00b6 val value: T","title":"Value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.options/-value-with-default/value/#value","text":"val value: T","title":"value"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/","text":"clikt / com.github.ajalt.clikt.parameters.types Package com.github.ajalt.clikt.parameters.types \u00b6 Functions \u00b6 Name Summary choice fun <T : Any > RawArgument.choice(choices: Map < String , T >): ProcessedArgument < T , T > fun <T : Any > RawArgument.choice(vararg choices: Pair < String , T >): ProcessedArgument < T , T > Convert the argument based on a fixed set of values. fun RawArgument.choice(vararg choices: String ): ProcessedArgument < String , String > Restrict the argument to a fixed set of values. fun <T : Any > RawOption .choice(choices: Map < String , T >, metavar: String = mvar(choices.keys)): NullableOption < T , T > fun <T : Any > RawOption .choice(vararg choices: Pair < String , T >, metavar: String = mvar(choices.map { it.first })): NullableOption < T , T > Convert the option based on a fixed set of values. fun RawOption .choice(vararg choices: String , metavar: String = mvar(choices.asIterable())): NullableOption < String , String > Restrict the option to a fixed set of values. double fun RawArgument.double(): ProcessedArgument < Double , Double > Convert the argument values to a Double``fun RawOption .double(): NullableOption < Double , Double > Convert the option values to a Double file fun RawArgument.file(exists: Boolean = false, fileOkay: Boolean = true, folderOkay: Boolean = true, writable: Boolean = false, readable: Boolean = false): ProcessedArgument < File , File > Convert the argument to a File . fun RawOption .file(exists: Boolean = false, fileOkay: Boolean = true, folderOkay: Boolean = true, writable: Boolean = false, readable: Boolean = false): NullableOption < File , File > Convert the option to a File . float fun RawArgument.float(): ProcessedArgument < Float , Float > Convert the argument values to a Float``fun RawOption .float(): NullableOption < Float , Float > Convert the option values to a Float int fun RawArgument.int(): ProcessedArgument < Int , Int > Convert the argument values to an Int``fun RawOption .int(): NullableOption < Int , Int > Convert the option values to an Int long fun RawArgument.long(): ProcessedArgument < Long , Long > Convert the argument values to a Long``fun RawOption .long(): NullableOption < Long , Long > Convert the option values to a Long path fun RawArgument.path(exists: Boolean = false, fileOkay: Boolean = true, folderOkay: Boolean = true, writable: Boolean = false, readable: Boolean = false, fileSystem: FileSystem = FileSystems.getDefault()): ProcessedArgument <Path, Path> Convert the argument to a Path . fun RawOption .path(exists: Boolean = false, fileOkay: Boolean = true, folderOkay: Boolean = true, writable: Boolean = false, readable: Boolean = false, fileSystem: FileSystem = FileSystems.getDefault()): NullableOption <Path, Path> Convert the option to a Path . restrictTo fun <T> ProcessedArgument < T , T >.restrictTo(min: T ? = null, max: T ? = null, clamp: Boolean = false): ProcessedArgument < T , T > where T : Number , T : Comparable < T > fun <T> ProcessedArgument < T , T >.restrictTo(range: ClosedRange < T >, clamp: Boolean = false): ProcessedArgument < T , T > where T : Number , T : Comparable < T > Restrict the argument values to fit into a range. fun <T> OptionWithValues < T ?, T , T >.restrictTo(min: T ? = null, max: T ? = null, clamp: Boolean = false): OptionWithValues < T ?, T , T > where T : Number , T : Comparable < T > fun <T> OptionWithValues < T ?, T , T >.restrictTo(range: ClosedRange < T >, clamp: Boolean = false): OptionWithValues < T ?, T , T > where T : Number , T : Comparable < T > Restrict the option values to fit into a range.","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/#package-comgithubajaltcliktparameterstypes","text":"","title":"Package com.github.ajalt.clikt.parameters.types"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/#functions","text":"Name Summary choice fun <T : Any > RawArgument.choice(choices: Map < String , T >): ProcessedArgument < T , T > fun <T : Any > RawArgument.choice(vararg choices: Pair < String , T >): ProcessedArgument < T , T > Convert the argument based on a fixed set of values. fun RawArgument.choice(vararg choices: String ): ProcessedArgument < String , String > Restrict the argument to a fixed set of values. fun <T : Any > RawOption .choice(choices: Map < String , T >, metavar: String = mvar(choices.keys)): NullableOption < T , T > fun <T : Any > RawOption .choice(vararg choices: Pair < String , T >, metavar: String = mvar(choices.map { it.first })): NullableOption < T , T > Convert the option based on a fixed set of values. fun RawOption .choice(vararg choices: String , metavar: String = mvar(choices.asIterable())): NullableOption < String , String > Restrict the option to a fixed set of values. double fun RawArgument.double(): ProcessedArgument < Double , Double > Convert the argument values to a Double``fun RawOption .double(): NullableOption < Double , Double > Convert the option values to a Double file fun RawArgument.file(exists: Boolean = false, fileOkay: Boolean = true, folderOkay: Boolean = true, writable: Boolean = false, readable: Boolean = false): ProcessedArgument < File , File > Convert the argument to a File . fun RawOption .file(exists: Boolean = false, fileOkay: Boolean = true, folderOkay: Boolean = true, writable: Boolean = false, readable: Boolean = false): NullableOption < File , File > Convert the option to a File . float fun RawArgument.float(): ProcessedArgument < Float , Float > Convert the argument values to a Float``fun RawOption .float(): NullableOption < Float , Float > Convert the option values to a Float int fun RawArgument.int(): ProcessedArgument < Int , Int > Convert the argument values to an Int``fun RawOption .int(): NullableOption < Int , Int > Convert the option values to an Int long fun RawArgument.long(): ProcessedArgument < Long , Long > Convert the argument values to a Long``fun RawOption .long(): NullableOption < Long , Long > Convert the option values to a Long path fun RawArgument.path(exists: Boolean = false, fileOkay: Boolean = true, folderOkay: Boolean = true, writable: Boolean = false, readable: Boolean = false, fileSystem: FileSystem = FileSystems.getDefault()): ProcessedArgument <Path, Path> Convert the argument to a Path . fun RawOption .path(exists: Boolean = false, fileOkay: Boolean = true, folderOkay: Boolean = true, writable: Boolean = false, readable: Boolean = false, fileSystem: FileSystem = FileSystems.getDefault()): NullableOption <Path, Path> Convert the option to a Path . restrictTo fun <T> ProcessedArgument < T , T >.restrictTo(min: T ? = null, max: T ? = null, clamp: Boolean = false): ProcessedArgument < T , T > where T : Number , T : Comparable < T > fun <T> ProcessedArgument < T , T >.restrictTo(range: ClosedRange < T >, clamp: Boolean = false): ProcessedArgument < T , T > where T : Number , T : Comparable < T > Restrict the argument values to fit into a range. fun <T> OptionWithValues < T ?, T , T >.restrictTo(min: T ? = null, max: T ? = null, clamp: Boolean = false): OptionWithValues < T ?, T , T > where T : Number , T : Comparable < T > fun <T> OptionWithValues < T ?, T , T >.restrictTo(range: ClosedRange < T >, clamp: Boolean = false): OptionWithValues < T ?, T , T > where T : Number , T : Comparable < T > Restrict the option values to fit into a range.","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/choice/","text":"clikt / com.github.ajalt.clikt.parameters.types / choice choice \u00b6 fun <T : Any > RawArgument.choice(choices: Map < String , T >): ProcessedArgument < T , T > Convert the argument based on a fixed set of values. Example: \u00b6 argument (). choice ( mapOf ( \"foo\" to 1 , \"bar\" to 2 )) fun <T : Any > RawArgument.choice(vararg choices: Pair < String , T >): ProcessedArgument < T , T > Convert the argument based on a fixed set of values. Example: \u00b6 argument (). choice ( \"foo\" to 1 , \"bar\" to 2 ) fun RawArgument.choice(vararg choices: String ): ProcessedArgument < String , String > Restrict the argument to a fixed set of values. Example: \u00b6 argument (). choice ( \"foo\" , \"bar\" ) fun <T : Any > RawOption .choice(choices: Map < String , T >, metavar: String = mvar(choices.keys)): NullableOption < T , T > Convert the option based on a fixed set of values. Example: \u00b6 option (). choice ( mapOf ( \"foo\" to 1 , \"bar\" to 2 )) See Also com.github.ajalt.clikt.parameters.groups.groupChoice fun <T : Any > RawOption .choice(vararg choices: Pair < String , T >, metavar: String = mvar(choices.map { it.first })): NullableOption < T , T > Convert the option based on a fixed set of values. Example: \u00b6 option (). choice ( \"foo\" to 1 , \"bar\" to 2 ) See Also com.github.ajalt.clikt.parameters.groups.groupChoice fun RawOption .choice(vararg choices: String , metavar: String = mvar(choices.asIterable())): NullableOption < String , String > Restrict the option to a fixed set of values. Example: \u00b6 option (). choice ( \"foo\" , \"bar\" )","title":"Choice"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/choice/#choice","text":"fun <T : Any > RawArgument.choice(choices: Map < String , T >): ProcessedArgument < T , T > Convert the argument based on a fixed set of values.","title":"choice"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/choice/#example","text":"argument (). choice ( mapOf ( \"foo\" to 1 , \"bar\" to 2 )) fun <T : Any > RawArgument.choice(vararg choices: Pair < String , T >): ProcessedArgument < T , T > Convert the argument based on a fixed set of values.","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/choice/#example_1","text":"argument (). choice ( \"foo\" to 1 , \"bar\" to 2 ) fun RawArgument.choice(vararg choices: String ): ProcessedArgument < String , String > Restrict the argument to a fixed set of values.","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/choice/#example_2","text":"argument (). choice ( \"foo\" , \"bar\" ) fun <T : Any > RawOption .choice(choices: Map < String , T >, metavar: String = mvar(choices.keys)): NullableOption < T , T > Convert the option based on a fixed set of values.","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/choice/#example_3","text":"option (). choice ( mapOf ( \"foo\" to 1 , \"bar\" to 2 )) See Also com.github.ajalt.clikt.parameters.groups.groupChoice fun <T : Any > RawOption .choice(vararg choices: Pair < String , T >, metavar: String = mvar(choices.map { it.first })): NullableOption < T , T > Convert the option based on a fixed set of values.","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/choice/#example_4","text":"option (). choice ( \"foo\" to 1 , \"bar\" to 2 ) See Also com.github.ajalt.clikt.parameters.groups.groupChoice fun RawOption .choice(vararg choices: String , metavar: String = mvar(choices.asIterable())): NullableOption < String , String > Restrict the option to a fixed set of values.","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/choice/#example_5","text":"option (). choice ( \"foo\" , \"bar\" )","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/double/","text":"clikt / com.github.ajalt.clikt.parameters.types / double double \u00b6 fun RawArgument.double(): ProcessedArgument < Double , Double > Convert the argument values to a Double fun RawOption .double(): NullableOption < Double , Double > Convert the option values to a Double","title":"Double"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/double/#double","text":"fun RawArgument.double(): ProcessedArgument < Double , Double > Convert the argument values to a Double fun RawOption .double(): NullableOption < Double , Double > Convert the option values to a Double","title":"double"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/file/","text":"clikt / com.github.ajalt.clikt.parameters.types / file file \u00b6 fun RawArgument.file(exists: Boolean = false, fileOkay: Boolean = true, folderOkay: Boolean = true, writable: Boolean = false, readable: Boolean = false): ProcessedArgument < File , File > Convert the argument to a File . Parameters \u00b6 exists - If true, fail if the given path does not exist fileOkay - If false, fail if the given path is a file folderOkay - If false, fail if the given path is a directory writable - If true, fail if the given path is not writable readable - If true, fail if the given path is not readable fun RawOption .file(exists: Boolean = false, fileOkay: Boolean = true, folderOkay: Boolean = true, writable: Boolean = false, readable: Boolean = false): NullableOption < File , File > Convert the option to a File . Parameters \u00b6 exists - If true, fail if the given path does not exist fileOkay - If false, fail if the given path is a file folderOkay - If false, fail if the given path is a directory writable - If true, fail if the given path is not writable readable - If true, fail if the given path is not readable","title":"File"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/file/#file","text":"fun RawArgument.file(exists: Boolean = false, fileOkay: Boolean = true, folderOkay: Boolean = true, writable: Boolean = false, readable: Boolean = false): ProcessedArgument < File , File > Convert the argument to a File .","title":"file"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/file/#parameters","text":"exists - If true, fail if the given path does not exist fileOkay - If false, fail if the given path is a file folderOkay - If false, fail if the given path is a directory writable - If true, fail if the given path is not writable readable - If true, fail if the given path is not readable fun RawOption .file(exists: Boolean = false, fileOkay: Boolean = true, folderOkay: Boolean = true, writable: Boolean = false, readable: Boolean = false): NullableOption < File , File > Convert the option to a File .","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/file/#parameters_1","text":"exists - If true, fail if the given path does not exist fileOkay - If false, fail if the given path is a file folderOkay - If false, fail if the given path is a directory writable - If true, fail if the given path is not writable readable - If true, fail if the given path is not readable","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/float/","text":"clikt / com.github.ajalt.clikt.parameters.types / float float \u00b6 fun RawArgument.float(): ProcessedArgument < Float , Float > Convert the argument values to a Float fun RawOption .float(): NullableOption < Float , Float > Convert the option values to a Float","title":"Float"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/float/#float","text":"fun RawArgument.float(): ProcessedArgument < Float , Float > Convert the argument values to a Float fun RawOption .float(): NullableOption < Float , Float > Convert the option values to a Float","title":"float"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/int/","text":"clikt / com.github.ajalt.clikt.parameters.types / int int \u00b6 fun RawArgument.int(): ProcessedArgument < Int , Int > Convert the argument values to an Int fun RawOption .int(): NullableOption < Int , Int > Convert the option values to an Int","title":"Int"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/int/#int","text":"fun RawArgument.int(): ProcessedArgument < Int , Int > Convert the argument values to an Int fun RawOption .int(): NullableOption < Int , Int > Convert the option values to an Int","title":"int"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/long/","text":"clikt / com.github.ajalt.clikt.parameters.types / long long \u00b6 fun RawArgument.long(): ProcessedArgument < Long , Long > Convert the argument values to a Long fun RawOption .long(): NullableOption < Long , Long > Convert the option values to a Long","title":"Long"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/long/#long","text":"fun RawArgument.long(): ProcessedArgument < Long , Long > Convert the argument values to a Long fun RawOption .long(): NullableOption < Long , Long > Convert the option values to a Long","title":"long"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/path/","text":"clikt / com.github.ajalt.clikt.parameters.types / path path \u00b6 fun RawArgument.path(exists: Boolean = false, fileOkay: Boolean = true, folderOkay: Boolean = true, writable: Boolean = false, readable: Boolean = false, fileSystem: FileSystem = FileSystems.getDefault()): ProcessedArgument <Path, Path> Convert the argument to a Path . Parameters \u00b6 exists - If true, fail if the given path does not exist fileOkay - If false, fail if the given path is a file folderOkay - If false, fail if the given path is a directory writable - If true, fail if the given path is not writable readable - If true, fail if the given path is not readable fileSystem - If specified, the FileSystem with which to resolve paths. fun RawOption .path(exists: Boolean = false, fileOkay: Boolean = true, folderOkay: Boolean = true, writable: Boolean = false, readable: Boolean = false, fileSystem: FileSystem = FileSystems.getDefault()): NullableOption <Path, Path> Convert the option to a Path . Parameters \u00b6 exists - If true, fail if the given path does not exist fileOkay - If false, fail if the given path is a file folderOkay - If false, fail if the given path is a directory writable - If true, fail if the given path is not writable readable - If true, fail if the given path is not readable fileSystem - If specified, the FileSystem with which to resolve paths.","title":"Path"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/path/#path","text":"fun RawArgument.path(exists: Boolean = false, fileOkay: Boolean = true, folderOkay: Boolean = true, writable: Boolean = false, readable: Boolean = false, fileSystem: FileSystem = FileSystems.getDefault()): ProcessedArgument <Path, Path> Convert the argument to a Path .","title":"path"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/path/#parameters","text":"exists - If true, fail if the given path does not exist fileOkay - If false, fail if the given path is a file folderOkay - If false, fail if the given path is a directory writable - If true, fail if the given path is not writable readable - If true, fail if the given path is not readable fileSystem - If specified, the FileSystem with which to resolve paths. fun RawOption .path(exists: Boolean = false, fileOkay: Boolean = true, folderOkay: Boolean = true, writable: Boolean = false, readable: Boolean = false, fileSystem: FileSystem = FileSystems.getDefault()): NullableOption <Path, Path> Convert the option to a Path .","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/path/#parameters_1","text":"exists - If true, fail if the given path does not exist fileOkay - If false, fail if the given path is a file folderOkay - If false, fail if the given path is a directory writable - If true, fail if the given path is not writable readable - If true, fail if the given path is not readable fileSystem - If specified, the FileSystem with which to resolve paths.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/restrict-to/","text":"clikt / com.github.ajalt.clikt.parameters.types / restrictTo restrictTo \u00b6 fun <T> ProcessedArgument < T , T >.restrictTo(min: T ? = null, max: T ? = null, clamp: Boolean = false): ProcessedArgument < T , T > where T : Number , T : Comparable < T > Restrict the argument values to fit into a range. By default, conversion fails if the value is outside the range, but if clamp , com.github.ajalt.clikt.parameters.types.restrictTo.T, com.github.ajalt.clikt.parameters.types.restrictTo.T, kotlin.Boolean)/clamp) is true, the value will be silently clamped to fit in the range. Example: \u00b6 argument (). int (). restrictTo ( max = 10 , clamp = true ) fun <T> ProcessedArgument < T , T >.restrictTo(range: ClosedRange < T >, clamp: Boolean = false): ProcessedArgument < T , T > where T : Number , T : Comparable < T > Restrict the argument values to fit into a range. By default, conversion fails if the value is outside the range, but if clamp , kotlin.ranges.ClosedRange((com.github.ajalt.clikt.parameters.types.restrictTo.T)), kotlin.Boolean)/clamp) is true, the value will be silently clamped to fit in the range. Example: \u00b6 argument (). int (). restrictTo ( 1. . 10 , clamp = true ) fun <T> OptionWithValues < T ?, T , T >.restrictTo(min: T ? = null, max: T ? = null, clamp: Boolean = false): OptionWithValues < T ?, T , T > where T : Number , T : Comparable < T > Restrict the option values to fit into a range. By default, conversion fails if the value is outside the range, but if clamp , com.github.ajalt.clikt.parameters.types.restrictTo.T, com.github.ajalt.clikt.parameters.types.restrictTo.T, kotlin.Boolean)/clamp) is true, the value will be silently clamped to fit in the range. Example: \u00b6 option (). int (). restrictTo ( max = 10 , clamp = true ) fun <T> OptionWithValues < T ?, T , T >.restrictTo(range: ClosedRange < T >, clamp: Boolean = false): OptionWithValues < T ?, T , T > where T : Number , T : Comparable < T > Restrict the option values to fit into a range. By default, conversion fails if the value is outside the range, but if clamp , kotlin.ranges.ClosedRange((com.github.ajalt.clikt.parameters.types.restrictTo.T)), kotlin.Boolean)/clamp) is true, the value will be silently clamped to fit in the range. Example: \u00b6 option (). int (). restrictTo ( 1. . 10 , clamp = true )","title":"Restrict to"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/restrict-to/#restrictto","text":"fun <T> ProcessedArgument < T , T >.restrictTo(min: T ? = null, max: T ? = null, clamp: Boolean = false): ProcessedArgument < T , T > where T : Number , T : Comparable < T > Restrict the argument values to fit into a range. By default, conversion fails if the value is outside the range, but if clamp , com.github.ajalt.clikt.parameters.types.restrictTo.T, com.github.ajalt.clikt.parameters.types.restrictTo.T, kotlin.Boolean)/clamp) is true, the value will be silently clamped to fit in the range.","title":"restrictTo"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/restrict-to/#example","text":"argument (). int (). restrictTo ( max = 10 , clamp = true ) fun <T> ProcessedArgument < T , T >.restrictTo(range: ClosedRange < T >, clamp: Boolean = false): ProcessedArgument < T , T > where T : Number , T : Comparable < T > Restrict the argument values to fit into a range. By default, conversion fails if the value is outside the range, but if clamp , kotlin.ranges.ClosedRange((com.github.ajalt.clikt.parameters.types.restrictTo.T)), kotlin.Boolean)/clamp) is true, the value will be silently clamped to fit in the range.","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/restrict-to/#example_1","text":"argument (). int (). restrictTo ( 1. . 10 , clamp = true ) fun <T> OptionWithValues < T ?, T , T >.restrictTo(min: T ? = null, max: T ? = null, clamp: Boolean = false): OptionWithValues < T ?, T , T > where T : Number , T : Comparable < T > Restrict the option values to fit into a range. By default, conversion fails if the value is outside the range, but if clamp , com.github.ajalt.clikt.parameters.types.restrictTo.T, com.github.ajalt.clikt.parameters.types.restrictTo.T, kotlin.Boolean)/clamp) is true, the value will be silently clamped to fit in the range.","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/restrict-to/#example_2","text":"option (). int (). restrictTo ( max = 10 , clamp = true ) fun <T> OptionWithValues < T ?, T , T >.restrictTo(range: ClosedRange < T >, clamp: Boolean = false): OptionWithValues < T ?, T , T > where T : Number , T : Comparable < T > Restrict the option values to fit into a range. By default, conversion fails if the value is outside the range, but if clamp , kotlin.ranges.ClosedRange((com.github.ajalt.clikt.parameters.types.restrictTo.T)), kotlin.Boolean)/clamp) is true, the value will be silently clamped to fit in the range.","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parameters.types/restrict-to/#example_3","text":"option (). int (). restrictTo ( 1. . 10 , clamp = true )","title":"Example:"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/","text":"clikt / com.github.ajalt.clikt.parsers Package com.github.ajalt.clikt.parsers \u00b6 Types \u00b6 Name Summary FlagOptionParser object FlagOptionParser : OptionParser A parser for options that take no values. OptionParser interface OptionParser A parser for Option s. OptionWithValuesParser object OptionWithValuesParser : OptionParser An option that takes one more values","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/#package-comgithubajaltcliktparsers","text":"","title":"Package com.github.ajalt.clikt.parsers"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/#types","text":"Name Summary FlagOptionParser object FlagOptionParser : OptionParser A parser for options that take no values. OptionParser interface OptionParser A parser for Option s. OptionWithValuesParser object OptionWithValuesParser : OptionParser An option that takes one more values","title":"Types"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-flag-option-parser/","text":"clikt / com.github.ajalt.clikt.parsers / FlagOptionParser FlagOptionParser \u00b6 object FlagOptionParser : OptionParser A parser for options that take no values. Functions \u00b6 Name Summary parseLongOpt fun parseLongOpt(option: Option , name: String , argv: List < String >, index: Int , explicitValue: String ?): OptionParser.ParseResult Parse a single long option and its value. parseShortOpt fun parseShortOpt(option: Option , name: String , argv: List < String >, index: Int , optionIndex: Int ): OptionParser.ParseResult Parse a single short option and its value.","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-flag-option-parser/#flagoptionparser","text":"object FlagOptionParser : OptionParser A parser for options that take no values.","title":"FlagOptionParser"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-flag-option-parser/#functions","text":"Name Summary parseLongOpt fun parseLongOpt(option: Option , name: String , argv: List < String >, index: Int , explicitValue: String ?): OptionParser.ParseResult Parse a single long option and its value. parseShortOpt fun parseShortOpt(option: Option , name: String , argv: List < String >, index: Int , optionIndex: Int ): OptionParser.ParseResult Parse a single short option and its value.","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-flag-option-parser/parse-long-opt/","text":"clikt / com.github.ajalt.clikt.parsers / FlagOptionParser / parseLongOpt parseLongOpt \u00b6 fun parseLongOpt(option: Option , name: String , argv: List < String >, index: Int , explicitValue: String ?): OptionParser.ParseResult Overrides OptionParser.parseLongOpt Parse a single long option and its value. Parameters \u00b6 name - The name of the flag used to invoke this option argv - The entire list of command line arguments for the command index - The index of the option flag in argv , kotlin.Int, kotlin.String)/argv), which may contain an \u2018=\u2019 with the first value","title":"Parse long opt"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-flag-option-parser/parse-long-opt/#parselongopt","text":"fun parseLongOpt(option: Option , name: String , argv: List < String >, index: Int , explicitValue: String ?): OptionParser.ParseResult Overrides OptionParser.parseLongOpt Parse a single long option and its value.","title":"parseLongOpt"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-flag-option-parser/parse-long-opt/#parameters","text":"name - The name of the flag used to invoke this option argv - The entire list of command line arguments for the command index - The index of the option flag in argv , kotlin.Int, kotlin.String)/argv), which may contain an \u2018=\u2019 with the first value","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-flag-option-parser/parse-short-opt/","text":"clikt / com.github.ajalt.clikt.parsers / FlagOptionParser / parseShortOpt parseShortOpt \u00b6 fun parseShortOpt(option: Option , name: String , argv: List < String >, index: Int , optionIndex: Int ): OptionParser.ParseResult Overrides OptionParser.parseShortOpt Parse a single short option and its value. Parameters \u00b6 name - The name of the flag used to invoke this option argv - The entire list of command line arguments for the command index - The index of the option flag in argv , kotlin.Int, kotlin.Int)/argv), which may contain multiple short parameters. optionIndex - The index of the option within argv\\[index]","title":"Parse short opt"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-flag-option-parser/parse-short-opt/#parseshortopt","text":"fun parseShortOpt(option: Option , name: String , argv: List < String >, index: Int , optionIndex: Int ): OptionParser.ParseResult Overrides OptionParser.parseShortOpt Parse a single short option and its value.","title":"parseShortOpt"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-flag-option-parser/parse-short-opt/#parameters","text":"name - The name of the flag used to invoke this option argv - The entire list of command line arguments for the command index - The index of the option flag in argv , kotlin.Int, kotlin.Int)/argv), which may contain multiple short parameters. optionIndex - The index of the option within argv\\[index]","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/","text":"clikt / com.github.ajalt.clikt.parsers / OptionParser OptionParser \u00b6 interface OptionParser A parser for Option s. All functions should be pure, since the same command instance can parse arguments multiple times. Types \u00b6 Name Summary Invocation data class Invocation The input from a single instance of an option input. ParseResult data class ParseResult Functions \u00b6 Name Summary parseLongOpt abstract fun parseLongOpt(option: Option , name: String , argv: List < String >, index: Int , explicitValue: String ?): OptionParser.ParseResult Parse a single long option and its value. parseShortOpt abstract fun parseShortOpt(option: Option , name: String , argv: List < String >, index: Int , optionIndex: Int ): OptionParser.ParseResult Parse a single short option and its value. Inheritors \u00b6 Name Summary FlagOptionParser object FlagOptionParser : OptionParser A parser for options that take no values. OptionWithValuesParser object OptionWithValuesParser : OptionParser An option that takes one more values","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/#optionparser","text":"interface OptionParser A parser for Option s. All functions should be pure, since the same command instance can parse arguments multiple times.","title":"OptionParser"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/#types","text":"Name Summary Invocation data class Invocation The input from a single instance of an option input. ParseResult data class ParseResult","title":"Types"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/#functions","text":"Name Summary parseLongOpt abstract fun parseLongOpt(option: Option , name: String , argv: List < String >, index: Int , explicitValue: String ?): OptionParser.ParseResult Parse a single long option and its value. parseShortOpt abstract fun parseShortOpt(option: Option , name: String , argv: List < String >, index: Int , optionIndex: Int ): OptionParser.ParseResult Parse a single short option and its value.","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/#inheritors","text":"Name Summary FlagOptionParser object FlagOptionParser : OptionParser A parser for options that take no values. OptionWithValuesParser object OptionWithValuesParser : OptionParser An option that takes one more values","title":"Inheritors"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/parse-long-opt/","text":"clikt / com.github.ajalt.clikt.parsers / OptionParser / parseLongOpt parseLongOpt \u00b6 abstract fun parseLongOpt(option: Option , name: String , argv: List < String >, index: Int , explicitValue: String ?): OptionParser.ParseResult Parse a single long option and its value. Parameters \u00b6 name - The name of the flag used to invoke this option argv - The entire list of command line arguments for the command index - The index of the option flag in argv , kotlin.Int, kotlin.String)/argv), which may contain an \u2018=\u2019 with the first value","title":"Parse long opt"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/parse-long-opt/#parselongopt","text":"abstract fun parseLongOpt(option: Option , name: String , argv: List < String >, index: Int , explicitValue: String ?): OptionParser.ParseResult Parse a single long option and its value.","title":"parseLongOpt"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/parse-long-opt/#parameters","text":"name - The name of the flag used to invoke this option argv - The entire list of command line arguments for the command index - The index of the option flag in argv , kotlin.Int, kotlin.String)/argv), which may contain an \u2018=\u2019 with the first value","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/parse-short-opt/","text":"clikt / com.github.ajalt.clikt.parsers / OptionParser / parseShortOpt parseShortOpt \u00b6 abstract fun parseShortOpt(option: Option , name: String , argv: List < String >, index: Int , optionIndex: Int ): OptionParser.ParseResult Parse a single short option and its value. Parameters \u00b6 name - The name of the flag used to invoke this option argv - The entire list of command line arguments for the command index - The index of the option flag in argv , kotlin.Int, kotlin.Int)/argv), which may contain multiple short parameters. optionIndex - The index of the option within argv\\[index]","title":"Parse short opt"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/parse-short-opt/#parseshortopt","text":"abstract fun parseShortOpt(option: Option , name: String , argv: List < String >, index: Int , optionIndex: Int ): OptionParser.ParseResult Parse a single short option and its value.","title":"parseShortOpt"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/parse-short-opt/#parameters","text":"name - The name of the flag used to invoke this option argv - The entire list of command line arguments for the command index - The index of the option flag in argv , kotlin.Int, kotlin.Int)/argv), which may contain multiple short parameters. optionIndex - The index of the option within argv\\[index]","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-invocation/","text":"clikt / com.github.ajalt.clikt.parsers / OptionParser / Invocation Invocation \u00b6 data class Invocation The input from a single instance of an option input. Parameters \u00b6 name - The name that was used to invoke the option. May be empty if the value was not retrieved from the command line (e.g. values from environment variables). values - The values provided to the option. All instances passed to Option.finalize will have a size equal to Option.nvalues . Constructors \u00b6 Name Summary <init> Invocation(name: String , values: List < String >) The input from a single instance of an option input. Properties \u00b6 Name Summary name val name: String The name that was used to invoke the option. May be empty if the value was not retrieved from the command line (e.g. values from environment variables). values val values: List < String > The values provided to the option. All instances passed to Option.finalize will have a size equal to Option.nvalues .","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-invocation/#invocation","text":"data class Invocation The input from a single instance of an option input.","title":"Invocation"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-invocation/#parameters","text":"name - The name that was used to invoke the option. May be empty if the value was not retrieved from the command line (e.g. values from environment variables). values - The values provided to the option. All instances passed to Option.finalize will have a size equal to Option.nvalues .","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-invocation/#constructors","text":"Name Summary <init> Invocation(name: String , values: List < String >) The input from a single instance of an option input.","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-invocation/#properties","text":"Name Summary name val name: String The name that was used to invoke the option. May be empty if the value was not retrieved from the command line (e.g. values from environment variables). values val values: List < String > The values provided to the option. All instances passed to Option.finalize will have a size equal to Option.nvalues .","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-invocation/-init-/","text":"clikt / com.github.ajalt.clikt.parsers / OptionParser / Invocation / <init> <init> \u00b6 Invocation(name: String , values: List < String >) The input from a single instance of an option input. Parameters \u00b6 name - The name that was used to invoke the option. May be empty if the value was not retrieved from the command line (e.g. values from environment variables). values - The values provided to the option. All instances passed to Option.finalize will have a size equal to Option.nvalues .","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-invocation/-init-/#init","text":"Invocation(name: String , values: List < String >) The input from a single instance of an option input.","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-invocation/-init-/#parameters","text":"name - The name that was used to invoke the option. May be empty if the value was not retrieved from the command line (e.g. values from environment variables). values - The values provided to the option. All instances passed to Option.finalize will have a size equal to Option.nvalues .","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-invocation/name/","text":"clikt / com.github.ajalt.clikt.parsers / OptionParser / Invocation / name name \u00b6 val name: String The name that was used to invoke the option. May be empty if the value was not retrieved from the command line (e.g. values from environment variables).","title":"Name"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-invocation/name/#name","text":"val name: String The name that was used to invoke the option. May be empty if the value was not retrieved from the command line (e.g. values from environment variables).","title":"name"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-invocation/values/","text":"clikt / com.github.ajalt.clikt.parsers / OptionParser / Invocation / values values \u00b6 val values: List < String > The values provided to the option. All instances passed to Option.finalize will have a size equal to Option.nvalues .","title":"Values"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-invocation/values/#values","text":"val values: List < String > The values provided to the option. All instances passed to Option.finalize will have a size equal to Option.nvalues .","title":"values"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-parse-result/","text":"clikt / com.github.ajalt.clikt.parsers / OptionParser / ParseResult ParseResult \u00b6 data class ParseResult Parameters \u00b6 consumedCount - The number of items in argv that were consumed. This number must be >= 1 if the entire option was consumed, or 0 if there are other options in the same index (e.g. flag options) invocation - The data from this invocation. Constructors \u00b6 Name Summary <init> ParseResult(consumedCount: Int , name: String , values: List < String >) ParseResult(consumedCount: Int , invocation: OptionParser.Invocation ) Properties \u00b6 Name Summary consumedCount val consumedCount: Int The number of items in argv that were consumed. This number must be >= 1 if the entire option was consumed, or 0 if there are other options in the same index (e.g. flag options) invocation val invocation: OptionParser.Invocation The data from this invocation.","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-parse-result/#parseresult","text":"data class ParseResult","title":"ParseResult"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-parse-result/#parameters","text":"consumedCount - The number of items in argv that were consumed. This number must be >= 1 if the entire option was consumed, or 0 if there are other options in the same index (e.g. flag options) invocation - The data from this invocation.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-parse-result/#constructors","text":"Name Summary <init> ParseResult(consumedCount: Int , name: String , values: List < String >) ParseResult(consumedCount: Int , invocation: OptionParser.Invocation )","title":"Constructors"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-parse-result/#properties","text":"Name Summary consumedCount val consumedCount: Int The number of items in argv that were consumed. This number must be >= 1 if the entire option was consumed, or 0 if there are other options in the same index (e.g. flag options) invocation val invocation: OptionParser.Invocation The data from this invocation.","title":"Properties"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-parse-result/-init-/","text":"clikt / com.github.ajalt.clikt.parsers / OptionParser / ParseResult / <init> <init> \u00b6 ParseResult(consumedCount: Int , name: String , values: List < String >)``ParseResult(consumedCount: Int , invocation: OptionParser.Invocation ) Parameters \u00b6 consumedCount - The number of items in argv that were consumed. This number must be >= 1 if the entire option was consumed, or 0 if there are other options in the same index (e.g. flag options) invocation - The data from this invocation.","title":" init "},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-parse-result/-init-/#init","text":"ParseResult(consumedCount: Int , name: String , values: List < String >)``ParseResult(consumedCount: Int , invocation: OptionParser.Invocation )","title":"&lt;init&gt;"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-parse-result/-init-/#parameters","text":"consumedCount - The number of items in argv that were consumed. This number must be >= 1 if the entire option was consumed, or 0 if there are other options in the same index (e.g. flag options) invocation - The data from this invocation.","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-parse-result/consumed-count/","text":"clikt / com.github.ajalt.clikt.parsers / OptionParser / ParseResult / consumedCount consumedCount \u00b6 val consumedCount: Int The number of items in argv that were consumed. This number must be >= 1 if the entire option was consumed, or 0 if there are other options in the same index (e.g. flag options)","title":"Consumed count"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-parse-result/consumed-count/#consumedcount","text":"val consumedCount: Int The number of items in argv that were consumed. This number must be >= 1 if the entire option was consumed, or 0 if there are other options in the same index (e.g. flag options)","title":"consumedCount"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-parse-result/invocation/","text":"clikt / com.github.ajalt.clikt.parsers / OptionParser / ParseResult / invocation invocation \u00b6 val invocation: OptionParser.Invocation The data from this invocation.","title":"Invocation"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-parser/-parse-result/invocation/#invocation","text":"val invocation: OptionParser.Invocation The data from this invocation.","title":"invocation"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-with-values-parser/","text":"clikt / com.github.ajalt.clikt.parsers / OptionWithValuesParser OptionWithValuesParser \u00b6 object OptionWithValuesParser : OptionParser An option that takes one more values Functions \u00b6 Name Summary parseLongOpt fun parseLongOpt(option: Option , name: String , argv: List < String >, index: Int , explicitValue: String ?): OptionParser.ParseResult Parse a single long option and its value. parseShortOpt fun parseShortOpt(option: Option , name: String , argv: List < String >, index: Int , optionIndex: Int ): OptionParser.ParseResult Parse a single short option and its value.","title":"Home"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-with-values-parser/#optionwithvaluesparser","text":"object OptionWithValuesParser : OptionParser An option that takes one more values","title":"OptionWithValuesParser"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-with-values-parser/#functions","text":"Name Summary parseLongOpt fun parseLongOpt(option: Option , name: String , argv: List < String >, index: Int , explicitValue: String ?): OptionParser.ParseResult Parse a single long option and its value. parseShortOpt fun parseShortOpt(option: Option , name: String , argv: List < String >, index: Int , optionIndex: Int ): OptionParser.ParseResult Parse a single short option and its value.","title":"Functions"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-with-values-parser/parse-long-opt/","text":"clikt / com.github.ajalt.clikt.parsers / OptionWithValuesParser / parseLongOpt parseLongOpt \u00b6 fun parseLongOpt(option: Option , name: String , argv: List < String >, index: Int , explicitValue: String ?): OptionParser.ParseResult Overrides OptionParser.parseLongOpt Parse a single long option and its value. Parameters \u00b6 name - The name of the flag used to invoke this option argv - The entire list of command line arguments for the command index - The index of the option flag in argv , kotlin.Int, kotlin.String)/argv), which may contain an \u2018=\u2019 with the first value","title":"Parse long opt"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-with-values-parser/parse-long-opt/#parselongopt","text":"fun parseLongOpt(option: Option , name: String , argv: List < String >, index: Int , explicitValue: String ?): OptionParser.ParseResult Overrides OptionParser.parseLongOpt Parse a single long option and its value.","title":"parseLongOpt"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-with-values-parser/parse-long-opt/#parameters","text":"name - The name of the flag used to invoke this option argv - The entire list of command line arguments for the command index - The index of the option flag in argv , kotlin.Int, kotlin.String)/argv), which may contain an \u2018=\u2019 with the first value","title":"Parameters"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-with-values-parser/parse-short-opt/","text":"clikt / com.github.ajalt.clikt.parsers / OptionWithValuesParser / parseShortOpt parseShortOpt \u00b6 fun parseShortOpt(option: Option , name: String , argv: List < String >, index: Int , optionIndex: Int ): OptionParser.ParseResult Overrides OptionParser.parseShortOpt Parse a single short option and its value. Parameters \u00b6 name - The name of the flag used to invoke this option argv - The entire list of command line arguments for the command index - The index of the option flag in argv , kotlin.Int, kotlin.Int)/argv), which may contain multiple short parameters. optionIndex - The index of the option within argv\\[index]","title":"Parse short opt"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-with-values-parser/parse-short-opt/#parseshortopt","text":"fun parseShortOpt(option: Option , name: String , argv: List < String >, index: Int , optionIndex: Int ): OptionParser.ParseResult Overrides OptionParser.parseShortOpt Parse a single short option and its value.","title":"parseShortOpt"},{"location":"api/clikt/com.github.ajalt.clikt.parsers/-option-with-values-parser/parse-short-opt/#parameters","text":"name - The name of the flag used to invoke this option argv - The entire list of command line arguments for the command index - The index of the option flag in argv , kotlin.Int, kotlin.Int)/argv), which may contain multiple short parameters. optionIndex - The index of the option within argv\\[index]","title":"Parameters"}]}